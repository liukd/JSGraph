{
    "project": {
        "name": "Tensegrity JS Graph",
        "description": "Tensegrity JS Graph Documentation",
        "logo": "tenlogo_kl.png",
        "version": "1.6.14"
    },
    "files": {
        "..\\dist\\wc\\jsg\\anim\\Animation.js": {
            "name": "..\\dist\\wc\\jsg\\anim\\Animation.js",
            "modules": {
                "JSG.anim": 1
            },
            "classes": {
                "JSG.anim.Animation": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.anim": 1
            }
        },
        "..\\dist\\wc\\jsg\\anim\\AnimationType.js": {
            "name": "..\\dist\\wc\\jsg\\anim\\AnimationType.js",
            "modules": {},
            "classes": {
                "JSG.anim.AnimationType": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.anim": 1
            }
        },
        "..\\dist\\wc\\jsg\\commons\\Array.js": {
            "name": "..\\dist\\wc\\jsg\\commons\\Array.js",
            "modules": {
                "JSG.commons": 1
            },
            "classes": {
                "Array": 1
            },
            "fors": {
                "Array": 1
            },
            "namespaces": {}
        },
        "..\\dist\\wc\\jsg\\commons\\Arrays.js": {
            "name": "..\\dist\\wc\\jsg\\commons\\Arrays.js",
            "modules": {},
            "classes": {
                "JSG.commons.Arrays": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.commons": 1
            }
        },
        "..\\dist\\wc\\jsg\\commons\\BSTree.js": {
            "name": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "modules": {},
            "classes": {
                "JSG.commons.BSTree": 1,
                "JSG.commons.TraverseOrder": 1,
                "JSG.commons.NumericData": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.commons": 1
            }
        },
        "..\\dist\\wc\\jsg\\commons\\ImagePool.js": {
            "name": "..\\dist\\wc\\jsg\\commons\\ImagePool.js",
            "modules": {},
            "classes": {
                "JSG.commons.ImagePool": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.commons": 1
            }
        },
        "..\\dist\\wc\\jsg\\commons\\ManagedList.js": {
            "name": "..\\dist\\wc\\jsg\\commons\\ManagedList.js",
            "modules": {},
            "classes": {
                "JSG.commons.ManagedList": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.commons": 1
            }
        },
        "..\\dist\\wc\\jsg\\commons\\Map.js": {
            "name": "..\\dist\\wc\\jsg\\commons\\Map.js",
            "modules": {},
            "classes": {
                "JSG.commons.Map": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.commons": 1
            }
        },
        "..\\dist\\wc\\jsg\\commons\\NamedImage.js": {
            "name": "..\\dist\\wc\\jsg\\commons\\NamedImage.js",
            "modules": {},
            "classes": {
                "JSG.commons.NamedImage": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.commons": 1
            }
        },
        "..\\dist\\wc\\jsg\\commons\\Number.js": {
            "name": "..\\dist\\wc\\jsg\\commons\\Number.js",
            "modules": {},
            "classes": {
                "Number": 1
            },
            "fors": {
                "Number": 1
            },
            "namespaces": {}
        },
        "..\\dist\\wc\\jsg\\commons\\Numbers.js": {
            "name": "..\\dist\\wc\\jsg\\commons\\Numbers.js",
            "modules": {},
            "classes": {
                "JSG.commons.Numbers": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.commons": 1
            }
        },
        "..\\dist\\wc\\jsg\\commons\\StableMap.js": {
            "name": "..\\dist\\wc\\jsg\\commons\\StableMap.js",
            "modules": {},
            "classes": {
                "JSG.commons.StableMap": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.commons": 1
            }
        },
        "..\\dist\\wc\\jsg\\commons\\String.js": {
            "name": "..\\dist\\wc\\jsg\\commons\\String.js",
            "modules": {},
            "classes": {
                "String": 1
            },
            "fors": {
                "String": 1
            },
            "namespaces": {}
        },
        "..\\dist\\wc\\jsg\\commons\\StringBuffer.js": {
            "name": "..\\dist\\wc\\jsg\\commons\\StringBuffer.js",
            "modules": {},
            "classes": {
                "StringBuffer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\dist\\wc\\jsg\\commons\\Strings.js": {
            "name": "..\\dist\\wc\\jsg\\commons\\Strings.js",
            "modules": {},
            "classes": {
                "JSG.commons.Strings": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.commons": 1
            }
        },
        "..\\dist\\wc\\jsg\\commons\\XML.js": {
            "name": "..\\dist\\wc\\jsg\\commons\\XML.js",
            "modules": {},
            "classes": {
                "JSG.commons.XML": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.commons": 1
            }
        },
        "..\\dist\\wc\\jsg\\commons\\XMLWriter.js": {
            "name": "..\\dist\\wc\\jsg\\commons\\XMLWriter.js",
            "modules": {},
            "classes": {
                "JSG.commons.XMLWriter": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.commons": 1
            }
        },
        "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js": {
            "name": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "modules": {},
            "classes": {
                "JSG.geometry.BoundingBox": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.geometry": 1
            }
        },
        "..\\dist\\wc\\jsg\\geometry\\Constants.js": {
            "name": "..\\dist\\wc\\jsg\\geometry\\Constants.js",
            "modules": {},
            "classes": {
                "JSG.geometry.Constants": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.geometry": 1
            }
        },
        "..\\dist\\wc\\jsg\\geometry\\Matrix.js": {
            "name": "..\\dist\\wc\\jsg\\geometry\\Matrix.js",
            "modules": {},
            "classes": {
                "JSG.geometry.Matrix": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.geometry": 1
            }
        },
        "..\\dist\\wc\\jsg\\geometry\\Point.js": {
            "name": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "modules": {},
            "classes": {
                "JSG.geometry.Point": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.geometry": 1
            }
        },
        "..\\dist\\wc\\jsg\\geometry\\PointList.js": {
            "name": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "modules": {},
            "classes": {
                "JSG.geometry.PointList": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.geometry": 1
            }
        },
        "..\\dist\\wc\\jsg\\geometry\\Rectangle.js": {
            "name": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "modules": {},
            "classes": {
                "JSG.geometry.Rectangle": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.geometry": 1
            }
        },
        "..\\dist\\wc\\jsg\\geometry\\Utils.js": {
            "name": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "modules": {
                "JSG.geometry": 1
            },
            "classes": {
                "JSG.geometry.Utils": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.geometry": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "modules": {
                "JSG.graph.attr": 1
            },
            "classes": {
                "JSG.graph.attr.Attribute": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.AttributeList": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\AttributeProxy.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeProxy.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.AttributeProxy": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\AttributeUtils.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeUtils.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.AttributeUtils": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\BooleanAttribute.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\BooleanAttribute.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.BooleanAttribute": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\ConditionalAttribute.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\ConditionalAttribute.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.ConditionalAttribute": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\ConstAttribute.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\ConstAttribute.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.ConstAttribute": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\ConstAttributeList.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\ConstAttributeList.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.ConstAttributeList": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.PortMode": 1,
                "JSG.graph.attr.SelectionMode": 1,
                "JSG.graph.attr.Moveable": 1,
                "JSG.graph.attr.Direction": 1,
                "JSG.graph.attr.ButtonPosition": 1,
                "JSG.graph.attr.EditMask": 1,
                "JSG.graph.attr.LineBehavior": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\EdgeAttributes.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\EdgeAttributes.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.EdgeAttributes": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\EdgeLayoutAttributes.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\EdgeLayoutAttributes.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.EdgeLayoutAttributes": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.FormatAttributes": 1,
                "JSG.graph.attr.ArrowStyle": 1,
                "JSG.graph.attr.LineStyle": 1,
                "JSG.graph.attr.LineCap": 1,
                "JSG.graph.attr.FillStyle": 1,
                "JSG.graph.attr.GradientStyle": 1,
                "JSG.graph.attr.PatternStyle": 1,
                "JSG.graph.attr.ShadowDirection": 1
            },
            "fors": {
                "JSG.graph.attr.FormatAttributes": 1
            },
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.ItemAttributes": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.LayoutAttributes": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\NumberAttribute.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\NumberAttribute.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.NumberAttribute": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\ObjectAttribute.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\ObjectAttribute.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.ObjectAttribute": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\OrthoEdgeLayoutAttributes.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\OrthoEdgeLayoutAttributes.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.OrthoEdgeLayoutAttributes": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\StringAttribute.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\StringAttribute.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.StringAttribute": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\Template.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\Template.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.Template": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\TemplateStore.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\TemplateStore.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.TemplateStore": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.TextFormatAttributes": 1,
                "JSG.graph.attr.TextFormatAttributes.TextAlignment": 1,
                "JSG.graph.attr.TextFormatAttributes.TextBaseline": 1,
                "JSG.graph.attr.TextFormatAttributes.VerticalTextPosition": 1,
                "JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition": 1,
                "JSG.graph.attr.TextFormatAttributes.FontStyle": 1
            },
            "fors": {
                "JSG.graph.attr.TextFormatAttributes": 1
            },
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\TextNodeAttributes.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\TextNodeAttributes.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.TextNodeAttributes": 1,
                "JSG.graph.attr.TextNodeAttributes.SizeMode": 1
            },
            "fors": {
                "JSG.graph.attr.TextNodeAttributes": 1
            },
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "modules": {},
            "classes": {
                "JSG.graph.attr.WatermarkAttributes": 1,
                "JSG.graph.attr.WatermarkAttributes.VerticalPosition": 1,
                "JSG.graph.attr.WatermarkAttributes.HorizontalPosition": 1
            },
            "fors": {
                "JSG.graph.attr.WatermarkAttributes": 1
            },
            "namespaces": {
                "JSG.graph.attr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\AbstractGroupUngroupCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\AbstractGroupUngroupCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.AbstractGroupUngroupCommand": 1,
                "JSG.graph.command.GroupCreator": 1,
                "JSG.graph.command.GroupCreatorSimple": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\AbstractItemCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\AbstractItemCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.AbstractItemCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\AbstractItemCommandProxy.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\AbstractItemCommandProxy.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.AbstractItemCommandProxy": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\AddAttributeCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\AddAttributeCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.AddAttributeCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\AddItemCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\AddItemCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.AddItemCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\AddLabelCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\AddLabelCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.AddLabelCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\AddPortCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\AddPortCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.AddPortCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\AlignItemsCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\AlignItemsCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.Alignment": 1,
                "JSG.graph.command.AlignItemsCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\AttachCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\AttachCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.AttachCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\ChangeAttributeCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\ChangeAttributeCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.ChangeAttributeCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\ChangeItemOrderCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\ChangeItemOrderCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.ChangeItemOrder": 1,
                "JSG.graph.command.ChangeItemOrderCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\ChangeParentCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\ChangeParentCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.ChangeParentCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\CollapseItemCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\CollapseItemCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.CollapseItemCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\Command.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\Command.js",
            "modules": {
                "JSG.graph.command": 1
            },
            "classes": {
                "JSG.graph.command.Command": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\CommandProxy.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\CommandProxy.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.CommandProxy": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\CommandStack.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\CommandStack.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.CommandStack": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\CompoundCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\CompoundCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.CompoundCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\DeleteEdgeCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\DeleteEdgeCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.DeleteEdgeCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\DeleteItemCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\DeleteItemCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.DeleteItemCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\DeleteNodeCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\DeleteNodeCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.DeleteNodeCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\DeletePortCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\DeletePortCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.DeletePortCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\DetachCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\DetachCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.DetachCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\DropItemCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\DropItemCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.DropItemCommand": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\dist\\wc\\jsg\\graph\\command\\FormatItemCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\FormatItemCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.FormatItemCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\GroupItemsCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\GroupItemsCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.GroupItemsCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\InsertLinePointsAtCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\InsertLinePointsAtCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.InsertLinePointsAtCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\InternalDeleteItemCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\InternalDeleteItemCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.InternalDeleteItemCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\InternalMoveItemCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\InternalMoveItemCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.InternalMoveItemCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\InternalResizeItemCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\InternalResizeItemCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.InternalResizeItemCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\InternalRotateItemCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\InternalRotateItemCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.InternalRotateItemCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\MoveEdgeCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\MoveEdgeCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.MoveEdgeCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\MoveItemCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\MoveItemCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.MoveItemCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\MoveNodeCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\MoveNodeCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.MoveNodeCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\NoOpCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\NoOpCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.NoOpCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\PasteItemsCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\PasteItemsCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.PasteItemsCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\RemoveAttributeCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\RemoveAttributeCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.RemoveAttributeCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\RemoveLinePointsCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\RemoveLinePointsCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.RemoveLinePointsCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\ReplaceSubItemCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\ReplaceSubItemCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.ReplaceSubItemCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\ReshapeItemCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\ReshapeItemCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.ReshapeItemCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\ResizeEdgeCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\ResizeEdgeCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.ResizeEdgeCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\ResizeGroupCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\ResizeGroupCommand.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\ResizeItemCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\ResizeItemCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.ResizeItemCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\ResizeNodeCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\ResizeNodeCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.ResizeNodeCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\RotateEdgeCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\RotateEdgeCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.RotateEdgeCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\RotateItemCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\RotateItemCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.RotateItemCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\RotateNodeCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\RotateNodeCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.RotateNodeCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\SetAttributeCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\SetAttributeCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.SetAttributeCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\SetAttributesMapCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\SetAttributesMapCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.SetAttributesMapCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\SetBezierShapePointsCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\SetBezierShapePointsCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.SetBezierShapePointsCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\SetLayoutAttributeCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\SetLayoutAttributeCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.SetLayoutAttributeCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\SetLinePointAtCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\SetLinePointAtCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.SetLinePointAtCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\SetLineShapePointsCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\SetLineShapePointsCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.SetLineShapePointsCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\SetLinkCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\SetLinkCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.SetLinkCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\SetNameCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\SetNameCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.SetNameCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\SetPinCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\SetPinCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.SetPinCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\SetShapeCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\SetShapeCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.SetShapeCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\SetShapePointsCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\SetShapePointsCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.SetShapePointsCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\SetSizeCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\SetSizeCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.SetSizeCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\SetTextCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\SetTextCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.SetTextCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\SetTextSizeModeCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\SetTextSizeModeCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.SetTextSizeModeCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\SizeItemsCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\SizeItemsCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.SizeItems": 1,
                "JSG.graph.command.SizeItemsCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\TextFormatItemCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\TextFormatItemCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.TextFormatItemCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\TranslateItemsCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\TranslateItemsCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.TranslateItemsCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\command\\UnGroupItemsCommand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\command\\UnGroupItemsCommand.js",
            "modules": {},
            "classes": {
                "JSG.graph.command.UnGroupItemsCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\controller\\ConnectionController.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\controller\\ConnectionController.js",
            "modules": {},
            "classes": {
                "JSG.graph.controller.ConnectionController": 1,
                "JSG.graph.controller.ConnectionController.PathListener": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.controller": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\controller\\ContentNodeController.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\controller\\ContentNodeController.js",
            "modules": {},
            "classes": {
                "JSG.graph.controller.ContentNodeController": 1,
                "JSG.graph.controller.ContentPaneController": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.controller": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\controller\\GraphController.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\controller\\GraphController.js",
            "modules": {},
            "classes": {
                "JSG.graph.controller.GraphController": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.controller": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\controller\\GraphControllerFactory.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\controller\\GraphControllerFactory.js",
            "modules": {},
            "classes": {
                "JSG.graph.controller.GraphControllerFactory": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.controller": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "modules": {},
            "classes": {
                "JSG.graph.controller.GraphItemController": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.controller": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\controller\\GroupController.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\controller\\GroupController.js",
            "modules": {},
            "classes": {
                "JSG.graph.controller.GroupController": 1,
                "JSG.graph.controller.GroupController.GroupListener": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.controller": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "modules": {
                "JSG.graph.controller": 1
            },
            "classes": {
                "JSG.graph.controller.FindFlags": 1,
                "JSG.graph.controller.ModelController": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.controller": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\controller\\NodeController.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\controller\\NodeController.js",
            "modules": {},
            "classes": {
                "JSG.graph.controller.NodeController": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.controller": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\controller\\PortController.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\controller\\PortController.js",
            "modules": {},
            "classes": {
                "JSG.graph.controller.PortController": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.controller": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\controller\\RootController.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\controller\\RootController.js",
            "modules": {},
            "classes": {
                "JSG.graph.controller.RootController": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.controller": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\AttributeExpression.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\AttributeExpression.js",
            "modules": {},
            "classes": {
                "JSG.graph.expr.AttributeExpression": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\AttributeReference.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\AttributeReference.js",
            "modules": {},
            "classes": {
                "JSG.graph.expr.AttributeReference": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\BooleanConstraint.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\BooleanConstraint.js",
            "modules": {},
            "classes": {
                "JSG.graph.expr.BooleanConstraint": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\BooleanExpression.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\BooleanExpression.js",
            "modules": {},
            "classes": {
                "JSG.graph.expr.BooleanExpression": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\ConstExpression.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\ConstExpression.js",
            "modules": {
                "JSG.graph.expr": 1
            },
            "classes": {
                "JSG.graph.expr.ConstExpression": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "modules": {},
            "classes": {
                "JSG.graph.expr.Expression": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\ExpressionConstraint.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\ExpressionConstraint.js",
            "modules": {},
            "classes": {
                "JSG.graph.expr.ExpressionConstraint": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\ExpressionProxy.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\ExpressionProxy.js",
            "modules": {},
            "classes": {
                "JSG.graph.expr.ExpressionProxy": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\FormulaParser.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\FormulaParser.js",
            "modules": {},
            "classes": {
                "JSG.graph.expr.FormulaParser": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\MapExpression.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\MapExpression.js",
            "modules": {},
            "classes": {
                "JSG.graph.expr.MapExpression": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\NumberConstraint.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\NumberConstraint.js",
            "modules": {},
            "classes": {
                "JSG.graph.expr.NumberConstraint": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\NumberExpression.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\NumberExpression.js",
            "modules": {},
            "classes": {
                "JSG.graph.expr.NumberExpression": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\NumberRangeConstraint.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\NumberRangeConstraint.js",
            "modules": {},
            "classes": {
                "JSG.graph.expr.NumberRangeConstraint": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\ObjectConstraint.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\ObjectConstraint.js",
            "modules": {},
            "classes": {
                "JSG.graph.expr.ObjectConstraint": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\ObjectExpression.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\ObjectExpression.js",
            "modules": {},
            "classes": {
                "JSG.graph.expr.ObjectExpression": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "modules": {},
            "classes": {
                "JSG.graph.expr.Operand": 1,
                "JSG.graph.expr.StringConstant": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\Operator.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\Operator.js",
            "modules": {},
            "classes": {
                "JSG.graph.expr.Operator": 1,
                "JSG.graph.expr.Operators": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\RangeConstraint.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\RangeConstraint.js",
            "modules": {},
            "classes": {
                "JSG.graph.expr.RangeConstraint": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\Reference.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\Reference.js",
            "modules": {},
            "classes": {
                "JSG.graph.expr.Reference": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\StringConstraint.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\StringConstraint.js",
            "modules": {},
            "classes": {
                "JSG.graph.expr.StringConstraint": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\StringExpression.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\StringExpression.js",
            "modules": {},
            "classes": {
                "JSG.graph.expr.StringExpression": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\expr\\Term.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "modules": {},
            "classes": {
                "JSG.graph.expr.Term": 1,
                "JSG.graph.expr.Add": 1,
                "JSG.graph.expr.Sub": 1,
                "JSG.graph.expr.Mul": 1,
                "JSG.graph.expr.Div": 1,
                "JSG.graph.expr.Bool": 1,
                "JSG.graph.expr.Cond": 1,
                "JSG.graph.expr.Func": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\feedback\\EdgeFeedback.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\feedback\\EdgeFeedback.js",
            "modules": {},
            "classes": {
                "JSG.graph.feedback.EdgeFeedback": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.feedback": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "modules": {
                "JSG.graph.feedback": 1
            },
            "classes": {
                "JSG.graph.feedback.Feedback": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.feedback": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\feedback\\FeedbackView.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\feedback\\FeedbackView.js",
            "modules": {},
            "classes": {
                "JSG.graph.feedback.FeedbackView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.feedback": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\feedback\\MoveFeedbackView.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\feedback\\MoveFeedbackView.js",
            "modules": {},
            "classes": {
                "JSG.graph.feedback.MoveFeedbackView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.feedback": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\feedback\\OrthoEdgeFeedback.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\feedback\\OrthoEdgeFeedback.js",
            "modules": {},
            "classes": {
                "JSG.graph.feedback.OrthoEdgeFeedback": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.feedback": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\feedback\\PortFeedback.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\feedback\\PortFeedback.js",
            "modules": {},
            "classes": {
                "JSG.graph.feedback.PortFeedback": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.feedback": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.SnapType": 1,
                "JSG.graph.interaction.AbstractInteraction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\ActionHandle.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\ActionHandle.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.ActionHandle": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\CommandButtonActivator.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\CommandButtonActivator.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.CommandButtonActivator": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\CreateBezierInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateBezierInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.CreateBezierInteraction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeActivator.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeActivator.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.CreateEdgeActivator": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.CreateEdgeInteraction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendActivator.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendActivator.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.CreateFriendActivator": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.CreateFriendInteraction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\CreateItemInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateItemInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.CreateItemInteraction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\CreateNodeInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateNodeInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.CreateNodeInteraction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\CreateOrthoEdgeInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateOrthoEdgeInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.CreateOrthoEdgeInteraction": 1,
                "JSG.graph.interaction.CreateOrthoEdgeInteraction.CREATION_MODE": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\CreatePolyLineInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\CreatePolyLineInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.CreatePolyLineInteraction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\DefaultKeyHandler.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\DefaultKeyHandler.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.DefaultKeyHandler": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\Delegate.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\Delegate.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.Delegate": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropActivator.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropActivator.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.DragDropActivator": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.DragDropInteraction": 1,
                "JSG.graph.interaction.DragDropInteraction.DnD": 1,
                "JSG.graph.interaction.DragDropInteraction.Drag": 1,
                "JSG.graph.interaction.DragDropInteraction.Drop": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\DropDelegate.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\DropDelegate.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.DropDelegate": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\EditBezierShapeInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\EditBezierShapeInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.EditBezierShapeInteraction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\EditLineShapeInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\EditLineShapeInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.EditLineShapeInteraction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\EditShapeInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\EditShapeInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.ShapeListener": 1,
                "JSG.graph.interaction.EditShapeInteraction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextActivator.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextActivator.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.EditTextActivator": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.EditTextInteraction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\GraphInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\GraphInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.GraphInteraction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\Highlighter.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\Highlighter.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.Highlighter": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "modules": {
                "JSG.graph.interaction": 1
            },
            "classes": {
                "JSG.graph.interaction.Interaction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionActivator.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionActivator.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.InteractionActivator": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionDispatcher.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionDispatcher.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.InteractionDispatcher": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.InteractionHandler": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionUtils.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionUtils.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.InteractionUtils": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\LinkActivator.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\LinkActivator.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.LinkActivator": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\LinkHandle.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\LinkHandle.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.TYPE": 1,
                "JSG.graph.interaction.LinkHandle": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeActivator.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeActivator.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.MarqueeActivator": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.MarqueeInteraction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\MoveActivator.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveActivator.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.MoveActivator": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\MoveAlignHelper.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveAlignHelper.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.MoveAlignHelper": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.MoveDelegate": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\MoveInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.MoveInteraction": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\PanInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\PanInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.PanInteraction": 1,
                "JSG.graph.interaction.PanInteraction.Activator": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\PinchInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\PinchInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.PinchInteraction": 1,
                "JSG.graph.interaction.PinchInteraction.Activator": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\ReadOnlyInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\ReadOnlyInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.ReadOnlyInteraction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\ReshapeActivator.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\ReshapeActivator.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.ReshapeActivator": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\ReshapeInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\ReshapeInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.ReshapeInteraction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeActivator.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeActivator.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.ResizeActivator": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeEdgeInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeEdgeInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.ResizeEdgeInteraction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.ResizeInteraction": 1,
                "JSG.graph.interaction.FeedbackStructure": 1,
                "JSG.graph.interaction.ResizeSnapHelper": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeLineNodeInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeLineNodeInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.ResizeLineNodeInteraction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeOrthoEdgeInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeOrthoEdgeInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.ResizeOrthoEdgeInteraction": 1,
                "JSG.graph.interaction.ResizeDelegate": 1,
                "JSG.graph.interaction.AddPointsDelegate": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\RotateActivator.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\RotateActivator.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.RotateActivator": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\RotateInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\RotateInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.RotateInteraction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\SelectionChecker.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\SelectionChecker.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.SelectionChecker": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\SnapHelper.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\SnapHelper.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.SnapHelper": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\TooltipActivator.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\TooltipActivator.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.TooltipActivator": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\ViewInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\ViewInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.ViewInteraction": 1,
                "JSG.graph.interaction.ViewInteraction.Activator": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\interaction\\ZoomInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\interaction\\ZoomInteraction.js",
            "modules": {},
            "classes": {
                "JSG.graph.interaction.ZoomInteraction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\events\\AttributeChangeEvent.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\events\\AttributeChangeEvent.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.events.AttributeChangeEvent": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.events": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\events\\AttributeListener.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\events\\AttributeListener.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.events.AttributeListener": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.events": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\events\\EdgeListener.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\events\\EdgeListener.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.events.EdgeListener": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.events": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\events\\Event.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\events\\Event.js",
            "modules": {
                "JSG.graph.model.events": 1
            },
            "classes": {
                "JSG.graph.model.events.Event": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.events": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\events\\EventDispatcher.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\events\\EventDispatcher.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.events.EventDispatcher": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.events": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\events\\EventListener.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\events\\EventListener.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.events.EventListener": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.events": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\events\\FormatListener.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\events\\FormatListener.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.events.FormatListener": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.events": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\events\\GraphItemListener.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\events\\GraphItemListener.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "JSG.graph.model.events": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\events\\NodeEvent.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\events\\NodeEvent.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.events.NodeEvent": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.events": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\events\\PageEvent.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\events\\PageEvent.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.events.PageEvent": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.events": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\events\\PortListener.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\events\\PortListener.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.events.PortListener": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.events": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\events\\ShapeEvent.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\events\\ShapeEvent.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.events.ShapeEvent": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.events": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\events\\ShapeListener.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\events\\ShapeListener.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.events.GraphItemListener": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.events": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\settings\\AbstractSettings.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\settings\\AbstractSettings.js",
            "modules": {
                "JSG.graph.model.settings": 1
            },
            "classes": {
                "JSG.graph.model.settings.AbstractSettings": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.settings": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\settings\\CustomSetting.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\settings\\CustomSetting.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.settings.CustomSetting": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.settings": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.settings.GraphSettings": 1,
                "JSG.graph.model.settings.SettingID": 1,
                "JSG.graph.model.settings.ViewMode": 1
            },
            "fors": {
                "JSG.graph.model.settings.GraphSettings": 1
            },
            "namespaces": {
                "JSG.graph.model.settings": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettingsEvent.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettingsEvent.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.settings.GraphSettingsEvent": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.settings": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.settings.Page": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.settings": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\shapes\\BBoxShape.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\BBoxShape.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.shapes.BBoxShape": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.shapes": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\shapes\\BezierShape.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\BezierShape.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.shapes.BezierShape": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.shapes": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\shapes\\EllipseShape.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\EllipseShape.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.shapes.EllipseShape": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.shapes": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\shapes\\LineShape.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\LineShape.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.shapes.LineShape": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.shapes": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShape.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShape.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.shapes.OrthoLineShape": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.shapes": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShapeLayouter.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShapeLayouter.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.shapes.OrthoLineBehavior": 1,
                "JSG.graph.model.shapes.OrthoLineShapeLayouter": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.shapes": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\shapes\\PathShape.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\PathShape.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.shapes.PathShape": 1,
                "JSG.graph.model.shapes.PathShape.Points": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.shapes": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\shapes\\PolygonShape.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\PolygonShape.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.shapes.PolygonShape": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.shapes": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\shapes\\RectangleShape.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\RectangleShape.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.shapes.RectangleShape": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.shapes": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "modules": {
                "JSG.graph.model.shapes": 1
            },
            "classes": {
                "JSG.graph.model.shapes.Shape": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.shapes": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\shapes\\ShapeFactory.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\ShapeFactory.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.shapes.ShapeFactory": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.shapes": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\AttributedTextNode.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\AttributedTextNode.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.AttributedTextNode": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\Condition.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\Condition.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.Condition": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\ConditionManager.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\ConditionManager.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.ConditionManager": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\Connection.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\Connection.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.Connection": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\ConnectionRestorer.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\ConnectionRestorer.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.ConnectionRestorer": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\ContentNode.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\ContentNode.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.ContentNode": 1,
                "JSG.graph.model.ContentPane": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\Edge.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\Edge.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.Edge": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\Graph.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.Graph": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.GraphItem": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\GraphItemFactory.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\GraphItemFactory.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.GraphItemFactory": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\Group.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\Group.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.Group": 1,
                "JSG.graph.model.Group.Layouter": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\Layer.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\Layer.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.Layer": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.LineConnection": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\LineNode.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\LineNode.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.LineNode": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\Model.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "modules": {
                "JSG.graph.model": 1
            },
            "classes": {
                "JSG.graph.model.Model": 1,
                "JSG.graph.model.Attributes": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\Node.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\Node.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.Node": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\Path.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\Path.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.Path": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\Port.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\Port.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.Port": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\PortMapper.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\PortMapper.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.PortMapper": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\State.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\State.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.State": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\model\\TextNode.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\model\\TextNode.js",
            "modules": {},
            "classes": {
                "JSG.graph.model.TextNode": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\notifications\\Notification.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\notifications\\Notification.js",
            "modules": {
                "JSG.graph.notifications": 1
            },
            "classes": {
                "JSG.graph.notifications.Notification": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.notifications": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\notifications\\NotificationCenter.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\notifications\\NotificationCenter.js",
            "modules": {},
            "classes": {
                "JSG.graph.notifications.NotificationCenter": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.notifications": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\properties\\EdgeProperties.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\properties\\EdgeProperties.js",
            "modules": {},
            "classes": {
                "JSG.graph.properties.EdgeProperties": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.properties": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\properties\\FormatProperties.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\properties\\FormatProperties.js",
            "modules": {},
            "classes": {
                "JSG.graph.properties.FormatProperties": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.properties": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\properties\\GraphItemProperties.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\properties\\GraphItemProperties.js",
            "modules": {},
            "classes": {
                "JSG.graph.properties.GraphItemProperties": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.properties": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\properties\\GraphProperties.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\properties\\GraphProperties.js",
            "modules": {},
            "classes": {
                "JSG.graph.properties.GraphProperties": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.properties": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\properties\\ItemAttributesProperties.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\properties\\ItemAttributesProperties.js",
            "modules": {},
            "classes": {
                "JSG.graph.properties.ItemAttributesProperties": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.properties": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\properties\\LayoutAttributeProperties.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\properties\\LayoutAttributeProperties.js",
            "modules": {},
            "classes": {
                "JSG.graph.properties.LayoutAttributeProperties": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.properties": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\properties\\NodeProperties.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\properties\\NodeProperties.js",
            "modules": {},
            "classes": {
                "JSG.graph.properties.NodeProperties": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.properties": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\properties\\Properties.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\properties\\Properties.js",
            "modules": {},
            "classes": {
                "JSG.graph.properties.Properties": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.properties": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\properties\\PropertiesProvider.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\properties\\PropertiesProvider.js",
            "modules": {
                "JSG.graph.properties": 1
            },
            "classes": {
                "JSG.graph.properties.PropertiesProvider": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.properties": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\properties\\Property.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\properties\\Property.js",
            "modules": {},
            "classes": {
                "JSG.graph.properties.Property": 1,
                "JSG.graph.properties.IndexProperty": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.properties": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\properties\\TextFormatProperties.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\properties\\TextFormatProperties.js",
            "modules": {},
            "classes": {
                "JSG.graph.properties.TextFormatProperties": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.properties": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\properties\\TextNodeProperties.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\properties\\TextNodeProperties.js",
            "modules": {},
            "classes": {
                "JSG.graph.properties.TextNodeProperties": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.properties": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\selection\\BBoxSelectionHandler.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\selection\\BBoxSelectionHandler.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.selection.BBoxSelectionHandler": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.selection": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.selection.CommandButton": 1,
                "JSG.graph.view.selection.Type": 1,
                "JSG.graph.view.selection.Position": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.selection": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButtonHandler.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButtonHandler.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.selection.CommandButtonHandler": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.selection": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\selection\\GroupSelectionHandler.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\selection\\GroupSelectionHandler.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.selection.GroupSelectionHandler": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.selection": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\selection\\LineNodeSelectionHandler.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\selection\\LineNodeSelectionHandler.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.selection.LineNodeSelectionHandler": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.selection": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\selection\\LineSelectionHandler.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\selection\\LineSelectionHandler.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.selection.LineSelectionHandler": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.selection": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\selection\\Marker.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\selection\\Marker.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.selection.Marker": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.selection": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\selection\\NodeSelectionHandler.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\selection\\NodeSelectionHandler.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.selection.NodeSelectionHandler": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.selection": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\selection\\OrthoLineSelectionHandler.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\selection\\OrthoLineSelectionHandler.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.selection.OrthoLineSelectionHandler": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.selection": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\selection\\RotationMarker.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\selection\\RotationMarker.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.selection.RotationMarker": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.selection": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.selection.SelectionHandle": 1,
                "JSG.graph.view.selection.TYPE": 1,
                "JSG.graph.view.selection.INDEX": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.selection": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandler.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandler.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.selection.SelectionHandler": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.selection": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandlerFactory.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandlerFactory.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.selection.SelectionHandlerFactory": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.selection": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionStyle.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionStyle.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.selection.SelectionStyle": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.selection": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "modules": {
                "JSG.graph.view.selection": 1
            },
            "classes": {
                "JSG.graph.view.selection.SelectionView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.selection": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\selection\\TextSelectionHandler.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\selection\\TextSelectionHandler.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.selection.TextSelectionHandler": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.selection": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\shapes\\BezierShapeRenderer.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\BezierShapeRenderer.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.shapes.BezierShapeRenderer": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.shapes": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\shapes\\DefaultShapeRenderer.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\DefaultShapeRenderer.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.shapes.DefaultShapeRenderer": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.shapes": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\shapes\\EllipseShapeRenderer.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\EllipseShapeRenderer.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.shapes.EllipseShapeRenderer": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.shapes": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\shapes\\LineShapeRenderer.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\LineShapeRenderer.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.shapes.LineShapeRenderer": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.shapes": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\shapes\\OrthoLineShapeRenderer.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\OrthoLineShapeRenderer.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.shapes.OrthoLineShapeRenderer": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.shapes": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\shapes\\PathShapeRenderer.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\PathShapeRenderer.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.shapes.PathShapeRenderer": 1,
                "JSG.graph.view.shapes.PathShapeRenderer.Commands": 1
            },
            "fors": {
                "JSG.graph.view.shapes.PathShapeRenderer": 1
            },
            "namespaces": {
                "JSG.graph.view.shapes": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\shapes\\PolygonShapeRenderer.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\PolygonShapeRenderer.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.shapes.PolygonShapeRenderer": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.shapes": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\shapes\\RectangleShapeRenderer.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\RectangleShapeRenderer.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.shapes.RectangleShapeRenderer": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.shapes": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\shapes\\ShapeRenderer.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\ShapeRenderer.js",
            "modules": {
                "JSG.graph.view.shapes": 1
            },
            "classes": {
                "JSG.graph.view.shapes.ShapeRenderer": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.shapes": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\BBoxView.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\BBoxView.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.BBoxView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\ContentNodeView.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\ContentNodeView.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.ContentNodeView": 1,
                "JSG.graph.view.ContentNodeViewPanel": 1,
                "JSG.graph.view.ContentPaneView": 1,
                "JSG.graph.view.BBoxListener": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\dist\\wc\\jsg\\graph\\view\\EdgeView.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\EdgeView.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.EdgeView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\EditBezierShapeView.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\EditBezierShapeView.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.EditBezierShapeView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\EditLineShapeView.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\EditLineShapeView.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.EditLineShapeView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.EditShapeView": 1,
                "JSG.graph.view.EditShapeView.Marker": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\FloatingToolbar.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\FloatingToolbar.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.FloatingToolbar": 1,
                "JSG.graph.view.FloatingToolbar.Tool": 1,
                "JSG.graph.view.FloatingToolbar.ToolButton": 1,
                "JSG.graph.view.FloatingToolbar.ToolSeparator": 1,
                "JSG.graph.view.FloatingToolbar.ToolBreak": 1,
                "JSG.graph.view.FloatingToolbar.ToolList": 1,
                "JSG.graph.view.FloatingToolbar.ToolColor": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "modules": {
                "JSG.graph.view": 1
            },
            "classes": {
                "JSG.graph.view.GraphItemView": 1,
                "JSG.graph.view.CollapseButton": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.GraphView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\GroupView.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\GroupView.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.GroupView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\LayerId.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\LayerId.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.selection.LayerId": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.selection": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\MarqueeFeedbackView.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\MarqueeFeedbackView.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.MarqueeFeedbackView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\NodeView.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\NodeView.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.NodeView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\PortView.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\PortView.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.PortView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\PositionFeedbackView.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\PositionFeedbackView.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.PositionFeedbackView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\SelectionFeedbackView.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\SelectionFeedbackView.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.SelectionFeedbackView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\SelectionProvider.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\SelectionProvider.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.SelectionProvider": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\SnapFeedbackView.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\SnapFeedbackView.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.SnapFeedbackView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\view\\TextView.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\view\\TextView.js",
            "modules": {},
            "classes": {
                "JSG.graph.view.TextView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\Coordinate.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "modules": {},
            "classes": {
                "JSG.graph.Coordinate": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\CoordinateProxy.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\CoordinateProxy.js",
            "modules": {},
            "classes": {
                "JSG.graph.CoordinateProxy": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\Pin.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "modules": {},
            "classes": {
                "JSG.graph.Pin": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "modules": {},
            "classes": {
                "JSG.graph.ReshapeType": 1,
                "JSG.graph.ReshapeCoordinate": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\Size.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\Size.js",
            "modules": {},
            "classes": {
                "JSG.graph.Size": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph": 1
            }
        },
        "..\\dist\\wc\\jsg\\graph\\Utils.js": {
            "name": "..\\dist\\wc\\jsg\\graph\\Utils.js",
            "modules": {
                "JSG.graph": 1
            },
            "classes": {
                "JSG.graph.Utils": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph": 1
            }
        },
        "..\\dist\\wc\\jsg\\layout\\LayoutManager.js": {
            "name": "..\\dist\\wc\\jsg\\layout\\LayoutManager.js",
            "modules": {
                "JSG.graph.layout": 1
            },
            "classes": {
                "JSG.graph.layout.LayoutManager": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.layout": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\events\\DragEvent.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\events\\DragEvent.js",
            "modules": {
                "JSG.ui.events": 1
            },
            "classes": {
                "JSG.ui.events.DragEventType": 1,
                "JSG.ui.events.DragEvent": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.events": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\events\\Event.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\events\\Event.js",
            "modules": {},
            "classes": {
                "JSG.ui.events.Event": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.events": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "modules": {},
            "classes": {
                "JSG.ui.events.GestureEventType": 1,
                "JSG.ui.events.GestureEvent": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.events": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\events\\KeyEvent.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\events\\KeyEvent.js",
            "modules": {},
            "classes": {
                "JSG.ui.events.KeyEventType": 1,
                "JSG.ui.events.KeyEvent": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.events": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "modules": {},
            "classes": {
                "JSG.ui.events.MouseEventType": 1,
                "JSG.ui.events.ButtonType": 1,
                "JSG.ui.events.KeyType": 1,
                "JSG.ui.events.MouseEvent": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.events": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "modules": {
                "JSG.ui.graphics": 1
            },
            "classes": {
                "JSG.ui.graphics.DisplayMode": 1,
                "JSG.ui.graphics.CoordinateSystem": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.graphics": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\graphics\\DocumentEventDispatcher.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\graphics\\DocumentEventDispatcher.js",
            "modules": {},
            "classes": {
                "JSG.ui.graphics.DocumentEventDispatcher": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.graphics": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\graphics\\GraphicSystem.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\graphics\\GraphicSystem.js",
            "modules": {},
            "classes": {
                "JSG.ui.graphics.GraphicSystem": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.graphics": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "modules": {},
            "classes": {
                "JSG.ui.graphics.Graphics": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.graphics": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\graphics\\MetricCoordinateSystem.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\graphics\\MetricCoordinateSystem.js",
            "modules": {},
            "classes": {
                "JSG.ui.graphics.MetricCoordinateSystem": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.graphics": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\graphics\\SVGraphics.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\graphics\\SVGraphics.js",
            "modules": {},
            "classes": {
                "JSG.ui.graphics.SVGraphics": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.graphics": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\graphics\\ScalableGraphics.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\graphics\\ScalableGraphics.js",
            "modules": {},
            "classes": {
                "JSG.ui.graphics.ScalableGraphics": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.graphics": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigator.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigator.js",
            "modules": {
                "JSG.ui.navigator": 1
            },
            "classes": {
                "JSG.ui.navigator.JSGNavigator": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.navigator": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigatorInteractionHandler.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigatorInteractionHandler.js",
            "modules": {},
            "classes": {
                "JSG.ui.navigator.JSGNavigatorInteractionHandler": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.navigator": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigatorPanel.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigatorPanel.js",
            "modules": {},
            "classes": {
                "JSG.ui.navigator.JSGNavigatorPanel": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.navigator": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorContentView.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorContentView.js",
            "modules": {},
            "classes": {
                "JSG.ui.navigator.NavigatorContentView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.navigator": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorControllerFactory.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorControllerFactory.js",
            "modules": {},
            "classes": {
                "JSG.ui.navigator.NavigatorControllerFactory": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.navigator": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorEdgeView.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorEdgeView.js",
            "modules": {},
            "classes": {
                "JSG.ui.navigator.NavigatorEdgeView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.navigator": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorGraphController.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorGraphController.js",
            "modules": {},
            "classes": {
                "JSG.ui.navigator.NavigatorGraphController": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.navigator": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorGraphView.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorGraphView.js",
            "modules": {},
            "classes": {
                "JSG.ui.navigator.NavigatorGraphView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.navigator": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorItemController.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorItemController.js",
            "modules": {},
            "classes": {
                "JSG.ui.navigator.NavigatorItemController": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.navigator": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorItemView.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorItemView.js",
            "modules": {},
            "classes": {
                "JSG.ui.navigator.NavigatorItemView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.navigator": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorViewer.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorViewer.js",
            "modules": {},
            "classes": {
                "JSG.ui.navigator.NavigatorViewer": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.navigator": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\navigator\\Overlay.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\navigator\\Overlay.js",
            "modules": {},
            "classes": {
                "JSG.ui.navigator.Overlay": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.navigator": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\navigator\\OverlayInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\navigator\\OverlayInteraction.js",
            "modules": {},
            "classes": {
                "JSG.ui.navigator.OverlayInteraction\nextends JSG.graph.interaction.Interaction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.navigator": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\scrollview\\Arrow.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\scrollview\\Arrow.js",
            "modules": {},
            "classes": {
                "JSG.ui.scrollview.Arrow": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.scrollview": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\scrollview\\Range.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\scrollview\\Range.js",
            "modules": {},
            "classes": {
                "JSG.ui.scrollview.Range": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.scrollview": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\scrollview\\RangeModel.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\scrollview\\RangeModel.js",
            "modules": {},
            "classes": {
                "JSG.ui.scrollview.RangeModel": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.scrollview": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "modules": {},
            "classes": {
                "JSG.ui.scrollview.ScrollBar": 1,
                "JSG.ui.scrollview.Mode": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.scrollview": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "modules": {
                "JSG.ui.scrollview": 1
            },
            "classes": {
                "JSG.ui.scrollview.ScrollView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.scrollview": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\scrollview\\Thumb.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\scrollview\\Thumb.js",
            "modules": {},
            "classes": {
                "JSG.ui.scrollview.Thumb": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.scrollview": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPanel.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPanel.js",
            "modules": {},
            "classes": {
                "JSG.ui.scrollview.ViewPanel": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.scrollview": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPort.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPort.js",
            "modules": {},
            "classes": {
                "JSG.ui.scrollview.ViewPort": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.scrollview": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibrary.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibrary.js",
            "modules": {
                "JSG.ui.shapelibrary": 1
            },
            "classes": {
                "JSG.ui.shapelibrary.ShapeLibrary": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.shapelibrary": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibraryDefaultInteraction.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibraryDefaultInteraction.js",
            "modules": {},
            "classes": {
                "JSG.ui.shapelibrary.ShapeLibraryDefaultInteraction": 1,
                "JSG.ui.shapelibrary.KeyHandler": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.shapelibrary": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibraryEditor.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibraryEditor.js",
            "modules": {},
            "classes": {
                "JSG.ui.shapelibrary.ShapeLibraryEditor": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.shapelibrary": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibrarySelectionView.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibrarySelectionView.js",
            "modules": {},
            "classes": {
                "JSG.ui.shapelibrary.ShapeLibrarySelectionView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.shapelibrary": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibraryViewer.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibraryViewer.js",
            "modules": {},
            "classes": {
                "JSG.ui.shapelibrary.ShapeLibraryViewer": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.shapelibrary": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "modules": {
                "JSG.ui.viewer": 1
            },
            "classes": {
                "JSG.ui.viewer.ControllerViewer": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.viewer": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "modules": {},
            "classes": {
                "JSG.ui.viewer.GraphViewer": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.viewer": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "modules": {},
            "classes": {
                "JSG.ui.viewer.ScrollableViewer": 1,
                "JSG.ui.viewer.ScrollableViewerInteractionDecorator": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.viewer": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\Cursor.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "modules": {},
            "classes": {
                "JSG.ui.Cursor": 1,
                "JSG.ui.Style": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\GraphEditor.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "modules": {},
            "classes": {
                "JSG.ui.GraphEditor": 1,
                "JSG.ui.GraphListener": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\GraphViewPanel.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\GraphViewPanel.js",
            "modules": {},
            "classes": {
                "JSG.ui.GraphViewPanel": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\Scale.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\Scale.js",
            "modules": {},
            "classes": {
                "JSG.ui.Scale": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\ScrollPanel.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\ScrollPanel.js",
            "modules": {},
            "classes": {
                "JSG.ui.ScrollPanel": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\View.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\View.js",
            "modules": {
                "JSG.ui": 1
            },
            "classes": {
                "JSG.ui.View": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui": 1
            }
        },
        "..\\dist\\wc\\jsg\\ui\\Widget.js": {
            "name": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "modules": {},
            "classes": {
                "JSG.ui.Widget": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui": 1
            }
        },
        "..\\dist\\wc\\jsg\\JSGGlobals.js": {
            "name": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "modules": {},
            "classes": {},
            "fors": {
                "JSG": 1,
                "JSG.JSG": 1,
                "Functions": 1
            },
            "namespaces": {
                "JSG": 1
            }
        },
        "..\\dist\\wc\\jsg\\Loader.js": {
            "name": "..\\dist\\wc\\jsg\\Loader.js",
            "modules": {},
            "classes": {
                "Monitor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\dist\\wc\\jsg\\jsg.js": {
            "name": "..\\dist\\wc\\jsg\\jsg.js",
            "modules": {
                "JSG": 1
            },
            "classes": {
                "JSG": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\dist\\wc\\jsgsvg\\circle.js": {
            "name": "..\\dist\\wc\\jsgsvg\\circle.js",
            "modules": {},
            "classes": {
                "JSG.SVG.Circle": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\color.js": {
            "name": "..\\dist\\wc\\jsgsvg\\color.js",
            "modules": {},
            "classes": {
                "JSG.SVG.Color": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\defs.js": {
            "name": "..\\dist\\wc\\jsgsvg\\defs.js",
            "modules": {},
            "classes": {
                "JSG.SVG.Defs": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\element.js": {
            "name": "..\\dist\\wc\\jsgsvg\\element.js",
            "modules": {},
            "classes": {
                "JSG.SVG.Element": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\ellipse.js": {
            "name": "..\\dist\\wc\\jsgsvg\\ellipse.js",
            "modules": {},
            "classes": {
                "JSG.SVG.Ellipse": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\error.js": {
            "name": "..\\dist\\wc\\jsgsvg\\error.js",
            "modules": {},
            "classes": {
                "JSG.SVG.Error": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\group.js": {
            "name": "..\\dist\\wc\\jsgsvg\\group.js",
            "modules": {},
            "classes": {
                "JSG.SVG.Group": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\jsgsvg.js": {
            "name": "..\\dist\\wc\\jsgsvg\\jsgsvg.js",
            "modules": {
                "JSG.SVG": 1
            },
            "classes": {
                "JSG.SVG": 1,
                "JSG.SVG.Model": 1
            },
            "fors": {},
            "namespaces": {
                "JSG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\line.js": {
            "name": "..\\dist\\wc\\jsgsvg\\line.js",
            "modules": {},
            "classes": {
                "JSG.SVG.Line": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\matrix.js": {
            "name": "..\\dist\\wc\\jsgsvg\\matrix.js",
            "modules": {},
            "classes": {
                "JSG.SVG.Matrix": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\path.js": {
            "name": "..\\dist\\wc\\jsgsvg\\path.js",
            "modules": {},
            "classes": {
                "JSG.SVG.Path": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\pathdata.js": {
            "name": "..\\dist\\wc\\jsgsvg\\pathdata.js",
            "modules": {},
            "classes": {
                "JSG.SVG.PathData": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\polygon.js": {
            "name": "..\\dist\\wc\\jsgsvg\\polygon.js",
            "modules": {},
            "classes": {
                "JSG.SVG.Polygon": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\rect.js": {
            "name": "..\\dist\\wc\\jsgsvg\\rect.js",
            "modules": {},
            "classes": {
                "JSG.SVG.Rect": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\shapes.js": {
            "name": "..\\dist\\wc\\jsgsvg\\shapes.js",
            "modules": {},
            "classes": {
                "JSG.SVG.Shapes": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\styles.js": {
            "name": "..\\dist\\wc\\jsgsvg\\styles.js",
            "modules": {},
            "classes": {
                "JSG.SVG.Styles": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\svg.js": {
            "name": "..\\dist\\wc\\jsgsvg\\svg.js",
            "modules": {},
            "classes": {
                "JSG.SVG.Svg": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\text.js": {
            "name": "..\\dist\\wc\\jsgsvg\\text.js",
            "modules": {},
            "classes": {
                "JSG.SVG.Text": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\transform.js": {
            "name": "..\\dist\\wc\\jsgsvg\\transform.js",
            "modules": {},
            "classes": {
                "JSG.SVG.Transform": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\tspan.js": {
            "name": "..\\dist\\wc\\jsgsvg\\tspan.js",
            "modules": {},
            "classes": {
                "JSG.SVG.TSpan": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\unit.js": {
            "name": "..\\dist\\wc\\jsgsvg\\unit.js",
            "modules": {},
            "classes": {
                "JSG.SVG.Unit": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\utils.js": {
            "name": "..\\dist\\wc\\jsgsvg\\utils.js",
            "modules": {},
            "classes": {
                "JSG.SVG.Utils": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        },
        "..\\dist\\wc\\jsgsvg\\viewbox.js": {
            "name": "..\\dist\\wc\\jsgsvg\\viewbox.js",
            "modules": {},
            "classes": {
                "JSG.SVG.ViewBox": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1
            }
        }
    },
    "modules": {
        "JSG.anim": {
            "name": "JSG.anim",
            "submodules": {},
            "classes": {
                "JSG.anim.Animation": 1,
                "JSG.anim.AnimationType": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.anim": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\anim\\AnimationType.js",
            "line": 7,
            "description": "Module containing utilities for animations.",
            "itemtype": "main"
        },
        "JSG.commons": {
            "name": "JSG.commons",
            "submodules": {},
            "classes": {
                "Array": 1,
                "JSG.commons.Arrays": 1,
                "JSG.commons.BSTree": 1,
                "JSG.commons.TraverseOrder": 1,
                "JSG.commons.NumericData": 1,
                "JSG.commons.ImagePool": 1,
                "JSG.commons.ManagedList": 1,
                "JSG.commons.Map": 1,
                "JSG.commons.NamedImage": 1,
                "Number": 1,
                "JSG.commons.Numbers": 1,
                "JSG.commons.StableMap": 1,
                "String": 1,
                "StringBuffer": 1,
                "JSG.commons.Strings": 1,
                "JSG.commons.XML": 1,
                "JSG.commons.XMLWriter": 1
            },
            "fors": {
                "Array": 1,
                "Number": 1,
                "String": 1
            },
            "namespaces": {
                "JSG.commons": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\commons\\XMLWriter.js",
            "line": 8,
            "description": "The commons module defines general classes used across this framework.\nFurthermore some class extensions to JavaScript core objects, like Array, Number and String are defined here as well.",
            "itemtype": "main"
        },
        "JSG.geometry": {
            "name": "JSG.geometry",
            "submodules": {},
            "classes": {
                "JSG.geometry.BoundingBox": 1,
                "JSG.geometry.Constants": 1,
                "JSG.geometry.Matrix": 1,
                "JSG.geometry.Point": 1,
                "JSG.geometry.PointList": 1,
                "JSG.geometry.Rectangle": 1,
                "JSG.geometry.Utils": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.geometry": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 11,
            "description": "This module defines fundamental classes related to geometric tasks",
            "itemtype": "main"
        },
        "JSG.graph.attr": {
            "name": "JSG.graph.attr",
            "submodules": {},
            "classes": {
                "JSG.graph.attr.Attribute": 1,
                "JSG.graph.attr.AttributeList": 1,
                "JSG.graph.attr.AttributeProxy": 1,
                "JSG.graph.attr.AttributeUtils": 1,
                "JSG.graph.attr.BooleanAttribute": 1,
                "JSG.graph.attr.ConditionalAttribute": 1,
                "JSG.graph.attr.ConstAttribute": 1,
                "JSG.graph.attr.ConstAttributeList": 1,
                "JSG.graph.attr.PortMode": 1,
                "JSG.graph.attr.SelectionMode": 1,
                "JSG.graph.attr.Moveable": 1,
                "JSG.graph.attr.Direction": 1,
                "JSG.graph.attr.ButtonPosition": 1,
                "JSG.graph.attr.EditMask": 1,
                "JSG.graph.attr.LineBehavior": 1,
                "JSG.graph.attr.EdgeAttributes": 1,
                "JSG.graph.attr.EdgeLayoutAttributes": 1,
                "JSG.graph.attr.FormatAttributes": 1,
                "JSG.graph.attr.ArrowStyle": 1,
                "JSG.graph.attr.LineStyle": 1,
                "JSG.graph.attr.LineCap": 1,
                "JSG.graph.attr.FillStyle": 1,
                "JSG.graph.attr.GradientStyle": 1,
                "JSG.graph.attr.PatternStyle": 1,
                "JSG.graph.attr.ShadowDirection": 1,
                "JSG.graph.attr.ItemAttributes": 1,
                "JSG.graph.attr.LayoutAttributes": 1,
                "JSG.graph.attr.NumberAttribute": 1,
                "JSG.graph.attr.ObjectAttribute": 1,
                "JSG.graph.attr.OrthoEdgeLayoutAttributes": 1,
                "JSG.graph.attr.StringAttribute": 1,
                "JSG.graph.attr.Template": 1,
                "JSG.graph.attr.TemplateStore": 1,
                "JSG.graph.attr.TextFormatAttributes": 1,
                "JSG.graph.attr.TextFormatAttributes.TextAlignment": 1,
                "JSG.graph.attr.TextFormatAttributes.TextBaseline": 1,
                "JSG.graph.attr.TextFormatAttributes.VerticalTextPosition": 1,
                "JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition": 1,
                "JSG.graph.attr.TextFormatAttributes.FontStyle": 1,
                "JSG.graph.attr.TextNodeAttributes": 1,
                "JSG.graph.attr.TextNodeAttributes.SizeMode": 1,
                "JSG.graph.attr.WatermarkAttributes": 1,
                "JSG.graph.attr.WatermarkAttributes.VerticalPosition": 1,
                "JSG.graph.attr.WatermarkAttributes.HorizontalPosition": 1
            },
            "fors": {
                "JSG.graph.attr.FormatAttributes": 1,
                "JSG.graph.attr.TextFormatAttributes": 1,
                "JSG.graph.attr.TextNodeAttributes": 1,
                "JSG.graph.attr.WatermarkAttributes": 1
            },
            "namespaces": {
                "JSG.graph.attr": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 64,
            "description": "Attributes provide a flexible mechanism to attach arbitrary values to an instance of\n{{#crossLink \"JSG.graph.model.Model\"}}{{/crossLink}}. An Attribute simply defines a name-value\npair in which the value is given as an {{#crossLink \"JSG.graph.expr.Expression\"}}{{/crossLink}}.<br/>\nAttributes can be grouped by adding them to an {{#crossLink \"JSG.graph.attr.AttributeList\"}}{{/crossLink}}.\nNote that it is allowed to nest AttributeLists into each other. So it is possible to construct\nhierarchies out of Attributes and AttributeLists. To reference an Attribute or an AttributeList within\nsuch a hierarchy a unique path is build by using the Attribute names. Hence, it is a mandatory that\nthe Attribute name should be unique, at least within its containing AttributeList.<br/>\nAttributeLists also support the concept of inheritance, i.e. it is possible to register a parent list. That means if \nan AttributeList has a parent it automatically inherits the attributes defined within its parent list but without \nadding them, i.e. the list itself may be empty. This feature is used to support {{#crossLink \"JSG.graph.attr.Template\"}}{{/crossLink}}s\nwhich are globally accessible via a {{#crossLink \"JSG.graph.attr.TemplateStore\"}}{{/crossLink}}. A Template simply\ndefines a list of immutable Attributes which can be set as a parent to any AttributeList.<br/>\nSo nesting AttributeLists is a sort of categorization whereas a parent list defines simple inheritance of Attributes.",
            "itemtype": "main"
        },
        "JSG.graph.command": {
            "name": "JSG.graph.command",
            "submodules": {},
            "classes": {
                "JSG.graph.command.AbstractGroupUngroupCommand": 1,
                "JSG.graph.command.GroupCreator": 1,
                "JSG.graph.command.GroupCreatorSimple": 1,
                "JSG.graph.command.AbstractItemCommand": 1,
                "JSG.graph.command.AbstractItemCommandProxy": 1,
                "JSG.graph.command.AddAttributeCommand": 1,
                "JSG.graph.command.AddItemCommand": 1,
                "JSG.graph.command.AddLabelCommand": 1,
                "JSG.graph.command.AddPortCommand": 1,
                "JSG.graph.command.Alignment": 1,
                "JSG.graph.command.AlignItemsCommand": 1,
                "JSG.graph.command.AttachCommand": 1,
                "JSG.graph.command.ChangeAttributeCommand": 1,
                "JSG.graph.command.ChangeItemOrder": 1,
                "JSG.graph.command.ChangeItemOrderCommand": 1,
                "JSG.graph.command.ChangeParentCommand": 1,
                "JSG.graph.command.CollapseItemCommand": 1,
                "JSG.graph.command.Command": 1,
                "JSG.graph.command.CommandProxy": 1,
                "JSG.graph.command.CommandStack": 1,
                "JSG.graph.command.CompoundCommand": 1,
                "JSG.graph.command.DeleteEdgeCommand": 1,
                "JSG.graph.command.DeleteItemCommand": 1,
                "JSG.graph.command.DeleteNodeCommand": 1,
                "JSG.graph.command.DeletePortCommand": 1,
                "JSG.graph.command.DetachCommand": 1,
                "JSG.graph.command.DropItemCommand": 1,
                "JSG.graph.command.FormatItemCommand": 1,
                "JSG.graph.command.GroupItemsCommand": 1,
                "JSG.graph.command.InsertLinePointsAtCommand": 1,
                "JSG.graph.command.InternalDeleteItemCommand": 1,
                "JSG.graph.command.InternalMoveItemCommand": 1,
                "JSG.graph.command.InternalResizeItemCommand": 1,
                "JSG.graph.command.InternalRotateItemCommand": 1,
                "JSG.graph.command.MoveEdgeCommand": 1,
                "JSG.graph.command.MoveItemCommand": 1,
                "JSG.graph.command.MoveNodeCommand": 1,
                "JSG.graph.command.NoOpCommand": 1,
                "JSG.graph.command.PasteItemsCommand": 1,
                "JSG.graph.command.RemoveAttributeCommand": 1,
                "JSG.graph.command.RemoveLinePointsCommand": 1,
                "JSG.graph.command.ReplaceSubItemCommand": 1,
                "JSG.graph.command.ReshapeItemCommand": 1,
                "JSG.graph.command.ResizeEdgeCommand": 1,
                "JSG.graph.command.ResizeItemCommand": 1,
                "JSG.graph.command.ResizeNodeCommand": 1,
                "JSG.graph.command.RotateEdgeCommand": 1,
                "JSG.graph.command.RotateItemCommand": 1,
                "JSG.graph.command.RotateNodeCommand": 1,
                "JSG.graph.command.SetAttributeCommand": 1,
                "JSG.graph.command.SetAttributesMapCommand": 1,
                "JSG.graph.command.SetBezierShapePointsCommand": 1,
                "JSG.graph.command.SetLayoutAttributeCommand": 1,
                "JSG.graph.command.SetLinePointAtCommand": 1,
                "JSG.graph.command.SetLineShapePointsCommand": 1,
                "JSG.graph.command.SetLinkCommand": 1,
                "JSG.graph.command.SetNameCommand": 1,
                "JSG.graph.command.SetPinCommand": 1,
                "JSG.graph.command.SetShapeCommand": 1,
                "JSG.graph.command.SetShapePointsCommand": 1,
                "JSG.graph.command.SetSizeCommand": 1,
                "JSG.graph.command.SetTextCommand": 1,
                "JSG.graph.command.SetTextSizeModeCommand": 1,
                "JSG.graph.command.SizeItems": 1,
                "JSG.graph.command.SizeItemsCommand": 1,
                "JSG.graph.command.TextFormatItemCommand": 1,
                "JSG.graph.command.TranslateItemsCommand": 1,
                "JSG.graph.command.UnGroupItemsCommand": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.command": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\UnGroupItemsCommand.js",
            "line": 8,
            "description": "Module containing command classes. Commands should be used to execute actions on GraphItems. A command includes\nan execute, a redo and an undo function to support the undo operation. A command can be combined with other commands\nin a CompoundCommand into one execution or undo step. This way multiple operation in one step are supported.",
            "itemtype": "main"
        },
        "JSG.graph.controller": {
            "name": "JSG.graph.controller",
            "submodules": {},
            "classes": {
                "JSG.graph.controller.ConnectionController": 1,
                "JSG.graph.controller.ConnectionController.PathListener": 1,
                "JSG.graph.controller.ContentNodeController": 1,
                "JSG.graph.controller.ContentPaneController": 1,
                "JSG.graph.controller.GraphController": 1,
                "JSG.graph.controller.GraphControllerFactory": 1,
                "JSG.graph.controller.GraphItemController": 1,
                "JSG.graph.controller.GroupController": 1,
                "JSG.graph.controller.GroupController.GroupListener": 1,
                "JSG.graph.controller.FindFlags": 1,
                "JSG.graph.controller.ModelController": 1,
                "JSG.graph.controller.NodeController": 1,
                "JSG.graph.controller.PortController": 1,
                "JSG.graph.controller.RootController": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.controller": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\RootController.js",
            "line": 8,
            "description": "Controllers are used to implement any logic or behavior a model can have. Since it links view to model\nControllers are created via GraphControllerFactory. Custom controllers can easily be attached\nby setting a custom controller factory derived from {{#crossLink \"JSG.graph.controller.GraphControllerFactory\"}}{{/crossLink}} to the Viewer,\nwhich is attached to the GraphEditor.",
            "itemtype": "main"
        },
        "JSG.graph.expr": {
            "name": "JSG.graph.expr",
            "submodules": {},
            "classes": {
                "JSG.graph.expr.AttributeExpression": 1,
                "JSG.graph.expr.AttributeReference": 1,
                "JSG.graph.expr.BooleanConstraint": 1,
                "JSG.graph.expr.BooleanExpression": 1,
                "JSG.graph.expr.ConstExpression": 1,
                "JSG.graph.expr.Expression": 1,
                "JSG.graph.expr.ExpressionConstraint": 1,
                "JSG.graph.expr.ExpressionProxy": 1,
                "JSG.graph.expr.FormulaParser": 1,
                "JSG.graph.expr.MapExpression": 1,
                "JSG.graph.expr.NumberConstraint": 1,
                "JSG.graph.expr.NumberExpression": 1,
                "JSG.graph.expr.NumberRangeConstraint": 1,
                "JSG.graph.expr.ObjectConstraint": 1,
                "JSG.graph.expr.ObjectExpression": 1,
                "JSG.graph.expr.Operand": 1,
                "JSG.graph.expr.StringConstant": 1,
                "JSG.graph.expr.Operator": 1,
                "JSG.graph.expr.Operators": 1,
                "JSG.graph.expr.RangeConstraint": 1,
                "JSG.graph.expr.Reference": 1,
                "JSG.graph.expr.StringConstraint": 1,
                "JSG.graph.expr.StringExpression": 1,
                "JSG.graph.expr.Term": 1,
                "JSG.graph.expr.Add": 1,
                "JSG.graph.expr.Sub": 1,
                "JSG.graph.expr.Mul": 1,
                "JSG.graph.expr.Div": 1,
                "JSG.graph.expr.Bool": 1,
                "JSG.graph.expr.Cond": 1,
                "JSG.graph.expr.Func": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.expr": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 628,
            "itemtype": "main",
            "example": [
                "\n    var formula1 = \"Item.2!ANGLE\";\t//angle property of item with id 2\n    var formula2 = \"Parent!WIDTH\";\t//width property of items parent\n    var formula3 = \"HEIGHT * 0.5\";\t//height * 0.5 property of item itself\n\nIn order to get a dynamic <code>Term</code> from a static formula the expression must be\nevaluated. To do this simply call {{#crossLink \"JSG.graph.expr.Expression/evaluate:method\"}}{{/crossLink}}\nwhich should be done after each expression creation or after each change of its formula.</br>\nNow the value of an expression is either defined by the value of its internal term or by its\ndefault (or last computed) value, if no term is present. If the expression value needs\nto be of type <code>Number</code>, <code>String</code> or <code>Boolean</code> one can use\n{{#crossLink \"JSG.graph.expr.NumberExpression\"}}{{/crossLink}},\n{{#crossLink \"JSG.graph.expr.StringExpression\"}}{{/crossLink}} or\n{{#crossLink \"JSG.graph.expr.BooleanExpression\"}}{{/crossLink}} respectively. These expressions\nuse special {{#crossLink \"JSG.graph.expr.ExpressionConstraint\"}}{{/crossLink}}s to define their\nvalue types. That means the output of any calculated expression value can be checked and transformed to any desired\nvalue type if required. Note that it is also possible to define custom expression types by subclassing\n<code>ExpressionConstraint</code> and use it inside a custom <code>Expression</code> or simply set a custom constraint\nto an already defined expression class by calling {{#crossLink \"JSG.graph.expr.Expression/setConstraint:method\"}}{{/crossLink}}.</br></br>\nFinally here is a simple example of an expression creation and evaluation:",
                "\n    //set the height of GraphItem myItem to half the width of its parent item\n    var heightExpr = new JSG.graph.expr.NumberExpression(0, \"Parent!WIDTH * 0.5\");\n    myItem.setHeight(heightExpr); //heightExpr will be evaluated in setHeight..."
            ]
        },
        "JSG.graph.feedback": {
            "name": "JSG.graph.feedback",
            "submodules": {},
            "classes": {
                "JSG.graph.feedback.EdgeFeedback": 1,
                "JSG.graph.feedback.Feedback": 1,
                "JSG.graph.feedback.FeedbackView": 1,
                "JSG.graph.feedback.MoveFeedbackView": 1,
                "JSG.graph.feedback.OrthoEdgeFeedback": 1,
                "JSG.graph.feedback.PortFeedback": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.feedback": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\PortFeedback.js",
            "line": 9,
            "description": "A Feedback is a visual representation for a corresponding\n{{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} during an interaction, like move,\nresize and others.</br>\nThe special thing about Feedbacks is that they provide methods to influence\nthe inner state of an item as well as a <code>draw</code> method to draw itself. So feedbacks act\nas a view and a controller. However, a Feedback is neither a Controller nor a View and has\ntherefore a module on its own.</br>\nTypically a Feedback can be created in two different ways. First and usually the simplest way\nto create a Feedback is via {{#crossLink \"JSG.graph.controller.ModelController/createFeedback:method\"}}{{/crossLink}}.\nThis returns a completely initialized and set up Feedback instance. But in some cases the returned\nfeedback is not quite suited, so its possible to create it via its constructor too.\nNote: in this case the feedback item and the feedback view must be created, initialized and set\nup manually before first usage.</br>\nFeedbacks are always drawn on top of a {{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}},\nso keep in mind that the coordinate system of the Feedback view is relative to the\n{{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}}'s origin.</br>\nSome calculations between interaction requires access to the primary GraphItem which can be\nretrieved via getOriginalItem(). Please note that it is not encouraged to change the original\nitem through a Feedback instance.",
            "itemtype": "main"
        },
        "JSG.graph.interaction": {
            "name": "JSG.graph.interaction",
            "submodules": {},
            "classes": {
                "JSG.graph.interaction.SnapType": 1,
                "JSG.graph.interaction.AbstractInteraction": 1,
                "JSG.graph.interaction.ActionHandle": 1,
                "JSG.graph.interaction.TYPE": 1,
                "JSG.graph.interaction.CommandButtonActivator": 1,
                "JSG.graph.interaction.CreateBezierInteraction": 1,
                "JSG.graph.interaction.CreateEdgeActivator": 1,
                "JSG.graph.interaction.CreateEdgeInteraction": 1,
                "JSG.graph.interaction.CreateFriendActivator": 1,
                "JSG.graph.interaction.CreateFriendInteraction": 1,
                "JSG.graph.interaction.CreateItemInteraction": 1,
                "JSG.graph.interaction.CreateNodeInteraction": 1,
                "JSG.graph.interaction.CreateOrthoEdgeInteraction": 1,
                "JSG.graph.interaction.CreateOrthoEdgeInteraction.CREATION_MODE": 1,
                "JSG.graph.interaction.CreatePolyLineInteraction": 1,
                "JSG.graph.interaction.DefaultKeyHandler": 1,
                "JSG.graph.interaction.Delegate": 1,
                "JSG.graph.interaction.DragDropActivator": 1,
                "JSG.graph.interaction.DragDropInteraction": 1,
                "JSG.graph.interaction.DragDropInteraction.DnD": 1,
                "JSG.graph.interaction.DragDropInteraction.Drag": 1,
                "JSG.graph.interaction.DragDropInteraction.Drop": 1,
                "JSG.graph.interaction.DropDelegate": 1,
                "JSG.graph.interaction.EditBezierShapeInteraction": 1,
                "JSG.graph.interaction.ShapeListener": 1,
                "JSG.graph.interaction.EditLineShapeInteraction": 1,
                "JSG.graph.interaction.EditShapeInteraction": 1,
                "JSG.graph.interaction.EditTextActivator": 1,
                "JSG.graph.interaction.EditTextInteraction": 1,
                "JSG.graph.interaction.GraphInteraction": 1,
                "JSG.graph.interaction.Highlighter": 1,
                "JSG.graph.interaction.Interaction": 1,
                "JSG.graph.interaction.InteractionActivator": 1,
                "JSG.graph.interaction.InteractionDispatcher": 1,
                "JSG.graph.interaction.InteractionHandler": 1,
                "JSG.graph.interaction.InteractionUtils": 1,
                "JSG.graph.interaction.LinkActivator": 1,
                "JSG.graph.interaction.LinkHandle": 1,
                "JSG.graph.interaction.MarqueeActivator": 1,
                "JSG.graph.interaction.MarqueeInteraction": 1,
                "JSG.graph.interaction.MoveActivator": 1,
                "JSG.graph.interaction.MoveAlignHelper": 1,
                "JSG.graph.interaction.MoveDelegate": 1,
                "JSG.graph.interaction.MoveInteraction": 1,
                "JSG.graph.interaction.PanInteraction": 1,
                "JSG.graph.interaction.PanInteraction.Activator": 1,
                "JSG.graph.interaction.PinchInteraction": 1,
                "JSG.graph.interaction.PinchInteraction.Activator": 1,
                "JSG.graph.interaction.ReadOnlyInteraction": 1,
                "JSG.graph.interaction.ReshapeActivator": 1,
                "JSG.graph.interaction.ReshapeInteraction": 1,
                "JSG.graph.interaction.ResizeActivator": 1,
                "JSG.graph.interaction.ResizeEdgeInteraction": 1,
                "JSG.graph.interaction.ResizeInteraction": 1,
                "JSG.graph.interaction.FeedbackStructure": 1,
                "JSG.graph.interaction.ResizeSnapHelper": 1,
                "JSG.graph.interaction.ResizeLineNodeInteraction": 1,
                "JSG.graph.interaction.ResizeOrthoEdgeInteraction": 1,
                "JSG.graph.interaction.ResizeDelegate": 1,
                "JSG.graph.interaction.AddPointsDelegate": 1,
                "JSG.graph.interaction.RotateActivator": 1,
                "JSG.graph.interaction.RotateInteraction": 1,
                "JSG.graph.interaction.SelectionChecker": 1,
                "JSG.graph.interaction.SnapHelper": 1,
                "JSG.graph.interaction.TooltipActivator": 1,
                "JSG.graph.interaction.ViewInteraction": 1,
                "JSG.graph.interaction.ViewInteraction.Activator": 1,
                "JSG.graph.interaction.ZoomInteraction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.interaction": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ZoomInteraction.js",
            "line": 8,
            "description": "An Interaction is used to perform a more or less complex user task which is driven by mouse, key\nor touch events. Only one Interaction can be active at a time and the currently active Interaction\nwill receive all generated user events. To activate an Interaction simply set it via the\n{{#crossLink \"JSG.graph.interaction.InteractionHandler/setActiveInteraction:method\"}}{{/crossLink}} method.</br>\nOften an Interaction must handle many different tasks. To not clutter up a single Interaction which\nsurely will get unable to maintain it is better to split it into several smaller Interactions.\nThe framework supports this by providing the idea of an InteractionDispatcher which internally\nuses InteractionActivators to activate the corresponding Interaction for each different task.</br>\nFor more information about this refer to the {{#crossLink \"JSG.graph.interaction.InteractionDispatcher\"}}{{/crossLink}}\nand {{#crossLink \"JSG.graph.interaction.InteractionActivator\"}}{{/crossLink}} classes.\nAnd for an example of an InteractionDispatcher look at {{#crossLink \"JSG.graph.interaction.GraphInteraction\"}}{{/crossLink}}.</br>\nSome Interactions support the usage of a {{#crossLink \"JSG.graph.interaction.Delegate\"}}{{/crossLink}} object which \nallows to influence the Interaction behavior. These objects are always optional and if not provided the default interaction \nbehavior is performed. Since a delegate is special to an Interaction only a simple global interface is provided for them.\nTherefore please refer to the Interaction of interest to get more information about its delegate support.",
            "itemtype": "main"
        },
        "JSG.graph.model.events": {
            "name": "JSG.graph.model.events",
            "submodules": {},
            "classes": {
                "JSG.graph.model.events.AttributeChangeEvent": 1,
                "JSG.graph.model.events.AttributeListener": 1,
                "JSG.graph.model.events.EdgeListener": 1,
                "JSG.graph.model.events.Event": 1,
                "JSG.graph.model.events.EventDispatcher": 1,
                "JSG.graph.model.events.EventListener": 1,
                "JSG.graph.model.events.FormatListener": 1,
                "JSG.graph.model.events.GraphItemListener": 1,
                "JSG.graph.model.events.NodeEvent": 1,
                "JSG.graph.model.events.PageEvent": 1,
                "JSG.graph.model.events.PortListener": 1,
                "JSG.graph.model.events.ShapeEvent": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.events": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\ShapeEvent.js",
            "line": 9,
            "description": "This module contains the basic classes to build up the event mechanism used within the framework.\nBeside the {{#crossLink \"JSG.graph.model.events.Event\"}}{{/crossLink}} class itself the\n{{#crossLink \"JSG.graph.model.events.EventListener\"}}{{/crossLink}} and the\n{{#crossLink \"JSG.graph.model.events.EventDispatcher\"}}{{/crossLink}} classes are important too.\nIn principle the mechanism works like follows:\n<ul>\n<li>each model object sends a pre event as a result of a requested modification</li>\n<li>the notification of each registered EventListener is done by the EventDispatcher</li>\n<li>the passed event contains a <code>doIt</code> flag with which a modification can be prohibited, by setting this field to <code>false</code></li>\n<li>if all listeners agree the modification is performed and the event object is send a second time as a post event </li>\n</ul>\nNote that pre and post event is always the same object. So an application can store additional\ninformation to the event object which is preserved between the pre and post function calls.</br>\nTo register a listener either use the {{#crossLink \"JSG.graph.model.Model/addEventListener:method\"}}{{/crossLink}} to\nregister to a single event or use the various <code>addxxxListener</code> methods as a convenient\nway to get informed about several different events.",
            "itemtype": "main"
        },
        "JSG.graph.model.settings": {
            "name": "JSG.graph.model.settings",
            "submodules": {},
            "classes": {
                "JSG.graph.model.settings.AbstractSettings": 1,
                "JSG.graph.model.settings.CustomSetting": 1,
                "JSG.graph.model.settings.GraphSettings": 1,
                "JSG.graph.model.settings.SettingID": 1,
                "JSG.graph.model.settings.ViewMode": 1,
                "JSG.graph.model.settings.GraphSettingsEvent": 1,
                "JSG.graph.model.settings.Page": 1
            },
            "fors": {
                "JSG.graph.model.settings.GraphSettings": 1
            },
            "namespaces": {
                "JSG.graph.model.settings": 1
            },
            "tag": "module",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 58
        },
        "JSG.graph.model.shapes": {
            "name": "JSG.graph.model.shapes",
            "submodules": {},
            "classes": {
                "JSG.graph.model.shapes.BBoxShape": 1,
                "JSG.graph.model.shapes.BezierShape": 1,
                "JSG.graph.model.shapes.EllipseShape": 1,
                "JSG.graph.model.shapes.LineShape": 1,
                "JSG.graph.model.shapes.OrthoLineShape": 1,
                "JSG.graph.model.shapes.OrthoLineBehavior": 1,
                "JSG.graph.model.shapes.OrthoLineShapeLayouter": 1,
                "JSG.graph.model.shapes.PathShape": 1,
                "JSG.graph.model.shapes.PathShape.Points": 1,
                "JSG.graph.model.shapes.PolygonShape": 1,
                "JSG.graph.model.shapes.RectangleShape": 1,
                "JSG.graph.model.shapes.Shape": 1,
                "JSG.graph.model.shapes.ShapeFactory": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model.shapes": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\ShapeFactory.js",
            "line": 8,
            "description": "Shapes are used to define the actual form or figure of a {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}.\nFor example: a general {{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}} graph item can have\nthe shape of a rectangle, an ellipse, a star or any other figure.</br>\nThe form of a <code>Shape</code> is defined by their inner {{#crossLink \"JSG.graph.Coordinate\"}}{{/crossLink}}s,\nwere each coordinate must be relative to the origin of shapes corresponding graph item. To register\na shape to a graph item use {{#crossLink \"JSG.graph.model.GraphItem/setShapeTo:method\"}}{{/crossLink}}.\n</br></br>\nSee {{#crossLink \"JSG.graph.view.shapes.ShapeRenderer\"}}{{/crossLink}} to get information about\nhow shapes are drawn.",
            "example": [
                "\n    var triangle = new JSG.graph.model.shapes.Shape();\n    triangle.addCoordinate(JSG.graph.Coordinate.fromXY(0, 0));\n    triangle.addCoordinate(JSG.graph.Coordinate.fromXY(500, 1000));\n    triangle.addCoordinate(JSG.graph.Coordinate.fromXY(1000, 0));\n    //set shape to an existing graph item:\n    myNode.setShapeTo(triangle);\n    //or create a new graph item with this shape:\n    var customNode = new JSG.graph.model.Node(triangle);"
            ],
            "itemtype": "main"
        },
        "JSG.graph.model": {
            "name": "JSG.graph.model",
            "submodules": {},
            "classes": {
                "JSG.graph.model.AttributedTextNode": 1,
                "JSG.graph.model.Condition": 1,
                "JSG.graph.model.ConditionManager": 1,
                "JSG.graph.model.Connection": 1,
                "JSG.graph.model.ConnectionRestorer": 1,
                "JSG.graph.model.ContentNode": 1,
                "JSG.graph.model.ContentPane": 1,
                "JSG.graph.model.Edge": 1,
                "JSG.graph.model.Graph": 1,
                "JSG.graph.model.GraphItem": 1,
                "JSG.graph.model.GraphItemFactory": 1,
                "JSG.graph.model.Group": 1,
                "JSG.graph.model.Group.Layouter": 1,
                "JSG.graph.model.Layer": 1,
                "JSG.graph.model.LineConnection": 1,
                "JSG.graph.model.LineNode": 1,
                "JSG.graph.model.Model": 1,
                "JSG.graph.model.Attributes": 1,
                "JSG.graph.model.Node": 1,
                "JSG.graph.model.Path": 1,
                "JSG.graph.model.Port": 1,
                "JSG.graph.model.PortMapper": 1,
                "JSG.graph.model.State": 1,
                "JSG.graph.model.TextNode": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.model": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\TextNode.js",
            "line": 8,
            "description": "This module contains all model classes used to create graphs.</br>\nA model object usually contains all the data required to represent both the model state and its appearance.\nThe actual visualization is done by a corresponding {{#crossLink \"JSG.graph.view.GraphItemView\"}}{{/crossLink}}\nwhich draws the model based on its {{#crossLink \"JSG.graph.attr.FormatAttributes\"}}{{/crossLink}}\nand {{#crossLink \"JSG.graph.model.shapes.Shape\"}}{{/crossLink}}.</br>\nThe relationship between a model and its view is defined by a\n{{#crossLink \"JSG.graph.controller.ModelController\"}}{{/crossLink}} which also defines the model's behavior.\n</br>\nTo easily build up any kind of graphs typical graph models like {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}},\n{{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}}s and {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}s\nare predefined. Please refer to the tutorial to see how to construct a Graph and its visual representation.\n</br></br>\nTo get informed about changes in the model class, e.g. a format or attribute change, it is\npossible to register {{#crossLink \"JSG.graph.model.events.EventListener\"}}{{/crossLink}}s to\na model. Before the state of a model is changed each listener gets an\n{{#crossLink \"JSG.graph.model.events.Event\"}}{{/crossLink}} and only if none of the\nregistered listeners vetoes against by setting the Event\n{{#crossLink \"JSG.graph.model.events.Event/doIt:property\"}}{{/crossLink}} flag to <code>false</code>\nthe requested change takes place and the same event object is send a second time. See\n{{#crossLink \"JSG.graph.model.Model/sendPreEvent:method\"}}{{/crossLink}} and\n{{#crossLink \"JSG.graph.model.Model/sendPostEvent:method\"}}{{/crossLink}} too.</br>",
            "itemtype": "main"
        },
        "JSG.graph.notifications": {
            "name": "JSG.graph.notifications",
            "submodules": {},
            "classes": {
                "JSG.graph.notifications.Notification": 1,
                "JSG.graph.notifications.NotificationCenter": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.notifications": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\graph\\notifications\\NotificationCenter.js",
            "line": 8,
            "description": "{{#crossLink \"JSG.graph.notifications.Notification\"}}{{/crossLink}}s and the\n{{#crossLink \"JSG.graph.notifications.NotificationCenter\"}}{{/crossLink}} provide a useful\nnotification mechanism between objects which should not have or do not require any dependency\nbetween each other. E.g. a custom PropertyTable could be interested in the current selected\n{{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} but has otherwise no dependency to the\n{{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}} or its corresponding\n{{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}}. Therefore the PropertyTable can simply\nregister itself to the NotificationCenter to be notified whenever selection within the Graph\nhas changed. It does this by calling\n{{#crossLink \"JSG.graph.notifications.NotificationCenter/register:method\"}}{{/crossLink}}\nwith\n{{#crossLink \"JSG.graph.view.SelectionProvider/SELECTION_CHANGED_NOTIFICATION:property\"}}{{/crossLink}}\nas notification name.</br>\n<b>Note:</b> it is important to unregister the observer object if notification is no longer needed!",
            "itemtype": "main"
        },
        "JSG.graph.properties": {
            "name": "JSG.graph.properties",
            "submodules": {},
            "classes": {
                "JSG.graph.properties.EdgeProperties": 1,
                "JSG.graph.properties.FormatProperties": 1,
                "JSG.graph.properties.GraphItemProperties": 1,
                "JSG.graph.properties.GraphProperties": 1,
                "JSG.graph.properties.ItemAttributesProperties": 1,
                "JSG.graph.properties.LayoutAttributeProperties": 1,
                "JSG.graph.properties.NodeProperties": 1,
                "JSG.graph.properties.Properties": 1,
                "JSG.graph.properties.PropertiesProvider": 1,
                "JSG.graph.properties.Property": 1,
                "JSG.graph.properties.IndexProperty": 1,
                "JSG.graph.properties.TextFormatProperties": 1,
                "JSG.graph.properties.TextNodeProperties": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.properties": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\TextNodeProperties.js",
            "line": 8,
            "description": "Properties can be used to enumerate and change attributes of an object and change their values. \nThey are used by expression formulas to get or set values or attributes of model objects. \nAny property that is exposed is also available as a reference in a formula. Look at the\nproperty implementation to find out which references can be used in formulas.",
            "itemtype": "main"
        },
        "JSG.graph.view.selection": {
            "name": "JSG.graph.view.selection",
            "submodules": {},
            "classes": {
                "JSG.graph.view.selection.BBoxSelectionHandler": 1,
                "JSG.graph.view.selection.CommandButton": 1,
                "JSG.graph.view.selection.Type": 1,
                "JSG.graph.view.selection.Position": 1,
                "JSG.graph.view.selection.CommandButtonHandler": 1,
                "JSG.graph.view.selection.GroupSelectionHandler": 1,
                "JSG.graph.view.selection.LineNodeSelectionHandler": 1,
                "JSG.graph.view.selection.LineSelectionHandler": 1,
                "JSG.graph.view.selection.Marker": 1,
                "JSG.graph.view.selection.NodeSelectionHandler": 1,
                "JSG.graph.view.selection.OrthoLineSelectionHandler": 1,
                "JSG.graph.view.selection.RotationMarker": 1,
                "JSG.graph.view.selection.SelectionHandle": 1,
                "JSG.graph.view.selection.TYPE": 1,
                "JSG.graph.view.selection.INDEX": 1,
                "JSG.graph.view.selection.SelectionHandler": 1,
                "JSG.graph.view.selection.SelectionHandlerFactory": 1,
                "JSG.graph.view.selection.SelectionStyle": 1,
                "JSG.graph.view.selection.SelectionView": 1,
                "JSG.graph.view.selection.TextSelectionHandler": 1,
                "JSG.graph.view.selection.LayerId": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view.selection": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\LayerId.js",
            "line": 7,
            "itemtype": "main"
        },
        "JSG.graph.view.shapes": {
            "name": "JSG.graph.view.shapes",
            "submodules": {},
            "classes": {
                "JSG.graph.view.shapes.BezierShapeRenderer": 1,
                "JSG.graph.view.shapes.DefaultShapeRenderer": 1,
                "JSG.graph.view.shapes.EllipseShapeRenderer": 1,
                "JSG.graph.view.shapes.LineShapeRenderer": 1,
                "JSG.graph.view.shapes.OrthoLineShapeRenderer": 1,
                "JSG.graph.view.shapes.PathShapeRenderer": 1,
                "JSG.graph.view.shapes.PathShapeRenderer.Commands": 1,
                "JSG.graph.view.shapes.PolygonShapeRenderer": 1,
                "JSG.graph.view.shapes.RectangleShapeRenderer": 1,
                "JSG.graph.view.shapes.ShapeRenderer": 1
            },
            "fors": {
                "JSG.graph.view.shapes.PathShapeRenderer": 1
            },
            "namespaces": {
                "JSG.graph.view.shapes": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\ShapeRenderer.js",
            "line": 14,
            "description": "This package provides different renderers for the different shape types. The renderer\nto be used for a shape depends on the shape type. E.g. a BezierShape uses a BezierShapeRenderer. The\nappropriate renderer can be retrieved using the static ShapeRenderer class.",
            "itemtype": "main"
        },
        "JSG.graph.view": {
            "name": "JSG.graph.view",
            "submodules": {},
            "classes": {
                "JSG.graph.view.BBoxView": 1,
                "JSG.graph.view.ContentNodeView": 1,
                "JSG.graph.view.ContentNodeViewPanel": 1,
                "JSG.graph.view.ContentPaneView": 1,
                "JSG.graph.view.BBoxListener": 1,
                "JSG.graph.view.EdgeView": 1,
                "JSG.graph.view.EditBezierShapeView": 1,
                "JSG.graph.view.EditLineShapeView": 1,
                "JSG.graph.view.EditShapeView": 1,
                "JSG.graph.view.EditShapeView.Marker": 1,
                "JSG.graph.view.FloatingToolbar": 1,
                "JSG.graph.view.FloatingToolbar.Tool": 1,
                "JSG.graph.view.FloatingToolbar.ToolButton": 1,
                "JSG.graph.view.FloatingToolbar.ToolSeparator": 1,
                "JSG.graph.view.FloatingToolbar.ToolBreak": 1,
                "JSG.graph.view.FloatingToolbar.ToolList": 1,
                "JSG.graph.view.FloatingToolbar.ToolColor": 1,
                "JSG.graph.view.GraphItemView": 1,
                "JSG.graph.view.CollapseButton": 1,
                "JSG.graph.view.GraphView": 1,
                "JSG.graph.view.GroupView": 1,
                "JSG.graph.view.MarqueeFeedbackView": 1,
                "JSG.graph.view.NodeView": 1,
                "JSG.graph.view.PortView": 1,
                "JSG.graph.view.PositionFeedbackView": 1,
                "JSG.graph.view.SelectionFeedbackView": 1,
                "JSG.graph.view.SelectionProvider": 1,
                "JSG.graph.view.SnapFeedbackView": 1,
                "JSG.graph.view.TextView": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.view": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\TextView.js",
            "line": 8,
            "description": "This module contains classes related to the visual representation of view related classes.\nWhereas the {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} contains the data\nand its corresponding {{#crossLink \"JSG.graph.controller.GraphItemController\"}}{{/crossLink}}\ndefines the behavior the view classes deal with the actual visualization.</br>\nAny visualization data which needs to be persisted must be added to the GraphItem.\n - base class\n - format\n - subclasses should extend => important methods\n - examples NodeView, EdgeView...",
            "itemtype": "main"
        },
        "JSG.graph": {
            "name": "JSG.graph",
            "submodules": {},
            "classes": {
                "JSG.graph.Coordinate": 1,
                "JSG.graph.CoordinateProxy": 1,
                "JSG.graph.Pin": 1,
                "JSG.graph.ReshapeType": 1,
                "JSG.graph.ReshapeCoordinate": 1,
                "JSG.graph.Size": 1,
                "JSG.graph.Utils": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\graph\\Utils.js",
            "line": 9,
            "description": "Module containing graph related classes",
            "itemtype": "main"
        },
        "JSG.graph.layout": {
            "name": "JSG.graph.layout",
            "submodules": {},
            "classes": {
                "JSG.graph.layout.LayoutManager": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.graph.layout": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\layout\\LayoutManager.js",
            "line": 15,
            "description": "The layout module contains only the LayoutManager. The JS Graph Library is not bound to a specific layout package.\nCurrently we provide a few layout algorithms that can be applied to the graph in a separate package.\nThese layout algorithms will be extended in future versions. You can also connect another or your own implementation of a layout to\nthe JS Graph Library. This is achieved by providing a different LayoutManager and providing another\nlayout package.",
            "itemtype": "main"
        },
        "JSG.ui.events": {
            "name": "JSG.ui.events",
            "submodules": {},
            "classes": {
                "JSG.ui.events.DragEventType": 1,
                "JSG.ui.events.DragEvent": 1,
                "JSG.ui.events.Event": 1,
                "JSG.ui.events.GestureEventType": 1,
                "JSG.ui.events.GestureEvent": 1,
                "JSG.ui.events.KeyEventType": 1,
                "JSG.ui.events.KeyEvent": 1,
                "JSG.ui.events.MouseEventType": 1,
                "JSG.ui.events.ButtonType": 1,
                "JSG.ui.events.KeyType": 1,
                "JSG.ui.events.MouseEvent": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.events": 1
            },
            "tag": "module",
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 95
        },
        "JSG.ui.graphics": {
            "name": "JSG.ui.graphics",
            "submodules": {},
            "classes": {
                "JSG.ui.graphics.DisplayMode": 1,
                "JSG.ui.graphics.CoordinateSystem": 1,
                "JSG.ui.graphics.DocumentEventDispatcher": 1,
                "JSG.ui.graphics.GraphicSystem": 1,
                "JSG.ui.graphics.Graphics": 1,
                "JSG.ui.graphics.MetricCoordinateSystem": 1,
                "JSG.ui.graphics.SVGraphics": 1,
                "JSG.ui.graphics.ScalableGraphics": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.graphics": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\ScalableGraphics.js",
            "line": 8,
            "description": "This module contains the GraphicSystem class that interacts with the canvas DOM element. This class\nregisters event handlers to enable user interface interactions and generates output to the canvas element.\nIt also contains classes that convert logical internal coordinates to device coordinates and classes\nthat generate visible output on a output medium like the canvas or an SVG file.",
            "itemtype": "main"
        },
        "JSG.ui.navigator": {
            "name": "JSG.ui.navigator",
            "submodules": {},
            "classes": {
                "JSG.ui.navigator.JSGNavigator": 1,
                "JSG.ui.navigator.JSGNavigatorInteractionHandler": 1,
                "JSG.ui.navigator.JSGNavigatorPanel": 1,
                "JSG.ui.navigator.NavigatorContentView": 1,
                "JSG.ui.navigator.NavigatorControllerFactory": 1,
                "JSG.ui.navigator.NavigatorEdgeView": 1,
                "JSG.ui.navigator.NavigatorGraphController": 1,
                "JSG.ui.navigator.NavigatorGraphView": 1,
                "JSG.ui.navigator.NavigatorItemController": 1,
                "JSG.ui.navigator.NavigatorItemView": 1,
                "JSG.ui.navigator.NavigatorViewer": 1,
                "JSG.ui.navigator.Overlay": 1,
                "JSG.ui.navigator.OverlayInteraction\nextends JSG.graph.interaction.Interaction": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.navigator": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\OverlayInteraction.js",
            "line": 9,
            "description": "This module provides classes to implement a Navigator. A navigator can be used to\nvisualize an overview of a graph. It provides an user interface to change the viewport\ninto the graph by panning or zooming using the mouse. The navigator uses a canvas element\nto display the graph.",
            "itemtype": "main"
        },
        "JSG.ui.scrollview": {
            "name": "JSG.ui.scrollview",
            "submodules": {},
            "classes": {
                "JSG.ui.scrollview.Arrow": 1,
                "JSG.ui.scrollview.Range": 1,
                "JSG.ui.scrollview.RangeModel": 1,
                "JSG.ui.scrollview.ScrollBar": 1,
                "JSG.ui.scrollview.Mode": 1,
                "JSG.ui.scrollview.ScrollView": 1,
                "JSG.ui.scrollview.Thumb": 1,
                "JSG.ui.scrollview.ViewPanel": 1,
                "JSG.ui.scrollview.ViewPort": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.scrollview": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPort.js",
            "line": 9,
            "description": "The scrollview module contains a set of classes to implement scrolling functionality. It includes a view, which \nlayouts the {{#crossLink \"JSG.ui.scrollview.ScrollBar\"}}{{/crossLink}}s and the content to scroll. A scrollbar itself \nconsists of two {{#crossLink \"JSG.ui.scrollview.Arrow\"}}{{/crossLink}} buttons, a so called scrollbar \n{{#crossLink \"JSG.ui.scrollview.Thumb\"}}{{/crossLink}} and a scrollbar {{#crossLink \"JSG.ui.scrollview.Range\"}}{{/crossLink}}. \nThese classes also handle the mouse input to initiate scroll activities. The glue between the scrolled content and the \nscrollbars is defined by a {{#crossLink \"JSG.ui.scrollview.RangeModel\"}}{{/crossLink}} which notifies its registered \nobservers about scroll changes.",
            "itemtype": "main"
        },
        "JSG.ui.shapelibrary": {
            "name": "JSG.ui.shapelibrary",
            "submodules": {},
            "classes": {
                "JSG.ui.shapelibrary.ShapeLibrary": 1,
                "JSG.ui.shapelibrary.ShapeLibraryDefaultInteraction": 1,
                "JSG.ui.shapelibrary.KeyHandler": 1,
                "JSG.ui.shapelibrary.ShapeLibraryEditor": 1,
                "JSG.ui.shapelibrary.ShapeLibrarySelectionView": 1,
                "JSG.ui.shapelibrary.ShapeLibraryViewer": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.shapelibrary": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibraryViewer.js",
            "line": 8,
            "description": "This module provides a component to display and manage library items. The component contains \na GraphEditor, that is attached to a canvas, which has to be provided. The graph acts as a drag source for \ninserting custom GraphItems oder Nodes into a graph. The library items can be visually separated\nby providing categories. The items in the ShapeLibrary are Nodes containing a name and an image\nto represent the custom library item. The image is used to display the item in the library. The Node\ncan be dragged into another Graph. There you can create the desired item identified by the name of the Node.",
            "itemtype": "main"
        },
        "JSG.ui.viewer": {
            "name": "JSG.ui.viewer",
            "submodules": {},
            "classes": {
                "JSG.ui.viewer.ControllerViewer": 1,
                "JSG.ui.viewer.GraphViewer": 1,
                "JSG.ui.viewer.ScrollableViewer": 1,
                "JSG.ui.viewer.ScrollableViewerInteractionDecorator": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui.viewer": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 266,
            "description": "Viewers are used to display a hierarchy of {{#crossLink \"JSG.graph.controller.ModelController\"}}{{/crossLink}}s. At \nthe top there is always a so called root controller to have a well defined hierarchy root. Hence, the default root \ncontroller is an instance of {{#crossLink \"JSG.graph.controller.RootController\"}}{{/crossLink}}. Now this root controller \ndefines the actual content controller of the viewer, e.g. for a displayed {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}}\nmodel the content controller will be an instance of {{#crossLink \"JSG.graph.controller.GraphController\"}}{{/crossLink}}.\nBased on this root the controller hierarchy is build up running from top to bottom where each controller is created \nusing a registered {{#crossLink \"JSG.graph.controller.GraphControllerFactory\"}}{{/crossLink}}. That means the controller \nhierarchy is simply like <code>RootController -> ContentController -> ModelControllers</code>. For example a displayed \n<code>Graph</code> has following hierarchy <code>RootController -> GraphController -> GraphItemController[s]</code>.</br> \nTo easily get these controllers each viewer providers corresponding methods like \n{{#crossLink \"JSG.ui.viewer.ControllerViewer/getRootController:method\"}}{{/crossLink}},\n{{#crossLink \"JSG.ui.viewer.ControllerViewer/getContent:method\"}}{{/crossLink}} and various <code>findController</code>\nmethods to search for special controllers within displayed controller hierarchy. </br>\nTo provide default user interaction a viewer also has a default {{#crossLink \"JSG.graph.interaction.Interaction\"}}{{/crossLink}}\nwhich will be set if no other <code>Interaction</code> is explicitly set to active. This default <code>Interaction</code> will \nthan receive all mouse and key events. Please refer to the {{#crossLinkModule \"JSG.graph.interaction\"}}{{/crossLinkModule}} module \nfor more information on this. It is possible for applications to set their custom default <code>Interaction</code> via \n{{#crossLink \"JSG.ui.viewer.ControllerViewer/setDefaultInteraction:method\"}}{{/crossLink}}.\n</br>\nFinally if a viewer is no longer needed it should be destroyed via a call to \n{{#crossLink \"JSG.ui.viewer.ControllerViewer/destroy:method\"}}{{/crossLink}} to free up resources.",
            "itemtype": "main"
        },
        "JSG.ui": {
            "name": "JSG.ui",
            "submodules": {},
            "classes": {
                "JSG.ui.Cursor": 1,
                "JSG.ui.Style": 1,
                "JSG.ui.GraphEditor": 1,
                "JSG.ui.GraphListener": 1,
                "JSG.ui.GraphViewPanel": 1,
                "JSG.ui.Scale": 1,
                "JSG.ui.ScrollPanel": 1,
                "JSG.ui.View": 1,
                "JSG.ui.Widget": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.ui": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 9,
            "description": "Within this module you find some of the core classes to display and interact with a {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}} \nmodel, namely {{#crossLink \"JSG.ui.graphics.Graphics\"}}{{/crossLink}}, {{#crossLink \"JSG.ui.graphics.GraphicSystem\"}}{{/crossLink}}, \n{{#crossLink \"JSG.ui.viewer.GraphViewer\"}}{{/crossLink}} and {{#crossLink \"JSG.ui.events.Event\"}}{{/crossLink}}.</br>\nWhile <code>Graphics</code> provide a simple wrapper around an HTML <code>canvas</code> 2D context, to ease and support scaled drawing, \nthe <code>GraphicSystem</code> is mainly used to pass events from the browser to the framework. In doing so the browser events are \nconverted to framework events to provide additional information and to transform between browser coordinate system and \nthe logical coordinate system of the graph. This transformation is handled by the {{#crossLink \"JSG.ui.graphics.CoordinateSystem\"}}{{/crossLink}}\nclass.</br>\nTo visually represent a {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} model a \n{{#crossLink \"JSG.graph.view.GraphItemView\"}}{{/crossLink}} is used. The connection between both classes is done via\na corresponding {{#crossLink \"JSG.graph.controller.ModelController\"}}{{/crossLink}} instance. In order to display a \ncontroller or a hierarchy of controllers a subclass of {{#crossLink \"JSG.ui.viewer.ControllerViewer\"}}{{/crossLink}}\nis used, like the mentioned GraphViewer or a {{#crossLink \"JSG.ui.viewer.ScrollableViewer\"}}{{/crossLink}}.</br> \nAs an example of how all these classes work together one can look at the {{#crossLink \"JSG.ui.GraphEditor\"}}{{/crossLink}}. \nThe <code>GraphEditor</code> creates default instances of a <code>CoordinateSystem</code>, a <code>GraphicSystem</code> \nand a <code>GraphViewer</code>. Only a <code>canvas</code> element must be provided to visualize an arbitrary graph model.</br>\n</br>\nSeveral of the classes defined in this module send {{#crossLink \"JSG.graph.notifications.Notification\"}}{{/crossLink}}.s. \nThose are used as a sort of high level event mechanism without a tight coupling between sender and receiver objects. \nFor more information about this concept refer to the {{#crossLinkModule \"JSG.graph.notifications\"}}{{/crossLinkModule}}\nmodule. Classes which will send notifications document this within their class documentation.</br>",
            "itemtype": "main"
        },
        "JSG": {
            "name": "JSG",
            "submodules": {},
            "classes": {
                "JSG.JSG": 1,
                "JSG.Functions": 1,
                "Monitor": 1,
                "JSG": 1
            },
            "fors": {
                "JSG": 1,
                "JSG.JSG": 1,
                "Functions": 1
            },
            "namespaces": {
                "JSG": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsg\\jsg.js",
            "line": 18,
            "description": "The JSG global namespace object.",
            "itemtype": "main"
        },
        "JSG.SVG": {
            "name": "JSG.SVG",
            "submodules": {},
            "classes": {
                "JSG.SVG.Circle": 1,
                "JSG.SVG.Color": 1,
                "JSG.SVG.Defs": 1,
                "JSG.SVG.Element": 1,
                "JSG.SVG.Ellipse": 1,
                "JSG.SVG.Error": 1,
                "JSG.SVG.Group": 1,
                "JSG.SVG": 1,
                "JSG.SVG.Model": 1,
                "JSG.SVG.Line": 1,
                "JSG.SVG.Matrix": 1,
                "JSG.SVG.Path": 1,
                "JSG.SVG.PathData": 1,
                "JSG.SVG.Polygon": 1,
                "JSG.SVG.Rect": 1,
                "JSG.SVG.Shapes": 1,
                "JSG.SVG.Styles": 1,
                "JSG.SVG.Svg": 1,
                "JSG.SVG.Text": 1,
                "JSG.SVG.Transform": 1,
                "JSG.SVG.TSpan": 1,
                "JSG.SVG.Unit": 1,
                "JSG.SVG.Utils": 1,
                "JSG.SVG.ViewBox": 1
            },
            "fors": {},
            "namespaces": {
                "JSG.SVG": 1,
                "JSG": 1
            },
            "tag": "main",
            "file": "..\\dist\\wc\\jsgsvg\\viewbox.js",
            "line": 7,
            "description": "A simple SVG library to convert and import svg files to JSG.",
            "itemtype": "main"
        }
    },
    "classes": {
        "JSG.anim.Animation": {
            "name": "JSG.anim.Animation",
            "shortname": "Animation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.anim",
            "namespace": "JSG.anim",
            "file": "..\\dist\\wc\\jsg\\anim\\Animation.js",
            "line": 11,
            "description": "Simple animation class to start and stop an animation function.",
            "example": [
                "\n    var animation = new JSG.anim.Animation(JSG.anim.AnimationType.LINEAR, this), i, n, node;\n\n    // animate for 2 seconds\n    animation.start(animate, 2000);\n\n    function animate(progress) {\n        for (i = 0, n = graph.getItemCount(); i < n; i++) {\n            node = graph.getItemAt(i);\n            // move object vertically by 0.5 cm\n            node.translate(0, 50);\n        }\n    }"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "Type of animation.",
                    "type": "JSG.anim.AnimationType"
                },
                {
                    "name": "context",
                    "description": "The context is passed as a parameter to the animation function.",
                    "type": "Object"
                }
            ]
        },
        "JSG.anim.AnimationType": {
            "name": "JSG.anim.AnimationType",
            "shortname": "AnimationType",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.anim",
            "namespace": "JSG.anim",
            "file": "..\\dist\\wc\\jsg\\anim\\AnimationType.js",
            "line": 7,
            "description": "Implementation of the three animation types (linear, ease out and circ).",
            "is_constructor": 1
        },
        "Array": {
            "name": "Array",
            "shortname": "Array",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.commons",
            "namespace": "",
            "file": "..\\dist\\wc\\jsg\\commons\\Array.js",
            "line": 11,
            "description": "Extension of the Javascript Core Array class by some useful additional functions used in this framework.",
            "deprecated": true,
            "deprecationMessage": "Subject to remove!! Please use corresponding methods in {{#crossLink \"JSG.commons.Arrays\"}}{{/crossLink}}!!"
        },
        "JSG.commons.Arrays": {
            "name": "JSG.commons.Arrays",
            "shortname": "Arrays",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.commons",
            "namespace": "JSG.commons",
            "file": "..\\dist\\wc\\jsg\\commons\\Arrays.js",
            "line": 9,
            "description": "Utility class which provides static method to handle <code>Array</code> related tasks.</br>\n<b>Note:</b> this class can be reference via <code>JSG.Arrays</code> too.",
            "is_constructor": 1
        },
        "JSG.commons.BSTree": {
            "name": "JSG.commons.BSTree",
            "shortname": "BSTree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.commons",
            "namespace": "JSG.commons",
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 9,
            "description": "A binary search tree implementation.<br/>\nEach added data object must provide a <code>value</code> property and a <code>compareTo</code> method. The \n<code>compareTo</code> method is called with another data object and should return 1 if the passed data object is\nlesser, -1 if it is greater than the other data object or 0 if both data objects are equal. Please refer to\n{{#crossLink \"JSG.commons.BSTree.NumericData\"}}{{/crossLink}} for an example of a data object.",
            "is_constructor": 1
        },
        "JSG.commons.TraverseOrder": {
            "name": "JSG.commons.TraverseOrder",
            "shortname": "TraverseOrder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.commons",
            "namespace": "JSG.commons",
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 25,
            "description": "Predefined constants to use for traversing a <code>BSTree</code>."
        },
        "JSG.commons.NumericData": {
            "name": "JSG.commons.NumericData",
            "shortname": "NumericData",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.commons",
            "namespace": "JSG.commons",
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 328,
            "description": "An example of a numerical data object which can be added to a <code>BSTree</code>. This data object provides required \n<code>compareTo</code> method and a value property.",
            "params": [
                {
                    "name": "value",
                    "description": "The initial numeric value.",
                    "type": "Number"
                }
            ],
            "is_constructor": 1
        },
        "JSG.commons.ImagePool": {
            "name": "JSG.commons.ImagePool",
            "shortname": "ImagePool",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.commons",
            "namespace": "JSG.commons",
            "file": "..\\dist\\wc\\jsg\\commons\\ImagePool.js",
            "line": 8,
            "description": "The ImagePool class manages images loaded from the server. Any Image loaded from the \nserver used for display in pattern fills or other items will be pooled and only be\nloaded once. Its primarily intended for internal use.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1
        },
        "JSG.commons.ManagedList": {
            "name": "JSG.commons.ManagedList",
            "shortname": "ManagedList",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.commons",
            "namespace": "JSG.commons",
            "file": "..\\dist\\wc\\jsg\\commons\\ManagedList.js",
            "line": 8,
            "description": "This class simply wraps an Array and allows observer registration in order to get informed about \nany changes of inner list.",
            "is_constructor": 1
        },
        "JSG.commons.Map": {
            "name": "JSG.commons.Map",
            "shortname": "Map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.commons",
            "namespace": "JSG.commons",
            "file": "..\\dist\\wc\\jsg\\commons\\Map.js",
            "line": 8,
            "description": "This class organizes a container of object mapped to keys. The keys have to be {Strings}.",
            "example": [
                "\n\n    var map = new JSG.commons.Map();\n\n    // add item to map\n    map.put(\"Test\", new JSG.geometry.Point(2, 2));\n\n    // retrieve item from map\n    var pt = map.get(\"Test\");"
            ],
            "is_constructor": 1
        },
        "JSG.commons.NamedImage": {
            "name": "JSG.commons.NamedImage",
            "shortname": "NamedImage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.commons",
            "namespace": "JSG.commons",
            "file": "..\\dist\\wc\\jsg\\commons\\NamedImage.js",
            "line": 8,
            "description": "A simple data class to associate a name with an image.",
            "params": [
                {
                    "name": "name",
                    "description": "The image name",
                    "type": "String"
                },
                {
                    "name": "image",
                    "description": "The resource locator which references the image, e.g. a file name.",
                    "type": "String"
                }
            ],
            "is_constructor": 1
        },
        "Number": {
            "name": "Number",
            "shortname": "Number",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.commons",
            "namespace": "",
            "file": "..\\dist\\wc\\jsg\\commons\\Number.js",
            "line": 6,
            "description": "Extension of the JavaScript Core Number class by some useful additional functions used in this framework.",
            "deprecated": true,
            "deprecationMessage": "Subject to remove!!  Use {{#crossLink \"JSG.commons.Numbers\"}}{{/crossLink}} instead."
        },
        "JSG.commons.Numbers": {
            "name": "JSG.commons.Numbers",
            "shortname": "Numbers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.commons",
            "namespace": "JSG.commons",
            "file": "..\\dist\\wc\\jsg\\commons\\Numbers.js",
            "line": 9,
            "description": "Utility class which provides static method to handle <code>Number</code> related tasks.</br>\n<b>Note:</b> this class can be reference via <code>JSG.Numbers</code> too.",
            "is_constructor": 1
        },
        "JSG.commons.StableMap": {
            "name": "JSG.commons.StableMap",
            "shortname": "StableMap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.commons",
            "namespace": "JSG.commons",
            "file": "..\\dist\\wc\\jsg\\commons\\StableMap.js",
            "line": 8,
            "description": "Acts like a Map, but preserves the order of the elements added to the map.",
            "is_constructor": 1,
            "extends": "JSG.commons.Map"
        },
        "String": {
            "name": "String",
            "shortname": "String",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.commons",
            "namespace": "",
            "file": "..\\dist\\wc\\jsg\\commons\\String.js",
            "line": 6,
            "description": "Extension of the Javascript Core String class by some useful additional functions used in this framework.",
            "deprecated": true,
            "deprecationMessage": "Subject to remove!!  Use {{#crossLink \"JSG.commons.Strings\"}}{{/crossLink}} instead."
        },
        "StringBuffer": {
            "name": "StringBuffer",
            "shortname": "StringBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.commons",
            "namespace": "",
            "file": "..\\dist\\wc\\jsg\\commons\\StringBuffer.js",
            "line": 6,
            "description": "Simple String Buffer",
            "is_constructor": 1
        },
        "JSG.commons.Strings": {
            "name": "JSG.commons.Strings",
            "shortname": "Strings",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.commons",
            "namespace": "JSG.commons",
            "file": "..\\dist\\wc\\jsg\\commons\\Strings.js",
            "line": 9,
            "description": "Utility class which provides static method to handle <code>String</code> related tasks.</br>\n<b>Note:</b> this class can be reference via <code>JSG.Strings</code> too.",
            "is_constructor": 1
        },
        "JSG.commons.XML": {
            "name": "JSG.commons.XML",
            "shortname": "JSG.commons.XML",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.commons",
            "namespace": "JSG.commons",
            "file": "..\\dist\\wc\\jsg\\commons\\XML.js",
            "line": 5,
            "description": "This class provides static XML helper functions.",
            "is_constructor": 1
        },
        "JSG.commons.XMLWriter": {
            "name": "JSG.commons.XMLWriter",
            "shortname": "XMLWriter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.commons",
            "namespace": "JSG.commons",
            "file": "..\\dist\\wc\\jsg\\commons\\XMLWriter.js",
            "line": 8,
            "description": "XML Writer Utility class. Allow to build up a XML Structure and to retrieve an XML String from that structure\n\nExample:\n\n     var file = new JSG.commons.XMLWriter( 'UTF-8', '1.0' );\n\n     file.writeStartDocument();\n     file.writeStartElement(\"tag\");\n\n     file.writeAttributeString(\"id\", \"1\");\n\n     file.writeEndElement();\n     file.writeEndDocument();\n\n     var string = file.flush();",
            "params": [
                {
                    "name": "encoding",
                    "description": "Encoding",
                    "type": "String"
                },
                {
                    "name": "version",
                    "description": "XML-Version",
                    "type": "String"
                }
            ],
            "is_constructor": 1
        },
        "JSG.geometry.BoundingBox": {
            "name": "JSG.geometry.BoundingBox",
            "shortname": "BoundingBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.geometry",
            "namespace": "JSG.geometry",
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 7,
            "description": "Describes the bounding rect of an item consisting of the top left corner and the bottom right corner. It\nalso includes a rotation matrix. If a rotation is set, the corner or points defined by the BoundingBox are\nrotated upon retrieval.",
            "example": [
                "\n    // create a rotated bounding rect\n    var box = new JSG.geometry.BoundingBox(1000, 1000);\n    box.setTopLeft(5000, 5000);\n    box.rotate(Math.PI);"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "Initial width of the BoundingBox.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Initial height of the BoundingBox.",
                    "type": "Number"
                }
            ]
        },
        "JSG.geometry.Constants": {
            "name": "JSG.geometry.Constants",
            "shortname": "Constants",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.geometry",
            "namespace": "JSG.geometry",
            "file": "..\\dist\\wc\\jsg\\geometry\\Constants.js",
            "line": 8,
            "description": "This class provides static constants for geometric and trigonometric calculations.",
            "is_constructor": 1,
            "access": "private",
            "tagname": ""
        },
        "JSG.geometry.Matrix": {
            "name": "JSG.geometry.Matrix",
            "shortname": "Matrix",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.geometry",
            "namespace": "JSG.geometry",
            "file": "..\\dist\\wc\\jsg\\geometry\\Matrix.js",
            "line": 8,
            "description": "Simple 2x2 Matrix for transformation. Currently only used for rotation.",
            "is_constructor": 1
        },
        "JSG.geometry.Point": {
            "name": "JSG.geometry.Point",
            "shortname": "Point",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.geometry",
            "namespace": "JSG.geometry",
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 8,
            "description": "The Point class describes a 2D point.\n\nPoints are used to describe geometric positions within the coordinate space.\n\nThe following example creates a point and adds another points coordinates to it.",
            "example": [
                "\n    var pt = new JSG.geometry.Point(0, 0);\n    var ptAdd = new JSG.geometry.Point(10, 10);\n    pt.add(ptAdd);"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "X Coordinate of the point.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y Coordinate of the point.",
                    "type": "Number"
                }
            ]
        },
        "JSG.geometry.PointList": {
            "name": "JSG.geometry.PointList",
            "shortname": "PointList",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.geometry",
            "namespace": "JSG.geometry",
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 8,
            "description": "The PointList class manages a list of {{#crossLink \"JSG.geometry.Point\"}}{{/crossLink}} objects.\n\nPointList defines a container of {{#crossLink \"JSG.geometry.Point\"}}{{/crossLink}}s.\n\nThe following example creates a PointList and adds points to it:",
            "example": [
                "\n    var points = new JSG.geometry.PointList(), pt,\n\n    pt = new JSG.geometry.Point(10, 10);\n    points.addPoint(pt);\n\n    pt = new JSG.geometry.Point(20, 20);\n    points.addPoint(pt);"
            ],
            "is_constructor": 1
        },
        "JSG.geometry.Rectangle": {
            "name": "JSG.geometry.Rectangle",
            "shortname": "Rectangle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.geometry",
            "namespace": "JSG.geometry",
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 8,
            "description": "The Rectangle class describes a 2D rectangle. Rectangles are used to describe a rectangular area within the coordinate space.",
            "example": [
                "\n    var rect = new JSG.geometry.Rectangle(20, 20, 200, 200);\n    var pt = new JSG.geometry.Point(50, 70);\n\n    if (rect.containsPoint(pt)) {\n        // do something\n    }"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "X Coordinate of the rectangle.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y Coordinate of the rectangle.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Width of the rectangle.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Height of the rectangle.",
                    "type": "Number"
                }
            ]
        },
        "JSG.geometry.Utils": {
            "name": "JSG.geometry.Utils",
            "shortname": "Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.geometry",
            "namespace": "JSG.geometry",
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 11,
            "description": "This class provides geometric math helper functions.\nEach function should be called in a static way, e.g. JSG.geometry.Utils.toRadians(180);",
            "is_constructor": 1,
            "access": "private",
            "tagname": ""
        },
        "JSG.graph.attr.Attribute": {
            "name": "JSG.graph.attr.Attribute",
            "shortname": "Attribute",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 24,
            "description": "Creates a new Attribute with given name and value.<br/>\n<b>Note:</b> to prevent conflicts with other Attributes the Attribute name should be globally\nunique, at least within its parent AttributeList.<br/>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "A unique Attribute name.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "An Attribute value expression",
                    "type": "JSG.graph.expr.Expression"
                }
            ]
        },
        "JSG.graph.attr.AttributeList": {
            "name": "JSG.graph.attr.AttributeList",
            "shortname": "AttributeList",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 8,
            "description": "A container for <code>Attributes</code>. Methods to add and retrieve <code>Attributes</code> to and from this \n<code>AttributeList</code> are provided.<br/>\nIt is allowed to nest different <code>AttributeLists</code> into another and to specify a special list which acts as \na parent for this <code>AttributeList</code>. The <code>Attributes</code> of a parent list are automatically inherited,\nbut not added to the sub list. That means that the sub list may be empty and only uses and returns <code>Attributes</code>\nfrom its parent. So to look up an <code>Attribute</code> the <code>AttributeList</code> is traversed first and if the\nsearch was not successful its parent is requested. <b>Note:</b> registering a parent has an implication on the management \nof <code>Attributes</code>. E.g. a list can contain an <code>Attribute</code> through its parent although it was not added\nbefore. On the other hand removing an <code>Attribute</code> will only remove it from the sub list but not from its \nparent, i.e. the <code>Attribute</code> seems to be still within the sub list namely because of its parent. Please refere\nto the documentation of the related methods.<br/>\nTo reference a parent list correctly it is required that both lists, i.e. the sub list and the parent list, are \nattached to {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s within the same {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}}. \nIf the parent should rather be a globally available list it is better to use {{#crossLink \"JSG.graph.attr.Template\"}}{{/crossLink}}s \nwhich can be accessed via {{#crossLink \"JSG.graph.attr.TemplateStore\"}}{{/crossLink}}.<br/>\n<b>Note:</b> if this AttributeList is added to a GraphItem, either directly or indirectly via another AttributeList,\ncalling one of defined methods might raises an {{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}}.",
            "extends": "JSG.graph.attr.Attribute",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "A unique name for this AttributeList",
                    "type": "String"
                },
                {
                    "name": "mapExpr",
                    "description": "An optional MapExpression which contains predefined attributes.",
                    "type": "JSG.graph.expr.MapExpression",
                    "optional": true
                }
            ]
        },
        "JSG.graph.attr.AttributeProxy": {
            "name": "JSG.graph.attr.AttributeProxy",
            "shortname": "AttributeProxy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeProxy.js",
            "line": 9,
            "description": "An <code>AttributeProxy</code> wraps another {{#crossLink \"JSG.graph.attr.Attribute\"}}{{/crossLink}}\nin order to control its access.<br/>\nSince an <code>AttributeProxy</code> behaves like an <code>Attribute</code> it can be used as\na replacement for the original, i.e. wrapped, <code>Attribute</code>.By default all methods are\nsimply passed through to the original <code>Attribute</code>. Subclasses can overwrite to implement\ncustom behaviour.<br/>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "attribute",
                    "description": "The original attribute.",
                    "type": "JSG.graph.attr.Attribute"
                }
            ]
        },
        "JSG.graph.attr.AttributeUtils": {
            "name": "JSG.graph.attr.AttributeUtils",
            "shortname": "AttributeUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeUtils.js",
            "line": 8,
            "is_constructor": 1
        },
        "JSG.graph.attr.BooleanAttribute": {
            "name": "JSG.graph.attr.BooleanAttribute",
            "shortname": "BooleanAttribute",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\BooleanAttribute.js",
            "line": 8,
            "description": "An Attribute subclass with a {{#crossLink \"JSG.graph.expr.BooleanExpression\"}}{{/crossLink}} as value.</br>\n<b>Note:</b> to prevent conflicts with other Attributes the Attribute name should be globally unique, at\nleast within its parent AttributeList.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "A unique Attribute name.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "An optional BooleanExpression or Boolean to use as value.",
                    "type": "Boolean || JSG.graph.expr.BooleanExpression",
                    "optional": true
                }
            ]
        },
        "JSG.graph.attr.ConditionalAttribute": {
            "name": "JSG.graph.attr.ConditionalAttribute",
            "shortname": "ConditionalAttribute",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ConditionalAttribute.js",
            "line": 9,
            "description": "A <code>ConditionalAttribute</code> affects the value of a given <code>Attribute</code> depending on its registered \n{{#crossLink \"JSG.graph.model.Condition\"}}{{/crossLink}}s. If a <code>Condition</code> is fulfilled its value is used \ninstead of the <code>Attribute</code> value. Because a <code>ConditionalAttribute</code> can have several \n<code>Condition</code>s the last fulfilled <code>Condition</code> determines the <code>Attribute</code> value. But \nthis is not always wanted. Therefore a <code>Condition</code> has a <code>prio</code> and an <code>isActive</code> flag. \nThe <code>prio</code> flag is used to order registered <code>Condition</code>s whereas the <code>isActive</code> flag \nis used to stop their evaluation, i.e. the last active and fulfilled <code>Condition</code> determines the actual \n<code>Attribute</code> value.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "attribute",
                    "description": "The original attribute.",
                    "type": "JSG.graph.attr.Attribute"
                }
            ]
        },
        "JSG.graph.attr.ConstAttribute": {
            "name": "JSG.graph.attr.ConstAttribute",
            "shortname": "ConstAttribute",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ConstAttribute.js",
            "line": 10,
            "description": "A constant attribute is an {{#crossLink \"JSG.graph.attr.Attribute\"}}{{/crossLink}} whose value cannot or should not be \nchanged after its creation. To achieve this all methods which changes the attribute value or expression are overwritten.\nUsually a constant attribute is created from a normal, i.e. mutable, attribute by calling {{#crossLink \"JSG.graph.attr.ConstAttribute/fromAttribute:method\"}}{{/crossLink}}.\nThis is important because this method stores the class name of provided attribute so it can be restored via\n{{#crossLink \"JSG.graph.attr.ConstAttribute/toAttribute:method\"}}{{/crossLink}}.</br>\nConstant attributes are mainly used as content of a {{#crossLink \"JSG.graph.attr.ConstAttributeList\"}}{{/crossLink}}.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "A unique Attribute name.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "An Attribute value expression",
                    "type": "JSG.graph.expr.Expression"
                }
            ]
        },
        "JSG.graph.attr.ConstAttributeList": {
            "name": "JSG.graph.attr.ConstAttributeList",
            "shortname": "ConstAttributeList",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ConstAttributeList.js",
            "line": 9,
            "description": "A <code>ConstAttributeList</code> is an immutable {{#crossLink \"JSG.graph.attr.AttributeList\"}}{{/crossLink}}. That \nmeans that after its creation <code>Attribute</code>s cannot, or should not, be added or removed. To achieve this all \nmethods which add or remove <code>Attribute</code>s to or from this list are overwritten. Usually the <code>Attribute</code>s\nof a <code>ConstAttributeList</code> are instances of {{#crossLink \"JSG.graph.attr.ConstAttribute\"}}{{/crossLink}} and \ntherefore immutable too.</br>\nTo create a <code>ConstAttributeList</code> use {{#crossLink \"JSG.graph.attr.ConstAttributeList/fromList:method\"}}{{/crossLink}}\nand to create a mutable list again use {{#crossLink \"JSG.graph.attr.ConstAttributeList/toList:method\"}}{{/crossLink}}.</br>\nThe main usage of a <code>ConstAttributeList</code> is to act as a base class for {{#crossLink \"JSG.graph.attr.Template\"}}{{/crossLink}}s.",
            "extends": "JSG.graph.attr.AttributeList",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "A unique name for this ConstAttributeList",
                    "type": "String"
                },
                {
                    "name": "mapExpr",
                    "description": "An optional MapExpression which contains predefined attributes.",
                    "type": "JSG.graph.expr.MapExpression",
                    "optional": true
                }
            ]
        },
        "JSG.graph.attr.PortMode": {
            "name": "JSG.graph.attr.PortMode",
            "shortname": "PortMode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 9,
            "description": "PortMode definitions. The PortMode defines where a port can be created and an edge can be attached, while hovering over a GraphItem, visualized by a red circle."
        },
        "JSG.graph.attr.SelectionMode": {
            "name": "JSG.graph.attr.SelectionMode",
            "shortname": "SelectionMode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 98,
            "description": "SelectionMode definitions. The SelectionMode defines how a GraphItem can be selected."
        },
        "JSG.graph.attr.Moveable": {
            "name": "JSG.graph.attr.Moveable",
            "shortname": "Moveable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 146,
            "description": "The direction defines if and how a GraphItem can be moved in addition to the direction flags."
        },
        "JSG.graph.attr.Direction": {
            "name": "JSG.graph.attr.Direction",
            "shortname": "Direction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 194,
            "description": "The direction defines if and how a GraphItem expands and collapses."
        },
        "JSG.graph.attr.ButtonPosition": {
            "name": "JSG.graph.attr.ButtonPosition",
            "shortname": "ButtonPosition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 241,
            "description": "The ButtonPosition defines where the collapse button is visualized, if collapsing is enabled."
        },
        "JSG.graph.attr.EditMask": {
            "name": "JSG.graph.attr.EditMask",
            "shortname": "EditMask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 282,
            "description": "Supported edit mask flags. Used to adjust edit behaviour of a {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}."
        },
        "JSG.graph.attr.LineBehavior": {
            "name": "JSG.graph.attr.LineBehavior",
            "shortname": "LineBehavior",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 322,
            "description": "Predefined flags to influence the edge layout behavior.</br>\nSee {{#crossLink \"JSG.graph.model.shapes.OrthoLineShapeLayouter/layout:method\"}}{{/crossLink}}.",
            "static": 1
        },
        "JSG.graph.attr.EdgeAttributes": {
            "name": "JSG.graph.attr.EdgeAttributes",
            "shortname": "EdgeAttributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\EdgeAttributes.js",
            "line": 10,
            "description": "An AttributeList which defines Attributes and default values for {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}s.\nThis list is based on {{#crossLink \"JSG.graph.attr.ItemAttributes\"}}{{/crossLink}}.",
            "extends": "JSG.graph.attr.ItemAttributes",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mapExpr",
                    "description": "An optional MapExpression which contains predefined attributes.",
                    "type": "JSG.graph.expr.MapExpression",
                    "optional": true
                }
            ]
        },
        "JSG.graph.attr.EdgeLayoutAttributes": {
            "name": "JSG.graph.attr.EdgeLayoutAttributes",
            "shortname": "EdgeLayoutAttributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\EdgeLayoutAttributes.js",
            "line": 9,
            "description": "The <code>EdgeLayoutAttributes</code> class adds {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}} \nrelated {{#crossLink \"JSG.graph.attr.Attribute\"}}{{/crossLink}}s to the <code>LayoutAttributes</code>.",
            "extends": "JSG.graph.attr.LayoutAttributes",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mapExpr",
                    "description": "An optional MapExpression which contains predefined attributes.",
                    "type": "JSG.graph.expr.MapExpression",
                    "optional": true
                }
            ]
        },
        "JSG.graph.attr.FormatAttributes": {
            "name": "JSG.graph.attr.FormatAttributes",
            "shortname": "FormatAttributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 8,
            "description": "This AttributeList defines default attributes for formatting a {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}.\nThe members can be used to directly influence the format of a GraphItem including fill and line as well as shadow\nformatting.",
            "example": [
                "\n     var node = new JSG.graph.model.Node();\n     // get format attributes for node\n     var format = node.getFormat();\n     format.setFillColor(\"#FF0000\");\n     format.setLineColor(\"#00FF00\");"
            ],
            "extends": "JSG.graph.attr.AttributeList",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mapExpr",
                    "description": "An optional MapExpression which contains predefined format attributes.",
                    "type": "JSG.graph.expr.MapExpression",
                    "optional": true
                }
            ]
        },
        "JSG.graph.attr.ArrowStyle": {
            "name": "JSG.graph.attr.ArrowStyle",
            "shortname": "ArrowStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 33,
            "description": "ArrowStyle definitions"
        },
        "JSG.graph.attr.LineStyle": {
            "name": "JSG.graph.attr.LineStyle",
            "shortname": "LineStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 292,
            "description": "LineStyle definitions"
        },
        "JSG.graph.attr.LineCap": {
            "name": "JSG.graph.attr.LineCap",
            "shortname": "LineCap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 347,
            "description": "LineCap definitions. Specifies the supported line endings."
        },
        "JSG.graph.attr.FillStyle": {
            "name": "JSG.graph.attr.FillStyle",
            "shortname": "FillStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 375,
            "description": "FillStyle definitions"
        },
        "JSG.graph.attr.GradientStyle": {
            "name": "JSG.graph.attr.GradientStyle",
            "shortname": "GradientStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 405,
            "description": "GradientStyle definitions"
        },
        "JSG.graph.attr.PatternStyle": {
            "name": "JSG.graph.attr.PatternStyle",
            "shortname": "PatternStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 423,
            "description": "PatternStyle definitions"
        },
        "JSG.graph.attr.ShadowDirection": {
            "name": "JSG.graph.attr.ShadowDirection",
            "shortname": "ShadowDirection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 453,
            "description": "ShadowDirection definitions"
        },
        "JSG.graph.attr.ItemAttributes": {
            "name": "JSG.graph.attr.ItemAttributes",
            "shortname": "ItemAttributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 8,
            "description": "This AttributeList defines default attributes for each {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}.\n<b>Note:</b> each setter method has an optional GraphItem parameter. If this is set the Attribute value\nchange is done via passed GraphItem and an {{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "extends": "JSG.graph.attr.AttributeList",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mapExpr",
                    "description": "An optional MapExpression which contains predefined item attributes.",
                    "type": "JSG.graph.expr.MapExpression",
                    "optional": true
                }
            ]
        },
        "JSG.graph.attr.LayoutAttributes": {
            "name": "JSG.graph.attr.LayoutAttributes",
            "shortname": "LayoutAttributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 8,
            "description": "An AttributeList which contains layout {{#crossLink \"JSG.graph.attr.Attribute\"}}{{/crossLink}}s\nfor {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s. These attributes can be used to\ninfluence the way a layout is executed.",
            "extends": "JSG.graph.attr.AttributeList",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mapExpr",
                    "description": "An optional MapExpression which contains predefined attributes.",
                    "type": "JSG.graph.expr.MapExpression",
                    "optional": true
                }
            ]
        },
        "JSG.graph.attr.NumberAttribute": {
            "name": "JSG.graph.attr.NumberAttribute",
            "shortname": "NumberAttribute",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\NumberAttribute.js",
            "line": 8,
            "description": "An Attribute subclass with a {{#crossLink \"JSG.graph.expr.NumberExpression\"}}{{/crossLink}} as value.</br>\n<b>Note:</b> to prevent conflicts with other Attributes the Attribute name should be globally unique, at\nleast within its parent AttributeList.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "A unique Attribute name.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "An optional NumberExpression or Number to use as value.",
                    "type": "Number || JSG.graph.expr.NumberExpression",
                    "optional": true
                }
            ]
        },
        "JSG.graph.attr.ObjectAttribute": {
            "name": "JSG.graph.attr.ObjectAttribute",
            "shortname": "ObjectAttribute",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ObjectAttribute.js",
            "line": 8,
            "description": "An Attribute subclass with an {{#crossLink \"JSG.graph.expr.ObjectExpression\"}}{{/crossLink}} as value.</br>\nPlease refer to {{#crossLink \"JSG.graph.expr.ObjectExpression\"}}{{/crossLink}} for information about\nwhat kind of objects can be stored.\n<b>Note:</b> to prevent conflicts with other Attributes the Attribute name should be globally unique, at\nleast within its parent AttributeList.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "A unique Attribute name.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "An optional ObjectExpression or an Object to use as value.",
                    "type": "Object || JSG.graph.expr.ObjectExpression",
                    "optional": true
                }
            ]
        },
        "JSG.graph.attr.OrthoEdgeLayoutAttributes": {
            "name": "JSG.graph.attr.OrthoEdgeLayoutAttributes",
            "shortname": "OrthoEdgeLayoutAttributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\OrthoEdgeLayoutAttributes.js",
            "line": 9,
            "description": "This class contains some general attributes to define and influence the layout of an \n{{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}} which shape is an instance of\n{{#crossLink \"JSG.graph.model.OrthoLineShape\"}}{{/crossLink}}.",
            "extends": "JSG.graph.attr.EdgeLayoutAttributes",
            "is_constructor": 1
        },
        "JSG.graph.attr.StringAttribute": {
            "name": "JSG.graph.attr.StringAttribute",
            "shortname": "StringAttribute",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\StringAttribute.js",
            "line": 8,
            "description": "An Attribute subclass with a {{#crossLink \"JSG.graph.expr.StringExpression\"}}{{/crossLink}} as value.</br>\n<b>Note:</b> to prevent conflicts with other Attributes the Attribute name should be globally unique, at\nleast within its parent AttributeList.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "A unique Attribute name.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "An optional StringExpression or String to use as value.",
                    "type": "String || JSG.graph.expr.StringExpression",
                    "optional": true
                }
            ]
        },
        "JSG.graph.attr.Template": {
            "name": "JSG.graph.attr.Template",
            "shortname": "Template",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Template.js",
            "line": 9,
            "description": "A <code>Template</code> is a {{#crossLink \"JSG.graph.attr.ConstAttributeList\"}}{{/crossLink}} which is used to globally\npredefine <code>Attributes</code>. It can be used as a parent for any {{#crossLink \"JSG.graph.attr.AttributeList\"}}{{/crossLink}}.\nThe recommended way to create a <code>Template</code> is by using {{#crossLink \"JSG.graph.attr.Template/fromList:method\"}}{{/crossLink}}\nor by simply call {{#crossLink \"JSG.graph.attr.AttributeList/toTemplate:method\"}}{{/crossLink}} from an arbitrary\n<code>AttributeList</code>.<br/>\n<code>Templates</code> are stored using a {{#crossLink \"JSG.graph.attr.TemplateStore\"}}{{/crossLink}} which provides \nglobal access. <b>Note:</b> therefore it is a mandatory that the <code>Template</code> name is globally unique.",
            "extends": "JSG.graph.attr.ConstAttributeList",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "A unique name for this Template.",
                    "type": "String"
                },
                {
                    "name": "mapExpr",
                    "description": "An optional MapExpression which contains predefined attributes.",
                    "type": "JSG.graph.expr.MapExpression",
                    "optional": true
                }
            ]
        },
        "JSG.graph.attr.TemplateStore": {
            "name": "JSG.graph.attr.TemplateStore",
            "shortname": "TemplateStore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TemplateStore.js",
            "line": 9,
            "description": "A <code>TemplateStore</code> is a simple <code>AttributeList</code> subclass to manage a list of \n{{#crossLink \"JSG.graph.attr.Template\"}}{{/crossLink}}s which can be used as parents for arbitrary\n{{#crossLink \"JSG.graph.attr.AttributeList\"}}{{/crossLink}}s.<br/>\nTo add a <code>Template</code> call {{#crossLink \"JSG.graph.attr.TemplateStore/addTemplate:method\"}}{{/crossLink}}.\n<b>Important:</b> adding a <code>Template</code> will be ignored if the store contains already a <code>Template</code> \nof same name. In order to change a <code>Template</code> use {{#crossLink \"JSG.graph.attr.TemplateStore/updateTemplate:method\"}}{{/crossLink}}.<br/>\nFinally note that an instance of this store is globally accessible via {{#crossLink \"JSG/TemplateStore:property\"}}{{/crossLink}}.",
            "extends": "JSG.graph.attr.AttributeList",
            "params": [
                {
                    "name": "mapExpr",
                    "description": "An optional MapExpression which contains predefined <code>Template</code>s.",
                    "type": "JSG.graph.expr.MapExpression",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.attr.TextFormatAttributes": {
            "name": "JSG.graph.attr.TextFormatAttributes",
            "shortname": "TextFormatAttributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 8,
            "description": "This AttributeList defines default attributes for text format of a {{#crossLink \"JSG.graph.model.TextNode\"}}{{/crossLink}}.\nThe members can be used to directly influence the textformat of a TextNode.",
            "example": [
                "\n     var node = new JSG.graph.model.Node();\n     var label = node.addLabel(\"Test\");\n     // get textformat attributes for node\n     var textformat = label.getTextFormat();\n     // set text to 10 pt and green.\n     textformat.setFontSize(10);\n     textformat.setFontColor(\"#00FF00\");"
            ],
            "extends": "JSG.graph.attr.AttributeList",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mapExpr",
                    "description": "An optional MapExpression which contains predefined format attributes.",
                    "type": "JSG.graph.expr.MapExpression",
                    "optional": true
                }
            ]
        },
        "JSG.graph.attr.TextFormatAttributes.TextAlignment": {
            "name": "JSG.graph.attr.TextFormatAttributes.TextAlignment",
            "shortname": "JSG.graph.attr.TextFormatAttributes.TextAlignment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 32,
            "description": "Text alignment definitions"
        },
        "JSG.graph.attr.TextFormatAttributes.TextBaseline": {
            "name": "JSG.graph.attr.TextFormatAttributes.TextBaseline",
            "shortname": "JSG.graph.attr.TextFormatAttributes.TextBaseline",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 56,
            "description": "Text baseline definitions. This class specifies constants for supported font baseline values which define a vertical \ntext alignment.",
            "since": "1.6.3"
        },
        "JSG.graph.attr.TextFormatAttributes.VerticalTextPosition": {
            "name": "JSG.graph.attr.TextFormatAttributes.VerticalTextPosition",
            "shortname": "JSG.graph.attr.TextFormatAttributes.VerticalTextPosition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 101,
            "description": "Text position definitions"
        },
        "JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition": {
            "name": "JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition",
            "shortname": "JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 167,
            "description": "Text position definitions"
        },
        "JSG.graph.attr.TextFormatAttributes.FontStyle": {
            "name": "JSG.graph.attr.TextFormatAttributes.FontStyle",
            "shortname": "JSG.graph.attr.TextFormatAttributes.FontStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 209,
            "description": "FontStyle definitions"
        },
        "JSG.graph.attr.TextNodeAttributes": {
            "name": "JSG.graph.attr.TextNodeAttributes",
            "shortname": "TextNodeAttributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextNodeAttributes.js",
            "line": 8,
            "description": "An AttributeList which defines Attributes and default values for {{#crossLink \"JSG.graph.model.TextNode\"}}{{/crossLink}}s.\nThis list is based on {{#crossLink \"JSG.graph.attr.ItemAttributes\"}}{{/crossLink}}.",
            "extends": "JSG.graph.attr.ItemAttributes",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mapExpr",
                    "description": "An optional MapExpression which contains predefined attributes.",
                    "type": "JSG.graph.expr.MapExpression",
                    "optional": true
                }
            ]
        },
        "JSG.graph.attr.TextNodeAttributes.SizeMode": {
            "name": "JSG.graph.attr.TextNodeAttributes.SizeMode",
            "shortname": "JSG.graph.attr.TextNodeAttributes.SizeMode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextNodeAttributes.js",
            "line": 23,
            "description": "Size mode definitions.</br>\nThese constants influence how the size of a {{#crossLink \"JSG.graph.model.TextNode\"}}{{/crossLink}}\nis calculated."
        },
        "JSG.graph.attr.WatermarkAttributes": {
            "name": "JSG.graph.attr.WatermarkAttributes",
            "shortname": "WatermarkAttributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 8,
            "description": "This AttributeList defines default attributes for a watermark. A watermark can be defined\nto display text information in the background of a node.",
            "example": [
                "\n     var node = new JSG.graph.model.Node();\n     var mark = node.addWatermark(\"Demo\");\n     mark.setFontSize(12);"
            ],
            "extends": "JSG.graph.attr.AttributeList",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mapExpr",
                    "description": "An optional MapExpression which contains predefined format attributes.",
                    "type": "JSG.graph.expr.MapExpression",
                    "optional": true
                }
            ],
            "since": "1.6.7"
        },
        "JSG.graph.attr.WatermarkAttributes.VerticalPosition": {
            "name": "JSG.graph.attr.WatermarkAttributes.VerticalPosition",
            "shortname": "JSG.graph.attr.WatermarkAttributes.VerticalPosition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 29,
            "description": "Watermark position definitions",
            "since": "1.6.7"
        },
        "JSG.graph.attr.WatermarkAttributes.HorizontalPosition": {
            "name": "JSG.graph.attr.WatermarkAttributes.HorizontalPosition",
            "shortname": "JSG.graph.attr.WatermarkAttributes.HorizontalPosition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr",
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 64,
            "description": "Watermark position definitions"
        },
        "JSG.graph.command.AbstractGroupUngroupCommand": {
            "name": "JSG.graph.command.AbstractGroupUngroupCommand",
            "shortname": "AbstractGroupUngroupCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AbstractGroupUngroupCommand.js",
            "line": 8,
            "description": "Base class for {{#crossLink \"JSG.graph.command.GroupItemsCommand\"}}{{/crossLink}} and \n{{#crossLink \"JSG.graph.command.UnGroupItemsCommand\"}}{{/crossLink}} commands. It provides methods to group and \nungroup items, which are used in the derived classes. This class does not provide undo, redo or execute implementations and\ntherefore should not be used on its own.</br>\nThe creation of a new group object is done by",
            "extends": "JSG.graph.command.Command",
            "is_constructor": 1,
            "params": [
                {
                    "name": "creator",
                    "description": "An optional object to create and initialize a new group item. If not provided the\n{{#crossLink \"JSG.graph.command.GroupCreator\"}}{{/crossLink}} object will be used.",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "JSG.graph.command.GroupCreator": {
            "name": "JSG.graph.command.GroupCreator",
            "shortname": "GroupCreator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AbstractGroupUngroupCommand.js",
            "line": 221,
            "description": "The default object used by {{#crossLink \"JSG.graph.command.AbstractGroupUngroupCommand\"}}{{/crossLink}} to create and \ninitialize a new {{#crossLink \"JSG.graph.model.Group\"}}{{/crossLink}} item.</br>\nTo create this object simply call <code>JSG.graph.command.GroupCreator()</code>, i.e. without <code>new</code>.",
            "is_constructor": 1
        },
        "JSG.graph.command.GroupCreatorSimple": {
            "name": "JSG.graph.command.GroupCreatorSimple",
            "shortname": "GroupCreatorSimple",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AbstractGroupUngroupCommand.js",
            "line": 274,
            "description": "Another object to create a simple group based on a rectangle {{#crossLink \"JSG.graph.model.Group\"}}{{/crossLink}}.</br>\nPlease refer to {{#crossLink \"JSG.graph.command.GroupCreator\"}}{{/crossLink}} too.",
            "is_constructor": 1
        },
        "JSG.graph.command.AbstractItemCommand": {
            "name": "JSG.graph.command.AbstractItemCommand",
            "shortname": "AbstractItemCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AbstractItemCommand.js",
            "line": 8,
            "description": "The AbstractItemCommand is the base class for all single item related commands. It\nstores the affected command and the selection status of the item. It should only be\nused as a base class, as it does not provide any operation.",
            "extends": "JSG.graph.command.Command",
            "is_constructor": 1,
            "params": [
                {
                    "name": "graphItem",
                    "description": "GraphItem to be handled by the Command.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ]
        },
        "JSG.graph.command.AbstractItemCommandProxy": {
            "name": "JSG.graph.command.AbstractItemCommandProxy",
            "shortname": "AbstractItemCommandProxy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AbstractItemCommandProxy.js",
            "line": 8,
            "description": "An AbstractItemCommandProxy can be used to wrap an {{#crossLink \"JSG.graph.command.AbstractItemCommand\"}}{{/crossLink}} instance.\nThis can be useful if you need to hide the actual internal command representation.</br>\n<b>Note:</b> although this proxy wraps an AbstractItemCommand it is not an instance of it but of\nCommandProxy.",
            "params": [
                {
                    "name": "cmd",
                    "description": "The AbstractItemCommand instance to wrap.",
                    "type": "JSG.graph.command.Command"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.command.AddAttributeCommand": {
            "name": "JSG.graph.command.AddAttributeCommand",
            "shortname": "AddAttributeCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AddAttributeCommand.js",
            "line": 8,
            "description": "Command to add a new attribute to a GraphItem.",
            "example": [
                "\n    // InteractionHandler and GraphItem given\n    // Assigning a new attribute to an item.\n    var cmd = new JSG.graph.command.AddAttributeCommand(item, \"CUSTOM:NAME\", \"NAME\", \"Michael\");\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "The GraphItem to add the attribute value to.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "path",
                    "description": "A complete attribute path, i.e. a single path of Attribute names. If left out, the attribute will be added to the base path.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Attribute name.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new attribute value or expression.",
                    "type": "JSG.graph.expr.Expression | Object"
                }
            ],
            "since": "1.6.0"
        },
        "JSG.graph.command.AddItemCommand": {
            "name": "JSG.graph.command.AddItemCommand",
            "shortname": "AddItemCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AddItemCommand.js",
            "line": 8,
            "description": "This command adds a GraphItem to another GraphItem, if the command gets executed.",
            "example": [
                "\n    // parent can be the Graph or another GraphItem.\n    var newItem = new JSG.graph.model.GraphItem(new JSG.graph.model.shapes.RectangleShape());\n    var cmd = new JSG.graph.command.AddItemCommand(newItem, parent);\n    interactionHandler.execute(cmd);"
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "params": [
                {
                    "name": "newItem",
                    "description": "GraphItem to be added.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "parent",
                    "description": "GraphItem to add this newItem as a sub item to.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "index",
                    "description": "Optional. Target position in list of item to be added (optional). Default value is undefined, which will add the item\nto the end of the list.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.command.AddLabelCommand": {
            "name": "JSG.graph.command.AddLabelCommand",
            "shortname": "AddLabelCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AddLabelCommand.js",
            "line": 8,
            "description": "A command that handles adding a label to a GraphItem. The label is added as a sub item of the parent item provided,\nif the command gets executed.",
            "example": [
                "\n    var parent = new JSG.graph.model.GraphItem(new JSG.graph.model.shapes.RectangleShape());\n    var cmd = new JSG.graph.command.AddLabelCommand(parent, \"New Label\");\n    interactionHandler.execute(cmd);"
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "parent",
                    "description": "Parent item of the label.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "text",
                    "description": "Text content of the label.",
                    "type": "String"
                }
            ]
        },
        "JSG.graph.command.AddPortCommand": {
            "name": "JSG.graph.command.AddPortCommand",
            "shortname": "AddPortCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AddPortCommand.js",
            "line": 8,
            "description": "A command to add a port to a node. The location of the port must be defined to place the port.",
            "example": [
                "\n    // using an existing parent node and interactionhandler\n    // Create a port at the vertical center of the left border\n    var cmd = new JSG.graph.command.AddPortCommand(new JSG.graph.model.Port(), new JSG.geometry.Point(0, 0.5), parentNode, true);\n    interactionHandler.execute(cmd);\n    interactionHandler.undo();   //undo command\n    interactionHandler.redo();   //redo it again"
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "port",
                    "description": "Port to add.",
                    "type": "JSG.graph.model.Port"
                },
                {
                    "name": "location",
                    "description": "Point with location of the port. If relative is true, the x and y values define the fraction of the extent of the node, where the\nports shall be placed, e.g. 0.5, 0.5 places the port at the center of the node. If relative is false, the given location coordinates are used to calculate the relative position.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "parent",
                    "description": "Node to add the port to.",
                    "type": "JSG.graph.model.Node"
                },
                {
                    "name": "relative",
                    "description": "True, if location is given as a relative position between 0 and 1 within the node, false, if position is given in coordinates. Default value is false.",
                    "type": "Boolean",
                    "optional": true
                }
            ]
        },
        "JSG.graph.command.Alignment": {
            "name": "JSG.graph.command.Alignment",
            "shortname": "Alignment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AlignItemsCommand.js",
            "line": 8,
            "description": "Alignment definitions"
        },
        "JSG.graph.command.AlignItemsCommand": {
            "name": "JSG.graph.command.AlignItemsCommand",
            "shortname": "AlignItemsCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AlignItemsCommand.js",
            "line": 71,
            "description": "The AlignItemsCommand provides a command to align selected GraphItems using different alignment flags.\n The following example creates AlignItemsCommand and executes it. Using the interaction handler it is automatically added to the undo/redo stack.",
            "example": [
                "\n     var alignCommand = new AlignItemsCommand(items, AlignItem_ToCenter);\n     interactionHandler.execute(alignCommand);"
            ],
            "extends": "JSG.graph.command.Command",
            "is_constructor": 1,
            "params": [
                {
                    "name": "items",
                    "description": "Array of GraphItemControllers to align.",
                    "type": "JSG.graph.controller.GraphItemController[]"
                },
                {
                    "name": "alignFlag",
                    "description": "Defines the alignment direction to use.",
                    "type": "JSG.graph.command.Alignment"
                }
            ]
        },
        "JSG.graph.command.AttachCommand": {
            "name": "JSG.graph.command.AttachCommand",
            "shortname": "AttachCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AttachCommand.js",
            "line": 8,
            "description": "This command attaches an edge to a port.",
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "edge",
                    "description": "Edge to attach to the port. The edge must be part of the graph already.",
                    "type": "JSG.graph.model.Edge"
                },
                {
                    "name": "toPort",
                    "description": "Port to attach the edge to. The port must already be part of a Node.",
                    "type": "JSG.graph.model.Port"
                },
                {
                    "name": "isSourcePort",
                    "description": "True, if the edge uses the Port as a source or starting point, otherwise false.",
                    "type": "Boolean"
                }
            ]
        },
        "JSG.graph.command.ChangeAttributeCommand": {
            "name": "JSG.graph.command.ChangeAttributeCommand",
            "shortname": "ChangeAttributeCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\ChangeAttributeCommand.js",
            "line": 8,
            "description": "Command to change the value of a GraphItem attribute.",
            "example": [
                "\n    // InteractionHandler and GraphItem given\n    // Assigning a new fillcolor to an item.\n    var cmd = new JSG.graph.command.ChangeAttributeCommand(item, \"FORMAT:FILLCOLOR\", \"#FF0000\");\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "The GraphItem to change the attribute value of.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "path",
                    "description": "A complete attribute path, i.e. a single path of Attribute names.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new attribute value or expression.",
                    "type": "JSG.graph.expr.Expression | Object"
                },
                {
                    "name": "oldValue",
                    "description": "The old attribute value or expression.",
                    "type": "JSG.graph.expr.Expression | Object",
                    "optional": true
                }
            ]
        },
        "JSG.graph.command.ChangeItemOrder": {
            "name": "JSG.graph.command.ChangeItemOrder",
            "shortname": "ChangeItemOrder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\ChangeItemOrderCommand.js",
            "line": 8,
            "description": "ChangeItemOrder definitions"
        },
        "JSG.graph.command.ChangeItemOrderCommand": {
            "name": "JSG.graph.command.ChangeItemOrderCommand",
            "shortname": "ChangeItemOrderCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\ChangeItemOrderCommand.js",
            "line": 43,
            "description": "This command allows to change the order items are arranged within a container. This influences the drawing and selection order.\nItems on top are drawn last (on top) and selected first.",
            "example": [
                "\n    // given interactionhandler, change drawing order of first selected item.\n    var selection = interactionhandler.viewer.getSelection();\n    var cmd = new JSG.graph.command.ChangeItemOrderCommand(selection[0], JSG.graph.command.ChangeItemOrder.TOTOP);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.Command",
            "is_constructor": 1,
            "params": [
                {
                    "name": "controller",
                    "description": "Controller of GraphItem to change.",
                    "type": "JSG.graph.controller.GraphItemController"
                },
                {
                    "name": "targetPosition",
                    "description": "Flag, that indicates the move operation to execute.",
                    "type": "JSG.graph.command.ChangeItemOrder"
                }
            ]
        },
        "JSG.graph.command.ChangeParentCommand": {
            "name": "JSG.graph.command.ChangeParentCommand",
            "shortname": "ChangeParentCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\ChangeParentCommand.js",
            "line": 8,
            "description": "This commands changes the parent item of a GraphItem. This is used e.g. to assign a GraphItem to another container GraphItem.",
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "Item whose parent is subject to change.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "parent",
                    "description": "New parent GraphItem for given item.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ]
        },
        "JSG.graph.command.CollapseItemCommand": {
            "name": "JSG.graph.command.CollapseItemCommand",
            "shortname": "CollapseItemCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CollapseItemCommand.js",
            "line": 8,
            "description": "Command to collapse or expand a GraphItem.<br/>\nThis command consists of two sub-commands, namely a {{#crossLink \"JSG.graph.command.ChangeAttributeCommand\"}}{{/crossLink}}\nto set the collapse state and a {{#crossLink \"JSG.graph.command.TranslateItemCommand\"}}{{/crossLink}}\nto move the GraphItem into correct position afterwards.",
            "example": [
                "\n    // item and interactionhandler given\n    var cmd = new JSG.graph.command.CollapseItemCommand(item);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.CompoundCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "graphItem",
                    "description": "GraphItem to be collapsed or expanded.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ]
        },
        "JSG.graph.command.Command": {
            "name": "JSG.graph.command.Command",
            "shortname": "Command",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\Command.js",
            "line": 13,
            "description": "The Command class is the abstract base class of all commands and simply defines the methods each\nimplementation must at least provide.\n\nA command should be used whenever undo/redo support is required.\n\nCommands are executed by the {{#crossLink \"JSG.graph.interaction.InteractionHandler\"}}{{/crossLink}} which takes care of adding them to the\n{{#crossLink \"JSG.graph.command.CommandStack\"}}{{/crossLink}} for undo/redo support.",
            "example": [
                "\n    var cmd = new JSG.graph.command.Command();\n    interactionHandler.execute(cmd);\n\n    //undo command\n    interactionHandler.undo();\n\n    //redo it again\n    interactionHandler.redo();"
            ],
            "is_constructor": 1
        },
        "JSG.graph.command.CommandProxy": {
            "name": "JSG.graph.command.CommandProxy",
            "shortname": "CommandProxy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CommandProxy.js",
            "line": 8,
            "description": "A CommandProxy can be used to wrap a {{#crossLink \"JSG.graph.command.Command\"}}{{/crossLink}} instance.\nThis can be useful if you need to hide the actual internal command representation.",
            "params": [
                {
                    "name": "cmd",
                    "description": "The Command instance to wrap.",
                    "type": "JSG.graph.command.Command"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.command.CommandStack": {
            "name": "JSG.graph.command.CommandStack",
            "shortname": "CommandStack",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CommandStack.js",
            "line": 8,
            "description": "The CommandStack organizes the executed commands. After a command is created, it should executed via the CommandStack. The CommandStack saves the executed\ncommands in the order they are executed in an undo list and allows to undo the commands by retrieving the command from the saved command list. An undone command\ncan be redone, as undone commands are also saved. If the commands are executed via the InteractionHandler, the CommandStack is automatically involved. All interactions\nuse the InteractionHandler and therefore register the commands resulting from an interaction using the provided CommandStack. This is the recommended approach.\nTherefore this class should normally not be used externally.",
            "is_constructor": 1
        },
        "JSG.graph.command.CompoundCommand": {
            "name": "JSG.graph.command.CompoundCommand",
            "shortname": "CompoundCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CompoundCommand.js",
            "line": 8,
            "description": "The CompoundCommand contains an array of Commands. This way an operation that consists of multiple commands can be combined into\none command an then added to the undo/redo stack, which will result in only one undo/redo operation for multiple commands.</br>\nBy default the Commands are traversed in <code>lifo</code> order during the undo step, i.e. undo starts at the last added Command.\nTo reverse this order simply set <code>reverseUndo</code> parameter to <code>true</code>.</br>\nFinally note that it is possible to disable refresh notifications of involved {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s.\nTo make this work sub commands should provide a <code>getItem</code> method. E.g.\n{{#crossLink \"JSG.graph.command.AbstractItemCommand\"}}{{/crossLink}} provides such a method.",
            "extends": "JSG.graph.command.Command",
            "is_constructor": 1,
            "params": [
                {
                    "name": "reverseUndo",
                    "description": "Set to <code>true</code> to traverse Commands in reverse order during undo.",
                    "type": "Boolean",
                    "optional": true
                }
            ]
        },
        "JSG.graph.command.DeleteEdgeCommand": {
            "name": "JSG.graph.command.DeleteEdgeCommand",
            "shortname": "DeleteEdgeCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\DeleteEdgeCommand.js",
            "line": 8,
            "description": "This command manages the removal of an edge from the graph. The edge is also detached from any port it might be connected to.",
            "extends": "JSG.graph.command.CompoundCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "Edge to remove.",
                    "type": "JSG.graph.model.Edge"
                }
            ]
        },
        "JSG.graph.command.DeleteItemCommand": {
            "name": "JSG.graph.command.DeleteItemCommand",
            "shortname": "DeleteItemCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\DeleteItemCommand.js",
            "line": 8,
            "description": "Command to delete a GraphItem.",
            "example": [
                "\n    // item and interactionhandler given\n    var cmd = new JSG.graph.command.DeleteItemCommand(item);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.CompoundCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "graphItem",
                    "description": "GraphItem to be deleted.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ]
        },
        "JSG.graph.command.DeleteNodeCommand": {
            "name": "JSG.graph.command.DeleteNodeCommand",
            "shortname": "DeleteNodeCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\DeleteNodeCommand.js",
            "line": 8,
            "description": "Command to delete a Node.<br/>\n<b>Note:</b> before given note is deleted it will be detached from its {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}s.\nTherefore a {{#crossLink \"JSG.graph.command.DetachCommand\"}}{{/crossLink}} is added for each attached edge. Subclasses can\noverwrite {{#crossLink \"JSG.graph.command.DeleteNodeCommand/createDetachCommand:method\"}}{{/crossLink}}\nto create a custom detach command.",
            "example": [
                "\n    // item and interactionhandler given\n    var cmd = new JSG.graph.command.DeleteNodeCommand(item);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.CompoundCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "node",
                    "description": "Node to be deleted.",
                    "type": "JSG.graph.model.Node"
                }
            ]
        },
        "JSG.graph.command.DeletePortCommand": {
            "name": "JSG.graph.command.DeletePortCommand",
            "shortname": "DeletePortCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\DeletePortCommand.js",
            "line": 8,
            "description": "Command to delete a Port.",
            "example": [
                "\n    // port and interactionhandler given\n    var cmd = new JSG.graph.command.DeletePortCommand(port);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.Command",
            "is_constructor": 1,
            "params": [
                {
                    "name": "port",
                    "description": "Port to be deleted.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ]
        },
        "JSG.graph.command.DetachCommand": {
            "name": "JSG.graph.command.DetachCommand",
            "shortname": "DetachCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\DetachCommand.js",
            "line": 8,
            "description": "CompundCommand to detach an edge from a port. If the port is not used any more, it will also be deleted. This \nway two commands are created and bundled in a CompoundCommand",
            "example": [
                "\n    // edge, port and interactionhandler given \n    var cmd = new JSG.graph.command.DetachCommand(edge, port);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo(); \n    //redo it again\n    interactionHandler.redo(); "
            ],
            "extends": "JSG.graph.command.CompoundCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "edge",
                    "description": "Edge that is removed from a port.",
                    "type": "JSG.graph.model.Edge"
                },
                {
                    "name": "fromPort",
                    "description": "Port to remove the edge from.",
                    "type": "JSG.graph.model.Port"
                }
            ]
        },
        "JSG.graph.command.DropItemCommand": {
            "name": "JSG.graph.command.DropItemCommand",
            "shortname": "DropItemCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\DropItemCommand.js",
            "line": 4,
            "description": "This command is used by {{#crossLink \"JSG.graph.interaction.DragDropInteraction\"}}{{/crossLink}}\nto drop a custom {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} from a\n{{#crossLink \"JSG.ui.shapelibrary.ShapeLibrary\"}}{{/crossLink}} to a {{#crossLink \"JSG.ui.GraphEditor\"}}{{/crossLink}}.</br>\nTo configure this command an options object should be passed to the constructor which has following\nproperties:\n<code>\n libId: {String} the item library id,\n libName: {String} the item library name,\n newPinPoint: {JSG.geometry.Point} the new pin location as point,\n target: {JSG.graph.controller.ModelController} the target controller to drop item at,\n editor: {JSG.ui.GraphEditor} the graph editor to perform the drop on,\n angle: {Number} optional start angle of dropped item, by default it is 0. Set to -1 to apply the\n              angle of drop target.\n</code>",
            "extends": "JSG.graph.command.Command",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options object to configure this command.",
                    "type": "Object"
                }
            ]
        },
        "JSG.graph.command.FormatItemCommand": {
            "name": "JSG.graph.command.FormatItemCommand",
            "shortname": "FormatItemCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\FormatItemCommand.js",
            "line": 8,
            "description": "Command to apply a given format to an item.<br/>\nTo apply only several format attributes to an item use {{#crossLink \"JSG.graph.command.FormatMapCommand\"}}{{/crossLink}}.",
            "example": [
                "\n    // interactionhandler given\n    var format = new JSG.graph.attr.FormatAttributes();\n    // set fill color to red\n    format.setFillColor(\"#FF0000\");\n    var cmd = new JSG.graph.command.FormatItemCommand(item, format);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "GraphItem to be formatted.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "newFormat",
                    "description": "Format to be applied.",
                    "type": "JSG.graph.attr.FormatAttributes.Format"
                }
            ]
        },
        "JSG.graph.command.GroupItemsCommand": {
            "name": "JSG.graph.command.GroupItemsCommand",
            "shortname": "GroupItemsCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\GroupItemsCommand.js",
            "line": 8,
            "description": "Command to group the selected items in one group by adding them as subitems to a new created item.\nThe items will automatically resize with the group item by using formulas.",
            "example": [
                "\n    // interactionhandler given\n    var cmd = new JSG.graph.command.GroupItemsCommand(interactionHandler.viewer.getSelection());\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.AbstractGroupUngroupCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "selection",
                    "description": "Array of controllers to group.",
                    "type": "JSG.graph.controller.GraphItemController[]"
                },
                {
                    "name": "creator",
                    "description": "An optional object to create and initialize a new group item. If not provided the\n{{#crossLink \"JSG.graph.command.GroupCreator\"}}{{/crossLink}} object will be used.",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "JSG.graph.command.InsertLinePointsAtCommand": {
            "name": "JSG.graph.command.InsertLinePointsAtCommand",
            "shortname": "InsertLinePointsAtCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\InsertLinePointsAtCommand.js",
            "line": 8,
            "description": "Command to insert one or more points into a polyline or polygon.",
            "example": [
                "\n    // interactionhandler and item given\n    // insert 2 new points at index 2\n    var points = [];\n    points.push(new JSG.geometry.Point(300, 300));\n    points.push(new JSG.geometry.Point(500, 500));\n    var cmd = new JSG.graph.command.InsertLinePointsAtCommand(item, 2, points);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "GraphItem to be formatted.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "index",
                    "description": "Index, where the points shall be inserted.",
                    "type": "Number"
                },
                {
                    "name": "newpoints",
                    "description": "Array with the to be inserted points.",
                    "type": "JSG.geometry.Point[]"
                }
            ]
        },
        "JSG.graph.command.InternalDeleteItemCommand": {
            "name": "JSG.graph.command.InternalDeleteItemCommand",
            "shortname": "InternalDeleteItemCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\InternalDeleteItemCommand.js",
            "line": 8,
            "description": "Command to to delete an item and remove it from its parent.",
            "example": [
                "\n    // interactionhandler and item given\n    var cmd = new JSG.graph.command.InternalDeleteItemCommand(graphItem);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "GraphItem to be deleted.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ]
        },
        "JSG.graph.command.InternalMoveItemCommand": {
            "name": "JSG.graph.command.InternalMoveItemCommand",
            "shortname": "InternalMoveItemCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\InternalMoveItemCommand.js",
            "line": 8,
            "description": "Command to move a GraphItem to a new location.",
            "example": [
                "\n    // interactionhandler and item given \n    // move item to (1cm, 1cm)\n    var cmd = new JSG.graph.command.InternalMoveItemCommand(item, new JSG.geometry.Point(1000, 1000));\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo(); \n    //redo it again\n    interactionHandler.redo(); "
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "GraphItem to be moved.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "newPinPoint",
                    "description": "The new Pin location relative to its parent.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "access": "private",
            "tagname": ""
        },
        "JSG.graph.command.InternalResizeItemCommand": {
            "name": "JSG.graph.command.InternalResizeItemCommand",
            "shortname": "InternalResizeItemCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\InternalResizeItemCommand.js",
            "line": 8,
            "description": "Command to resize an object or set a new bounding box.",
            "example": [
                "\n\n    // interactionhandler and item given\n    // resizing an item to assign a vertical and horizontal size of 2 cm, while keeping the position.\n    var box = new JSG.geometry.BoundingBox(2000, 2000);\n    var origin = item.getOrigin();\n    box.setTopLeft(origin);\n    var cmd = new JSG.graph.command.InternalResizeItemCommand(item, box);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "GraphItem or line to change.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "bbox",
                    "description": "New item dimensions.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ]
        },
        "JSG.graph.command.InternalRotateItemCommand": {
            "name": "JSG.graph.command.InternalRotateItemCommand",
            "shortname": "InternalRotateItemCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\InternalRotateItemCommand.js",
            "line": 8,
            "description": "Internal command to rotate an item.",
            "example": [
                "\n\n    // interactionhandler and item given \n    var cmd = new JSG.graph.command.InternalRotateItemCommand(item);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo(); \n    //redo it again\n    interactionHandler.redo(); "
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "GraphItem to rotate.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "angle",
                    "description": "The rotation angle in radiant.",
                    "type": "Number"
                },
                {
                    "name": "point",
                    "description": "An optional rotation point.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": ""
        },
        "JSG.graph.command.MoveEdgeCommand": {
            "name": "JSG.graph.command.MoveEdgeCommand",
            "shortname": "MoveEdgeCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\MoveEdgeCommand.js",
            "line": 8,
            "description": "Command to move an Edge to a new location.",
            "example": [
                "\n    // InteractionHandler and Edge given \n    // move edge to (1cm, 1cm)\n    var cmd = new JSG.graph.command.MoveNodeCommand(item, new JSG.geometry.Point(1000, 1000));\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo(); \n    //redo it again\n    interactionHandler.redo(); "
            ],
            "extends": "JSG.graph.command.InternalMoveItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "edge",
                    "description": "The edge to be moved.",
                    "type": "JSG.graph.model.Edge"
                },
                {
                    "name": "newPinPoint",
                    "description": "The new Pin location relative to its parent.",
                    "type": "JSG.geometry.Point"
                }
            ]
        },
        "JSG.graph.command.MoveItemCommand": {
            "name": "JSG.graph.command.MoveItemCommand",
            "shortname": "MoveItemCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\MoveItemCommand.js",
            "line": 8,
            "description": "Command to move a GraphItem to a new location.",
            "example": [
                "\n    // interactionhandler and item given \n    // move item to (1cm, 1cm)\n    var cmd = new JSG.graph.command.MoveItemCommand(item, new JSG.geometry.Point(1000, 1000));\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo(); \n    //redo it again\n    interactionHandler.redo(); "
            ],
            "extends": "JSG.graph.command.AbstractItemCommandProxy",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "GraphItem to be moved.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "newPinPoint",
                    "description": "The new Pin location relative to its parent.",
                    "type": "JSG.geometry.Point"
                }
            ]
        },
        "JSG.graph.command.MoveNodeCommand": {
            "name": "JSG.graph.command.MoveNodeCommand",
            "shortname": "MoveNodeCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\MoveNodeCommand.js",
            "line": 8,
            "description": "Command to move a Node to a new location.",
            "example": [
                "\n    // InteractionHandler and Node given \n    // move node to (1cm, 1cm)\n    var cmd = new JSG.graph.command.MoveNodeCommand(item, new JSG.geometry.Point(1000, 1000));\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo(); \n    //redo it again\n    interactionHandler.redo(); "
            ],
            "extends": "JSG.graph.command.InternalMoveItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "node",
                    "description": "The node to be moved.",
                    "type": "JSG.graph.model.Node"
                },
                {
                    "name": "newPinPoint",
                    "description": "The new Pin location relative to its parent.",
                    "type": "JSG.geometry.Point"
                }
            ]
        },
        "JSG.graph.command.NoOpCommand": {
            "name": "JSG.graph.command.NoOpCommand",
            "shortname": "NoOpCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\NoOpCommand.js",
            "line": 9,
            "description": "This command does nothing and therefore will neither be executed nor added to the undo/redo \n{{#crossLink \"JSG.graph.command.CommandStack\"}}{{/crossLink}}. It can be used in situations where\na Command must be created although its actually not required. E.g. as a return value when returning \n<code>undefined</code> is not an option.",
            "extends": "JSG.graph.command.Command",
            "is_constructor": 1
        },
        "JSG.graph.command.PasteItemsCommand": {
            "name": "JSG.graph.command.PasteItemsCommand",
            "shortname": "PasteItemsCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\PasteItemsCommand.js",
            "line": 7,
            "description": "The PasteItemsCommand provides a command to paste previously copied items from the internal clipboard. If you copy a selection\nthe result stream will be stored in the global JSG.clipXML variable. This can be used for pasting items.",
            "example": [
                "\n    // interactionhandler and item given\n    // Paste from previously copied xml stream. The items are pasted using an offset of 200, 200 units.\n    var cmd = new JSG.graph.command.PasteItemsCommand(JSG.clipXML, interactionHandler.viewer, new JSG.geometry.Point(200, 200), undefined);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.Command",
            "is_constructor": 1,
            "params": [
                {
                    "name": "xml",
                    "description": "String representing an XML structure describing the items to be inserted.",
                    "type": "String"
                },
                {
                    "name": "viewer",
                    "description": "Current GraphViewer.",
                    "type": "JSG.ui.viewer.GraphViewer"
                },
                {
                    "name": "target",
                    "description": "Controller or GraphItem to add the inserted items to.\nIf not specified the items will be added to the graph. Otherwise the items will be added as sub-items to the given controller or GraphItem.",
                    "type": "JSG.graph.controller.GraphItemController|JSG.graph.controller.GraphItem",
                    "optional": true
                },
                {
                    "name": "offset",
                    "description": "Offset to move items by after they have been inserted. If specified\nthis offset is taken no matter what. If not given an offset is calculated.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ]
        },
        "JSG.graph.command.RemoveAttributeCommand": {
            "name": "JSG.graph.command.RemoveAttributeCommand",
            "shortname": "RemoveAttributeCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\RemoveAttributeCommand.js",
            "line": 8,
            "description": "Command to remove an attribute from a GraphItem.",
            "example": [
                "\n    // InteractionHandler and GraphItem given\n    var cmd = new JSG.graph.command.RemoveAttributeCommand(item, \"CUSTOM:NAME\");\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "The GraphItem to remove the attribute from.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "path",
                    "description": "A complete attribute path, i.e. a single path of Attribute names.",
                    "type": "String"
                }
            ],
            "since": "1.6.0"
        },
        "JSG.graph.command.RemoveLinePointsCommand": {
            "name": "JSG.graph.command.RemoveLinePointsCommand",
            "shortname": "RemoveLinePointsCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\RemoveLinePointsCommand.js",
            "line": 8,
            "description": "The RemoveLinePointsCommand provides a command to remove points from a polygon or polyline shape.",
            "example": [
                "\n    // interactionhandler and item given\n    // Remove the third point in a polyline.\n    var indices = [];\n    indices.push(2);\n    var cmd = new JSG.graph.command.RemoveLinePointsCommand(item, indices);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "line",
                    "description": "GraphItem or line to change.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "indices",
                    "description": "Array of the point indices of the points to be removed.",
                    "type": "[]"
                }
            ]
        },
        "JSG.graph.command.ReplaceSubItemCommand": {
            "name": "JSG.graph.command.ReplaceSubItemCommand",
            "shortname": "ReplaceSubItemCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\ReplaceSubItemCommand.js",
            "line": 8,
            "description": "A command that replaces a subitem with another one.",
            "example": [
                "\n    var parent = new JSG.graph.model.GraphItem(new JSG.graph.model.shapes.RectangleShape());\n    var cmd = new JSG.graph.command.ReplaceSubItemCommand(parent, subItemToReplace, subItemReplacement);\n    interactionHandler.execute(cmd);"
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "parent",
                    "description": "Parent item of the sub item.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "subItem",
                    "description": "The sub item to replace.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "replacement",
                    "description": "The replacement item.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ]
        },
        "JSG.graph.command.ReshapeItemCommand": {
            "name": "JSG.graph.command.ReshapeItemCommand",
            "shortname": "ReshapeItemCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\ReshapeItemCommand.js",
            "line": 8,
            "description": "A command provided to allow changing the reshape coordinates. The Reshape Coordinates define how\npredefined shapes (Start, certain Rectangle, Arrows ...) are visualized. A user can change the shape by\nchanging the reshape factor. The result depends on the specific item. For Rectangles with corner or\nround edges, you can change the size of the corners.",
            "example": [
                "\n    // interactionhandler and item given\n    // change the first reshape coordinate of an item by setting the x factor to 0.5.\n    var cmd = new JSG.graph.command.ReshapeItemCommand(item, 0, new JSG.geometry.Point(0.5, 0);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "line",
                    "description": "GraphItem or line to change.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "index",
                    "description": "Index of Reshape coordinate to be changed.",
                    "type": "Number"
                },
                {
                    "name": "point",
                    "description": "New resize coordinate as a point. Please be\naware that the influence of changing this coordinate depends on the type of the\npredefined shape. It can be a factor for the size of a corner or an absolute value.",
                    "type": "JSG.geometry.Point"
                }
            ]
        },
        "JSG.graph.command.ResizeEdgeCommand": {
            "name": "JSG.graph.command.ResizeEdgeCommand",
            "shortname": "ResizeEdgeCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\ResizeEdgeCommand.js",
            "line": 8,
            "description": "Command to resize an edge.<br/>\nThis command simply rearranges all edge points relative to given BoundingBox. That means that\nnot the Edge BoundingBox itself is changed, but their points which in turn define the edge BoundingBox again.",
            "example": [
                "\n    // interactionhandler and item given\n    // simple resize of an edge by setting new BoundingBox\n    var box = new JSG.geometry.BoundingBox(2000, 2000);\n    var origin = item.getOrigin();\n    box.setTopLeft(origin);\n    var cmd = new JSG.graph.command.ResizeEdgeCommand(item, box);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.SetLineShapePointsCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "edge",
                    "description": "The edge to resize.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "newbox",
                    "description": "The BoundingBox to use for rearranging edge points.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ]
        },
        "JSG.graph.command.ResizeItemCommand": {
            "name": "JSG.graph.command.ResizeItemCommand",
            "shortname": "ResizeItemCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\ResizeItemCommand.js",
            "line": 8,
            "description": "Command to resize an object or set a new bounding box.",
            "example": [
                "\n    // interactionhandler and item given\n    // resizing an item to assign a vertical and horizontal size of 2 cm, while keeping the position.\n    var box = new JSG.geometry.BoundingBox(2000, 2000);\n    var origin = item.getOrigin();\n    box.setTopLeft(origin);\n    var cmd = new JSG.graph.command.ResizeItemCommand(item, box);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.CompoundCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "GraphItem or line to change.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "bbox",
                    "description": "New item dimensions.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ]
        },
        "JSG.graph.command.ResizeNodeCommand": {
            "name": "JSG.graph.command.ResizeNodeCommand",
            "shortname": "ResizeNodeCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\ResizeNodeCommand.js",
            "line": 8,
            "description": "Command to resize a node.",
            "example": [
                "\n    // interactionhandler and item given\n    // resizing a node to assign a vertical and horizontal size of 2 cm, while keeping the position.\n    var box = new JSG.geometry.BoundingBox(2000, 2000);\n    var origin = item.getOrigin();\n    box.setTopLeft(origin);\n    var cmd = new JSG.graph.command.ResizeNodeCommand(item, box);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.InternalResizeItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "node",
                    "description": "The node to resize.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "bbox",
                    "description": "The new node BoundingBox.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ]
        },
        "JSG.graph.command.RotateEdgeCommand": {
            "name": "JSG.graph.command.RotateEdgeCommand",
            "shortname": "RotateEdgeCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\RotateEdgeCommand.js",
            "line": 8,
            "description": "Command to rotate an edge.",
            "example": [
                "\n    // interactionhandler and item given \n    // Assigning a rotation around the center of an item.\n    var cmd = new JSG.graph.command.RotateEdgeCommand(edge, Math.PI / 4, item.getBoundingBox().getCenter());\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo(); \n    //redo it again\n    interactionHandler.redo(); "
            ],
            "extends": "JSG.graph.command.InternalRotateItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "edge",
                    "description": "The edge to rotate.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "angle",
                    "description": "The rotation Angle in radians.",
                    "type": "Number"
                },
                {
                    "name": "point",
                    "description": "An optional rotation point.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ]
        },
        "JSG.graph.command.RotateItemCommand": {
            "name": "JSG.graph.command.RotateItemCommand",
            "shortname": "RotateItemCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\RotateItemCommand.js",
            "line": 8,
            "description": "Command to rotate an item.",
            "example": [
                "\n    // interactionhandler and item given\n    // Assigning a rotation around the center of an item.\n    var cmd = new JSG.graph.command.RotateItemCommand(item, Math.PI / 4, item.getBoundingBox().getCenter());\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.AbstractItemCommandProxy",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "The item to rotate.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "angle",
                    "description": "The rotation Angle in radians.",
                    "type": "Number"
                },
                {
                    "name": "point",
                    "description": "An optional rotation point.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ]
        },
        "JSG.graph.command.RotateNodeCommand": {
            "name": "JSG.graph.command.RotateNodeCommand",
            "shortname": "RotateNodeCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\RotateNodeCommand.js",
            "line": 8,
            "description": "Command to rotate a node.",
            "example": [
                "\n    // interactionhandler and item given \n    // Assigning a rotation around the center of an item.\n    var cmd = new JSG.graph.command.RotateNodeCommand(item, Math.PI / 4, item.getBoundingBox().getCenter());\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo(); \n    //redo it again\n    interactionHandler.redo(); "
            ],
            "extends": "JSG.graph.command.InternalRotateItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "node",
                    "description": "The node to rotate..",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "angle",
                    "description": "The rotation angle in radians.",
                    "type": "Number"
                },
                {
                    "name": "point",
                    "description": "An optional rotation point.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ]
        },
        "JSG.graph.command.SetAttributeCommand": {
            "name": "JSG.graph.command.SetAttributeCommand",
            "shortname": "SetAttributeCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetAttributeCommand.js",
            "line": 8,
            "description": "Command to assign an attribute to an item.",
            "example": [
                "\n    // interactionhandler and item given\n    // Assigning the moveable flag to an item.\n    var cmd = new JSG.graph.command.SetAttributeCommand(item, 'setMoveable', item.getItemAttributes().getMoveable(), false);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "Item to assign attribute to.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "setter",
                    "description": "Existing function name to use for setting the attribute.",
                    "type": "String"
                },
                {
                    "name": "oldvalue",
                    "description": "Current value of attribute.",
                    "type": "JSG.graph.attr.Attribute | JSG.graph.expr.Expression | Object"
                },
                {
                    "name": "newvalue",
                    "description": "New value of attribute.",
                    "type": "JSG.graph.expr.Expression | Object"
                }
            ]
        },
        "JSG.graph.command.SetAttributesMapCommand": {
            "name": "JSG.graph.command.SetAttributesMapCommand",
            "shortname": "SetAttributesMapCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetAttributesMapCommand.js",
            "line": 8,
            "description": "Command to apply several attributes to an item.<br/>\nThe attributes to change are specified by the provided map and the corresponding\n{{#crossLink \"JSG.graph.attr.AttributeList\"}}{{/crossLink}} by the path parameter.",
            "example": [
                "\n    // interactionhandler given\n    var listpath = JSG.graph.attr.FormatAttributes.NAME; //\"toplevel\" AttributeList...\n    var formatmap = new JSG.commons.Map();\n    formatmap.put(JSG.graph.attr.FormatAttributes.FILLCOLOR, \"#\" + selectedColor);\n    formatmap.put(JSG.graph.attr.FormatAttributes.FILLSTYLE, JSG.graph.attr.FormatAttributes.FillStyle.SOLID);\n    var cmd = new JSG.graph.command.SetAttributesMapCommand(item, formatmap, listpath);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "GraphItem to be formatted.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "map",
                    "description": "The map with the attribute names and values to apply.",
                    "type": "JSG.commons.Map"
                },
                {
                    "name": "listpath",
                    "description": "The complete path to the AttributeList which attributes should be set.",
                    "type": "String"
                }
            ]
        },
        "JSG.graph.command.SetBezierShapePointsCommand": {
            "name": "JSG.graph.command.SetBezierShapePointsCommand",
            "shortname": "SetBezierShapePointsCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetBezierShapePointsCommand.js",
            "line": 8,
            "description": "Command to set the definition points of an item with a bezier shape visualization.",
            "example": [
                "\n    // interactionhandler and item given\n    // set a bezier shape with one curve, the control points before the start point\n    // and the control point behind the end point are equal to their context point\n    // two context points (begin and start of the line\n    var points = [];\n    points.push(new JSG.geometry.Point(1000, 1000));\n    points.push(new JSG.geometry.Point(5000, 1000));\n\n    // two control points (before context point)\n    cpFrom = [];\n    cpFrom.push(new JSG.geometry.Point(2000, 2000));\n    cpFrom.push(new JSG.geometry.Point(5000, 1000));\n\n    // two control points (after context point)\n    cpTo = [];\n    cpTo.push(new JSG.geometry.Point(2000, 2000));\n    cpTo.push(new JSG.geometry.Point(5000, 1000));\n\n    var cmd = new JSG.graph.command.SetBezierShapePointsCommand(item, points, cpFrom, cpTo);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "GraphItem to be formatted.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "newpoints",
                    "description": "Array with the new context points.",
                    "type": "JSG.geometry.Point[]"
                },
                {
                    "name": "newCpFromPoints",
                    "description": "Array with the new control points before the context point.",
                    "type": "JSG.geometry.Point[]"
                },
                {
                    "name": "newCpToPoints",
                    "description": "Array with the new control points behind the context point.",
                    "type": "JSG.geometry.Point[]"
                }
            ]
        },
        "JSG.graph.command.SetLayoutAttributeCommand": {
            "name": "JSG.graph.command.SetLayoutAttributeCommand",
            "shortname": "SetLayoutAttributeCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetLayoutAttributeCommand.js",
            "line": 8,
            "description": "Command to assign an attribute to an item.",
            "example": [
                "\n    // interactionhandler and item given\n    // Assigning a grid layout to an item.\n    var cmd = new JSG.graph.command.SetLayoutAttributeCommand(item, 'setLayout', item.getLayoutAttributes().getLayout(), 'Grid');\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.SetAttributeCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "Item to assign layout attribute to.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "setter",
                    "description": "Existing function name to use for setting the layout attribute.",
                    "type": "String"
                },
                {
                    "name": "oldvalue",
                    "description": "Current value of layout attribute.",
                    "type": "JSG.graph.expr.Expression"
                },
                {
                    "name": "newvalue",
                    "description": "New value of layout attribute.",
                    "type": "JSG.graph.expr.Expression | Object"
                }
            ]
        },
        "JSG.graph.command.SetLinePointAtCommand": {
            "name": "JSG.graph.command.SetLinePointAtCommand",
            "shortname": "SetLinePointAtCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetLinePointAtCommand.js",
            "line": 8,
            "description": "Command to insert a point into a polyline or polygon.",
            "example": [
                "\n    // interactionhandler and item given\n    var cmd = new JSG.graph.command.SetLinePointAtCommand(item, 2, new JSG.geometry.Point(300, 300));\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo(); \n    //redo it again\n    interactionHandler.redo(); "
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "GraphItem to be formatted.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "index",
                    "description": "Index, where the point shall be inserted.",
                    "type": "Number"
                },
                {
                    "name": "point",
                    "description": "New point in parent coordinate system.",
                    "type": "JSG.geometry.Point"
                }
            ]
        },
        "JSG.graph.command.SetLineShapePointsCommand": {
            "name": "JSG.graph.command.SetLineShapePointsCommand",
            "shortname": "SetLineShapePointsCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetLineShapePointsCommand.js",
            "line": 8,
            "description": "Command to replace the points of a line. The BoundingBox is not automatically \nrecalculated.",
            "example": [
                "\n    // interactionhandler and item given\n    // insert 2 new points at index 2 \n    var points = [];\n    points.push(new JSG.geometry.Point(0, 0));\n    points.push(new JSG.geometry.Point(500, 500));\n    var cmd = new JSG.graph.command.SetLineShapePointsCommand(item, points);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo(); \n    //redo it again\n    interactionHandler.redo(); "
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "Line to replace points in.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "newpoints",
                    "description": "Array of new points specified in parent coordinate system",
                    "type": "JSG.geometry.Point[]"
                }
            ]
        },
        "JSG.graph.command.SetLinkCommand": {
            "name": "JSG.graph.command.SetLinkCommand",
            "shortname": "SetLinkCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetLinkCommand.js",
            "line": 8,
            "description": "Command to assign a new link to a GraphItem.",
            "example": [
                "\n    // interactionhandler and node given \n    var cmd = new JSG.graph.command.SetLinkCommand(item, 'www.js-graph.de');\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo(); \n    //redo it again\n    interactionHandler.redo(); "
            ],
            "extends": "AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "Item to assign name to.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "name",
                    "description": "New link or link expression to assign.",
                    "type": "JSG.graph.expr.StringExpression | String"
                }
            ]
        },
        "JSG.graph.command.SetNameCommand": {
            "name": "JSG.graph.command.SetNameCommand",
            "shortname": "SetNameCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetNameCommand.js",
            "line": 8,
            "description": "Command to assign a new name to a GraphItem.",
            "example": [
                "\n    // interactionhandler and node given \n    var cmd = new JSG.graph.command.SetNameCommand(item, 'NewName');\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo(); \n    //redo it again\n    interactionHandler.redo(); "
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "Item to assign name to.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "name",
                    "description": "New name or name expression to assign.",
                    "type": "JSG.graph.expr.StringExpression | String"
                }
            ]
        },
        "JSG.graph.command.SetPinCommand": {
            "name": "JSG.graph.command.SetPinCommand",
            "shortname": "SetPinCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetPinCommand.js",
            "line": 8,
            "description": "Command to set the Pin of a GraphItem.",
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "GraphItem to set the Pin of.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "newPin",
                    "description": "The new Pin or pin-point.",
                    "type": "JSG.graph.Pin|JSG.geometry.Point"
                }
            ]
        },
        "JSG.graph.command.SetShapeCommand": {
            "name": "JSG.graph.command.SetShapeCommand",
            "shortname": "SetShapeCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetShapeCommand.js",
            "line": 8,
            "description": "Command to assign a new shape to an item.",
            "example": [
                "\n    // interactionhandler and item given\n    // Assigning a new EllipseShape to a GraphItem\n    var cmd = new JSG.graph.command.SetShapeCommand(item, new JSG.graph.model.shapes.EllipseShape());\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "Item to assign shape to.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "newShape",
                    "description": "Shape to assign.",
                    "type": "JSG.graph.model.shapes.Shape"
                }
            ]
        },
        "JSG.graph.command.SetShapePointsCommand": {
            "name": "JSG.graph.command.SetShapePointsCommand",
            "shortname": "SetShapePointsCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetShapePointsCommand.js",
            "line": 8,
            "description": "Command to replace the points of a line. The BoundingBox is automatically \nrecalculated and the points are converted to formulas with relative coordinates to achieve,\nthat the inner points scale with the bounding box of the GraphItem.",
            "example": [
                "\n    // interactionhandler and item given\n    // Set 4 new points for an item \n    var points = [];\n    points.push(new JSG.geometry.Point(0, 0));\n    points.push(new JSG.geometry.Point(3000, 0));\n    points.push(new JSG.geometry.Point(3000, 2000));\n    points.push(new JSG.geometry.Point(0, 2000));\n    var cmd = new JSG.graph.command.SetShapePointsCommand(item, points);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo(); \n    //redo it again\n    interactionHandler.redo(); "
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "Line to replace points in.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "newpoints",
                    "description": "Array of new points specified in parent coordinate system",
                    "type": "JSG.geometry.Point[]"
                }
            ]
        },
        "JSG.graph.command.SetSizeCommand": {
            "name": "JSG.graph.command.SetSizeCommand",
            "shortname": "SetSizeCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetSizeCommand.js",
            "line": 8,
            "description": "Command to set the Size of a GraphItem.",
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "GraphItem to set the Size of.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "newSize",
                    "description": "The new Size.",
                    "type": "JSG.graph.Size"
                }
            ]
        },
        "JSG.graph.command.SetTextCommand": {
            "name": "JSG.graph.command.SetTextCommand",
            "shortname": "SetTextCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetTextCommand.js",
            "line": 8,
            "description": "Command to assign a new text to a TextNode. The undo text must be provided, as key input is directly\nassigned to the text node and we do not want to record each new key within the Command chain.",
            "example": [
                "\n    // interactionhandler and node given \n    var cmd = new JSG.graph.command.SetTextCommand(item, 'UndoText', 'NewText);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo(); \n    //redo it again\n    interactionHandler.redo(); "
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "Item to assign attribute to.",
                    "type": "JSG.graph.model.TextNode"
                },
                {
                    "name": "undoText",
                    "description": "Text to use for undo.",
                    "type": "JSG.graph.expr.StringExpression | String"
                },
                {
                    "name": "text",
                    "description": "New Text to assign to text node.",
                    "type": "String"
                }
            ]
        },
        "JSG.graph.command.SetTextSizeModeCommand": {
            "name": "JSG.graph.command.SetTextSizeModeCommand",
            "shortname": "SetTextSizeModeCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetTextSizeModeCommand.js",
            "line": 8,
            "description": "This command is used to change the size mode of a given text node.",
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "textnode",
                    "description": "The text node which text should be set.",
                    "type": "JSG.graph.model.TextNode"
                },
                {
                    "name": "sizemode",
                    "description": "The new size mode.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.TextNodeAttributes.SizeMode"
                }
            ]
        },
        "JSG.graph.command.SizeItems": {
            "name": "JSG.graph.command.SizeItems",
            "shortname": "SizeItems",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SizeItemsCommand.js",
            "line": 8,
            "description": "SizeItems definitions used in SizeItemsCommand"
        },
        "JSG.graph.command.SizeItemsCommand": {
            "name": "JSG.graph.command.SizeItemsCommand",
            "shortname": "SizeItemsCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SizeItemsCommand.js",
            "line": 58,
            "description": "Size a group of items based on a passed flag.",
            "example": [
                "\n    // interactionhandler and items given\n    var cmd = new JSG.graph.command.SizeItemsCommand(items, JSG.graph.command.SizeItems.HORIZONTALMAX);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.Command",
            "is_constructor": 1,
            "params": [
                {
                    "name": "controllers",
                    "description": "Array of GraphItems.",
                    "type": "JSG.graph.model.GraphItemController[]"
                },
                {
                    "name": "sizeFlag",
                    "description": "Action to execute.",
                    "type": "JSG.graph.command.SizeItems"
                }
            ]
        },
        "JSG.graph.command.TextFormatItemCommand": {
            "name": "JSG.graph.command.TextFormatItemCommand",
            "shortname": "TextFormatItemCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\TextFormatItemCommand.js",
            "line": 8,
            "description": "Command to assign a text format to an item.",
            "example": [
                "\n    // interactionhandler given\n    var newFormat = item.getTextFormat().copy(); \n    //OR var newFormat= new  JSG.graph.attr.TextFormatAttributes(); //fresh TextFormat attributes \n    // set font name to Verdana \n    newFormat.setFontName('Verdana');\n    var cmd = new JSG.graph.command.TextFormatItemCommand(item, newFormat);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo(); \n    //redo it again\n    interactionHandler.redo(); "
            ],
            "extends": "JSG.graph.command.AbstractItemCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "GraphItem to be formatted.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "newFormat",
                    "description": "Format to be applied.",
                    "type": "JSG.graph.attr.TextFormatAttributes"
                }
            ]
        },
        "JSG.graph.command.TranslateItemsCommand": {
            "name": "JSG.graph.command.TranslateItemsCommand",
            "shortname": "TranslateItemsCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\TranslateItemsCommand.js",
            "line": 8,
            "description": "Command to translate the {{#crossLink \"JSG.graph.Pin\"}}{{/crossLink}} of one or several\n{{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} by a specified offset, which must be\npassed as last parameter.",
            "example": [
                "\n    // interactionhandler and items given\n    // translate items by 1cm to the right and down\n    var cmd = new JSG.graph.command.TranslateItemsCommand(item1, item2, new JSG.geometry.Point(1000, 1000));\n    //analog command: new JSG.graph.command.TranslateItemsCommand([item1, item2], new JSG.geometry.Point(1000, 1000));\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo();\n    //redo it again\n    interactionHandler.redo();"
            ],
            "extends": "JSG.graph.command.Command",
            "is_constructor": 1,
            "params": [
                {
                    "name": "items",
                    "description": "GraphItem(s) to be moved.",
                    "type": "JSG.graph.model.GraphItem",
                    "multiple": true
                },
                {
                    "name": "translation",
                    "description": "Offset to move by.",
                    "type": "JSG.geometry.Point"
                }
            ]
        },
        "JSG.graph.command.UnGroupItemsCommand": {
            "name": "JSG.graph.command.UnGroupItemsCommand",
            "shortname": "UnGroupItemsCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command",
            "file": "..\\dist\\wc\\jsg\\graph\\command\\UnGroupItemsCommand.js",
            "line": 8,
            "description": "Command to ungroup the selected group by adding grouped (sub)items to the parent container again.",
            "example": [
                "\n    // interactionhandler and item given \n    var cmd = new JSG.graph.command.UnGroupItemsCommand(item);\n    interactionHandler.execute(cmd);\n    //undo command\n    interactionHandler.undo(); \n    //redo it again\n    interactionHandler.redo(); "
            ],
            "extends": "JSG.graph.command.AbstractGroupUngroupCommand",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "Group to ungroup.",
                    "type": "JSG.graph.controller.GraphItem"
                }
            ]
        },
        "JSG.graph.controller.ConnectionController": {
            "name": "JSG.graph.controller.ConnectionController",
            "shortname": "ConnectionController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller",
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ConnectionController.js",
            "line": 8,
            "description": "A controller to determine the behavior of {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}s.",
            "params": [
                {
                    "name": "connection",
                    "description": "The edge model associated with this controller.",
                    "type": "JSG.graph.model.Edge"
                }
            ],
            "extends": "JSG.graph.controller.GraphItemController",
            "is_constructor": 1
        },
        "JSG.graph.controller.ConnectionController.PathListener": {
            "name": "JSG.graph.controller.ConnectionController.PathListener",
            "shortname": "ConnectionController.PathListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller",
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ConnectionController.js",
            "line": 182,
            "description": "Inner event handler class.</br>\nHandles only path change events of observed nodes.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "controller",
                    "description": "The controller which uses this listener.",
                    "type": "JSG.graph.controller.ConnectionController"
                }
            ]
        },
        "JSG.graph.controller.ContentNodeController": {
            "name": "JSG.graph.controller.ContentNodeController",
            "shortname": "ContentNodeController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller",
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ContentNodeController.js",
            "line": 8,
            "description": "This controller handles the behavior of {{#crossLink \"JSG.graph.model.ContentNode\"}}{{/crossLink}}s.</br>\nSince a ContentNode has a so called ContentPane sub item, this controller adds a corresponding\n{{#crossLink \"JSG.graph.controller.ContentPaneController\"}}{{/crossLink}} to its child list. This\nContentPaneController can be retrieved via\n{{#crossLink \"JSG.graph.controller.ContentNodeController/getContentPaneController:method\"}}{{/crossLink}}.",
            "extends": "JSG.graph.controller.NodeController",
            "params": [
                {
                    "name": "node",
                    "description": "The ContentNode model associated with this controller.",
                    "type": "JSG.graph.model.ContentNode"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.controller.ContentPaneController": {
            "name": "JSG.graph.controller.ContentPaneController",
            "shortname": "ContentPaneController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller",
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ContentNodeController.js",
            "line": 195,
            "description": "The default controller to manage ContentNodes content pane.</br>\nA {{#crossLink \"JSG.graph.view.ContentNodeView\"}}{{/crossLink}} is created for a content pane view.",
            "extends": "JSG.graph.controller.GraphItemController",
            "params": [
                {
                    "name": "pane",
                    "description": "The ContentNodes content pane.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.controller.GraphController": {
            "name": "JSG.graph.controller.GraphController",
            "shortname": "GraphController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller",
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphController.js",
            "line": 8,
            "description": "The GraphController is a derived controller that handles some operations differently which\ndo apply to a Graph in contrast to a GraphItem.</br>\n\nA GraphController sends following notifications: </br>\n<ul>\n\t<li>{{#crossLink \"JSG.graph.controller.GraphController/GRAPH_CHANGED_NOTIFICATION:property\"}}{{/crossLink}}</li>\n\t<li>{{#crossLink \"JSG.graph.controller.GraphController/GRAPH_SETTINGS_NOTIFICATION:property\"}}{{/crossLink}}</li>\n</ul>",
            "extends": "JSG.graph.controller.GraphItemController",
            "is_constructor": 1,
            "params": [
                {
                    "name": "model",
                    "description": "Graph to attach to the controller.",
                    "type": "JSG.graph.model.Graph"
                }
            ]
        },
        "JSG.graph.controller.GraphControllerFactory": {
            "name": "JSG.graph.controller.GraphControllerFactory",
            "shortname": "GraphControllerFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller",
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphControllerFactory.js",
            "line": 8,
            "description": "A factory class to create {{#crossLink \"JSG.graph.controller.ModelController\"}}{{/crossLink}}s \nbased on provided {{#crossLink \"JSG.graph.model.Model\"}}{{/crossLink}}s.</br>\nThis instance only creates controllers for the models defined within the framework. Custom\napplication should create their own factory class and register it to the used\n{{#crossLink \"JSG.ui.viewer.ControllerViewer\"}}{{/crossLink}}.",
            "is_constructor": 1
        },
        "JSG.graph.controller.GraphItemController": {
            "name": "JSG.graph.controller.GraphItemController",
            "shortname": "GraphItemController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller",
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 8,
            "description": "A general controller that specifies common behavior for {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s.</br>\n\nA GraphItemController sends following notification: </br>\n<ul>\n\t<li>{{#crossLink \"JSG.graph.controller.GraphItemController/ITEM_CHANGED_NOTIFICATION:property\"}}{{/crossLink}}</li>\n</ul>",
            "params": [
                {
                    "name": "item",
                    "description": "The graph item model associated with this controller.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "extends": "JSG.graph.controller.ModelController",
            "is_constructor": 1
        },
        "JSG.graph.controller.GroupController": {
            "name": "JSG.graph.controller.GroupController",
            "shortname": "GroupController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller",
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GroupController.js",
            "line": 8,
            "description": "A <code>GraphItemController</code> subclass used to implement behavior of {{#crossLink \"JSG.graph.model.Group\"}}{{/crossLink}}s.</br>\nThe bounding-box of a group is determined by the bounding-boxes of its inner items. Therefore a <code>GroupController</code> \nadds a listener to each group item in order to be notified about any move, resize or rotate events.",
            "extends": "JSG.graph.controller.GraphItemController",
            "params": [
                {
                    "name": "group",
                    "description": "The group model associated with this controller.",
                    "type": "JSG.graph.model.Group"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.controller.GroupController.GroupListener": {
            "name": "JSG.graph.controller.GroupController.GroupListener",
            "shortname": "GroupController.GroupListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller",
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GroupController.js",
            "line": 110,
            "description": "An <code>EventListener</code> subclass used by {{#crossLink \"JSG.graph.controller.GroupController\"}}{{/crossLink}}\nto react on changes of group items.",
            "extends": "JSG.graph.model.events.EventListener",
            "is_constructor": 1
        },
        "JSG.graph.controller.FindFlags": {
            "name": "JSG.graph.controller.FindFlags",
            "shortname": "FindFlags",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller",
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 14,
            "description": "Flags to influence look up or containment tasks.",
            "is_constructor": 1,
            "static": 1
        },
        "JSG.graph.controller.ModelController": {
            "name": "JSG.graph.controller.ModelController",
            "shortname": "ModelController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller",
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 30,
            "description": "The base controller which provides general functionality to build up and manage controller hierarchy.",
            "params": [
                {
                    "name": "model",
                    "description": "The associated controller model.",
                    "type": "JSG.graph.model.Model"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.controller.NodeController": {
            "name": "JSG.graph.controller.NodeController",
            "shortname": "NodeController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller",
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\NodeController.js",
            "line": 8,
            "description": "A controller to determine the behavior of {{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}}s. A Node\nadds ports to a GraphItem.",
            "extends": "JSG.graph.controller.GraphItemController",
            "params": [
                {
                    "name": "node",
                    "description": "The node model associated with this controller.",
                    "type": "JSG.graph.model.Node"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.controller.PortController": {
            "name": "JSG.graph.controller.PortController",
            "shortname": "PortController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller",
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\PortController.js",
            "line": 8,
            "description": "A controller to determine the behavior of {{#crossLink \"JSG.graph.model.Port\"}}{{/crossLink}}s.",
            "extends": "JSG.graph.controller.GraphItemController",
            "params": [
                {
                    "name": "port",
                    "description": "The port model associated with this controller.",
                    "type": "JSG.graph.model.Port"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.controller.RootController": {
            "name": "JSG.graph.controller.RootController",
            "shortname": "RootController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller",
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\RootController.js",
            "line": 8,
            "description": "The root controller defines the fixed root within a hierarchy of controllers.</br>\nAs such this controller is registered to a {{#crossLink \"JSG.ui.viewer.ControllerViewer\"}}{{/crossLink}}.\nThat means this controller knows about the viewer used to display the controller hierarchy. Note\nthat a root controller has no associated model or view. The actual hierarchy starts by setting a\ncontent controller which also defines the view shown by the viewer.",
            "extends": "JSG.graph.controller.ModelController",
            "is_constructor": 1
        },
        "JSG.graph.expr.AttributeExpression": {
            "name": "JSG.graph.expr.AttributeExpression",
            "shortname": "AttributeExpression",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\AttributeExpression.js",
            "line": 8,
            "description": "An AttributeExpression should solely be used to reference a single Attribute.",
            "is_constructor": 1,
            "extends": "JSG.graph.expr.Expression"
        },
        "JSG.graph.expr.AttributeReference": {
            "name": "JSG.graph.expr.AttributeReference",
            "shortname": "AttributeReference",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\AttributeReference.js",
            "line": 9,
            "description": "An instance of this class is used to reference an {{#crossLink \"JSG.graph.attr.Attribute\"}}{{/crossLink}} of a given \nitem. The attribute is determined by specified <code>path</code> parameter.</br>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "The referenced GraphItem model and attribute owner.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "path",
                    "description": "A path referencing an attribute.",
                    "type": "String"
                }
            ]
        },
        "JSG.graph.expr.BooleanConstraint": {
            "name": "JSG.graph.expr.BooleanConstraint",
            "shortname": "BooleanConstraint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\BooleanConstraint.js",
            "line": 9,
            "description": "A <code>BooleanConstraint</code> is used to validate against primitive boolean values like <code>true</code> or\n<code>false</code>. It is mainly used for {{#crossLink \"JSG.graph.expr.BooleanExpression\"}}{{/crossLink}}s.<br/>\nBesides primitive booleans number values of 0 and empty strings are transformed to <code>false</code>. That means\nthat any non zero number or any non empty string is transformed to <code>true</code>. In all other cases an\noptional default value is returned.",
            "is_constructor": 1,
            "extends": "JSG.graph.expr.ExpressionConstraint",
            "params": [
                {
                    "name": "defValue",
                    "description": "The default value to use for an invalid expression value. If not given <code>false</code> is used.",
                    "type": "Boolean",
                    "optional": true
                }
            ]
        },
        "JSG.graph.expr.BooleanExpression": {
            "name": "JSG.graph.expr.BooleanExpression",
            "shortname": "BooleanExpression",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\BooleanExpression.js",
            "line": 8,
            "description": "A boolean expression should be used for boolean values. It uses a\n{{#crossLink \"JSG.graph.expr.BooleanConstraint\"}}{{/crossLink}} to transform any non primitive boolean expression \nvalues to a boolean.",
            "is_constructor": 1,
            "extends": "JSG.graph.expr.Expression"
        },
        "JSG.graph.expr.ConstExpression": {
            "name": "JSG.graph.expr.ConstExpression",
            "shortname": "ConstExpression",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\ConstExpression.js",
            "line": 9,
            "description": "Creates a new <code>Expression</code> with given formula or term and default value.</br>\n<b>Note:</b> call {{#crossLink \"JSG.graph.expr.Expression/evaluate:method\"}}{{/crossLink}} to\ncompile the formula into a corresponding term.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "value",
                    "description": "The optional default value to use if neither a formula nor term is present.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "formula",
                    "description": "The optional formula to use.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "term",
                    "description": "The optional term to get the value from.",
                    "type": "JSG.graph.expr.Term",
                    "optional": true
                }
            ]
        },
        "JSG.graph.expr.Expression": {
            "name": "JSG.graph.expr.Expression",
            "shortname": "Expression",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 44,
            "description": "Creates a new <code>Expression</code> with given formula or term and default value.</br>\n<b>Note:</b> call {{#crossLink \"JSG.graph.expr.Expression/evaluate:method\"}}{{/crossLink}} to\ncompile the formula into a corresponding term.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "value",
                    "description": "The optional default value to use if neither a formula nor term is present.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "formula",
                    "description": "The optional formula to use.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "term",
                    "description": "The optional term to get the value from.",
                    "type": "JSG.graph.expr.Term",
                    "optional": true
                }
            ]
        },
        "JSG.graph.expr.ExpressionConstraint": {
            "name": "JSG.graph.expr.ExpressionConstraint",
            "shortname": "ExpressionConstraint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\ExpressionConstraint.js",
            "line": 9,
            "description": "<code>ExpressionConstraint</code>s are used to validate and transform expression values. Validation is done via \n{{#crossLink \"JSG.graph.expr.ExpressionConstraint/isValid:method\"}}{{/crossLink}} which is called when a value is set.\nThe value transformation is done by {{#crossLink \"JSG.graph.expr.ExpressionConstraint/getValue:method\"}}{{/crossLink}}\nwhich gets called whenever an expression value is requested. Here constraints can try to transform the value to a\nspecial type if it is not already of that type. If transformation is not applicable an optional default value can\nbe returned.<br/>\nTo support persistence a constraint must provide <code>saveXML(writer)</code>, <code>readXML(node)</code> and \n<code>getClassString()</code> methods. The class name is used to restore the constraint from the expression instance \nwhich triggers read and it will be called with <code>new</code> and no parameter. Before a constraint is asked to\nsave itself {{#crossLink \"JSG.graph.expr.ExpressionConstraint/doSave:method\"}}{{/crossLink}} is called. Constraints\ncan prevent the saving request if they return <code>false</code>.<br/>\nThe default implementation validates against <code>String</code> and <code>Number</code> values and tries to transform\nany value to this types. Subclasses can overwrite this to implement custom behavior.<br/>\nPlease refer to {{#crossLink \"JSG.graph.expr.NumberConstraint\"}}{{/crossLink}} or {{#crossLink \"JSG.graph.expr.NumberRangeConstraint\"}}{{/crossLink}}\nas examples for custom constraints.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "defValue",
                    "description": "An optional default value if expression value cannot be transformed.",
                    "type": "Boolean|Number|String|Object",
                    "optional": true
                }
            ]
        },
        "JSG.graph.expr.ExpressionProxy": {
            "name": "JSG.graph.expr.ExpressionProxy",
            "shortname": "ExpressionProxy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\ExpressionProxy.js",
            "line": 8,
            "is_constructor": 1
        },
        "JSG.graph.expr.FormulaParser": {
            "name": "JSG.graph.expr.FormulaParser",
            "shortname": "FormulaParser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\FormulaParser.js",
            "line": 7,
            "description": "A formula parser is used to compile an expression formula into its corresponding term. </br>\nCompilation is done by calling <code>JSG.graph.expr.FormularParser.parse()</code>.\n</br></br>\nFor expression and term definition see:</br>\n{{#crossLink \"JSG.graph.expr.Expression\"}}{{/crossLink}} and</br>\n{{#crossLink \"JSG.graph.expr.Term\"}}{{/crossLink}}",
            "is_constructor": 1
        },
        "JSG.graph.expr.MapExpression": {
            "name": "JSG.graph.expr.MapExpression",
            "shortname": "MapExpression",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\MapExpression.js",
            "line": 8,
            "description": "A MapExpression simply uses a {{#crossLink \"JSG.commons.Map\"}}{{/crossLink}} as its value and\nprovides methods to store and retrieve elements to and from inner Map.</br>\nNote: the Expression value returned by {{#crossLink \"JSG.graph.expr.MapExpression/getValue:method\"}}{{/crossLink}}\nis an Array of elements the inner Map currently contains. Furthermore a default MapExpression does\nnot support any formula or terms. Subclasses might change this behavior by overwriting corresponding methods.</br>\n<b>Important:</b> to support a deep copy of this Expression all stored elements should implement\na <code>copy</code>-method.",
            "is_constructor": 1,
            "extends": "JSG.graph.expr.Expression"
        },
        "JSG.graph.expr.NumberConstraint": {
            "name": "JSG.graph.expr.NumberConstraint",
            "shortname": "NumberConstraint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\NumberConstraint.js",
            "line": 9,
            "description": "A <code>NumberConstraint</code> is used to validate against number values. It is mainly used for \n{{#crossLink \"JSG.graph.expr.NumberExpression\"}}{{/crossLink}}s.<br/>\nBesides number values the boolean value <code>false</code> is transformed to 0 and <code>true</code> to 1. If a\nstring value represents a number it is transformed to. In all other cases an optional default value is returned.<br/>\nPlease refer to {{#crossLink \"JSG.graph.expr.NumberRangeConstraint\"}}{{/crossLink}} for an example of custom number \nconstraint.",
            "is_constructor": 1,
            "extends": "JSG.graph.expr.ExpressionConstraint",
            "params": [
                {
                    "name": "defValue",
                    "description": "The default value to use for an invalid expression value. If not provided 0 is used.",
                    "type": "Number",
                    "optional": true
                }
            ]
        },
        "JSG.graph.expr.NumberExpression": {
            "name": "JSG.graph.expr.NumberExpression",
            "shortname": "NumberExpression",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\NumberExpression.js",
            "line": 8,
            "description": "A number expression should be used for number values. It uses a \n{{#crossLink \"JSG.graph.expr.NumberConstraint\"}}{{/crossLink}} to transform expression value into a number if required.",
            "is_constructor": 1,
            "extends": "JSG.graph.expr.Expression"
        },
        "JSG.graph.expr.NumberRangeConstraint": {
            "name": "JSG.graph.expr.NumberRangeConstraint",
            "shortname": "NumberRangeConstraint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\NumberRangeConstraint.js",
            "line": 9,
            "description": "A <code>NumberConstraint</code> subclass to define a constraint based on specified number range.<br/>\nValidation simply checks if given value is within this range. A transformation is not done, that means that for each\nvalue which not represents a number an optional default value is returned and all other number values are bound to\nspecified range.",
            "is_constructor": 1,
            "extends": "JSG.graph.expr.NumberConstraint",
            "params": [
                {
                    "name": "min",
                    "description": "The range minimum, inclusive.",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "The range maximum, inclusive.",
                    "type": "Number"
                },
                {
                    "name": "defValue",
                    "description": "The default value to use whenever expression value is not valid, i.e. the value is not within\nspecified number range.",
                    "type": "Number",
                    "optional": true
                }
            ]
        },
        "JSG.graph.expr.ObjectConstraint": {
            "name": "JSG.graph.expr.ObjectConstraint",
            "shortname": "ObjectConstraint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\ObjectConstraint.js",
            "line": 8,
            "description": "A simple <code>ExpressionConstraint</code> subclass. Since all object values are valid no validation and no\ntransformation is done.",
            "is_constructor": 1,
            "extends": "JSG.graph.expr.ExpressionConstraint",
            "params": [
                {
                    "name": "defValue",
                    "description": "The default value to use for an invalid expression value.",
                    "type": "Number",
                    "optional": true
                }
            ]
        },
        "JSG.graph.expr.ObjectExpression": {
            "name": "JSG.graph.expr.ObjectExpression",
            "shortname": "ObjectExpression",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\ObjectExpression.js",
            "line": 9,
            "description": "A simple {{#crossLink \"JSG.graph.expr.Expression\"}}{{/crossLink}} to wrap an arbitrary object as\nan expression value. Since the value of this expression is always the provided object no formula\nor term can be set.<br/>\n<b>Note:</b> to support persistence the object value must provide <code>saveXML(writer)</code>,\n<code>readXML(node)</code> and <code>getClassName()</code> methods. The class name is used to restore the object from\nthe expression instance which triggers read and it will be called with <code>new</code> and no parameter.\nIn addition to support deep copy the object value should provide a <code>copy</code> method.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "value",
                    "description": "The object for this expression.",
                    "type": "Object"
                }
            ]
        },
        "JSG.graph.expr.Operand": {
            "name": "JSG.graph.expr.Operand",
            "shortname": "Operand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 8,
            "description": "This class represents an operand within a {{#crossLink \"JSG.graph.expr.Term\"}}{{/crossLink}}.\nOperands can be of type <code>NUMBER</code>, <code>STRING</code> or <code>REFERENCE</code>, as\ndefined by the corresponding flags.",
            "is_constructor": 1
        },
        "JSG.graph.expr.StringConstant": {
            "name": "JSG.graph.expr.StringConstant",
            "shortname": "StringConstant",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 149,
            "description": "A special {{#crossLink \"JSG.graph.expr.Operand\"}}{{/crossLink}} of type {{#crossLink \"JSG.graph.expr.Operand/STRING:attribute\"}}{{/crossLink}}.\nThis operand is treated like a constant in the sense that its value is never parsed or evaluated.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "value",
                    "description": "The constant string value.",
                    "type": "String"
                }
            ]
        },
        "JSG.graph.expr.Operator": {
            "name": "JSG.graph.expr.Operator",
            "shortname": "Operator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operator.js",
            "line": 8,
            "description": "This class represents an operator within a {{#crossLink \"JSG.graph.expr.Term\"}}{{/crossLink}}.\nNote: only predefined operators are supported, like <code>+</code>, <code>-</code>, <code>*</code> and <code>/</code>.\nSee {{#crossLink \"JSG.graph.expr.Operators\"}}{{/crossLink}}. </br>\nSee {{#crossLink \"JSG.graph.expr.FormularParser\"}}{{/crossLink}}. </br>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "str",
                    "description": "String representation of Operator like \"+\", \"-\"...",
                    "type": "String"
                },
                {
                    "name": "prio",
                    "description": "The operators priority.",
                    "type": "Number"
                }
            ]
        },
        "JSG.graph.expr.Operators": {
            "name": "JSG.graph.expr.Operators",
            "shortname": "Operators",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operator.js",
            "line": 35,
            "description": "A singleton factory to create {{#crossLink \"JSG.graph.expr.Operator\"}}{{/crossLink}}s by their\ncorrseponding string representation.</br>\nSee {{#crossLink \"JSG.graph.expr.Operators/fromString:method\"}}{{/crossLink}}.",
            "is_constructor": 1
        },
        "JSG.graph.expr.RangeConstraint": {
            "name": "JSG.graph.expr.RangeConstraint",
            "shortname": "RangeConstraint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\RangeConstraint.js",
            "line": 9,
            "description": "An <code>ExpressionConstraint</code> subclass to define a range of valid values.<br/>\nValidation simply checks if given value is within defined range. No transformation is done, this means that for each\nvalue which is not within defined range an optional default value is returned.<br/>\n<b>Note:</b> <code>boolean</code>, <code>number</code> and <code>string</code> values can be saved and read but \nobject values must provide <code>saveXML(writer)</code>, <code>readXML(node)</code> and <code>getClassName()</code> \nmethods to support persistence. The class name should reference the object constructor function which gets called \nwith <code>new</code> and without any parameters.",
            "is_constructor": 1,
            "extends": "JSG.graph.expr.ExpressionConstraint",
            "params": [
                {
                    "name": "range",
                    "description": "An array of valid values.",
                    "type": "Array"
                },
                {
                    "name": "defValue",
                    "description": "The default value to use whenever expression value is not valid, i.e. the value is not within\nspecified range.",
                    "type": "Number",
                    "optional": true
                }
            ]
        },
        "JSG.graph.expr.Reference": {
            "name": "JSG.graph.expr.Reference",
            "shortname": "Reference",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Reference.js",
            "line": 8,
            "description": "An instance of this class is used to reference a certain property of a specified item.</br>\nPay attention to the fact that a Reference might not be resolved. In this case the inner used\nGraphItem is undefined and the {{#crossLink \"JSG.graph.expr.Reference/getValue:method\"}}{{/crossLink}}\nsimply returns the string reference representation.\nNote: item properties could be structured into different objects. That is why the third parameter\nis required. The propertyObject actually holds the referenced property.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "The referenced GraphItem model.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "property",
                    "description": "The referenced property.",
                    "type": "String"
                },
                {
                    "name": "propertyObject",
                    "description": "The object which actually provides the referenced property..",
                    "type": "JSG.graph.model.GraphItem|Object"
                }
            ]
        },
        "JSG.graph.expr.StringConstraint": {
            "name": "JSG.graph.expr.StringConstraint",
            "shortname": "StringConstraint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\StringConstraint.js",
            "line": 9,
            "description": "A <code>StringConstraint</code> is used to validate against string values. It is mainly used for \n{{#crossLink \"JSG.graph.expr.StringExpression\"}}{{/crossLink}}s.<br/>\nIf expression value does not represent a string the constraint tries to transformed into one by calling <code>toString</code>\non this value. Therefore the expression value should provide this method otherwise the default value is used.",
            "is_constructor": 1,
            "extends": "JSG.graph.expr.ExpressionConstraint",
            "params": [
                {
                    "name": "defValue",
                    "description": "The default value to use for an invalid expression value. If not provided an empty string is used.",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "JSG.graph.expr.StringExpression": {
            "name": "JSG.graph.expr.StringExpression",
            "shortname": "StringExpression",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\StringExpression.js",
            "line": 8,
            "description": "A string expression should be used for string values. It uses a \n{{#crossLink \"JSG.graph.expr.StringConstraint\"}}{{/crossLink}} to transform expression value into a string if required.",
            "is_constructor": 1,
            "extends": "JSG.graph.expr.Expression"
        },
        "JSG.graph.expr.Term": {
            "name": "JSG.graph.expr.Term",
            "shortname": "Term",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 9,
            "description": "A term consist of an Operand and optional left and right Terms. Terms without any left\nor right terms are unary and simply return their Operand value. Terms with left and right terms\nare so called binary terms. Basic arithmetic Terms for addition, subtraction, multiplication and \ndivision are provided.</br>\nUsually a term represents a compiled expression formula and is created by calling the {{#crossLink \"JSG.graph.expr.FormulaParser/parse:method\"}}{{/crossLink}}.\nHowever, it is also possible to create a term without a formula at all by simply using its constructor method.\n</br>\nFollowing example creates an Add-Term which simply adds 9 to 5:\n\n\t\tvar Term = JSG.graph.expr.Term;\n\t\tvar nine = new JSG.graph.expr.Operand(9, JSG.graph.expr.Operand.NUMBER);\n\t\tvar five = new JSG.graph.expr.Operand(5, JSG.graph.expr.Operand.NUMBER);\n\t\tvar addition = new Term.Add(new Term(nine), new Term(five));\n\t\tJSG.debug.log(\"result: \"+addition.getValue()); //logs 14 to console...\n\nSee {{#crossLink \"JSG.graph.expr.Expression\"}}{{/crossLink}}.</br>\nSee {{#crossLink \"JSG.graph.expr.FormulaParser\"}}{{/crossLink}}.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "operand",
                    "description": "The term operand",
                    "type": "JSG.graph.expr.Operand"
                },
                {
                    "name": "left",
                    "description": "The optional left term",
                    "type": "JSG.graph.expr.Term",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "The optional right term",
                    "type": "JSG.graph.expr.Term",
                    "optional": true
                }
            ]
        },
        "JSG.graph.expr.Add": {
            "name": "JSG.graph.expr.Add",
            "shortname": "Add",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 326,
            "description": "A binary term to perform addition.",
            "is_constructor": 1,
            "extends": "JSG.graph.expr.Term",
            "params": [
                {
                    "name": "left",
                    "description": "The left term",
                    "type": "JSG.graph.expr.Term"
                },
                {
                    "name": "right",
                    "description": "The right term",
                    "type": "JSG.graph.expr.Term"
                }
            ]
        },
        "JSG.graph.expr.Sub": {
            "name": "JSG.graph.expr.Sub",
            "shortname": "Sub",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 357,
            "description": "A binary term to perform subtraction.",
            "is_constructor": 1,
            "extends": "JSG.graph.expr.Term",
            "params": [
                {
                    "name": "left",
                    "description": "The left term",
                    "type": "JSG.graph.expr.Term"
                },
                {
                    "name": "right",
                    "description": "The right term",
                    "type": "JSG.graph.expr.Term"
                }
            ]
        },
        "JSG.graph.expr.Mul": {
            "name": "JSG.graph.expr.Mul",
            "shortname": "Mul",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 388,
            "description": "A binary term to perform multiplication.",
            "is_constructor": 1,
            "extends": "JSG.graph.expr.Term",
            "params": [
                {
                    "name": "left",
                    "description": "The left term",
                    "type": "JSG.graph.expr.Term"
                },
                {
                    "name": "right",
                    "description": "The right term",
                    "type": "JSG.graph.expr.Term"
                }
            ]
        },
        "JSG.graph.expr.Div": {
            "name": "JSG.graph.expr.Div",
            "shortname": "Div",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 418,
            "description": "A binary term to perform division.",
            "is_constructor": 1,
            "extends": "JSG.graph.expr.Term",
            "params": [
                {
                    "name": "left",
                    "description": "The left term",
                    "type": "JSG.graph.expr.Term"
                },
                {
                    "name": "right",
                    "description": "The right term",
                    "type": "JSG.graph.expr.Term"
                }
            ]
        },
        "JSG.graph.expr.Bool": {
            "name": "JSG.graph.expr.Bool",
            "shortname": "Bool",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 450,
            "description": "A binary term to perform a boolean operation.",
            "is_constructor": 1,
            "extends": "JSG.graph.expr.Term",
            "params": [
                {
                    "name": "left",
                    "description": "The left term",
                    "type": "JSG.graph.expr.Term"
                },
                {
                    "name": "right",
                    "description": "The right term",
                    "type": "JSG.graph.expr.Term"
                }
            ]
        },
        "JSG.graph.expr.Cond": {
            "name": "JSG.graph.expr.Cond",
            "shortname": "Cond",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 556,
            "description": "A term subclass which uses a condition term to calculate its value.",
            "is_constructor": 1,
            "extends": "JSG.graph.expr.Term",
            "params": [
                {
                    "name": "condition",
                    "description": "The condition term which determines returned value.",
                    "type": "JSG.graph.expr.Term"
                },
                {
                    "name": "doOnTrue",
                    "description": "The term which provides the value if condition resolved to <code>true</code>.",
                    "type": "JSG.graph.expr.Term"
                },
                {
                    "name": "doOnFalse",
                    "description": "he term which provides the value if condition resolved to <code>false</code>.",
                    "type": "JSG.graph.expr.Term"
                }
            ]
        },
        "JSG.graph.expr.Func": {
            "name": "JSG.graph.expr.Func",
            "shortname": "Func",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr",
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 628,
            "description": "A term subclass which uses a function definition stored in {{#crossLink \"JSG.functions\"}}{{/crossLink}} to calculate\nits value.",
            "extends": "JSG.graph.expr.Term",
            "is_constructor": 1,
            "params": [
                {
                    "name": "funcid",
                    "description": "The name of the function to call.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "An optional list of paramters to pass to called function. The parameters are terms by itself.",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "item",
                    "description": "The function scope object.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ]
        },
        "JSG.graph.feedback.EdgeFeedback": {
            "name": "JSG.graph.feedback.EdgeFeedback",
            "shortname": "EdgeFeedback",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback",
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\EdgeFeedback.js",
            "line": 8,
            "description": "A Feedback instance for Edge items.",
            "extends": "JSG.graph.feedback.Feedback",
            "params": [
                {
                    "name": "fbItem",
                    "description": "The GraphItem this feedback is based on.",
                    "type": "JSG.graph.model.Edge"
                },
                {
                    "name": "fbView",
                    "description": "The View used to represent this feedback.",
                    "type": "JSG.ui.View"
                },
                {
                    "name": "orgItem",
                    "description": "The original GraphItem associated to this feedback.",
                    "type": "JSG.graph.model.Edge"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.feedback.Feedback": {
            "name": "JSG.graph.feedback.Feedback",
            "shortname": "Feedback",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback",
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "line": 29,
            "description": "The default Feedback instance.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "fbItem",
                    "description": "Model to use for Feedback.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "fbView",
                    "description": "View to use for Feedback.",
                    "type": "JSG.graph.view.GraphItemView"
                },
                {
                    "name": "orgItem",
                    "description": "Model of the original controller the feedback was derived from.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ]
        },
        "JSG.graph.feedback.FeedbackView": {
            "name": "JSG.graph.feedback.FeedbackView",
            "shortname": "FeedbackView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback",
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\FeedbackView.js",
            "line": 8,
            "extends": "JSG.ui.View",
            "is_constructor": 1,
            "deprecated": true,
            "deprecationMessage": "Do not use! Subject to change!!"
        },
        "JSG.graph.feedback.MoveFeedbackView": {
            "name": "JSG.graph.feedback.MoveFeedbackView",
            "shortname": "MoveFeedbackView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback",
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\MoveFeedbackView.js",
            "line": 8,
            "extends": "JSG.ui.View",
            "is_constructor": 1,
            "deprecated": true,
            "deprecationMessage": "Do not use! Subject to change!!"
        },
        "JSG.graph.feedback.OrthoEdgeFeedback": {
            "name": "JSG.graph.feedback.OrthoEdgeFeedback",
            "shortname": "OrthoEdgeFeedback",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback",
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\OrthoEdgeFeedback.js",
            "line": 8,
            "description": "A Feedback instance for Edge items which have an\n{{#crossLink \"JSG.graph.model.shapes.OrthoLineShape\"}}{{/crossLink}}.",
            "extends": "JSG.graph.feedback.EdgeFeedback",
            "params": [
                {
                    "name": "fbItem",
                    "description": "The GraphItem this feedback is based on.",
                    "type": "JSG.graph.model.Edge"
                },
                {
                    "name": "fbView",
                    "description": "The View used to represent this feedback.",
                    "type": "JSG.ui.View"
                },
                {
                    "name": "orgItem",
                    "description": "The original GraphItem associated to this feedback.",
                    "type": "JSG.graph.model.Edge"
                }
            ],
            "is_constructor": 1,
            "deprecated": true,
            "deprecationMessage": "CURRENTLY NOT USED ANYMORE! SUBJECT TO BE REMOVED!!"
        },
        "JSG.graph.feedback.PortFeedback": {
            "name": "JSG.graph.feedback.PortFeedback",
            "shortname": "PortFeedback",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback",
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\PortFeedback.js",
            "line": 9,
            "description": "A Feedback instance for Port items.",
            "extends": "JSG.graph.feedback.Feedback",
            "params": [
                {
                    "name": "fbItem",
                    "description": "The Port item this feedback is based on.",
                    "type": "JSG.graph.model.Port"
                },
                {
                    "name": "fbView",
                    "description": "The View used to represent this feedback.",
                    "type": "JSG.ui.View"
                },
                {
                    "name": "orgItem",
                    "description": "The original Port model associated to this feedback.",
                    "type": "JSG.graph.model.Port"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.interaction.SnapType": {
            "name": "JSG.graph.interaction.SnapType",
            "shortname": "SnapType",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js",
            "line": 8,
            "description": "SnapType constants.\n<b>Note:</b> for API internal usage only!",
            "is_constructor": 1,
            "access": "private",
            "tagname": ""
        },
        "JSG.graph.interaction.AbstractInteraction": {
            "name": "JSG.graph.interaction.AbstractInteraction",
            "shortname": "AbstractInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js",
            "line": 27,
            "description": "This class can be used for all Interactions which want to provide {{#crossLink \"JSG.graph.feedback.Feedback\"}}{{/crossLink}}s\nduring user interaction.</br>\nIt provides public accessible variables <code>feedback</code> and <code>actionFeedback</code>. These feedbacks can\nbe updated by overwriting {{#crossLink \"JSG.graph.interaction.AbstractInteraction/updateFeedback:method\"}}{{/crossLink}},\n{{#crossLink \"JSG.graph.interaction.AbstractInteraction/updateActionFeedback:method\"}}{{/crossLink}} or \n{{#crossLink \"JSG.graph.interaction.AbstractInteraction/updateSubFeedbacks:method\"}}{{/crossLink}} respectively. Finally\nthe {{#crossLink \"JSG.graph.interaction.AbstractInteraction/createCommand:method\"}}{{/crossLink}} gets called\nto generate the corresponding interaction command.<br/>\nThis class is frequently used for the JSG interactions. So refer to their source code for an example of an\nAbstractInteraction usage.",
            "extends": "JSG.graph.interaction.Interaction",
            "is_constructor": 1
        },
        "JSG.graph.interaction.ActionHandle": {
            "name": "JSG.graph.interaction.ActionHandle",
            "shortname": "ActionHandle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ActionHandle.js",
            "line": 8,
            "description": "An ActionHandle simply defines a relationship between a cursor style and a custom type string. Its typically used \nduring a user interaction to decide which cursor should be shown as feedback.<br/>\nFor predefined type constants please refer to its subclasses, e.g. {{#crossLink \"JSG.graph.view.selection.SelectionHandle\"}}{{/crossLink}}. \nAnd for predefined cursor styles see {{#crossLink \"JSG.ui.Cursor.Style\"}}{{/crossLink}}.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "An optional handle type. Passing <code>undefined</code> is allowed",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "cursor",
                    "description": "An optional cursor, as defined by {{#crossLink \"JSG.ui.Cursor.Style\"}}{{/crossLink}}. \nIf not defined {{#crossLink \"JSG.ui.Cursor.Style/AUTO:property\"}}{{/crossLink}} is used.",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "JSG.graph.interaction.TYPE": {
            "name": "JSG.graph.interaction.TYPE",
            "shortname": "TYPE",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\LinkHandle.js",
            "line": 33,
            "description": "Predefined link handle types.",
            "is_constructor": 1,
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.graph.interaction.ActionHandle.TYPE\"}}{{/crossLink}} instead."
        },
        "JSG.graph.interaction.CommandButtonActivator": {
            "name": "JSG.graph.interaction.CommandButtonActivator",
            "shortname": "CommandButtonActivator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CommandButtonActivator.js",
            "line": 9,
            "description": "An InteractionActivator used to execute a {{#crossLink \"JSG.graph.view.selection.CommandButton\"}}{{/crossLink}} command.<br/>\nCommandButtons define additional views to a {{#crossLink \"JSG.graph.view.selection.SelectionView\"}}{{/crossLink}}.\nThey can be set by implementing  {{#crossLink \"JSG.graph.model.GraphItemFactory/getCommandButtons:method\"}}{{/crossLink}}\nwhich is called from current SelectionView.",
            "extends": "JSG.graph.interaction.InteractionActivator",
            "is_constructor": 1
        },
        "JSG.graph.interaction.CreateBezierInteraction": {
            "name": "JSG.graph.interaction.CreateBezierInteraction",
            "shortname": "CreateBezierInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateBezierInteraction.js",
            "line": 9,
            "description": "An interaction to create a {{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}} with a \n{{#crossLink \"JSG.graph.model.shapes.BezierShape\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.CreatePolyLineInteraction",
            "is_constructor": 1,
            "params": [
                {
                    "name": "graphItem",
                    "description": "A node item with a bezier shape.",
                    "type": "JSG.graph.model.Node"
                }
            ]
        },
        "JSG.graph.interaction.CreateEdgeActivator": {
            "name": "JSG.graph.interaction.CreateEdgeActivator",
            "shortname": "CreateEdgeActivator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeActivator.js",
            "line": 9,
            "description": "An InteractionActivator used to activate a {{#crossLink \"JSG.graph.interaction.CreateEdgeInteraction\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.InteractionActivator",
            "is_constructor": 1
        },
        "JSG.graph.interaction.CreateEdgeInteraction": {
            "name": "JSG.graph.interaction.CreateEdgeInteraction",
            "shortname": "CreateEdgeInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeInteraction.js",
            "line": 8,
            "description": "An interaction to create an {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.CreateItemInteraction",
            "params": [
                {
                    "name": "graphItem",
                    "description": "An edge item to use for creation.",
                    "type": "JSG.graph.model.Edge"
                },
                {
                    "name": "label",
                    "description": "An optional default label for the new edge.",
                    "type": "String",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.interaction.CreateFriendActivator": {
            "name": "JSG.graph.interaction.CreateFriendActivator",
            "shortname": "CreateFriendActivator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendActivator.js",
            "line": 9,
            "description": "An InteractionActivator used to activate a {{#crossLink \"JSG.graph.interaction.CreateFriendInteraction\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.InteractionActivator",
            "is_constructor": 1
        },
        "JSG.graph.interaction.CreateFriendInteraction": {
            "name": "JSG.graph.interaction.CreateFriendInteraction",
            "shortname": "CreateFriendInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendInteraction.js",
            "line": 9,
            "description": "An interaction to create a friend graph item. The friends to create are specified by the list of \n{{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s.",
            "extends": "JSG.graph.interaction.CreateItemInteraction",
            "is_constructor": 1,
            "params": [
                {
                    "name": "friends",
                    "description": "A list of GraphItems which represents the friends to create.",
                    "type": "Array"
                },
                {
                    "name": "srcItem",
                    "description": "The graph item to create the friends for.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ]
        },
        "JSG.graph.interaction.CreateItemInteraction": {
            "name": "JSG.graph.interaction.CreateItemInteraction",
            "shortname": "CreateItemInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateItemInteraction.js",
            "line": 9,
            "description": "A general interaction used to create given {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}.<br/>\nNote: this class is seldom used directly. Instead one of its specialized subclasses, e.g. \n{{#crossLink \"JSG.graph.interaction.CreateNodeInteraction\"}}{{/crossLink}} or \n{{#crossLink \"JSG.graph.interaction.CreateEdgeInteraction\"}}{{/crossLink}}, should be used.",
            "extends": "JSG.graph.interaction.AbstractInteraction",
            "params": [
                {
                    "name": "graphItem",
                    "description": "The item to use for creation.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "label",
                    "description": "An optional default label for the new node.",
                    "type": "String",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.interaction.CreateNodeInteraction": {
            "name": "JSG.graph.interaction.CreateNodeInteraction",
            "shortname": "CreateNodeInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateNodeInteraction.js",
            "line": 8,
            "description": "An interaction to create a general {{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}} with the specified\n{{#crossLink \"JSG.graph.model.shapes.Shape\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.CreateItemInteraction",
            "params": [
                {
                    "name": "shape",
                    "description": "The node shape to use.",
                    "type": "JSG.graph.model.shapes.Shape"
                },
                {
                    "name": "label",
                    "description": "An optional default label for the new node.",
                    "type": "String",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.interaction.CreateOrthoEdgeInteraction": {
            "name": "JSG.graph.interaction.CreateOrthoEdgeInteraction",
            "shortname": "CreateOrthoEdgeInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateOrthoEdgeInteraction.js",
            "line": 8,
            "description": "An interaction to create an {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}} with an\n{{#crossLink \"JSG.graph.model.shapes.OrthoLineShape\"}}{{/crossLink}}. To specify the creation\nbehavior, namely automatic or manual layout, use one of the predefined\n{{#crossLink \"JSG.graph.interaction.CreateOrthoEdgeInteraction.CREATION_MODE\"}}{{/crossLink}} constants.",
            "extends": "JSG.graph.interaction.CreateEdgeInteraction",
            "params": [
                {
                    "name": "graphItem",
                    "description": "An edge to use for creation. If not given a new Edge with an OrthoLineShape will be created.",
                    "type": "JSG.graph.model.Edge",
                    "optional": true
                },
                {
                    "name": "creationMode",
                    "description": "The creation mode to use. If not given the <code>CLICK</code> mode is used for creation.",
                    "type": "JSG.graph.interaction.CreateOrthoEdgeInteraction.CREATION_MODE",
                    "optional": true
                },
                {
                    "name": "label",
                    "description": "An optional default label for the new edge.",
                    "type": "String",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.interaction.CreateOrthoEdgeInteraction.CREATION_MODE": {
            "name": "JSG.graph.interaction.CreateOrthoEdgeInteraction.CREATION_MODE",
            "shortname": "CreateOrthoEdgeInteraction.CREATION_MODE",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateOrthoEdgeInteraction.js",
            "line": 431,
            "description": "Creation mode constants to determine behavior of {{#crossLink \"JSG.graph.interaction.CreateOrthoEdgeInteraction\"}}{{/crossLink}}.",
            "is_constructor": 1,
            "static": 1
        },
        "JSG.graph.interaction.CreatePolyLineInteraction": {
            "name": "JSG.graph.interaction.CreatePolyLineInteraction",
            "shortname": "CreatePolyLineInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreatePolyLineInteraction.js",
            "line": 9,
            "description": "An interaction to create a {{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}} with a \n{{#crossLink \"JSG.graph.model.shapes.PolygonShape\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.AbstractInteraction",
            "params": [
                {
                    "name": "graphItem",
                    "description": "The node to create.",
                    "type": "JSG.graph.model.Node"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.interaction.DefaultKeyHandler": {
            "name": "JSG.graph.interaction.DefaultKeyHandler",
            "shortname": "DefaultKeyHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DefaultKeyHandler.js",
            "line": 8,
            "description": "Default key handler used by {{#crossLink \"JSG.graph.interaction.GraphInteraction\"}}{{/crossLink}}.</br>\nThis class is different from other InteractionActivators in a sense that it does not activate\nany interaction but rather handles <code>onKeyDown</code> and <code>onKeyUp</code> events itself.",
            "extends": "JSG.graph.interaction.InteractionActivator",
            "is_constructor": 1
        },
        "JSG.graph.interaction.Delegate": {
            "name": "JSG.graph.interaction.Delegate",
            "shortname": "Delegate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Delegate.js",
            "line": 5,
            "description": "This class is a general interface description for delegate objects which are used within feedback based \n{{#crossLink \"JSG.graph.interaction.Interaction\"}}{{/crossLink}}s.<br/>\nInteractions use delegates to allow customization of behavior or look without the need to subclass complete interaction.\nThat means the base interaction behavior is defined by the interaction itself and only small sub tasks of it can be\ninfluenced by delegates. Please refer to the documentation of an interaction to see if it supports a delegate and how\nit should work.<br/>\n<b>Note:</b> interactions which are based on feedback must provide a <code>getFeedback</code> method which returns \nthe used feedback.",
            "is_constructor": 1
        },
        "JSG.graph.interaction.DragDropActivator": {
            "name": "JSG.graph.interaction.DragDropActivator",
            "shortname": "DragDropActivator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropActivator.js",
            "line": 9,
            "description": "An InteractionActivator used to activate a {{#crossLink \"JSG.graph.interaction.DragDropInteraction\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.InteractionActivator",
            "is_constructor": 1
        },
        "JSG.graph.interaction.DragDropInteraction": {
            "name": "JSG.graph.interaction.DragDropInteraction",
            "shortname": "DragDropInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 8,
            "description": "Interaction to handle drag & drop from a {{#crossLink \"JSG.ui.shapelibrary.ShapeLibrary\"}}{{/crossLink}}\nto a {{#crossLink \"JSG.ui.GraphEditor\"}}{{/crossLink}}. This interaction is separated into\ntwo different interactions, namely <code>DragInteraction</code> and <code>DropInteraction</code>.\nIn most cases it is never required to use or overwrite on of these sub-interactions.</br></br>\n<b>Delegate support</b></br> The <code>DropInteraction</code> supports a delegate object which\ncan be set via {{#crossLink \"JSG.graph.interaction.DragDropInteraction/setDropDelegate:method\"}}{{/crossLink}}. The\npassed delegate must be an instance of {{#crossLink \"JSG.graph.interaction.DropDelegate\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.AbstractInteraction",
            "is_constructor": 1,
            "params": [
                {
                    "name": "srcViewer",
                    "description": "The ControllerViewer where the drag started.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "trgtViewer",
                    "description": "The ControllerViewer where the drop should be performed.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ]
        },
        "JSG.graph.interaction.DragDropInteraction.DnD": {
            "name": "JSG.graph.interaction.DragDropInteraction.DnD",
            "shortname": "DragDropInteraction.DnD",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 167,
            "description": "Base class for internally used sub interactions.",
            "extends": "JSG.graph.interaction.AbstractInteraction",
            "is_constructor": 1,
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer to use.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ]
        },
        "JSG.graph.interaction.DragDropInteraction.Drag": {
            "name": "JSG.graph.interaction.DragDropInteraction.Drag",
            "shortname": "DragDropInteraction.Drag",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 331,
            "description": "The drag interaction.",
            "extends": "JSG.graph.interaction.DragDropInteraction.DnD",
            "is_constructor": 1,
            "params": [
                {
                    "name": "srcViewer",
                    "description": "The ControllerViewer to use for this interaction.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ]
        },
        "JSG.graph.interaction.DragDropInteraction.Drop": {
            "name": "JSG.graph.interaction.DragDropInteraction.Drop",
            "shortname": "DragDropInteraction.Drop",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 361,
            "description": "The actual drop interaction.<br/>\nThis interaction uses a {{#crossLink \"JSG.graph.interaction.DropDelegate\"}}{{/crossLink}} which can be subclassed\nto customize the drop behavior. A delegate can be registered either by using\n{{#crossLink \"JSG.graph.interaction.DragDropInteraction.Drop/setDelegate:method\"}}{{/crossLink}} on this interaction\nor by calling {{#crossLink \"JSG.graph.interaction.DragDropInteraction/setDropDelegate:method\"}}{{/crossLink}} on the\nmain interaction.",
            "extends": "JSG.graph.interaction.DragDropInteraction.DnD",
            "is_constructor": 1,
            "params": [
                {
                    "name": "trgtViewer",
                    "description": "The ControllerViewer to use for this interaction.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "mainInteraction",
                    "description": "The main DragDropInteraction.",
                    "type": "JSG.graph.interaction.DragDropInteraction"
                }
            ]
        },
        "JSG.graph.interaction.DropDelegate": {
            "name": "JSG.graph.interaction.DropDelegate",
            "shortname": "DropDelegate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DropDelegate.js",
            "line": 4,
            "description": "The default delegate object for <code>JSG.graph.interaction.DragDropInteraction.Drop</code> of\n{{#crossLink \"JSG.graph.interaction.DragDropInteraction\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.Delegate",
            "is_constructor": 1
        },
        "JSG.graph.interaction.EditBezierShapeInteraction": {
            "name": "JSG.graph.interaction.EditBezierShapeInteraction",
            "shortname": "EditBezierShapeInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditBezierShapeInteraction.js",
            "line": 8,
            "description": "A EditShapeInteraction subclass to edit the points of a {{#crossLink \"JSG.graph.model.shapes.BezierShape\"}}{{/crossLink}}.<br/>",
            "extends": "JSG.graph.interaction.EditShapeInteraction",
            "is_constructor": 1
        },
        "JSG.graph.interaction.ShapeListener": {
            "name": "JSG.graph.interaction.ShapeListener",
            "shortname": "ShapeListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditShapeInteraction.js",
            "line": 388,
            "description": "Inner class used to listen for events with id of {{#crossLink \"JSG.graph.model.events.Event/SHAPE:property\"}}{{/crossLink}}.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "interaction",
                    "description": "The base interaction to be updated.",
                    "type": "JSG.graph.interaction.EditShapeInteraction"
                }
            ]
        },
        "JSG.graph.interaction.EditLineShapeInteraction": {
            "name": "JSG.graph.interaction.EditLineShapeInteraction",
            "shortname": "EditLineShapeInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditLineShapeInteraction.js",
            "line": 8,
            "description": "A EditShapeInteraction subclass to edit the points of a {{#crossLink \"JSG.graph.model.shapes.LineShape\"}}{{/crossLink}}.<br/>",
            "extends": "JSG.graph.interaction.EditShapeInteraction",
            "is_constructor": 1
        },
        "JSG.graph.interaction.EditShapeInteraction": {
            "name": "JSG.graph.interaction.EditShapeInteraction",
            "shortname": "EditShapeInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditShapeInteraction.js",
            "line": 8,
            "description": "Interaction that handles the editing of points of a {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s \n{{#crossLink \"JSG.graph.model.shapes.Shape\"}}{{/crossLink}}.<br/>\nSee {{#crossLink \"JSG.graph.interaction.EditLineShapeInteraction\"}}{{/crossLink}} and \n{{#crossLink \"JSG.graph.interaction.EditBezierShapeInteraction\"}}{{/crossLink}} for specialized subclasses.",
            "extends": "JSG.graph.interaction.Interaction",
            "is_constructor": 1
        },
        "JSG.graph.interaction.EditTextActivator": {
            "name": "JSG.graph.interaction.EditTextActivator",
            "shortname": "EditTextActivator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextActivator.js",
            "line": 8,
            "description": "An InteractionActivator used to activate a {{#crossLink \"JSG.graph.interaction.EditTextInteraction\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.InteractionActivator",
            "is_constructor": 1
        },
        "JSG.graph.interaction.EditTextInteraction": {
            "name": "JSG.graph.interaction.EditTextInteraction",
            "shortname": "EditTextInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 8,
            "description": "Interaction that handles the text editing. When activated a contenteditable div is created. While editing\nthe position of the div is rearranged to reflect the node text alignment.",
            "extends": "JSG.graph.interaction.AbstractInteraction",
            "is_constructor": 1
        },
        "JSG.graph.interaction.GraphInteraction": {
            "name": "JSG.graph.interaction.GraphInteraction",
            "shortname": "GraphInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\GraphInteraction.js",
            "line": 9,
            "description": "Our own InteractionDispatcher used as default interaction in {{#crossLink \"JSG.ui.viewer.GraphViewer\"}}{{/crossLink}}.\nBy default this interaction is registered for the {{#crossLink \"JSG.graph.model.settings.ViewMode/DEFAULT:property\"}}{{/crossLink}}\nview mode within {{#crossLink \"JSG.ui.GraphEditor\"}}{{/crossLink}}.</br>\nSubclasses can overwrite to register custom {{#crossLink \"JSG.graph.interaction.InteractionActivator\"}}{{/crossLink}}s. \nSee {{#crossLink \"JSG.graph.interaction.GraphInteraction/registerActivators:method\"}}{{/crossLink}} and to customize \nactivators execution order refer to the various <code>_compareXX</code> or the \n{{#crossLink \"JSG.graph.interaction.GraphInteraction/sortActivatorsForFunc:method\"}}{{/crossLink}} methods.",
            "extends": "JSG.graph.interaction.InteractionDispatcher",
            "is_constructor": 1
        },
        "JSG.graph.interaction.Highlighter": {
            "name": "JSG.graph.interaction.Highlighter",
            "shortname": "Highlighter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Highlighter.js",
            "line": 9,
            "description": "Helper class which provides useful methods to highlight a possible move or drop target and to create insert markers.\nTo create highlights use {{#crossLink \"JSG.graph.interaction.Highlighter/createHighlight:method\"}}{{/crossLink}}\nor {{#crossLink \"JSG.graph.interaction.Highlighter/createPositionHighlight:method\"}}{{/crossLink}}. The created\nhighlights can then be added to any layer of a {{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}}. To customize\nthese highlights use options objects like defined in {{#crossLink \"JSG.graph.interaction.Highlighter/OPTIONS:property\"}}{{/crossLink}}\nor {{#crossLink \"JSG.graph.interaction.Highlighter/MARKER_OPTIONS:property\"}}{{/crossLink}}.\nFinally it is possible to subclass Highlighter and to overwrite the methods of interest. To globally register \na customized Highlighter simply replace {{#crossLink \"JSG.graph.interaction.Highlighter/getDefault:method\"}}{{/crossLink}} \nwith a function which returns the custom Highlighter subclass.",
            "is_constructor": 1,
            "since": "1.6.3"
        },
        "JSG.graph.interaction.Interaction": {
            "name": "JSG.graph.interaction.Interaction",
            "shortname": "Interaction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 25,
            "description": "Base class for an Interaction.</br>\nProvides stubs for all event functions which can be overwritten by subclasses.</br>\nNote: besides the <code>activate</code> and <code>deactivate</code> methods a simple default Interaction\nlifecycle is given. To normally finish an Interaction call {{#crossLink \"JSG.graph.interaction.Interaction/finishInteraction:method\"}}{{/crossLink}}.\nIn analog a call to {{#crossLink \"JSG.graph.interaction.Interaction/cancelInteraction:method\"}}{{/crossLink}} signals\nan abnormal finish and cancels this Interaction. Notice that in both cases {{#crossLink \"JSG.graph.interaction.Interaction/didFinish:method\"}}{{/crossLink}}\ngets called. As default the normal Interaction termination is triggered by {{#crossLink \"JSG.graph.interaction.Interaction/onMouseUp:method\"}}{{/crossLink}}\nand canceled by {{#crossLink \"JSG.graph.interaction.Interaction/onMouseExit:method\"}}{{/crossLink}}.\nTo generally cancel an Interaction on mouse or key event \n{{#crossLink \"JSG.graph.interaction.Interaction/doCancelInteractionExit:method\"}}{{/crossLink}}\nis requested and can be overwritten by subclasses.<br/>\nHere is a brief summary of the Interaction lifecycle:\n<ul>\n\t<li>activate - called on Interaction activation: good place for initialization\n\t<li>finishInteraction - called on normal finish\n\t<li>willFinish - called by <code>finishInteraction</code>: good place to execute a corresponding Command\n\t<li>cancelInteraction - called on unnormal finish: good place to perform recover tasks\n\t<li>didFinish - called to signal Interaction has finished: can be used to clean up\n\t<li>deactivate - called on Interaction deactivation: final possibility to perform clean up tasks\n<ul>",
            "is_constructor": 1
        },
        "JSG.graph.interaction.InteractionActivator": {
            "name": "JSG.graph.interaction.InteractionActivator",
            "shortname": "InteractionActivator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionActivator.js",
            "line": 9,
            "description": "InteractionActivators are used by {{#crossLink \"JSG.graph.interaction.InteractionDispatcher\"}}{{/crossLink}}s \nto trigger different {{#crossLink \"JSG.graph.interaction.Interaction\"}}{{/crossLink}}s. The activator is responsible\nfor activating its corresponding interaction. That means that all the logic to decide if an interaction should \nbecome active or not is encapsulated inside the activator. Furthermore the activator is a good place to add\nadditional views when its InteractionDispatcher is still the active interaction.</br>\nIn order to be notified by an InteractionDispatcher the InteractionActivator has to implement\nthe corresponding Interaction methods. The dispatcher calls this methods with an additional\nparameter, namely the InteractionDispatcher itself.</br>",
            "example": [
                "\n\tvar myActivator.onMouseDown = function(event, viewer, dispatcher) {\n\t\t//... do some stuff\n\t};"
            ],
            "is_constructor": 1
        },
        "JSG.graph.interaction.InteractionDispatcher": {
            "name": "JSG.graph.interaction.InteractionDispatcher",
            "shortname": "InteractionDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionDispatcher.js",
            "line": 10,
            "description": "An InteractionDispatcher is an Interaction subclass which is used to dispatch incoming events to\nmultiple registered {{#crossLink \"JSG.graph.interaction.InteractionActivator\"}}{{/crossLink}}s.\nThe events to dispatch are not specified and should be implemented by subclasses \nby overwriting corresponding methods.",
            "example": [
                "\n\tCustomDispatcher.prototype.onMouseDown = function(event, viewer) {\n\t\tvar i,\n\t\t\tactivators = this.getActivatorsForFunc(\"onMouseDown\");\n\t\tfor (i = 0; i < activators.length; i++) {\n\t\t\tactivators[i].onMouseDown(event, viewer, this);\n\t\t\tif(event.hasActivated === true) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};"
            ],
            "extends": "JSG.graph.interaction.Interaction",
            "is_constructor": 1
        },
        "JSG.graph.interaction.InteractionHandler": {
            "name": "JSG.graph.interaction.InteractionHandler",
            "shortname": "InteractionHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 8,
            "description": "The base InteractionHandler which is registered to {{#crossLink \"JSG.ui.graphics.GraphicSystem\"}}{{/crossLink}}\nby default.<br/>\nAn InteractonHandler will receive all mouse, key and touch events from the GraphicSystem and\ndispatches them to the currently active {{#crossLink \"JSG.graph.interaction.Interaction\"}}{{/crossLink}}.\nIf no interaction is currently set active the default interaction of {{#crossLink \"JSG.ui.viewer.ControllerViewer\"}}{{/crossLink}}\nis activated and used. Hence, {{#crossLink \"JSG.ui.viewer.ControllerViewer/getDefaultInteraction:method\"}}{{/crossLink}}\nshould never return <code>undefined</code>.<br/>\nAnother main feature of an InteractionHandler is the handling of {{#crossLink \"JSG.graph.command.Command\"}}{{/crossLink}}s.\nTo support undo/redo a task should be wrapped into a Command and should be executed via\n{{#crossLink \"JSG.graph.interaction.InteractionHandler/execute:method\"}}{{/crossLink}}.<br/>\nFurthermore this class defines some convenience methods like \n{{#crossLink \"JSG.graph.interaction.InteractionHandler/copySelection:method\"}}{{/crossLink}} or \n{{#crossLink \"JSG.graph.interaction.InteractionHandler/paste:method\"}}{{/crossLink}} too.",
            "params": [
                {
                    "name": "viewer",
                    "description": "Viewer to attach to the InteractionHandler",
                    "type": "JSG.ui.viewer.ScrollableViewer"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.interaction.InteractionUtils": {
            "name": "JSG.graph.interaction.InteractionUtils",
            "shortname": "InteractionUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionUtils.js",
            "line": 8,
            "description": "Defines useful static methods for {{#crossLink \"JSG.graph.interaction.Interaction\"}}{{/crossLink}}s.",
            "is_constructor": 1
        },
        "JSG.graph.interaction.LinkActivator": {
            "name": "JSG.graph.interaction.LinkActivator",
            "shortname": "LinkActivator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\LinkActivator.js",
            "line": 8,
            "description": "An InteractionActivator used to activate a {{#crossLink \"JSG.graph.interaction.LinkInteraction\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.InteractionActivator",
            "is_constructor": 1
        },
        "JSG.graph.interaction.LinkHandle": {
            "name": "JSG.graph.interaction.LinkHandle",
            "shortname": "LinkHandle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\LinkHandle.js",
            "line": 9,
            "description": "An ActionHandle subclass to represent a possible link execution.<br/>\n Some execution types are predefined by {{#crossLink \"JSG.graph.interaction.LinkHandle.TYPE\"}}{{/crossLink}} but custom\n handles can specify their own. Additionally a {JSG.graph.controller.GraphItemController} can be registered at\n creation time for easier access.",
            "extends": "JSG.graph.interaction.ActionHandle",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "An optional handle type. Passing <code>undefined</code> is allowed",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "cursor",
                    "description": "An optional cursor, as defined by {{#crossLink \"JSG.ui.Cursor.Style\"}}{{/crossLink}}. \n If not defined {{#crossLink \"JSG.ui.Cursor.Style/AUTO:property\"}}{{/crossLink}} is used.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "controller",
                    "description": "An optional controller instance.",
                    "type": "JSG.graph.controller.GraphItemController",
                    "optional": true
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Seems to be out-dated. ActionHandle is enough..."
        },
        "JSG.graph.interaction.MarqueeActivator": {
            "name": "JSG.graph.interaction.MarqueeActivator",
            "shortname": "MarqueeActivator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeActivator.js",
            "line": 8,
            "description": "An InteractionActivator used to activate a {{#crossLink \"JSG.graph.interaction.MarqueeInteraction\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.InteractionActivator",
            "is_constructor": 1
        },
        "JSG.graph.interaction.MarqueeInteraction": {
            "name": "JSG.graph.interaction.MarqueeInteraction",
            "shortname": "MarqueeInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeInteraction.js",
            "line": 9,
            "description": "An interaction subclass that handles the selection of one or several {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s.\nThis is done by spanning a rectangle area over all items which should be selected.",
            "extends": "JSG.graph.interaction.Interaction",
            "is_constructor": 1
        },
        "JSG.graph.interaction.MoveActivator": {
            "name": "JSG.graph.interaction.MoveActivator",
            "shortname": "MoveActivator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveActivator.js",
            "line": 8,
            "description": "An InteractionActivator used to activate a {{#crossLink \"JSG.graph.interaction.MoveInteraction\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.InteractionActivator",
            "is_constructor": 1
        },
        "JSG.graph.interaction.MoveAlignHelper": {
            "name": "JSG.graph.interaction.MoveAlignHelper",
            "shortname": "MoveAlignHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveAlignHelper.js",
            "line": 9,
            "description": "Helper class to align feedback on {{#crossLink \"JSG.graph.interaction.MoveInteraction\"}}{{/crossLink}}s. An instance\nof this class is registered to the {{#crossLink \"JSG.graph.interaction.MoveDelegate\"}}{{/crossLink}} of a \nMoveInteraction.",
            "is_constructor": 1,
            "deprecated": true,
            "deprecationMessage": "Don't use yet. Currently under development."
        },
        "JSG.graph.interaction.MoveDelegate": {
            "name": "JSG.graph.interaction.MoveDelegate",
            "shortname": "MoveDelegate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 4,
            "description": "The default delegate object for a {{#crossLink \"JSG.graph.interaction.MoveInteraction\"}}{{/crossLink}}.<br/>",
            "extends": "JSG.graph.interaction.Delegate",
            "is_constructor": 1
        },
        "JSG.graph.interaction.MoveInteraction": {
            "name": "JSG.graph.interaction.MoveInteraction",
            "shortname": "MoveInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveInteraction.js",
            "line": 5,
            "description": "Interaction to handle movement of {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s.</br>\nMovement is done either by mouse/touch drag or cursor keys. Copy on move is supported too and is \ntriggered by the <code>ctrl</code> key.</br></br>\nThis interaction uses a {{#crossLink \"JSG.graph.interaction.MoveDelegate\"}}{{/crossLink}} which can be subclassed \nto customize the move behavior. To register a custom delegate use\n{{#crossLink \"JSG.graph.interaction.MoveInteraction.Drop/setDelegate:method\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.AbstractInteraction",
            "is_constructor": 1
        },
        "JSG.graph.interaction.PanInteraction": {
            "name": "JSG.graph.interaction.PanInteraction",
            "shortname": "PanInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\PanInteraction.js",
            "line": 8,
            "description": "An interaction subclass to perform a pan gesture.<br/>\nThis gesture is used on touch devices to scroll a view.",
            "extends": "JSG.graph.interaction.Interaction",
            "is_constructor": 1
        },
        "JSG.graph.interaction.PanInteraction.Activator": {
            "name": "JSG.graph.interaction.PanInteraction.Activator",
            "shortname": "PanInteraction.Activator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\PanInteraction.js",
            "line": 46,
            "description": "An InteractionActivator used to activate a {{#crossLink \"JSG.graph.interaction.PanInteraction\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.InteractionActivator",
            "is_constructor": 1
        },
        "JSG.graph.interaction.PinchInteraction": {
            "name": "JSG.graph.interaction.PinchInteraction",
            "shortname": "PinchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\PinchInteraction.js",
            "line": 8,
            "description": "An interaction subclass to perform a pinch gesture.<br/>\nThis gesture is used on touch devices to zoom in our out with two fingers.",
            "extends": "JSG.graph.interaction.Interaction",
            "is_constructor": 1
        },
        "JSG.graph.interaction.PinchInteraction.Activator": {
            "name": "JSG.graph.interaction.PinchInteraction.Activator",
            "shortname": "PinchInteraction.Activator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\PinchInteraction.js",
            "line": 42,
            "description": "An InteractionActivator used to activate a {{#crossLink \"JSG.graph.interaction.PinchInteraction\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.InteractionActivator",
            "is_constructor": 1
        },
        "JSG.graph.interaction.ReadOnlyInteraction": {
            "name": "JSG.graph.interaction.ReadOnlyInteraction",
            "shortname": "ReadOnlyInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ReadOnlyInteraction.js",
            "line": 8,
            "description": "Default read-only mode interaction based on GraphInteraction.<br/>\nIn this view mode only selection is possible. To give a visual feedback for this mode the grid is hidden and the\nselection style of registered {{#crossLink \"JSG.graph.view.selection.SelectionView\"}}{{/crossLink}} is adjusted.\nBoth is done in {{#crossLink \"JSG.graph.interaction.ReadOnlyInteraction/initAsDefault:method\"}}{{/crossLink}} and\nreverted in {{#crossLink \"JSG.graph.interaction.ReadOnlyInteraction/disposeAsDefault:method\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.GraphInteraction",
            "is_constructor": 1
        },
        "JSG.graph.interaction.ReshapeActivator": {
            "name": "JSG.graph.interaction.ReshapeActivator",
            "shortname": "ReshapeActivator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ReshapeActivator.js",
            "line": 8,
            "description": "An InteractionActivator used to activate a {{#crossLink \"JSG.graph.interaction.ReshapeInteraction\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.InteractionActivator",
            "is_constructor": 1
        },
        "JSG.graph.interaction.ReshapeInteraction": {
            "name": "JSG.graph.interaction.ReshapeInteraction",
            "shortname": "ReshapeInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ReshapeInteraction.js",
            "line": 8,
            "description": "Interaction to do a reshape of a selected {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}.</br>\nA reshape does not change the fundamental shape of a GraphItem, instead the shape is only changed proportional by \naltering special, so called reshape coordinates. See {{#crossLink \"JSG.graph.model.GraphItem/setReshapeCoordinates:method\"}}{{/crossLink}}\nand {{#crossLink \"JSG.graph.model.GraphItem/getReshapeCoordinates:method\"}}{{/crossLink}} too.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "activeHandle",
                    "description": "A handle of type {{#crossLink \"JSG.graph.view.selection.SelectionHandle.TYPE/RESHAPE:property\"}}{{/crossLink}}",
                    "type": "JSG.graph.view.selection.SelectionHandle"
                }
            ]
        },
        "JSG.graph.interaction.ResizeActivator": {
            "name": "JSG.graph.interaction.ResizeActivator",
            "shortname": "ResizeActivator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeActivator.js",
            "line": 8,
            "description": "An InteractionActivator used to activate a {{#crossLink \"JSG.graph.interaction.ResizeInteraction\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.InteractionActivator",
            "is_constructor": 1
        },
        "JSG.graph.interaction.ResizeEdgeInteraction": {
            "name": "JSG.graph.interaction.ResizeEdgeInteraction",
            "shortname": "ResizeEdgeInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeEdgeInteraction.js",
            "line": 8,
            "description": "A special interaction to handle resize of {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}s.</br>\nFor a more general resize interaction see {{#crossLink \"JSG.graph.interaction.ResizeItemInteraction\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.AbstractInteraction",
            "is_constructor": 1,
            "params": [
                {
                    "name": "activeHandle",
                    "description": "The SelectionHandle to use for resize.",
                    "type": "JSG.graph.view.selection.SelectionHandle"
                }
            ]
        },
        "JSG.graph.interaction.ResizeInteraction": {
            "name": "JSG.graph.interaction.ResizeInteraction",
            "shortname": "ResizeInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeInteraction.js",
            "line": 8,
            "description": "A general interaction to handle resize of {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s.</br> \nThis can be used to perform a resize based on the {{#crossLink \"JSG.geometry.BoundingBox\"}}{{/crossLink}} of one\nor several GraphItems. For other, somewhat specialized resize interactions see\n{{#crossLink \"JSG.graph.interaction.ResizeEdgeInteraction\"}}{{/crossLink}},\n{{#crossLink \"JSG.graph.interaction.ResizeOrthoEdgeInteraction\"}}{{/crossLink}} and\n{{#crossLink \"JSG.graph.interaction.ResizeLineNodeInteraction\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.AbstractInteraction",
            "is_constructor": 1,
            "params": [
                {
                    "name": "activeHandle",
                    "description": "The SelectionHandle to use for resize.",
                    "type": "JSG.graph.view.selection.SelectionHandle"
                }
            ]
        },
        "JSG.graph.interaction.FeedbackStructure": {
            "name": "JSG.graph.interaction.FeedbackStructure",
            "shortname": "FeedbackStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeInteraction.js",
            "line": 227,
            "description": "Internally used structure to track information during resize.<br/>\nThis namely stores and updates the relation between the BoundingBox of given feedback and the BoundingBox of current\nselection. This is useful for multiple selection.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "feedback",
                    "description": "The feedback to create this structure for",
                    "type": "JSG.graph.feedback.Feedback"
                },
                {
                    "name": "selbbox",
                    "description": "The BoundingBox of current selection.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ]
        },
        "JSG.graph.interaction.ResizeSnapHelper": {
            "name": "JSG.graph.interaction.ResizeSnapHelper",
            "shortname": "ResizeSnapHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeInteraction.js",
            "line": 295,
            "description": "A private custom snap helper for resize interaction",
            "extends": "JSG.graph.interaction.SnapHelper",
            "is_constructor": 1,
            "since": "1.6.0"
        },
        "JSG.graph.interaction.ResizeLineNodeInteraction": {
            "name": "JSG.graph.interaction.ResizeLineNodeInteraction",
            "shortname": "ResizeLineNodeInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeLineNodeInteraction.js",
            "line": 8,
            "description": "A special interaction to handle resize of {{#crossLink \"JSG.graph.model.LineNode\"}}{{/crossLink}}s.</br> \nFor a more general resize interaction see {{#crossLink \"JSG.graph.interaction.ResizeItemInteraction\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.AbstractInteraction",
            "is_constructor": 1,
            "params": [
                {
                    "name": "handle",
                    "description": "The SelectionHandle to use for resize.",
                    "type": "JSG.graph.view.selection.SelectionHandle"
                }
            ]
        },
        "JSG.graph.interaction.ResizeOrthoEdgeInteraction": {
            "name": "JSG.graph.interaction.ResizeOrthoEdgeInteraction",
            "shortname": "ResizeOrthoEdgeInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeOrthoEdgeInteraction.js",
            "line": 9,
            "description": "A special interaction to handle resize of {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}s with an orthogonal\nshape, like {{#crossLink \"JSG.graph.model.shapes.OrthoLineShape\"}}{{/crossLink}}.</br>\nFor a more general resize interaction see {{#crossLink \"JSG.graph.interaction.ResizeItemInteraction\"}}{{/crossLink}}.<br/>\nThis interaction uses a private delegate object to perform its tasks. That is because a resize of an orthogonal\nedge not necessarily works like a normal edge resize, but instead might adds or removes points. So the delegate is\neither an instance of of {{#crossLink \"JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate\"}}{{/crossLink}} \nor {{#crossLink \"JSG.graph.interaction.ResizeOrthoEdgeInteraction.AddPointsDelegate\"}}{{/crossLink}}. Which one is\nused depends on the line point which is dragged and is settled in\n{{#crossLink \"JSG.graph.interaction.ResizeOrthoEdgeInteraction/_createSelectionFeedback:method\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.ResizeEdgeInteraction",
            "is_constructor": 1,
            "params": [
                {
                    "name": "activeHandle",
                    "description": "The SelectionHandle to use for resize.",
                    "type": "JSG.graph.view.selection.SelectionHandle"
                }
            ]
        },
        "JSG.graph.interaction.ResizeDelegate": {
            "name": "JSG.graph.interaction.ResizeDelegate",
            "shortname": "ResizeDelegate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeOrthoEdgeInteraction.js",
            "line": 114,
            "description": "The delegate object to use for a simple resize.<br/>\n<b>Note:</b> this class is not intended to be used outside of {{#crossLink \"JSG.graph.interaction.ResizeOrthoEdgeInteraction\"}}{{/crossLink}}!",
            "params": [
                {
                    "name": "interaction",
                    "description": "The main interaction to which this delegate is registered.",
                    "type": "JSG.graph.interaction.ResizeOrthoEdgeInteraction"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.interaction.AddPointsDelegate": {
            "name": "JSG.graph.interaction.AddPointsDelegate",
            "shortname": "AddPointsDelegate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeOrthoEdgeInteraction.js",
            "line": 505,
            "description": "The delegate object to use for adding new points on a resize.<br/>\n<b>Note:</b> this class is not intended to be used outside of {{#crossLink \"JSG.graph.interaction.ResizeOrthoEdgeInteraction\"}}{{/crossLink}}!",
            "extends": "JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate",
            "params": [
                {
                    "name": "interaction",
                    "description": "The main interaction to which this delegate is registered.",
                    "type": "JSG.graph.interaction.ResizeOrthoEdgeInteraction"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.interaction.RotateActivator": {
            "name": "JSG.graph.interaction.RotateActivator",
            "shortname": "RotateActivator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\RotateActivator.js",
            "line": 8,
            "description": "An InteractionActivator used to activate a {{#crossLink \"JSG.graph.interaction.RotateInteraction\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.InteractionActivator",
            "is_constructor": 1
        },
        "JSG.graph.interaction.RotateInteraction": {
            "name": "JSG.graph.interaction.RotateInteraction",
            "shortname": "RotateInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\RotateInteraction.js",
            "line": 8,
            "description": "Interaction to handle rotation of {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s.</br>",
            "extends": "JSG.graph.interaction.AbstractInteraction",
            "is_constructor": 1
        },
        "JSG.graph.interaction.SelectionChecker": {
            "name": "JSG.graph.interaction.SelectionChecker",
            "shortname": "SelectionChecker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SelectionChecker.js",
            "line": 8,
            "description": "A <code>SelectionChecker</code> is used to verify specified controller objects usually before they are selected. The  \ndefault implementation can be received via {{#crossLink \"JSG.graph.interaction.SelectionChecker.getDefault:method\"}}{{/crossLink}}.\nApplications may replace this method to return a custom checker object. The returned object must provide a \n<code>checkSingle(selection, viewer)</code> and a <code>checkMulti(selection, viewer)</code> method.",
            "deprecated": true,
            "deprecationMessage": "DON'T USE!!! SUBJECT TO CHANGE!!!"
        },
        "JSG.graph.interaction.SnapHelper": {
            "name": "JSG.graph.interaction.SnapHelper",
            "shortname": "SnapHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SnapHelper.js",
            "line": 9,
            "description": "A helper class which implements a snap feature. This feature is used during interactions like \n{{#crossLink \"JSG.graph.interaction.MoveInteraction\"}}{{/crossLink}} or \n{{#crossLink \"JSG.graph.interaction.DragDropInteraction\"}}{{/crossLink}} to align corresponding feedbacks to other \n{{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s. The current align position is visualized by showing a so \ncalled snap-line which is created by calling {{#crossLink \"JSG.graph.interaction.SnapHelper/createSnapFeedback:method\"}}{{/crossLink}}.<br/>\nTo use this feature either call {{#crossLink \"JSG.graph.interaction.SnapHelper/snapToBBox:method\"}}{{/crossLink}} or\n{{#crossLink \"JSG.graph.interaction.SnapHelper/snapToRect:method\"}}{{/crossLink}} to determine the offset required to \nsnap. The returned offset can then be used to update the feedback location or as constraint for further alignment.",
            "example": [
                "\n\tvar snaphelper = JSG.graph.interaction.SnapHelper.getDefault();\n\tif(snaphelper.doSnap(event, viewer)) {\n\t\tvar bbox = feedback.getBoundingBox();\n\t\tvar offset = snaphelper.snapToBBox(bbox, undefined, viewer);\n\t\tbbox.setTopLeft(bbox.getTopLeft().add(offset));\n\t\tfeedback.setBoundingBoxTo(bbox);\n\t} \n\nThe snap-feature can be customized by subclassing this class to overwrite the methods of interest. To globally register \na customized SnapHelper simply replace {{#crossLink \"JSG.graph.interaction.SnapHelper/getDefault:method\"}}{{/crossLink}} with a \nfunction which returns an instance of the subclass. If a global registration is not wanted a customized SnapHelper\ncan be usually registered directly to any classes which use a SnapHelper."
            ],
            "is_constructor": 1,
            "deprecated": true,
            "deprecationMessage": "Don't use yet. Currently under development."
        },
        "JSG.graph.interaction.TooltipActivator": {
            "name": "JSG.graph.interaction.TooltipActivator",
            "shortname": "TooltipActivator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\TooltipActivator.js",
            "line": 8,
            "description": "An InteractionActivator used to activate a tooltip.",
            "extends": "JSG.graph.interaction.InteractionActivator",
            "is_constructor": 1
        },
        "JSG.graph.interaction.ViewInteraction": {
            "name": "JSG.graph.interaction.ViewInteraction",
            "shortname": "ViewInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ViewInteraction.js",
            "line": 8,
            "description": "A ViewInteraction simply passes each retrieved event to its registered View instance.",
            "extends": "JSG.graph.interaction.Interaction",
            "params": [
                {
                    "name": "A",
                    "description": "view instance to pass the events to.",
                    "type": "JSG.ui.View"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.interaction.ViewInteraction.Activator": {
            "name": "JSG.graph.interaction.ViewInteraction.Activator",
            "shortname": "ViewInteraction.Activator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ViewInteraction.js",
            "line": 153,
            "description": "An InteractionActivator used to activate a {{#crossLink \"JSG.graph.interaction.ViewInteraction\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.InteractionActivator",
            "is_constructor": 1
        },
        "JSG.graph.interaction.ZoomInteraction": {
            "name": "JSG.graph.interaction.ZoomInteraction",
            "shortname": "ZoomInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction",
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ZoomInteraction.js",
            "line": 8,
            "description": "An interaction subclass that handles zooming using the mouse.\nThis is done by spanning a rectangle area over the area, that should be zoomed to.",
            "extends": "JSG.graph.interaction.Interaction",
            "is_constructor": 1,
            "since": "1.6.0"
        },
        "JSG.graph.model.events.AttributeChangeEvent": {
            "name": "JSG.graph.model.events.AttributeChangeEvent",
            "shortname": "AttributeChangeEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\AttributeChangeEvent.js",
            "line": 9,
            "description": "A special event subclass to handle the value change of an {{#crossLink \"JSG.graph.attr.Attribute\"}}{{/crossLink}}.\n<b>Note:</b> in case of an {{#crossLink \"JSG.graph.attr.AttributeList\"}}{{/crossLink}} the\n<code>newValue</code> contains the added or removed attribute and \n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent/getOldValue:method\"}}{{/crossLink}}\nalways returns <code>undefined</code>",
            "is_constructor": 1,
            "extends": "JSG.graph.model.events.Event",
            "params": [
                {
                    "name": "detailId",
                    "description": "One of the predefined detail IDs to classify the kind of change.",
                    "type": "String"
                },
                {
                    "name": "attribute",
                    "description": "The attribute that will be changed.",
                    "type": "JSG.graph.attr.Attribute"
                },
                {
                    "name": "newValue",
                    "description": "The new attribute value.",
                    "type": "JSG.graph.expr.Expression | Object"
                }
            ]
        },
        "JSG.graph.model.events.AttributeListener": {
            "name": "JSG.graph.model.events.AttributeListener",
            "shortname": "AttributeListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\AttributeListener.js",
            "line": 9,
            "description": "A general abstract listener to handle attribute and layout attribute events. Subclasses should not overwrite the \n<code>handlePreEvent</code> or <code>handlePostEvent</code> methods. Instead this class provides\nempty stub methods to handle attribute events which are intended to be overwritten.",
            "is_constructor": 1,
            "extends": "JSG.graph.model.events.EventListener"
        },
        "JSG.graph.model.events.EdgeListener": {
            "name": "JSG.graph.model.events.EdgeListener",
            "shortname": "EdgeListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\EdgeListener.js",
            "line": 9,
            "description": "A general abstract listener to handle edge events. Subclasses should not overwrite the \n<code>handlePreEvent</code> or <code>handlePostEvent</code> methods. Instead this class provides\nempty stub methods to handle edge events which are intended to be overwritten.",
            "is_constructor": 1,
            "extends": "JSG.graph.model.events.EventListener"
        },
        "JSG.graph.model.events.Event": {
            "name": "JSG.graph.model.events.Event",
            "shortname": "Event",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\Event.js",
            "line": 26,
            "description": "A simple event object to signal model changes. </br>\n<b>Node:</b> besides the event <code>id</code> and the <code>doIt</code> flag, which are always \npresent, all other fields are optional. So the existing of event fields depend on the actual \nevent instance and the context in which it is send.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The unique event id.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The event value.",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "JSG.graph.model.events.EventDispatcher": {
            "name": "JSG.graph.model.events.EventDispatcher",
            "shortname": "EventDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\EventDispatcher.js",
            "line": 8,
            "description": "This class maps listeners to events and provides methods to notify them.",
            "is_constructor": 1
        },
        "JSG.graph.model.events.EventListener": {
            "name": "JSG.graph.model.events.EventListener",
            "shortname": "EventListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\EventListener.js",
            "line": 9,
            "description": "The base class for all event listener objects. This class specifies the methods each listener\nmust implement. As convenience it provides empty implementations for each defined method.",
            "is_constructor": 1
        },
        "JSG.graph.model.events.FormatListener": {
            "name": "JSG.graph.model.events.FormatListener",
            "shortname": "FormatListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\FormatListener.js",
            "line": 9,
            "description": "A general abstract listener to handle format events. Subclasses should not overwrite the \n<code>handlePreEvent</code> or <code>handlePostEvent</code> methods. Instead this class provides\nempty stub methods to handle format and text format events which are intended to be overwritten.",
            "is_constructor": 1,
            "extends": "JSG.graph.model.events.EventListener"
        },
        "JSG.graph.model.events.GraphItemListener": {
            "name": "JSG.graph.model.events.GraphItemListener",
            "shortname": "GraphItemListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\ShapeListener.js",
            "line": 9,
            "description": "A general abstract listener to handle {{#crossLink \"JSG.graph.model.shapes.Shape\"}}{{/crossLink}} events. \nSubclasses should not overwrite the <code>handlePreEvent</code> or <code>handlePostEvent</code> methods. \nInstead this class provides empty stub methods to handle shape events which are intended to be overwritten.",
            "is_constructor": 1,
            "extends": "JSG.graph.model.events.EventListener"
        },
        "JSG.graph.model.events.NodeEvent": {
            "name": "JSG.graph.model.events.NodeEvent",
            "shortname": "NodeEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\NodeEvent.js",
            "line": 8,
            "description": "A special event subclass to handle {{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}} events.",
            "is_constructor": 1,
            "extends": "JSG.graph.model.events.Event",
            "params": [
                {
                    "name": "detailId",
                    "description": "A detail id to classify the event more exactly.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The event value.",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "JSG.graph.model.events.PageEvent": {
            "name": "JSG.graph.model.events.PageEvent",
            "shortname": "PageEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\PageEvent.js",
            "line": 9,
            "description": "A special event subclass to handle {{#crossLink \"JSG.graph.model.settings.Page\"}}{{/crossLink}} events.",
            "is_constructor": 1,
            "extends": "JSG.graph.model.events.Event",
            "params": [
                {
                    "name": "detailId",
                    "description": "A detail id to classify the event more exactly.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The event value.",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "JSG.graph.model.events.PortListener": {
            "name": "JSG.graph.model.events.PortListener",
            "shortname": "PortListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\PortListener.js",
            "line": 9,
            "description": "A general abstract listener to handle port events. Subclasses should not overwrite the \n<code>handlePreEvent</code> or <code>handlePostEvent</code> methods. Instead the various\n<code>portWill</code> and <code>portDid</code> methods should be overwritten.",
            "is_constructor": 1,
            "extends": "JSG.graph.model.events.EventListener"
        },
        "JSG.graph.model.events.ShapeEvent": {
            "name": "JSG.graph.model.events.ShapeEvent",
            "shortname": "ShapeEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\ShapeEvent.js",
            "line": 9,
            "description": "A special event subclass to handle {{#crossLink \"JSG.graph.model.shapes.Shape\"}}{{/crossLink}} events.",
            "is_constructor": 1,
            "extends": "JSG.graph.model.events.Event",
            "params": [
                {
                    "name": "detailId",
                    "description": "A detail id to classify the event more exactly.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The event value.",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "JSG.graph.model.settings.AbstractSettings": {
            "name": "JSG.graph.model.settings.AbstractSettings",
            "shortname": "AbstractSettings",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\AbstractSettings.js",
            "line": 9,
            "description": "Creates a new AbstractSettings instance. It provides convenience methods to set the value of a setting which \ntriggers corresponding events. Typically setting properties are bound to a {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} \nso a {{#crossLink \"JSG.graph.model.settings.AbstractSettings/register:method\"}}{{/crossLink}} method is provided as \nwell.",
            "is_constructor": 1
        },
        "JSG.graph.model.settings.CustomSetting": {
            "name": "JSG.graph.model.settings.CustomSetting",
            "shortname": "CustomSetting",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\CustomSetting.js",
            "line": 9,
            "description": "A template which simply defines the methods a CustomSetting must provide.</br>\nIt is not required to extend this class, its methods do nothing.",
            "is_constructor": 1
        },
        "JSG.graph.model.settings.GraphSettings": {
            "name": "JSG.graph.model.settings.GraphSettings",
            "shortname": "GraphSettings",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 9,
            "description": "The GraphSettings class contains globally and mainly graph related settings.</br>\nAlthough this class predefines some settings it is also possible to store custom settings by\nusing the \n{{#crossLink \"JSG.graph.model.settings.GraphSettings/addSetting:method\"}}{{/crossLink}} method.\nNote that in order to save and load custom settings the provided value must implement a\n<code>readXML</code> and a <code>saveXML</code> method. To store a custom setting <code>saveXML</code> \nis called on its value with an <code>XMLWriter</code> instance as parameter. Analog to load a\ncustom setting <code>readXML</code> is called with an XML node to restore the value from.</br>\nSee {{#crossLink \"JSG.graph.model.settings.CustomSetting\"}}{{/crossLink}} to get information \nabout what a custom setting must provide.",
            "extends": "JSG.graph.model.settings.AbstractSettings",
            "is_constructor": 1
        },
        "JSG.graph.model.settings.SettingID": {
            "name": "JSG.graph.model.settings.SettingID",
            "shortname": "SettingID",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 32,
            "description": "Identifiers which specifies predefined settings.</br>\nThese IDs are also used as the detailedId within the \n{{#crossLink \"JSG.graph.model.events.GraphSettingsEvent\"}}{{/crossLink}}.",
            "is_constructor": 1,
            "static": 1
        },
        "JSG.graph.model.settings.ViewMode": {
            "name": "JSG.graph.model.settings.ViewMode",
            "shortname": "ViewMode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 84,
            "description": "Predefined view mode settings."
        },
        "JSG.graph.model.settings.GraphSettingsEvent": {
            "name": "JSG.graph.model.settings.GraphSettingsEvent",
            "shortname": "GraphSettingsEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettingsEvent.js",
            "line": 9,
            "description": "A special event subclass to handle {{#crossLink \"JSG.graph.model.settings.GraphSettings\"}}{{/crossLink}} events.",
            "is_constructor": 1,
            "extends": "JSG.graph.model.events.Event",
            "params": [
                {
                    "name": "detailId",
                    "description": "A detail id to classify the event more exactly.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The event value.",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "JSG.graph.model.settings.Page": {
            "name": "JSG.graph.model.settings.Page",
            "shortname": "Page",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 58,
            "description": "Default Page. A page defines the dimensions and margins of a page. The page is used for printing a graph\nto a PDF file or for the display mode PAGE.",
            "is_constructor": 1
        },
        "JSG.graph.model.shapes.BBoxShape": {
            "name": "JSG.graph.model.shapes.BBoxShape",
            "shortname": "BBoxShape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\BBoxShape.js",
            "line": 8,
            "description": "A simple shape definition consisting of 4 {{#crossLink \"JSG.graph.Coordinate\"}}{{/crossLink}}s which represents the\n{{#crossLink \"JSG.geometry.BoundingBox\"}}{{/crossLink}} of the corresponding shape item. In contrast to a RectangleShape\nthe origin not necessarily needs to be the top-left corner.",
            "is_constructor": 1,
            "extends": "JSG.graph.model.shapes.RectangleShape"
        },
        "JSG.graph.model.shapes.BezierShape": {
            "name": "JSG.graph.model.shapes.BezierShape",
            "shortname": "BezierShape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\BezierShape.js",
            "line": 8,
            "description": "A shape to use for bezier curves. A bezier shape has three sets of coordinates. One set defines the\nbezier points, which are the points which are connected via curves. The shape of the curves are\ndefined by the two control points. Each bezier points has two corresponding control points. One to define\nthe curve coming from the previous bezier point and another one to influence the curve to the next\nbezier point.",
            "is_constructor": 1,
            "extends": "JSG.graph.model.shapes.Shape"
        },
        "JSG.graph.model.shapes.EllipseShape": {
            "name": "JSG.graph.model.shapes.EllipseShape",
            "shortname": "EllipseShape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\EllipseShape.js",
            "line": 8,
            "description": "This class is for ellipse based shapes. Internally it is based on a bezier shape.</br>\nSee {{#crossLink \"JSG.graph.model.shapes.BezierShape\"}}{{/crossLink}}.",
            "is_constructor": 1,
            "extends": "JSG.graph.model.shapes.BezierShape"
        },
        "JSG.graph.model.shapes.LineShape": {
            "name": "JSG.graph.model.shapes.LineShape",
            "shortname": "LineShape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\LineShape.js",
            "line": 8,
            "description": "This shape is used to define lines. It automatically adds two\n{{#crossLink \"JSG.graph.Coordinate\"}}{{/crossLink}}s by default, one for the start\npoint and one for its end point. Furthermore the line shape provides some additional methods to\nease line point handling.",
            "is_constructor": 1,
            "extends": "JSG.graph.model.shapes.Shape"
        },
        "JSG.graph.model.shapes.OrthoLineShape": {
            "name": "JSG.graph.model.shapes.OrthoLineShape",
            "shortname": "OrthoLineShape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShape.js",
            "line": 8,
            "description": "This shape is used to define orthogonal lines, i.e. this shape tries to keep its inner\n{{#crossLink \"JSG.graph.Coordinate\"}}{{/crossLink}}s orthogonal to each other. This is fully\ndone internally and no explicit call to (e.g.) {{#crossLink \"JSG.graph.model.shapes.OrthoLineShape/autolayout:method\"}}{{/crossLink}}\nis required. If an orthogonal line shape should use autolayout use the corresponding layout attribute\nfrom the {{#crossLink \"JSG.graph.attr.EdgeLayoutAttributes\"}}{{/crossLink}} class.</br>",
            "example": [
                "\n    //create an orthogonal edge:\n    var edge = new JSG.grap.model.Edge(new JSG.graph.model.shapes.OrthoLineShape());\n    //use auto layout:\n    edge.getLayoutAttributes().setLineBehavior(JSG.graph.attr.consts.LineBehavior.AUTO);\n\nSee {{#crossLink \"JSG.graph.model.shapes.OrthoLineShapeLayouter\"}}{{/crossLink}} </br>\nand {{#crossLink \"JSG.graph.attr.consts.LineBehavior\"}}{{/crossLink}} for information about how to influence the layout."
            ],
            "is_constructor": 1,
            "extends": "JSG.graph.model.shapes.LineShape"
        },
        "JSG.graph.model.shapes.OrthoLineBehavior": {
            "name": "JSG.graph.model.shapes.OrthoLineBehavior",
            "shortname": "OrthoLineBehavior",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShapeLayouter.js",
            "line": 8,
            "description": "Predefined flags to influence the layout behavior.</br>\nSee {{#crossLink \"JSG.graph.model.shapes.OrthoLineShapeLayouter/layout:method\"}}{{/crossLink}}.",
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.graph.attr.consts.LineBehavior\"}}{{/crossLink}} instead!"
        },
        "JSG.graph.model.shapes.OrthoLineShapeLayouter": {
            "name": "JSG.graph.model.shapes.OrthoLineShapeLayouter",
            "shortname": "OrthoLineShapeLayouter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShapeLayouter.js",
            "line": 19,
            "description": "This class is used to layout {{#crossLink \"JSG.graph.model.shapes.OrthoLineShape\"}}{{/crossLink}}s automatically.</br>\nNote: it is currently not recommended to use this class outside of the JSG API framework!",
            "is_constructor": 1
        },
        "JSG.graph.model.shapes.PathShape": {
            "name": "JSG.graph.model.shapes.PathShape",
            "shortname": "PathShape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\PathShape.js",
            "line": 8,
            "description": "A path-shape can be used to create shapes with an SVG like path. A path-shape can be created by using provided methods\nlike {{#crossLink \"JSG.graph.model.shapes.PathShape/addMoveTo:method\"}}{{/crossLink}}, \n{{#crossLink \"JSG.graph.model.shapes.PathShape/addLineTo:method\"}}{{/crossLink}} or\n{{#crossLink \"JSG.graph.model.shapes.PathShape/addCubicBezier:method\"}}{{/crossLink}}. Sub-paths are supported too.\nTo close a path or sub-path simply call {{#crossLink \"JSG.graph.model.shapes.PathShape/addClose:method\"}}{{/crossLink}}.<br/>\n<b>Note:</b> unlike an SVG path a path-shape cannot handle {{#crossLink \"JSG.graph.Coordinate\"}}{{/crossLink}}s which \nare relative to each other. Instead all  passed coordinates must be given relative to the origin of the corresponding \nshape {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}.",
            "is_constructor": 1,
            "extends": "JSG.graph.model.shapes.PolygonShape"
        },
        "JSG.graph.model.shapes.PathShape.Points": {
            "name": "JSG.graph.model.shapes.PathShape.Points",
            "shortname": "PathShape.Points",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\PathShape.js",
            "line": 177,
            "description": "Private helper class to convert {{#crossLink \"JSG.graph.Coordinate\"}}{{/crossLink}}s into \n{{#crossLink \"JSG.geometry.Point\"}}{{/crossLink}}s and to add them to a given {{#crossLink \"JSG.geometry.PointList\"}}{{/crossLink}}.",
            "is_constructor": 1,
            "access": "private",
            "tagname": ""
        },
        "JSG.graph.model.shapes.PolygonShape": {
            "name": "JSG.graph.model.shapes.PolygonShape",
            "shortname": "PolygonShape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\PolygonShape.js",
            "line": 8,
            "description": "A polygon shape definition. {{#crossLink \"JSG.graph.Coordinate\"}}{{/crossLink}}s are added\nafter creation.",
            "is_constructor": 1,
            "extends": "JSG.graph.model.shapes.Shape"
        },
        "JSG.graph.model.shapes.RectangleShape": {
            "name": "JSG.graph.model.shapes.RectangleShape",
            "shortname": "RectangleShape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\RectangleShape.js",
            "line": 9,
            "description": "A rectangle shape definition consisting of 4 {{#crossLink \"JSG.graph.Coordinate\"}}{{/crossLink}}s.",
            "is_constructor": 1,
            "extends": "JSG.graph.model.shapes.Shape"
        },
        "JSG.graph.model.shapes.Shape": {
            "name": "JSG.graph.model.shapes.Shape",
            "shortname": "Shape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 29,
            "description": "Creates an empty, i.e. no added <code>Coordinate</code>s, shape instance.",
            "is_constructor": 1
        },
        "JSG.graph.model.shapes.ShapeFactory": {
            "name": "JSG.graph.model.shapes.ShapeFactory",
            "shortname": "ShapeFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\ShapeFactory.js",
            "line": 8,
            "description": "A singleton to create {{#crossLink \"JSG.graph.model.shapes.Shape\"}}{{/crossLink}}s based on their\ntype string.</br>",
            "example": [
                "\n    var typestr = oldshape.getType(); //usually it comes from a different source, e.g. an xml file\n    var newShape = JSG.graph.model.shapes.ShapeFactory.createShapeFromString(typestr);\n\nSee {{#crossLink \"JSG.graph.model.shapes.Shape/getType:method\"}}{{/crossLink}}."
            ],
            "is_constructor": 1
        },
        "JSG.graph.model.AttributedTextNode": {
            "name": "JSG.graph.model.AttributedTextNode",
            "shortname": "AttributedTextNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\AttributedTextNode.js",
            "line": 8,
            "description": "A TextNode extension which is based on a referenced {{#crossLink \"JSG.graph.attr.Attribute\"}}{{/crossLink}},\ni.e. a new text value or expression is passed to referenced attribute and analog the text value\nis retrieved from referenced attribute.</br>\nThe connection to the attribute is done via an {{#crossLink \"JSG.graph.expr.AttributeExpression\"}}{{/crossLink}}\nand cannot be changed by simply passing a different Expression to {{#crossLink \"JSG.graph.model.AttributedTextNode/setText:method\"}}{{/crossLink}},\nbecause this is passed to referenced attribute.\nUse {{#crossLink \"JSG.graph.model.AttributedTextNode/setAttributeExpression:method\"}}{{/crossLink}} to change\nthe referenced Attribute.",
            "extends": "JSG.graph.model.TextNode",
            "params": [
                {
                    "name": "attributeExpression",
                    "description": "Reference to the attribute.",
                    "type": "JSG.graph.expr.AttributeExpression"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.model.Condition": {
            "name": "JSG.graph.model.Condition",
            "shortname": "Condition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Condition.js",
            "line": 8,
            "description": "Conditions are used to influence attributes based on a logical or conditional expression. \nThe conditional expression has to compare to values or references by an operator (like <, >, == ...). \nIf the condition is met, the original value of the attribute, to \nwhich the condition is attached, is overwritten. If the condition is not met, the original value is used.",
            "example": [
                "\n     var node = new JSG.graph.model.Node();\n     graph.addItem(node);\n      // assign a condition to the fillcolor, here if condition is true (which is the case here) fill color will be blue.\n     var attr = node.getFormat().getFillColor();\n     var cond = new JSG.graph.model.Condition(attr.getPath(), new JSG.graph.expr.Expression(0, \"?(150 > 100, #0000FF)\"));\n     node.getConditionManager().addCondition(cond);\n     node.evaluate();\n\nA condition has a <code>prio</code> property which can be used to sort several conditions and an <code>isActive</code>\nproperty to signal if this condition should be taken into account or not."
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "path",
                    "description": "Path to the target Attribute.",
                    "type": "String"
                },
                {
                    "name": "expression",
                    "description": "Expression that has to be calculated for the condition.",
                    "type": "JSG.graph.expr.Expression"
                }
            ]
        },
        "JSG.graph.model.ConditionManager": {
            "name": "JSG.graph.model.ConditionManager",
            "shortname": "ConditionManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ConditionManager.js",
            "line": 8,
            "description": "Manages the {{#crossLink \"JSG.graph.model.Condition\"}}{{/crossLink}}s of a {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}.<br/>\nConditions are used to influence the value of an Attribute, i.e. an attribute can have different values\ndepending on the fulfillment of specified conditions. For more information please refer to\n{{#crossLink \"JSG.graph.model.Condition\"}}{{/crossLink}}.<br/>\nThese Conditions should never be added or changed directly. Instead the methods provided by\nConditionManager have to be used for these kind of tasks.",
            "example": [
                "\n\t    var cond = new JSG.graph.model.Condition(attrpath, condexpr);\n\t    //adding condition stores an inner representation of it...\n\t    graphItem.getConditionManager().addCondition(cond);\n\t    //so changing cond, doesn't change registered condition!\n\t    cond.prio = 4;\n\t    cond.expression.setFormula = \"?(3+2 > 0, \"TRUE :)\",\"FALSE :(\")\";\n\t    //update to sync condition changes with registered one\n\t    graphItem.getConditionManager().update(cond);"
            ],
            "is_constructor": 1
        },
        "JSG.graph.model.Connection": {
            "name": "JSG.graph.model.Connection",
            "shortname": "Connection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Connection.js",
            "line": 8,
            "description": "A simple class to manage a connection between two {{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}}s.",
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}} instead.",
            "extends": "JSG.graph.model.GraphItem",
            "is_constructor": 1
        },
        "JSG.graph.model.ConnectionRestorer": {
            "name": "JSG.graph.model.ConnectionRestorer",
            "shortname": "ConnectionRestorer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ConnectionRestorer.js",
            "line": 8,
            "description": "A connection restorer is used to restore the ids of source and target ports of a copied\n{{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}} as well as to update referenced ids within\ncopied expressions. A typical use case is to \"copy on move\" an edge and its source and target nodes.</br>\nRefer to the source code of {{#crossLink \"JSG.graph.command.PasteItemsCommand\"}}{{/crossLink}} to see an example.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1
        },
        "JSG.graph.model.ContentNode": {
            "name": "JSG.graph.model.ContentNode",
            "shortname": "ContentNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ContentNode.js",
            "line": 8,
            "description": "This is a special node instance which has a so called ContentPane as only child item. All\n{{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s added to this node will actually be\nadded to this ContentPane. This is useful to manage content which takes more space than the size\nof this ContentNode provides.</br>\nUsually a {{#crossLink \"JSG.graph.view.ContentNodeView\"}}{{/crossLink}} is used as a visual representation\nwhich in turn uses a {{#crossLink \"JSG.ui.scrollview.ScrollView\"}}{{/crossLink}}\nto display the node content.",
            "extends": "JSG.graph.model.Node",
            "is_constructor": 1
        },
        "JSG.graph.model.ContentPane": {
            "name": "JSG.graph.model.ContentPane",
            "shortname": "ContentPane",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ContentNode.js",
            "line": 229,
            "description": "A default GraphItem model to manage the content of a {{#crossLink \"JSG.graph.model.ContentNode\"}}{{/crossLink}}.",
            "extends": "JSG.graph.model.GraphItem",
            "is_constructor": 1
        },
        "JSG.graph.model.Edge": {
            "name": "JSG.graph.model.Edge",
            "shortname": "Edge",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Edge.js",
            "line": 8,
            "description": "An edge connects two {{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}}s by establishing a\nconnection between selected node {{#crossLink \"JSG.graph.model.Port\"}}{{/crossLink}}s. These ports\nare referred to as source and target ports, i.e. an attached edge goes from the source port\nto its target port. </br>\nNote: it is not required that an edge has to be attached, i.e. both ports can be <code>undefined</code>.",
            "params": [
                {
                    "name": "shape",
                    "description": "An optional shape which represents this connection. By default {{#crossLink \"JSG.graph.model.shapes.LineShape\"}}{{/crossLink}} is used.",
                    "type": "JSG.graph.model.shapes.Shape",
                    "optional": true
                }
            ],
            "extends": "JSG.graph.model.LineConnection",
            "is_constructor": 1
        },
        "JSG.graph.model.Graph": {
            "name": "JSG.graph.model.Graph",
            "shortname": "Graph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "line": 8,
            "description": "A graph is the main container for {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s.</br>\nIt provides attributes to influence the global behavior.",
            "extends": "JSG.graph.model.GraphItem",
            "is_constructor": 1
        },
        "JSG.graph.model.GraphItem": {
            "name": "JSG.graph.model.GraphItem",
            "shortname": "GraphItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 9,
            "description": "A GraphItem defines the aspects common to all graph objects such as\n{{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}}s, {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}s\nand the {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}} itself.</br>\nEach GraphItem has an id which is unique within its Graph. GraphItems which are not added to a\nGraph object have an id of -1.",
            "extends": "JSG.graph.model.Model",
            "is_constructor": 1,
            "params": [
                {
                    "name": "shape",
                    "description": "Shape to use for the appearance of the object. This can be a e.g. a rectangle, ellipse or polyline.",
                    "type": "JSG.graph.model.shapes.Shape",
                    "optional": true
                }
            ]
        },
        "JSG.graph.model.GraphItemFactory": {
            "name": "JSG.graph.model.GraphItemFactory",
            "shortname": "GraphItemFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItemFactory.js",
            "line": 8,
            "description": "The GraphItemFactory is used to create GraphItems by their name. The generic items are handled \nby the system creating generic {{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}}s \nand {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}s. You can also create complex predefined \nshapes like stars and others. By extending and deriving this class, you can introduce your own \ncomplex shapes by creating them dynamically or reading them from a definition file or database.\nIn addition the factory is called, to give the developer a chance to add custom properties, \nfriend items or container restrictions. By default, these calls are not handled, but you can \ncreate your own implementation e.g. to add custom properties to any GraphItem or a specific \ntype of GraphItem.</br>\nThe globally used GraphItemFactory is registered with the global namespace object: \n{{#crossLink \"JSG/graphItemFactory:property\"}}{{/crossLink}}",
            "is_constructor": 1
        },
        "JSG.graph.model.Group": {
            "name": "JSG.graph.model.Group",
            "shortname": "Group",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Group.js",
            "line": 8,
            "description": "This <code>GraphItem</code> subclass is used to group several <code>GraphItem</code>s together. Grouped items can \nthan be resized or formatted simply by resizing or formatting its parent <code>Group</code>.</br>\nA {{#crossLink \"JSG.graph.model.Group/layouter:property\"}}{{/crossLink}} property is used to arrange inner \n<code>Group</code> items. It is allowed to replace this property with a custom layouter.",
            "extends": "JSG.graph.model.GraphItem",
            "is_constructor": 1
        },
        "JSG.graph.model.Group.Layouter": {
            "name": "JSG.graph.model.Group.Layouter",
            "shortname": "Group.Layouter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Group.js",
            "line": 117,
            "description": "The default layouter used to arrange inner {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s of a \n{{#crossLink \"JSG.graph.model.Group\"}}{{/crossLink}}.</br>\nTo create this layouter simply call <code>JSG.graph.model.Group.Layouter()</code>, i.e. without <code>new</code>.",
            "is_constructor": 1
        },
        "JSG.graph.model.Layer": {
            "name": "JSG.graph.model.Layer",
            "shortname": "Layer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Layer.js",
            "line": 8,
            "description": "A class which describes a layer to define visibility or selection status of\n{{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the layer.",
                    "type": "String"
                }
            ]
        },
        "JSG.graph.model.LineConnection": {
            "name": "JSG.graph.model.LineConnection",
            "shortname": "LineConnection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 9,
            "description": "A LineConnection represents a link between a source and a target {{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}}. \nAs the name suggests this connection uses a {{#crossLink \"JSG.graph.model.shapes.LineShape\"}}{{/crossLink}} \nfor its visual representation.</br>\nSince this connection class implements a simple line behavior some additional\nmethods to easily set and get line points are provided.</br>  \nNote: it is not required for a connection to have a source and a target node at all, so both\ncan be <code>undefined</code>.",
            "extends": "JSG.graph.model.GraphItem",
            "is_constructor": 1,
            "params": [
                {
                    "name": "shape",
                    "description": "The shape to use for visual representation.",
                    "type": "JSG.graph.model.shapes.LineShape",
                    "optional": true
                }
            ]
        },
        "JSG.graph.model.LineNode": {
            "name": "JSG.graph.model.LineNode",
            "shortname": "LineNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineNode.js",
            "line": 9,
            "description": "A LineNode is simply a {{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}} with a \n{{#crossLink \"JSG.graph.model.shapes.PolygonShape\"}}{{/crossLink}}. But in contrast to a normal node a LineNode\nbehaves more like a {{#crossLink \"JSG.graph.model.LineConnection\"}}{{/crossLink}} for resize and selection. However,\nthe nature of a LineNode is still node driven.",
            "extends": "JSG.graph.model.Node",
            "is_constructor": 1
        },
        "JSG.graph.model.Model": {
            "name": "JSG.graph.model.Model",
            "shortname": "Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 31,
            "description": "Base class for any model item. This class is used as a generic base class for all\n{{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s.",
            "is_constructor": 1
        },
        "JSG.graph.model.Attributes": {
            "name": "JSG.graph.model.Attributes",
            "shortname": "Attributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 331,
            "description": "Special AttributeList to manage attributes of an arbitrary graph item.<br/>\nThis list stores a reference to its GraphItem in its <code>item</code> property. The GraphItem,\nif set, is used to trigger an {{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}}\non each attribute change.",
            "extends": "JSG.graph.attr.AttributeList",
            "params": [
                {
                    "name": "mapExpr",
                    "description": "An optional MapExpression which contains predefined attributes.",
                    "type": "JSG.graph.expr.MapExpression",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.model.Node": {
            "name": "JSG.graph.model.Node",
            "shortname": "Node",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Node.js",
            "line": 8,
            "description": "The main usage of a node is to represent a {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} which can be\nconnected to other nodes. The connection between nodes is established by attaching an\n{{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}} to a {{#crossLink \"JSG.graph.model.Port\"}}{{/crossLink}}\nof each node. So every node manages a list of ports to which an edge can connect.</br>\nThe default shape of a node is a {{#crossLink \"JSG.graph.model.shapes.RectangleShape\"}}{{/crossLink}}.",
            "extends": "JSG.graph.model.GraphItem",
            "is_constructor": 1,
            "params": [
                {
                    "name": "shape",
                    "description": "The shape to use for visual representation.",
                    "type": "JSG.graph.model.shapes.Shape",
                    "optional": true
                }
            ]
        },
        "JSG.graph.model.Path": {
            "name": "JSG.graph.model.Path",
            "shortname": "Path",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Path.js",
            "line": 8,
            "description": "A <code>Path</code> is build of several {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}-IDs and\ntherefore represents a unique <code>GraphItem</code>'s path within its {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}}.\nA path can simply be traversed by using {{#crossLink \"JSG.graph.model.Path/nextId:method\"}}{{/crossLink}}.</br>\nNote: each <code>GraphItem</code> provides a {{#crossLink \"JSG.graph.model.GraphItem/createPath:method\"}}{{/crossLink}}\nmethod to easily create a new <code>Path</code> instance.",
            "is_constructor": 1
        },
        "JSG.graph.model.Port": {
            "name": "JSG.graph.model.Port",
            "shortname": "Port",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Port.js",
            "line": 8,
            "description": "A port describes a special connection point of a {{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}}.\nUsually use by {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}s to connect to a node.</br>\nA port can have several incoming and outgoing edges. An edge which has its source attached to a\nport is called an outgoing edge and an edge which has its target attached to a port is called\nan incoming edge.",
            "extends": "JSG.graph.model.GraphItem",
            "is_constructor": 1
        },
        "JSG.graph.model.PortMapper": {
            "name": "JSG.graph.model.PortMapper",
            "shortname": "PortMapper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\PortMapper.js",
            "line": 8,
            "description": "A PortMapper is a special Port which used to map one or several other Ports.<br/>\nThe mapped Port can be a PortMapper too, so it is possible to create a path of PortMappers.",
            "example": [
                ":\n     var edge = getMeAnEdge();\n     var mp1 = new JSG.graph.model.PortMapper();\n     var mp2 = new JSG.graph.model.PortMapper();\n     mp1.mapPort(edge, edge.getSourcePort());\n     edge.setSourcePort(mp1); //mapped path for edge: mp1->sourcePort\n     mp2.mapPort(edge, edge.getSourcePort());\n     edge.setSourcePort(mp2); //mapped path for edge: mp2->mp1->sourcePort\n     //get mapped source port:\n     var srcPort = mp2.getMappedItemPort(edge);"
            ],
            "extends": "JSG.graph.model.Port",
            "is_constructor": 1
        },
        "JSG.graph.model.State": {
            "name": "JSG.graph.model.State",
            "shortname": "State",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\State.js",
            "line": 9,
            "description": "A simple object to store arbitrary properties.</br>\nGeneral property types like <code>Boolean</code>, <code>Number</code> or <code>String</code> are\npersisted automatically. Each other property must provide a <code>saveXML(tagname, xmlwriter)</code> \nand a <code>readXML(xmlnode)</code> method to support persistence.<br/>\n<b>Note:</b>because this class implements <code>getClassName</code>, <code>saveXML</code> \nand <code>readXML</code>, it can be used as a value for an {{#crossLink \"JSG.graph.expr.ObjectExpression\"}}{{/crossLink}}.",
            "is_constructor": 1
        },
        "JSG.graph.model.TextNode": {
            "name": "JSG.graph.model.TextNode",
            "shortname": "TextNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model",
            "file": "..\\dist\\wc\\jsg\\graph\\model\\TextNode.js",
            "line": 8,
            "description": "The TextNode class extends a Node with Text capabilities. It contains the text itself and some\nmethods for font and text format handling. A text always uses a rectangular shape by default.\nIt is by default not a container, not moveable and does not provide ports, because TextNodes are\nusually subitems of other nodes.",
            "example": [
                "\n    var text = new JSG.graph.model.TextNode()\n    text.setText(\"Sample Text\");\n    text.getTextFormat().setFontSize(12);\n\nSee: {{#crossLink \"JSG.graph.attr.TextFormatAttributes\"}}{{/crossLink}}"
            ],
            "extends": "JSG.graph.model.Node",
            "is_constructor": 1
        },
        "JSG.graph.notifications.Notification": {
            "name": "JSG.graph.notifications.Notification",
            "shortname": "Notification",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.notifications",
            "namespace": "JSG.graph.notifications",
            "file": "..\\dist\\wc\\jsg\\graph\\notifications\\Notification.js",
            "line": 24,
            "description": "A simple data object to be passed via {{#crossLink \"JSG.graph.notifications.NotificationCenter\"}}{{/crossLink}}.<br/>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Notification qualifiers.",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "The object who sends this notification",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "JSG.graph.notifications.NotificationCenter": {
            "name": "JSG.graph.notifications.NotificationCenter",
            "shortname": "NotificationCenter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.notifications",
            "namespace": "JSG.graph.notifications",
            "file": "..\\dist\\wc\\jsg\\graph\\notifications\\NotificationCenter.js",
            "line": 8,
            "description": "The globally available NotifiactionCenter.</br>\nThis class maintains a list of observers and is used to send any {{#crossLink \"JSG.graph.notifications.Notification\"}}{{/crossLink}}s.",
            "is_constructor": 1
        },
        "JSG.graph.properties.EdgeProperties": {
            "name": "JSG.graph.properties.EdgeProperties",
            "shortname": "EdgeProperties",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties",
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\EdgeProperties.js",
            "line": 8,
            "description": "Property set for an EdgeItem. It allows to reference the start and end point of a line and other \nline specific attributes. The following properties are available and can be used by Expressions:\n\n* START\\_X : Get X Coordinate of the start point.\n* START\\_Y : Get Y Coordinate of the start point.\n* END\\_X : Get X Coordinate of the end point.\n* END\\_X : Get Y Coordinate of the end point.\n* POINTCOUNT : Get the number of points in the line.",
            "extends": "JSG.graph.properties.GraphItemProperties",
            "is_constructor": 1
        },
        "JSG.graph.properties.FormatProperties": {
            "name": "JSG.graph.properties.FormatProperties",
            "shortname": "FormatProperties",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties",
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\FormatProperties.js",
            "line": 8,
            "description": "Class to provide a property set related to the format attributes. The format properties\ncan be used to enumerate and change format properties. The properties are also used\nto provide references to the format attributes for Expressions.\nThe following properties are available and can be used by Expressions:\n\n* FILLCOLOR\n* FILLSTYLE\n* TRANSPARENCY\n* BRIGHTNESS\n* GRADIENTCOLOR\n* GRADIENTANGLE\n* GRADIENTTYPE\n* GRADIENTOFFSETX\n* GRADIENTOFFSETY\n* PATTERN\n* PATTERNSTYLE\n* LINECOLOR\n* LINEWIDTH\n* LINESTYLE\n* LINECORNER\n* LINEARROWSTART\n* LINEARROWEND\n* SHADOWCOLOR\n* SHADOWOFFSETX\n* SHADOWOFFSETY\n* SHADOWBLUR\n* SHADOWDIRECTION\n\nThe parameters and the valid values can be deducted from the FormatAttributes.",
            "extends": "JSG.graph.properties.Properties",
            "is_constructor": 1
        },
        "JSG.graph.properties.GraphItemProperties": {
            "name": "JSG.graph.properties.GraphItemProperties",
            "shortname": "GraphItemProperties",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties",
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\GraphItemProperties.js",
            "line": 8,
            "description": "Class to provide a property set related to the GraphItem. The properties\ncan be used to enumerate and change core GraphItem settings. The properties are also used\nto provide references to the GraphItem settings for Expressions. \nThe following properties are available and can be used by Expressions:\n\n* ID (ReadOnly)\n* LAYER\n* TYPE\n* LINK\n* ANGLE\n* WIDTH\n* HEIGHT\n* ORIGIN\\_X\n* ORIGIN\\_Y\n* PIN\\_X\n* PIN\\_Y\n* LOCALPIN\\_X\n* LOCALPIN\\_Y",
            "extends": "JSG.graph.properties.Properties",
            "is_constructor": 1
        },
        "JSG.graph.properties.GraphProperties": {
            "name": "JSG.graph.properties.GraphProperties",
            "shortname": "GraphProperties",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties",
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\GraphProperties.js",
            "line": 8,
            "description": "Class to define a property set specific to a graph in addition to the GraphItem properties. \nThis primarily includes page settings. The properties are also used\nto provide references to the format attributes for Expressions. \nThe following properties are available and can be used by Expressions:\n\n* GRAPHID\n* GRIDVISIBLE\n* PORTSVISIBLE\n* SCALE\n* SNAPTOGRID\n* SNAPTOSTEP\n* PORTMODE\n* SNAPTOSHAPES\n* PAGEFORMAT\n* PAGEORIENTATION\n* PAGEWIDTH\n* PAGEHEIGHT\n* MARGINLEFT\n* MARGINTOP\n* MARGINRIGHT\n* MARGINBOTTOM\n* HEADERMARGIN\n* HEADERLEFT\n* HEADERCENTER\n* HEADERRIGHT\n* FOOTERMARGIN\n* FOOTERLEFT\n* FOOTERCENTER\n* FOOTERRIGHT\n* SCALETOPAGETYPE\n* SCALETOPAGECOUNT",
            "extends": "JSG.graph.properties.GraphItemProperties",
            "is_constructor": 1
        },
        "JSG.graph.properties.ItemAttributesProperties": {
            "name": "JSG.graph.properties.ItemAttributesProperties",
            "shortname": "ItemAttributesProperties",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties",
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\ItemAttributesProperties.js",
            "line": 8,
            "description": "Class to define a property set for GraphItem attributes. This way all attributes\nof a GraphItem can be referenced by formulas in expressions. The provided properties are:\n\n* CLIPCHILDREN\n* CLOSED\n* COLLAPSABLE\n* COLLAPSED\n* COLLAPSEDBUTTON\n* CONTAINER\n* DELETEABLE\n* MARGINLEFT\n* MARGINTOP\n* MARGINRIGHT\n* MARGINBOTTOM\n* MOVEABLE\n* PORTMODE\n* ROTATABLE\n* SELECTIONMODE\n* SNAPTO\n* SIZEABLE\n* VISIBLE\n\nTheir meaning can be deducted from the ItemAttributes of the GraphItem.",
            "is_constructor": 1
        },
        "JSG.graph.properties.LayoutAttributeProperties": {
            "name": "JSG.graph.properties.LayoutAttributeProperties",
            "shortname": "LayoutAttributeProperties",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties",
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\LayoutAttributeProperties.js",
            "line": 8,
            "description": "Class to define a set of properties related to layout properties of a \nGraphItem. Currently there are no properties provided.",
            "is_constructor": 1
        },
        "JSG.graph.properties.NodeProperties": {
            "name": "JSG.graph.properties.NodeProperties",
            "shortname": "NodeProperties",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties",
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\NodeProperties.js",
            "line": 8,
            "description": "Class that defines a property set for a node. Currently the NodeProperties\ndo not define any additional properties to the GraphItem.",
            "extends": "JSG.graph.properties.GraphItemProperties",
            "is_constructor": 1
        },
        "JSG.graph.properties.Properties": {
            "name": "JSG.graph.properties.Properties",
            "shortname": "Properties",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties",
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\Properties.js",
            "line": 8,
            "description": "Base class for model properties. The Properties class acts as a container for a\nset of properties. These property sets are returned by the PropertiesProvider exposing\nnamed properties.\n\nShould not be used directly. Use the subclasses instead or derive from this.",
            "is_constructor": 1
        },
        "JSG.graph.properties.PropertiesProvider": {
            "name": "JSG.graph.properties.PropertiesProvider",
            "shortname": "PropertiesProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties",
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\PropertiesProvider.js",
            "line": 14,
            "description": "Static class to provide the corresponding Properties based on the model instance or to provide\nattached properties of a model instance like e.g. FormatProperties. Properties can be used to \nenumerate attributes of an object and change their values. This way they are used by \nexpressions formulas to get or set values or attributes of model objects. Any property that\nis exposed is also available as a reference in a formula.",
            "static": 1,
            "is_constructor": 1
        },
        "JSG.graph.properties.Property": {
            "name": "JSG.graph.properties.Property",
            "shortname": "Property",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties",
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\Property.js",
            "line": 8,
            "description": "Class to provide a property. A property provides a getter and setter function to manipulate the \nvalue of an attribute that is associated with it. Which attribute is associated with the property can be identified\nby a unique id that has to be defined for the property.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "Name of property.",
                    "type": "String"
                },
                {
                    "name": "getter",
                    "description": "Function name of function or function to retrieve property value.",
                    "type": "String/Function"
                },
                {
                    "name": "setter",
                    "description": "Function name of function or function to set property value",
                    "type": "String/Function"
                }
            ]
        },
        "JSG.graph.properties.IndexProperty": {
            "name": "JSG.graph.properties.IndexProperty",
            "shortname": "IndexProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties",
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\Property.js",
            "line": 139,
            "description": "Special Class to provide a property, which uses an attribute path. Attribute path can\nbe used to identify the attribute associated with the property and to automatically\ndeduct the getter and setter for this attribute.",
            "extends": "JSG.graph.properties.Property",
            "is_constructor": 1,
            "params": [
                {
                    "name": "path",
                    "description": "Path of attribute attached to this property.",
                    "type": "String"
                }
            ]
        },
        "JSG.graph.properties.TextFormatProperties": {
            "name": "JSG.graph.properties.TextFormatProperties",
            "shortname": "TextFormatProperties",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties",
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\TextFormatProperties.js",
            "line": 8,
            "description": "Class that defines a property set for the textformat. The text format properties\ncan be used to enumerate and change text format properties. The properties are also used\nto provide references to the text format attributes for Expressions. \nThe following properties are available and can be used by Expressions:\n\n* FONTCOLOR\n* FONTNAME\n* FONTSIZE\n* FONTSTYLE\n* HORIZONTALALIGNMENT\n* HORIZONTALPOSITION\n* VERTICALPOSITION",
            "extends": "JSG.graph.properties.Properties",
            "is_constructor": 1
        },
        "JSG.graph.properties.TextNodeProperties": {
            "name": "JSG.graph.properties.TextNodeProperties",
            "shortname": "TextNodeProperties",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties",
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\TextNodeProperties.js",
            "line": 8,
            "description": "Class to define a property set for a text node in addition to node properties.\nThe additional properties are:\n\n* TEXT",
            "extends": "JSG.graph.properties.NodeProperties",
            "is_constructor": 1
        },
        "JSG.graph.view.selection.BBoxSelectionHandler": {
            "name": "JSG.graph.view.selection.BBoxSelectionHandler",
            "shortname": "BBoxSelectionHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\BBoxSelectionHandler.js",
            "line": 9,
            "description": "A SelectionHandler subclass to handle either a single or multiple selection. Its representation is based on the\nBoundingBoxes of the involved views which build up current selection.\nThe BBoxSelectionHandler is created via {{#crossLink \"JSG.graph.view.selection.SelectionHandlerFactory\"}}{{/crossLink}}.",
            "extends": "JSG.graph.view.selection.SelectionHandler",
            "is_constructor": 1,
            "params": [
                {
                    "name": "views",
                    "description": "The views which represent current selection. Either one or an array of multiple views can be passed.",
                    "type": "JSG.graph.view.GraphItemView",
                    "optional": true,
                    "multiple": true
                }
            ]
        },
        "JSG.graph.view.selection.CommandButton": {
            "name": "JSG.graph.view.selection.CommandButton",
            "shortname": "CommandButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 8,
            "description": "A button that can be attached to a selection view. The button can be used to execute commands\nbased on the current selection.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The button type. Use one of the predefined types.",
                    "type": "Number"
                },
                {
                    "name": "position",
                    "description": "The button position. Use one of the predefined positions. Note: these can be added bitwise.",
                    "type": "Number"
                },
                {
                    "name": "image",
                    "description": "The button image key.",
                    "type": "String"
                },
                {
                    "name": "The",
                    "description": "key for the command which is represented by this button.",
                    "type": "String"
                }
            ]
        },
        "JSG.graph.view.selection.Type": {
            "name": "JSG.graph.view.selection.Type",
            "shortname": "Type",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 37,
            "description": "Predefined button types.",
            "is_constructor": 1,
            "static": 1
        },
        "JSG.graph.view.selection.Position": {
            "name": "JSG.graph.view.selection.Position",
            "shortname": "Position",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 94,
            "description": "Predefined button positions.<br/>\nNote: it is allowed to add position flags bitwise. E.g. to specify a top-center position simply use \n<code>Position.TOP | Position.CENTER</code>.",
            "is_constructor": 1,
            "static": 1
        },
        "JSG.graph.view.selection.CommandButtonHandler": {
            "name": "JSG.graph.view.selection.CommandButtonHandler",
            "shortname": "CommandButtonHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButtonHandler.js",
            "line": 9,
            "description": "Decorates a SelectionHandler to support {{#crossLink \"JSG.graph.view.selection.CommandButton\"}}{{/crossLink}}s.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "views",
                    "description": "The views which represent current selection. Either none, one or multiple views can be passed.",
                    "type": "JSG.graph.view.GraphItemView",
                    "optional": true,
                    "multiple": true
                },
                {
                    "name": "cmdbtns",
                    "description": "A list of CommandButtons to add.",
                    "type": "Array"
                }
            ]
        },
        "JSG.graph.view.selection.GroupSelectionHandler": {
            "name": "JSG.graph.view.selection.GroupSelectionHandler",
            "shortname": "GroupSelectionHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\GroupSelectionHandler.js",
            "line": 9,
            "description": "A <code>BBoxSelectionHandler</code> subclass to use for a single {{#crossLink \"JSG.graph.model.Group\"}}{{/crossLink}} selection.",
            "extends": "JSG.graph.view.selection.BBoxSelectionHandler",
            "is_constructor": 1,
            "params": [
                {
                    "name": "views",
                    "description": "The views which represent current selection. Either a single view or \nan array of views can be passed.",
                    "type": "JSG.graph.view.GraphItemView",
                    "optional": true,
                    "multiple": true
                }
            ]
        },
        "JSG.graph.view.selection.LineNodeSelectionHandler": {
            "name": "JSG.graph.view.selection.LineNodeSelectionHandler",
            "shortname": "LineNodeSelectionHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\LineNodeSelectionHandler.js",
            "line": 8,
            "description": "A SelectionHandler subclass to handle a single selection of a {{#crossLink \"JSG.graph.model.LineNode\"}}{{/crossLink}}.<br/>\nSince a LineNode behaves like a {{#crossLink \"JSG.graph.model.LineConnection\"}}{{/crossLink}} its selection representation \nis similar to the selection representation of LineConnection. However it is still a {{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}}.\nA LineSelectionHandler is created via {{#crossLink \"JSG.graph.view.selection.SelectionHandlerFactory\"}}{{/crossLink}}.",
            "is_constructor": 1
        },
        "JSG.graph.view.selection.LineSelectionHandler": {
            "name": "JSG.graph.view.selection.LineSelectionHandler",
            "shortname": "LineSelectionHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\LineSelectionHandler.js",
            "line": 8,
            "description": "A SelectionHandler subclass to handle the single selection of a {{#crossLink \"JSG.graph.model.LineConnection\"}}{{/crossLink}}.\nIt is created via {{#crossLink \"JSG.graph.view.selection.SelectionHandlerFactory\"}}{{/crossLink}}.",
            "extends": "JSG.graph.view.selection.SelectionHandler",
            "is_constructor": 1,
            "params": [
                {
                    "name": "view",
                    "description": "The view which represent current selected LineConnection.",
                    "type": "JSG.graph.view.GraphItemView"
                }
            ]
        },
        "JSG.graph.view.selection.Marker": {
            "name": "JSG.graph.view.selection.Marker",
            "shortname": "Marker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\Marker.js",
            "line": 8,
            "description": "A Marker is used within the visual representation of a selection. It usually defines a special point within\ncurrent selection, e.g. a corner point of a selected rectangle or a certain point on a selected line.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "pointIndex",
                    "description": "The point index to use, e.g. to specify a direction or a line segment.",
                    "type": "Number"
                },
                {
                    "name": "coordinate",
                    "description": "The location to place the marker at.",
                    "type": "JSG.graph.Coordinate"
                },
                {
                    "name": "disabled",
                    "description": "Specify <code>true</code> to mark as disabled, <code>false</code> otherwise.",
                    "type": "Boolean"
                }
            ]
        },
        "JSG.graph.view.selection.NodeSelectionHandler": {
            "name": "JSG.graph.view.selection.NodeSelectionHandler",
            "shortname": "NodeSelectionHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\NodeSelectionHandler.js",
            "line": 9,
            "description": "A special BBoxSelectionHandler subclass to handle a single selection of a {{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}}.<br/>\nThis handler supports visual {{#crossLink \"JSG.graph.view.selection.Marker\"}}{{/crossLink}}s for so called \nreshape-coordinates which are defined by certain Nodes. See {{#crossLink \"JSG.graph.model.GraphItem/getReshapeCoordinates:method\"}}{{/crossLink}}.<br/> \nIt is created via {{#crossLink \"JSG.graph.view.selection.SelectionHandlerFactory\"}}{{/crossLink}}.",
            "extends": "JSG.graph.view.selection.BBoxSelectionHandler",
            "is_constructor": 1,
            "params": [
                {
                    "name": "view",
                    "description": "The view which represent current selected Node.",
                    "type": "JSG.graph.view.GraphItemView"
                }
            ]
        },
        "JSG.graph.view.selection.OrthoLineSelectionHandler": {
            "name": "JSG.graph.view.selection.OrthoLineSelectionHandler",
            "shortname": "OrthoLineSelectionHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\OrthoLineSelectionHandler.js",
            "line": 8,
            "description": "A LineSelectionHandler subclass to handle the single selection of a {{#crossLink \"JSG.graph.model.LineConnection\"}}{{/crossLink}}\nwith an orthogonal shape. This handler adds additional {{#crossLink \"JSG.graph.view.selection.Marker\"}}{{/crossLink}}s\nat the center of each line segment.<br/>\nAn instance is created via {{#crossLink \"JSG.graph.view.selection.SelectionHandlerFactory\"}}{{/crossLink}}.",
            "extends": "JSG.graph.view.selection.LineSelectionHandler",
            "is_constructor": 1,
            "params": [
                {
                    "name": "view",
                    "description": "The view which represent current selected LineConnection.",
                    "type": "JSG.graph.view.GraphItemView"
                }
            ]
        },
        "JSG.graph.view.selection.RotationMarker": {
            "name": "JSG.graph.view.selection.RotationMarker",
            "shortname": "RotationMarker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\RotationMarker.js",
            "line": 9,
            "description": "A Marker subclass to represent a rotation handle.",
            "extends": "JSG.graph.view.selection.Marker",
            "is_constructor": 1,
            "params": [
                {
                    "name": "pointIndex",
                    "description": "The point index to use, e.g. to specify a direction or a line segment.",
                    "type": "Number"
                },
                {
                    "name": "coordinate",
                    "description": "The location to place the marker at.",
                    "type": "JSG.graph.Coordinate"
                }
            ]
        },
        "JSG.graph.view.selection.SelectionHandle": {
            "name": "JSG.graph.view.selection.SelectionHandle",
            "shortname": "SelectionHandle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "line": 9,
            "description": "A SelectionHandle is a simple data class which provides additional information for a corresponding \n{{#crossLink \"JSG.graph.interaction.Interaction\"}}{{/crossLink}} or a corresponding\n{{#crossLink \"JSG.graph.interaction.InteractionActivator\"}}{{/crossLink}}. The SelectionHandle is defined by the\ncurrent active {{#crossLink \"JSG.graph.view.selection.SelectionHandler\"}}{{/crossLink}} and can be globally accessed via the \n{{#crossLink \"JSG.graph.view.selection.SelectionView\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.ActionHandle",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of this handle. Should be one of the predefined constants.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "cursor",
                    "description": "The cursor style which represents this handle. See {{#crossLink \"JSG.ui.Cursor.Style\"}}{{/crossLink}}.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "index",
                    "description": "The point index to use which signals a direction.",
                    "type": "Number",
                    "optional": true
                }
            ]
        },
        "JSG.graph.view.selection.TYPE": {
            "name": "JSG.graph.view.selection.TYPE",
            "shortname": "TYPE",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "line": 30,
            "description": "Predefined handle types.",
            "is_constructor": 1,
            "static": 1
        },
        "JSG.graph.view.selection.INDEX": {
            "name": "JSG.graph.view.selection.INDEX",
            "shortname": "INDEX",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "line": 97,
            "description": "Predefined point indices. These indices can be used to specify a direction. The index is started at north-west and\nthen counted clockwise up to west.",
            "is_constructor": 1,
            "static": 1
        },
        "JSG.graph.view.selection.SelectionHandler": {
            "name": "JSG.graph.view.selection.SelectionHandler",
            "shortname": "SelectionHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandler.js",
            "line": 9,
            "description": "Base class for a selection handler used by SelectionView. This class defines the method a custom selection handler must \nprovide. Selection handlers are registered via SelectionHandlerFactory...",
            "is_constructor": 1,
            "params": [
                {
                    "name": "views",
                    "description": "The views which represent current selection. Either one or an array of multiple views can be passed.",
                    "type": "JSG.graph.view.GraphItemView",
                    "optional": true,
                    "multiple": true
                }
            ]
        },
        "JSG.graph.view.selection.SelectionHandlerFactory": {
            "name": "JSG.graph.view.selection.SelectionHandlerFactory",
            "shortname": "SelectionHandlerFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandlerFactory.js",
            "line": 9,
            "description": "A simple factory to create a {{#crossLink \"JSG.graph.view.selection.SelectionHandler\"}}{{/crossLink}} for single or\nmultiple selection. Custom applications can provide their own factory implementation and register it via\n{{#crossLink \"JSG.graph.view.selection.SelectionView/setHandlerFactory:method\"}}{{/crossLink}}.",
            "is_constructor": 1
        },
        "JSG.graph.view.selection.SelectionStyle": {
            "name": "JSG.graph.view.selection.SelectionStyle",
            "shortname": "SelectionStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionStyle.js",
            "line": 7,
            "description": "A simple data class which provides default format styles used by the various \n{{#crossLink \"JSG.graph.view.selection.SelectionHandler\"}}{{/crossLink}} to draw and mark current selection.",
            "is_constructor": 1
        },
        "JSG.graph.view.selection.SelectionView": {
            "name": "JSG.graph.view.selection.SelectionView",
            "shortname": "SelectionView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 10,
            "description": "explain: handler usage, hint the setSelectionHandlerFactory...\nA SelectionView is a simple View instance which is used to mark current selection. The actual representation of a \nselected {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} or multiple GraphItems is done by a \n{{#crossLink \"JSG.graph.view.selection.SelectionHandler\"}}{{/crossLink}}. This SelectionHandler is created via a\nso called {{#crossLink \"JSG.graph.view.selection.SelectionHandlerFactory\"}}{{/crossLink}}. Custom applications can \nexchange the SelectionHandlerFactory with their own implementation to provide own SelectionHandlers.",
            "extends": "JSG.ui.View",
            "is_constructor": 1
        },
        "JSG.graph.view.selection.TextSelectionHandler": {
            "name": "JSG.graph.view.selection.TextSelectionHandler",
            "shortname": "TextSelectionHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\TextSelectionHandler.js",
            "line": 9,
            "description": "A special BBoxSelectionHandler subclass to handle the single selection of a {{#crossLink \"JSG.graph.model.TextNode\"}}{{/crossLink}}.\nIt is created via {{#crossLink \"JSG.graph.view.selection.SelectionHandlerFactory\"}}{{/crossLink}}.",
            "extends": "JSG.graph.view.selection.BBoxSelectionHandler",
            "is_constructor": 1,
            "params": [
                {
                    "name": "view",
                    "description": "The view which represent current text selection.",
                    "type": "JSG.graph.view.GraphItemView"
                }
            ]
        },
        "JSG.graph.view.shapes.BezierShapeRenderer": {
            "name": "JSG.graph.view.shapes.BezierShapeRenderer",
            "shortname": "BezierShapeRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\BezierShapeRenderer.js",
            "line": 8,
            "description": "Class to render a BezierShape.",
            "is_constructor": 1
        },
        "JSG.graph.view.shapes.DefaultShapeRenderer": {
            "name": "JSG.graph.view.shapes.DefaultShapeRenderer",
            "shortname": "DefaultShapeRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\DefaultShapeRenderer.js",
            "line": 9,
            "description": "This class is the default renderer for a shape. It simply renders the points of the\nshape as a polygon or polyline.",
            "is_constructor": 1
        },
        "JSG.graph.view.shapes.EllipseShapeRenderer": {
            "name": "JSG.graph.view.shapes.EllipseShapeRenderer",
            "shortname": "EllipseShapeRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\EllipseShapeRenderer.js",
            "line": 9,
            "description": "Class to render a EllipseShape. The given points are rendered using\na bezier curve.",
            "extends": "JSG.graph.view.shapes.BezierShapeRenderer",
            "is_constructor": 1
        },
        "JSG.graph.view.shapes.LineShapeRenderer": {
            "name": "JSG.graph.view.shapes.LineShapeRenderer",
            "shortname": "LineShapeRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\LineShapeRenderer.js",
            "line": 8,
            "description": "Class to render a LineShape. The given points are simply connected\nby drawing a polyline.",
            "extends": "JSG.graph.view.shapes.DefaultShapeRenderer",
            "is_constructor": 1
        },
        "JSG.graph.view.shapes.OrthoLineShapeRenderer": {
            "name": "JSG.graph.view.shapes.OrthoLineShapeRenderer",
            "shortname": "OrthoLineShapeRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\OrthoLineShapeRenderer.js",
            "line": 9,
            "description": "Class to render a OrtoginalLineShape. It connects the given points by straight\nlines and does not fill anything..",
            "extends": "JSG.graph.view.shapes.LineShapeRenderer",
            "is_constructor": 1
        },
        "JSG.graph.view.shapes.PathShapeRenderer": {
            "name": "JSG.graph.view.shapes.PathShapeRenderer",
            "shortname": "PathShapeRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\PathShapeRenderer.js",
            "line": 9,
            "description": "This class to renderer a {{#crossLink \"JSG.graph.model.shapes.PathShape\"}}{{/crossLink}}.",
            "extends": "JSG.graph.view.shapes.PolygonShapeRenderer",
            "is_constructor": 1
        },
        "JSG.graph.view.shapes.PathShapeRenderer.Commands": {
            "name": "JSG.graph.view.shapes.PathShapeRenderer.Commands",
            "shortname": "PathShapeRenderer.Commands",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\PathShapeRenderer.js",
            "line": 33,
            "description": "Private helper class to perform the corresponding {{#crossLink \"JSG.ui.graphics.Graphics\"}}{{/crossLink}} draw \ncommands depending on specified path command id.",
            "is_constructor": 1,
            "access": "private",
            "tagname": ""
        },
        "JSG.graph.view.shapes.PolygonShapeRenderer": {
            "name": "JSG.graph.view.shapes.PolygonShapeRenderer",
            "shortname": "PolygonShapeRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\PolygonShapeRenderer.js",
            "line": 9,
            "description": "Class to provide a renderer for polygon and polyline Shapes. It renders\nthe points of the polygon or polyline to the given graphics.",
            "extends": "JSG.graph.view.shapes.DefaultShapeRenderer",
            "is_constructor": 1
        },
        "JSG.graph.view.shapes.RectangleShapeRenderer": {
            "name": "JSG.graph.view.shapes.RectangleShapeRenderer",
            "shortname": "RectangleShapeRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\RectangleShapeRenderer.js",
            "line": 9,
            "description": "Class to provid a renderer for a RectangleShape. Currently this class relies\non the DefaultShapeRenderer.",
            "extends": "JSG.graph.view.shapes.DefaultShapeRenderer",
            "is_constructor": 1
        },
        "JSG.graph.view.shapes.ShapeRenderer": {
            "name": "JSG.graph.view.shapes.ShapeRenderer",
            "shortname": "ShapeRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\ShapeRenderer.js",
            "line": 14,
            "description": "Static class to provide a shape renderer for a shape type. A shape renderer\nprovides functions to render a shape in a specific way.",
            "is_constructor": 1
        },
        "JSG.graph.view.BBoxView": {
            "name": "JSG.graph.view.BBoxView",
            "shortname": "BBoxView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\BBoxView.js",
            "line": 8,
            "description": "A simple {{#crossLink \"JSG.geometry.BoundingBox\"}}{{/crossLink}} based view.",
            "extends": "JSG.ui.View",
            "is_constructor": 1
        },
        "JSG.graph.view.ContentNodeView": {
            "name": "JSG.graph.view.ContentNodeView",
            "shortname": "ContentNodeView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\ContentNodeView.js",
            "line": 4,
            "description": "The corresponding view for a {{#crossLink \"JSG.graph.model.ContentNode\"}}{{/crossLink}} model.</br>\nThe ContentNodeView wraps the ContentPane of given ContentNode inside a {{#crossLink \"JSG.ui.scrollview.ScrollView\"}}{{/crossLink}}.\nAlthough this view can be instantiated directly it is recommended to create it by calling\n{{#crossLink \"JSG.graph.controller.ContentNodeController/createView:method\"}}{{/crossLink}}.",
            "extends": "JSG.graph.view.NodeView",
            "params": [
                {
                    "name": "model",
                    "description": "The corresponding ContentNode model.",
                    "type": "JSG.graph.model.ContentNode"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.view.ContentNodeViewPanel": {
            "name": "JSG.graph.view.ContentNodeViewPanel",
            "shortname": "ContentNodeViewPanel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\ContentNodeView.js",
            "line": 158,
            "description": "The default ViewPanel to use for ContentNodeViews {{#crossLink \"JSG.ui.scrollview.ScrollView\"}}{{/crossLink}}.",
            "extends": "JSG.ui.scrollview.ViewPanel",
            "params": [
                {
                    "name": "contentView",
                    "description": "The parent reference.",
                    "type": "JSG.graph.view.ContentNodeView"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.view.ContentPaneView": {
            "name": "JSG.graph.view.ContentPaneView",
            "shortname": "ContentPaneView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\ContentNodeView.js",
            "line": 235,
            "description": "The default ContentPane view.</br>\nRegisters a listener to all added sub-views to be informed about any size changes.",
            "extends": "JSG.graph.view.GraphItemView",
            "params": [
                {
                    "name": "contentpane",
                    "description": "The ContentNodes content pane.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.view.BBoxListener": {
            "name": "JSG.graph.view.BBoxListener",
            "shortname": "BBoxListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\ContentNodeView.js",
            "line": 340,
            "description": "Internal listener class used by ContentPaneView. </br>\nListens to BoundingBox, Angle, Pin and Size changes of registered items.",
            "params": [
                {
                    "name": "cpview",
                    "description": "The ContentPaneView which should be notified on change.",
                    "type": "JSG.graph.view.ContentPaneView"
                }
            ],
            "is_constructor": 1,
            "access": "private",
            "tagname": ""
        },
        "JSG.graph.view.EdgeView": {
            "name": "JSG.graph.view.EdgeView",
            "shortname": "EdgeView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EdgeView.js",
            "line": 8,
            "description": "This view is for an {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}} model. Although it\ncan be instantiated directly the recommended way to create this view is by calling\n{{#crossLink \"JSG.graph.controller.ConnectionController/createView:method\"}}{{/crossLink}} method.",
            "extends": "JSG.graph.view.GraphItemView",
            "params": [
                {
                    "name": "item",
                    "description": "The corresponding Edge model.",
                    "type": "JSG.graph.model.Edge"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.view.EditBezierShapeView": {
            "name": "JSG.graph.view.EditBezierShapeView",
            "shortname": "EditBezierShapeView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditBezierShapeView.js",
            "line": 8,
            "description": "This subclass of EditShapeView should be used to edit {{#crossLink \"JSG.graph.model.shapes.BezierShape\"}}{{/crossLink}}\ninstances.",
            "extends": "JSG.graph.view.EditShapeView",
            "params": [
                {
                    "name": "cs",
                    "description": "The CoordinateSystem used to define the marker size.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.view.EditLineShapeView": {
            "name": "JSG.graph.view.EditLineShapeView",
            "shortname": "EditLineShapeView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditLineShapeView.js",
            "line": 9,
            "description": "This subclass of EditShapeView should be used to edit {{#crossLink \"JSG.graph.model.shapes.LineShape\"}}{{/crossLink}}\ninstances.",
            "extends": "JSG.graph.view.EditShapeView",
            "params": [
                {
                    "name": "cs",
                    "description": "The CoordinateSystem used to define the marker size.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.view.EditShapeView": {
            "name": "JSG.graph.view.EditShapeView",
            "shortname": "EditShapeView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 8,
            "description": "A special view which is shown while editing {{#crossLink \"JSG.graph.model.shapes.Shape\"}}{{/crossLink}} points.</br>\nAt each point location a so called {{#crossLink \"JSG.graph.view.EditShapeView.Marker\"}}{{/crossLink}}\nis placed which can be moved to adjust corresponding shape point.",
            "extends": "JSG.ui.View",
            "params": [
                {
                    "name": "cs",
                    "description": "The CoordinateSystem used to define the marker size.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.view.EditShapeView.Marker": {
            "name": "JSG.graph.view.EditShapeView.Marker",
            "shortname": "EditShapeView.Marker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 283,
            "description": "A simple data class representing a Marker within an EditShapeView.",
            "params": [
                {
                    "name": "index",
                    "description": "The Marker index within the list of all displayed markers.",
                    "type": "Number"
                },
                {
                    "name": "origin",
                    "description": "The Marker origin at which it will be placed.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "size",
                    "description": "The Marker size.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "is_constructor": 1,
            "access": "private",
            "tagname": ""
        },
        "JSG.graph.view.FloatingToolbar": {
            "name": "JSG.graph.view.FloatingToolbar",
            "shortname": "JSG.graph.view.FloatingToolbar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\FloatingToolbar.js",
            "line": 8,
            "description": "Under development",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "Id for DIV that is created",
                    "type": "String"
                },
                {
                    "name": "pos",
                    "description": "Initial position of toolbar.",
                    "type": "JSG.geometry.Point"
                }
            ]
        },
        "JSG.graph.view.FloatingToolbar.Tool": {
            "name": "JSG.graph.view.FloatingToolbar.Tool",
            "shortname": "JSG.graph.view.FloatingToolbar.Tool",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\FloatingToolbar.js",
            "line": 95,
            "description": "Abstract Tool to display a single tool.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "Id of tool.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call, if button is clicked.",
                    "type": "Function"
                }
            ]
        },
        "JSG.graph.view.FloatingToolbar.ToolButton": {
            "name": "JSG.graph.view.FloatingToolbar.ToolButton",
            "shortname": "JSG.graph.view.FloatingToolbar.ToolButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\FloatingToolbar.js",
            "line": 113,
            "description": "View to display a button",
            "extends": "JSG.graph.view.FloatingToolbar.Tool",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "Id of tool.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call, if button is clicked.",
                    "type": "Function"
                },
                {
                    "name": "namedImage",
                    "description": "URL of image to use for display.",
                    "type": "String"
                }
            ]
        },
        "JSG.graph.view.FloatingToolbar.ToolSeparator": {
            "name": "JSG.graph.view.FloatingToolbar.ToolSeparator",
            "shortname": "JSG.graph.view.FloatingToolbar.ToolSeparator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\FloatingToolbar.js",
            "line": 191,
            "description": "Tool to display a separator",
            "extends": "JSG.graph.view.FloatingToolbar.Tool",
            "is_constructor": 1
        },
        "JSG.graph.view.FloatingToolbar.ToolBreak": {
            "name": "JSG.graph.view.FloatingToolbar.ToolBreak",
            "shortname": "JSG.graph.view.FloatingToolbar.ToolBreak",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\FloatingToolbar.js",
            "line": 220,
            "description": "Tool to display a break in the toolbar",
            "extends": "JSG.graph.view.FloatingToolbar.Tool",
            "is_constructor": 1
        },
        "JSG.graph.view.FloatingToolbar.ToolList": {
            "name": "JSG.graph.view.FloatingToolbar.ToolList",
            "shortname": "JSG.graph.view.FloatingToolbar.ToolList",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\FloatingToolbar.js",
            "line": 249,
            "description": "Tool to display a list",
            "extends": "JSG.graph.view.FloatingToolbar.Tool",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "Id of tool.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call, if button is clicked.",
                    "type": "Function"
                },
                {
                    "name": "listNames",
                    "description": "String Array with items to display in the list.",
                    "type": "Array"
                },
                {
                    "name": "listValues",
                    "description": "String Array with values associated to the names. The value will be delivered with the callback, when an item\nin the list is selected.",
                    "type": "Array"
                },
                {
                    "name": "size",
                    "description": "Width of the list in pixek",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "Current value selected in the list.",
                    "type": "String"
                }
            ]
        },
        "JSG.graph.view.FloatingToolbar.ToolColor": {
            "name": "JSG.graph.view.FloatingToolbar.ToolColor",
            "shortname": "JSG.graph.view.FloatingToolbar.ToolColor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\FloatingToolbar.js",
            "line": 302,
            "description": "Tool to display a color selector",
            "extends": "JSG.graph.view.FloatingToolbar.Tool",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "Id of tool.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call, if button is clicked.",
                    "type": "Function"
                },
                {
                    "name": "value",
                    "description": "Current value selected in the list.",
                    "type": "String"
                }
            ]
        },
        "JSG.graph.view.GraphItemView": {
            "name": "JSG.graph.view.GraphItemView",
            "shortname": "GraphItemView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 19,
            "description": "The base class to visualize GraphItems. Subclasses should extend this one.",
            "params": [
                {
                    "name": "item",
                    "description": "The associated graph item.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "extends": "JSG.ui.View",
            "is_constructor": 1
        },
        "JSG.graph.view.CollapseButton": {
            "name": "JSG.graph.view.CollapseButton",
            "shortname": "CollapseButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 592,
            "description": "Each GraphItemView has a collapse button by default. The button is implemented as a simple View\nand is drawn as a decoration on top of a GraphItemView if required.",
            "extends": "JSG.ui.View",
            "params": [
                {
                    "name": "item",
                    "description": "The GraphItem of the corresponding GraphItemView.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.view.GraphView": {
            "name": "JSG.graph.view.GraphView",
            "shortname": "GraphView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 8,
            "description": "A GraphView to display a Graph model.</br>\nBesides drawing the content of the given Graph model, this view also provides additional\nfunctionality to draw selections and feedbacks on top. Currently the drawing order\nis as follows:\n<ul>\n<li> Graph content</li>\n<li> added feedback views</li>\n<li> selection view</li>\n<li> added tools</li>\n<li> overlay view</li>\n</ul>\nThat means that the Graph content is drawn first, on top of it the highlights are drawn, then\nthe feedbacks and so on. </br>\nUse the corresponding methods to add any custom View into one of these categories.</br>",
            "extends": "JSG.graph.view.GraphItemView",
            "params": [
                {
                    "name": "model",
                    "description": "The Graph model to be displayed by this view.",
                    "type": "JSG.graph.model.Graph"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.view.GroupView": {
            "name": "JSG.graph.view.GroupView",
            "shortname": "GroupView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GroupView.js",
            "line": 8,
            "description": "This view is used to display a {{#crossLink \"JSG.graph.model.Group\"}}{{/crossLink}} model.</br>\nBy default a <code>GroupView</code> does not draw anything. However custom class may change this. To create an \ninstance of this view {{#crossLink \"JSG.graph.controller.GroupController/createView:method\"}}{{/crossLink}} method \nshould be called.",
            "extends": "JSG.graph.view.GraphItemView",
            "params": [
                {
                    "name": "item",
                    "description": "The corresponding group model.",
                    "type": "JSG.graph.model.Group"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.view.selection.LayerId": {
            "name": "JSG.graph.view.selection.LayerId",
            "shortname": "LayerId",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\LayerId.js",
            "line": 7,
            "description": "This class contains predefined layer IDs used within the framework.</br>\nFor additional information about layer handling please refer to the corresponding methods in\n{{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}}."
        },
        "JSG.graph.view.MarqueeFeedbackView": {
            "name": "JSG.graph.view.MarqueeFeedbackView",
            "shortname": "MarqueeFeedbackView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\MarqueeFeedbackView.js",
            "line": 8,
            "description": "A View subclass to draw a simple translucent gray rectangle.</br>\nThis view is used as a visual feedback while spanning a selection box via mouse drag.",
            "extends": "JSG.ui.View",
            "is_constructor": 1
        },
        "JSG.graph.view.NodeView": {
            "name": "JSG.graph.view.NodeView",
            "shortname": "NodeView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\NodeView.js",
            "line": 8,
            "description": "This view is for a {{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}} model.</br>\nThe NodeView class maintains a list of {{#crossLink \"JSG.graph.view.PortView\"}}{{/crossLink}}s as\nadditional sub views. Although it can be instantiated directly the recommended way to create\nthis view is by calling\n{{#crossLink \"JSG.graph.controller.NodeController/createView:method\"}}{{/crossLink}} method.",
            "extends": "JSG.graph.view.GraphItemView",
            "params": [
                {
                    "name": "item",
                    "description": "The corresponding TextNode model.",
                    "type": "JSG.graph.model.TextNode"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.view.PortView": {
            "name": "JSG.graph.view.PortView",
            "shortname": "PortView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\PortView.js",
            "line": 8,
            "description": "This view can be used to visualize a {{#crossLink \"JSG.graph.model.Port\"}}{{/crossLink}} model.\nAlthough it can be instantiated directly the recommended way to create this view is by calling\n{{#crossLink \"JSG.graph.controller.PortController/createView:method\"}}{{/crossLink}} method.",
            "extends": "JSG.graph.view.GraphItemView",
            "params": [
                {
                    "name": "item",
                    "description": "The corresponding Port model.",
                    "type": "JSG.graph.model.Port"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.view.PositionFeedbackView": {
            "name": "JSG.graph.view.PositionFeedbackView",
            "shortname": "PositionFeedbackView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\PositionFeedbackView.js",
            "line": 8,
            "description": "This class provides feedback for a specific position within a GraphItem. It is used to visualize feedback during a resize operation.",
            "extends": "JSG.ui.View",
            "is_constructor": 1
        },
        "JSG.graph.view.SelectionFeedbackView": {
            "name": "JSG.graph.view.SelectionFeedbackView",
            "shortname": "SelectionFeedbackView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SelectionFeedbackView.js",
            "line": 8,
            "description": "This class is used to visualize feedback during edit operations.",
            "extends": "JSG.ui.View",
            "is_constructor": 1
        },
        "JSG.graph.view.SelectionProvider": {
            "name": "JSG.graph.view.SelectionProvider",
            "shortname": "SelectionProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SelectionProvider.js",
            "line": 8,
            "description": "The SelectionProvider maintains a map of currently selected {{#crossLink \"JSG.graph.controller.GraphItemController\"}}{{/crossLink}}s.</br>\nThere is only one SelectionProvider per {{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}}\nwhich can be obtained by calling {{#crossLink \"JSG.ui.viewer.GraphViewer/getSelectionProvider:method\"}}{{/crossLink}}.</br>\nTo get informed about any selection changes it is possible to either register a listener directly\nor to register to the {{#crossLink \"JSG.graph.notifications.NotificationCenter\"}}{{/crossLink}} for\n{{#crossLink \"JSG.graph.view.SelectionProvider/SELECTION_CHANGED_NOTIFICATION:property\"}}{{/crossLink}} notifications.</br>\n\nA SelectionProvider sends following notification: </br>\n<ul>\n\t<li>{{#crossLink \"JSG.graph.view.SelectionProvider/SELECTION_CHANGED_NOTIFICATION:property\"}}{{/crossLink}}</li>\n</ul>",
            "is_constructor": 1
        },
        "JSG.graph.view.SnapFeedbackView": {
            "name": "JSG.graph.view.SnapFeedbackView",
            "shortname": "SnapFeedbackView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SnapFeedbackView.js",
            "line": 9,
            "description": "A View subclass to draw a red dashed line as snap hint while dragging a GraphItemView.<br/>\nThe line is drawn from this view's origin to the specified target point. Since this view is used\nas a visual feedback while dragging, the origin and target points should be specified relative to \n{{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}}.",
            "extends": "JSG.ui.View",
            "is_constructor": 1
        },
        "JSG.graph.view.TextView": {
            "name": "JSG.graph.view.TextView",
            "shortname": "TextView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view",
            "file": "..\\dist\\wc\\jsg\\graph\\view\\TextView.js",
            "line": 8,
            "description": "This view is for a {{#crossLink \"JSG.graph.model.TextNode\"}}{{/crossLink}} model. Although it\ncan be instantiated directly the recommended way to create this view is by calling\n{{#crossLink \"JSG.graph.controller.NodeController/createView:method\"}}{{/crossLink}} method.",
            "extends": "JSG.graph.view.NodeView",
            "params": [
                {
                    "name": "item",
                    "description": "The corresponding TextNode model.",
                    "type": "JSG.graph.model.TextNode"
                }
            ],
            "is_constructor": 1
        },
        "JSG.graph.Coordinate": {
            "name": "JSG.graph.Coordinate",
            "shortname": "Coordinate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph",
            "namespace": "JSG.graph",
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 8,
            "description": "This class contains a 2D coordinate, defining a horizontal and a vertical coordinate to place an object in the \ncoordinate system. The coordinates are defined by Expressions, which allow the definition of formulas and\nthis way referencing properties of another GraphItem.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "xExpression",
                    "description": "Horizontal coordinate.",
                    "type": "JSG.graph.expr.Expression",
                    "optional": true
                },
                {
                    "name": "yExpression",
                    "description": "Vertical coordinate.",
                    "type": "JSG.graph.expr.Expression",
                    "optional": true
                }
            ]
        },
        "JSG.graph.CoordinateProxy": {
            "name": "JSG.graph.CoordinateProxy",
            "shortname": "CoordinateProxy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph",
            "namespace": "JSG.graph",
            "file": "..\\dist\\wc\\jsg\\graph\\CoordinateProxy.js",
            "line": 8,
            "description": "Creates a 2D coordinate based on {JSG.graph.expr.NumberExpression}s",
            "is_constructor": 1
        },
        "JSG.graph.Pin": {
            "name": "JSG.graph.Pin",
            "shortname": "Pin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph",
            "namespace": "JSG.graph",
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 8,
            "description": "The pin describes the location of a GraphItem. It consists of two coordinates, the Pin and the LocalPin. The Pin\ndefines the location of the object in the coordinates space relative to its container, which can be the drawing area or\nanother container. The LocalPin places the Pin within the GraphItem. The LocalPin also serves as the rotation center for the item. Pins\nare coordinates, which consist of Expressions. Therefore a Pin can be defined by formulas. By default the LocalPin for a GraphItem is defined by\ntwo formulas placing it in the middle of the GraphItem (x = WIDTH * 0.5, y = HEIGHT * 0.5).",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "GraphItem the pin belongs to.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ]
        },
        "JSG.graph.ReshapeType": {
            "name": "JSG.graph.ReshapeType",
            "shortname": "ReshapeType",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph",
            "namespace": "JSG.graph",
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 8,
            "description": "Reshape Type definitions.",
            "access": "private",
            "tagname": ""
        },
        "JSG.graph.ReshapeCoordinate": {
            "name": "JSG.graph.ReshapeCoordinate",
            "shortname": "ReshapeCoordinate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph",
            "namespace": "JSG.graph",
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 89,
            "description": "This class contains a 2D coordinate, defining a horizontal and a vertical coordinate to place an object in the \ncoordinate system. The coordinates are defined by Expressions, which allow the definition of formulas and\nthis way referencing properties of another GraphItem. ReshapeCoordinates extend the coordinate by defining value\nranges for the coordinate values and defining usage criteria. This class is only intended for internal use.",
            "extends": "JSG.graph.Coordinate",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "xExpression",
                    "description": "Horizontal coordinate.",
                    "type": "JSG.graph.expr.Expression"
                },
                {
                    "name": "yExpression",
                    "description": "Vertical coordinate.",
                    "type": "JSG.graph.expr.Expression"
                },
                {
                    "name": "xMin",
                    "description": "Minimum values for x Expression.",
                    "type": "Number"
                },
                {
                    "name": "xMax",
                    "description": "Maximum values for x Expression.",
                    "type": "Number"
                },
                {
                    "name": "yMin",
                    "description": "Minimum values for y Expression.",
                    "type": "Number"
                },
                {
                    "name": "yMax",
                    "description": "Maximum values for y Expression.",
                    "type": "Number"
                },
                {
                    "name": "name",
                    "description": "Name of related property.",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "Scaling type of values.",
                    "type": "JSG.graph.ReshapeType"
                },
                {
                    "name": "vertical",
                    "description": "True, if values change in vertical direction, false for horizontal direction.",
                    "type": "Boolean"
                }
            ]
        },
        "JSG.graph.Size": {
            "name": "JSG.graph.Size",
            "shortname": "Size",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph",
            "namespace": "JSG.graph",
            "file": "..\\dist\\wc\\jsg\\graph\\Size.js",
            "line": 8,
            "description": "Creates a new Size instance. A size objects contains the width and height of an item. These properties are\ndefined using Expressions, which can hold a static value or a formula.",
            "example": [
                "\n   // set size of GraphItem to 2 by 2 cm with given GraphItem\n   var size = new JSG.graph.Size(2000, 2000);\n   \n   item.setSizeTo(size);"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "wExpr",
                    "description": "Initial width expression or value",
                    "type": "JSG.graph.expr.NumberExpression",
                    "optional": true
                },
                {
                    "name": "hExpr",
                    "description": "Initial height expression or value",
                    "type": "JSG.graph.expr.NumberExpression",
                    "optional": true
                }
            ]
        },
        "JSG.graph.Utils": {
            "name": "JSG.graph.Utils",
            "shortname": "JSG.graph.Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph",
            "namespace": "JSG.graph",
            "file": "..\\dist\\wc\\jsg\\graph\\Utils.js",
            "line": 9,
            "description": "This class provides static helper functions for common graph related tasks.",
            "is_constructor": 1
        },
        "JSG.graph.layout.LayoutManager": {
            "name": "JSG.graph.layout.LayoutManager",
            "shortname": "LayoutManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.graph.layout",
            "namespace": "JSG.graph.layout",
            "file": "..\\dist\\wc\\jsg\\layout\\LayoutManager.js",
            "line": 15,
            "description": "The LayoutManager provides an interface to attach graph layouts to the JSGraph Package. By providing your\nown implementation of a LayoutManager, you can use your own layout algorithms or use a separate package. We also\nprovide an implementation of a layout package and deliver it with the library. The LayoutManager provides\naccess to the available layouts, the conversion between the graph model and a layout model and some functions to influence\nlayout logic.",
            "is_constructor": 1
        },
        "JSG.ui.events.DragEventType": {
            "name": "JSG.ui.events.DragEventType",
            "shortname": "DragEventType",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events",
            "file": "..\\dist\\wc\\jsg\\ui\\events\\DragEvent.js",
            "line": 8,
            "description": "DragEvent types. This is attached to the DragEvent to identify the type of event."
        },
        "JSG.ui.events.DragEvent": {
            "name": "JSG.ui.events.DragEvent",
            "shortname": "DragEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events",
            "file": "..\\dist\\wc\\jsg\\ui\\events\\DragEvent.js",
            "line": 40,
            "description": "The DragEvent class wraps event information passed from the JavaScript events and adds additional\nuseful information to it. It should only be used as an information source while catching the events and\nnot be constructed or used elsewhere.",
            "extends": "JSG.ui.events.Event",
            "is_constructor": 1,
            "access": "private",
            "tagname": ""
        },
        "JSG.ui.events.Event": {
            "name": "JSG.ui.events.Event",
            "shortname": "Event",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events",
            "file": "..\\dist\\wc\\jsg\\ui\\events\\Event.js",
            "line": 8,
            "description": "Abstract base class for all UI events within this framework.</br>\n<b>Note:</b> this class should never be used itself, instead use one of its subclasses.",
            "params": [
                {
                    "name": "canvas",
                    "description": "The HTML5 canvas element.",
                    "type": "Canvas"
                },
                {
                    "name": "ev",
                    "description": "The wrapped native JavaScript event.",
                    "type": "Event"
                },
                {
                    "name": "type",
                    "description": "The event type. See subclasses for event type constants.",
                    "type": "Number"
                }
            ],
            "is_constructor": 1,
            "access": "private",
            "tagname": ""
        },
        "JSG.ui.events.GestureEventType": {
            "name": "JSG.ui.events.GestureEventType",
            "shortname": "GestureEventType",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events",
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 8,
            "description": "GestureEvent types. This is attached to the GestureEvent to identify the type of event."
        },
        "JSG.ui.events.GestureEvent": {
            "name": "JSG.ui.events.GestureEvent",
            "shortname": "GestureEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events",
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 125,
            "description": "The GestureEvent class wraps event information passed from the JavaScript events and adds additional\nuseful information to it. It should only be used as an information source while catching the events and\nnot be constructed or used elsewhere.",
            "extends": "JSG.ui.events.Event",
            "is_constructor": 1,
            "access": "private",
            "tagname": ""
        },
        "JSG.ui.events.KeyEventType": {
            "name": "JSG.ui.events.KeyEventType",
            "shortname": "KeyEventType",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events",
            "file": "..\\dist\\wc\\jsg\\ui\\events\\KeyEvent.js",
            "line": 8,
            "description": "KeyEvent types. This is attached to the KeyEvent to identify the type of event."
        },
        "JSG.ui.events.KeyEvent": {
            "name": "JSG.ui.events.KeyEvent",
            "shortname": "KeyEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events",
            "file": "..\\dist\\wc\\jsg\\ui\\events\\KeyEvent.js",
            "line": 25,
            "description": "The KeyEvent class wraps event information passed from the JavaScript events and adds additional\nuseful information to it. It should only be used as an information source while catching the events and\nnot be constructed or used elsewhere.",
            "extends": "JSG.ui.events.Event",
            "is_constructor": 1,
            "access": "private",
            "tagname": ""
        },
        "JSG.ui.events.MouseEventType": {
            "name": "JSG.ui.events.MouseEventType",
            "shortname": "MouseEventType",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events",
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 8,
            "description": "MouseEvent types. This is attached to the MouseEvent to identify the type of event."
        },
        "JSG.ui.events.ButtonType": {
            "name": "JSG.ui.events.ButtonType",
            "shortname": "ButtonType",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events",
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 45,
            "description": "ButtonType. This is attached to the MouseEvent to identify the type of button used."
        },
        "JSG.ui.events.KeyType": {
            "name": "JSG.ui.events.KeyType",
            "shortname": "KeyType",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events",
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 63,
            "description": "Key types. This is attached to the MouseEvent to identify a key potentially pressed."
        },
        "JSG.ui.events.MouseEvent": {
            "name": "JSG.ui.events.MouseEvent",
            "shortname": "MouseEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events",
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 95,
            "description": "The MouseEvent class wraps event information passed from the JavaScript events and adds additional\nuseful information to it. It should only be used as an information source while catching the events and\nnot be constructed or used elsewhere.",
            "extends": "JSG.ui.events.Event",
            "is_constructor": 1,
            "access": "private",
            "tagname": ""
        },
        "JSG.ui.graphics.DisplayMode": {
            "name": "JSG.ui.graphics.DisplayMode",
            "shortname": "DisplayMode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics",
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 14,
            "description": "Drawing area display modes"
        },
        "JSG.ui.graphics.CoordinateSystem": {
            "name": "JSG.ui.graphics.CoordinateSystem",
            "shortname": "CoordinateSystem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics",
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 35,
            "description": "Default CoordinateSystem. Coordinate systems define the transformation between pixel or device coordinates and \ncoordinates used in a graph. The system provides scaling or zooming within the coordinate system.\nThis coordinate system simply uses pixel coordinates and uses no transformation.",
            "is_constructor": 1
        },
        "JSG.ui.graphics.DocumentEventDispatcher": {
            "name": "JSG.ui.graphics.DocumentEventDispatcher",
            "shortname": "DocumentEventDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics",
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\DocumentEventDispatcher.js",
            "line": 9,
            "description": "The DocumentEventDispatcher object is used to register listener functions for global, aka. document, events.</br>"
        },
        "JSG.ui.graphics.GraphicSystem": {
            "name": "JSG.ui.graphics.GraphicSystem",
            "shortname": "GraphicSystem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics",
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\GraphicSystem.js",
            "line": 9,
            "description": "The GraphicSystem is the main class to handle events and drawing requests.</br>\nTherefore a reference to an html canvas element is required to which the GraphicSystem will register itself as listener \nto the various key, touch and mouse events. These events are transformed from native events to their corresponding API \n{{#crossLink \"JSG.ui.events.Event\"}}{{/crossLink}}s and then propagated to a registered \n{{#crossLink \"JSG.graph.interaction.InteractionHandler\"}}{{/crossLink}} or, if no InteractionHandler was set, to the main \nroot {{#crossLink \"JSG.ui.View\"}}{{/crossLink}}.</br>\nA drawing request can be triggered by a call to {{#crossLink \"JSG.ui.graphics.GraphicSystem/paint:method\"}}{{/crossLink}}.\nHowever, it is rarely necessary to call <code>paint</code> directly. In most cases a repaint is required as a result of \nhandling an event notification. Then the preferred way is to simpy set the {{#crossLink \"JSG.ui.events.Event/doRepaint:property\"}}{{/crossLink}}\nproperty to <code>true</code>.</br>    \nFinally, if the GraphicSystem is no longer needed {{#crossLink \"JSG.ui.graphics.GraphicSystem/destroy:method\"}}{{/crossLink}} \nshould be called to perform a clean up and to deregister all registered listeners.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvasArg",
                    "description": "Id of the canvas element to be used or a canvas element.",
                    "type": "Canvas | String"
                },
                {
                    "name": "cs",
                    "description": "Coordinate System to be used for scaling objects.",
                    "type": "JSG.ui.graphics.MetricCoordinateSystem"
                }
            ]
        },
        "JSG.ui.graphics.Graphics": {
            "name": "JSG.ui.graphics.Graphics",
            "shortname": "Graphics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics",
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 8,
            "description": "Default Graphics. The Graphics class encapsulates all graphic output. It provides output, transformation and information functions to\nvisualize graphical information within a canvas object. In general the Graphics class should not be used directly and you should visualize\nyour output using the GraphItems.",
            "example": [
                "\n    // canvas given\n    var graphics = new JSG.ui.graphics.Graphics(canvas, new JSG.ui.graphics.CoordinateSystem());\n    // set red line color\n    graphics.setLineColor('#FF0000');\n    // set blue fill color\n    graphics.setFillColor('#0000FF');\n    graphics.drawEllipse(new JSG.geometry.Rectangle(1000, 1000, 500, 500));"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvas",
                    "description": "Canvas to be used for output.",
                    "type": "Canvas"
                },
                {
                    "name": "coordinatesystem",
                    "description": "Coordinate System to be used within graphics. The coordinate system is used\nfor some necessary conversions between logical and device units",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ]
        },
        "JSG.ui.graphics.MetricCoordinateSystem": {
            "name": "JSG.ui.graphics.MetricCoordinateSystem",
            "shortname": "MetricCoordinateSystem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics",
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\MetricCoordinateSystem.js",
            "line": 8,
            "description": "MetricCoordinateSystem. A coordinate systems defines the transformation between pixel or device coordinates and\ncoordinates used in a graph. This coordinate system uses metric coordinates. One logical unit corresponds to 1/100 mm.\nThe system provides scaling or zooming within the coordinate system.",
            "example": [
                ":\n     var cs = new JSG.ui.graphics.MetricCoordinateSystem();\n     // convert 1cm to pixel on the screen\n     var xDevPos = cs.logToDeviceX(1000);\n     // convert 100 pixel to 1/100th mm\n     var xMMPos = cs.deviceToLogX(100);"
            ],
            "extends": "JSG.ui.graphics.CoordinateSystem",
            "is_constructor": 1
        },
        "JSG.ui.graphics.SVGraphics": {
            "name": "JSG.ui.graphics.SVGraphics",
            "shortname": "SVGraphics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics",
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\SVGraphics.js",
            "line": 8,
            "description": "The SVGraphics class encapsulates all graphics output. It provides output, transformation and information functions to\nvisualize graphical information. The SVGraphics class converts all output to SVG format and writes this information into the given memory xml file.",
            "is_constructor": 1,
            "extends": "JSG.ui.graphics.ScalableGraphics",
            "params": [
                {
                    "name": "file",
                    "description": "XML Writer used to save the SVG information to.",
                    "type": "JSG.commons.XMLWriter"
                },
                {
                    "name": "coordinatesystem",
                    "description": "Coordinate System to be used within SVG Graphics. The coordinate system is used\nfor all output to convert between logical and device units",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ]
        },
        "JSG.ui.graphics.ScalableGraphics": {
            "name": "JSG.ui.graphics.ScalableGraphics",
            "shortname": "ScalableGraphics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics",
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\ScalableGraphics.js",
            "line": 8,
            "description": "The Scalable Graphics class encapsulates all graphics output. It provides output, transformation and information functions to \nvisualize graphical information. In addition to the graphics class, it uses the given coordinates system to support zooming and logical coordinates.",
            "extends": "JSG.ui.graphics.Graphics",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvas",
                    "description": "Canvas to be used for output.",
                    "type": "Canvas"
                },
                {
                    "name": "coordinatesystem",
                    "description": "Coordinate System to be used within graphics. The coordinate system is used\nfor all output to convert between logical and device units",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ]
        },
        "JSG.ui.navigator.JSGNavigator": {
            "name": "JSG.ui.navigator.JSGNavigator",
            "shortname": "JSGNavigator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator",
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigator.js",
            "line": 14,
            "description": "Navigator View that is attached to a canvas element. It display the content of a\nGraphEditor. The visual representation of the graph is reduced in detail and zoomed to\ndisplay the complete Graph. You can use the mouse to pan or zoom within the graph.",
            "extends": "JSG.ui.View",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvasArg",
                    "description": "Id of the canvas element to be used or a canvas element.",
                    "type": "Canvas | String"
                },
                {
                    "name": "width",
                    "description": "Initial width of the navigator element.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Initial height of the navigator element.",
                    "type": "Number"
                }
            ]
        },
        "JSG.ui.navigator.JSGNavigatorInteractionHandler": {
            "name": "JSG.ui.navigator.JSGNavigatorInteractionHandler",
            "shortname": "JSGNavigatorInteractionHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator",
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigatorInteractionHandler.js",
            "line": 9,
            "description": "Special InteractionHandler for the Navigator. This should only be used internally.",
            "access": "private",
            "tagname": "",
            "extends": "JSG.graph.interaction.InteractionHandler",
            "is_constructor": 1,
            "params": [
                {
                    "name": "viewer",
                    "description": "Viewer to attach to the InteractionHandler",
                    "type": "JSG.ui.navigator.NavigatorViewer"
                }
            ]
        },
        "JSG.ui.navigator.JSGNavigatorPanel": {
            "name": "JSG.ui.navigator.JSGNavigatorPanel",
            "shortname": "JSGNavigatorPanel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator",
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigatorPanel.js",
            "line": 8,
            "description": "Special GraphViewPanel to use for Navigator. It uses a different Viewer and ControllerFactory. This\nshould only be used internally.",
            "extends": "JSG.ui.GraphViewPanel",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "navigator",
                    "description": "Navigator the panel is used in.",
                    "type": "JSG.ui.navigator.JSGNavigator"
                }
            ]
        },
        "JSG.ui.navigator.NavigatorContentView": {
            "name": "JSG.ui.navigator.NavigatorContentView",
            "shortname": "NavigatorContentView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator",
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorContentView.js",
            "line": 8,
            "description": "A special ContentView to display content-nodes in the Navigator.",
            "extends": "JSG.ui.navigator.NavigatorItemView",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "Item or model to attach to the view.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ]
        },
        "JSG.ui.navigator.NavigatorControllerFactory": {
            "name": "JSG.ui.navigator.NavigatorControllerFactory",
            "shortname": "NavigatorControllerFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator",
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorControllerFactory.js",
            "line": 8,
            "description": "A special ControllerFactory used within the Navigator. It creates Navigator controller objects based on the model.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1
        },
        "JSG.ui.navigator.NavigatorEdgeView": {
            "name": "JSG.ui.navigator.NavigatorEdgeView",
            "shortname": "NavigatorEdgeView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator",
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorEdgeView.js",
            "line": 9,
            "description": "A GraphItemView to visualize edges in the Navigator. The edges are always displayed using a solid linestyle to \nspeed up the visualization.",
            "extends": "JSG.graph.view.GraphItemView",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "Model to use in the view.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ]
        },
        "JSG.ui.navigator.NavigatorGraphController": {
            "name": "JSG.ui.navigator.NavigatorGraphController",
            "shortname": "NavigatorGraphController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator",
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorGraphController.js",
            "line": 8,
            "description": "Special GraphController for the Navigator. It creates a NavigatorGraphView for a given Graph. It also\ndoes prohibit selections in the Graph.",
            "extends": "JSG.graph.controller.GraphController",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "model",
                    "description": "Graph to attach to controller",
                    "type": "JSG.graph.model.Graph"
                },
                {
                    "name": "navigator",
                    "description": "Navigator using the GraphController.",
                    "type": "JSG.ui.navigator.JSGNavigator"
                }
            ]
        },
        "JSG.ui.navigator.NavigatorGraphView": {
            "name": "JSG.ui.navigator.NavigatorGraphView",
            "shortname": "NavigatorGraphView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator",
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorGraphView.js",
            "line": 8,
            "description": "A special GraphView to use for the Navigator. It does not draw a selection, feedback, grid\nor other overlays. It should only be used internally.",
            "access": "private",
            "tagname": "",
            "extends": "JSG.graph.view.GraphView",
            "is_constructor": 1,
            "params": [
                {
                    "name": "model",
                    "description": "Model to use with view.",
                    "type": "JSG.graph.model.Graph"
                }
            ]
        },
        "JSG.ui.navigator.NavigatorItemController": {
            "name": "JSG.ui.navigator.NavigatorItemController",
            "shortname": "NavigatorItemController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator",
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorItemController.js",
            "line": 8,
            "description": "A special GraphItemController for the Navigator. The controller create Navigator specific views for\nGraphItems, Edges and ContentNodes. This is necessary to enable the different visualization of those model\nobjects.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "Model to attach to controller.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "navigator",
                    "description": "Navigator.",
                    "type": "JSG.ui.navigator.JSGNavigator"
                }
            ]
        },
        "JSG.ui.navigator.NavigatorItemView": {
            "name": "JSG.ui.navigator.NavigatorItemView",
            "shortname": "NavigatorItemView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator",
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorItemView.js",
            "line": 8,
            "description": "View for GraphItems to display items in the Navigator. To display items in the navigator, the item displayed using\na reduced view less formatting and a less detailed geometry.",
            "extends": "JSG.graph.view.GraphItemView",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "Item or model to attach to the view.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ]
        },
        "JSG.ui.navigator.NavigatorViewer": {
            "name": "JSG.ui.navigator.NavigatorViewer",
            "shortname": "NavigatorViewer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator",
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\NavigatorViewer.js",
            "line": 8,
            "description": "Special ControllerViewer for Navigator. This should only be used internally.",
            "access": "private",
            "tagname": "",
            "extends": "JSG.ui.viewer.ControllerViewer",
            "is_constructor": 1
        },
        "JSG.ui.navigator.Overlay": {
            "name": "JSG.ui.navigator.Overlay",
            "shortname": "Overlay",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator",
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\Overlay.js",
            "line": 8,
            "description": "This view is displayed on top of the navigator. It is used to display the part of the\ncomplete Graph, which is currently visible in the attached GraphEditor.",
            "extends": "JSG.ui.View",
            "is_constructor": 1,
            "params": [
                {
                    "name": "cs",
                    "description": "Coordinate System to use.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ]
        },
        "JSG.ui.navigator.OverlayInteraction\nextends JSG.graph.interaction.Interaction": {
            "name": "JSG.ui.navigator.OverlayInteraction\nextends JSG.graph.interaction.Interaction",
            "shortname": "OverlayInteraction\nextends JSG.graph.interaction.Interaction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator",
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\OverlayInteraction.js",
            "line": 9,
            "description": "Interaction that handles user input on top of the Navigator. The user can change\nthe zoom status of the attached GraphEditor or the scroll position by moving or resizing the \nvisible overlay area within the navigator.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "navigator",
                    "description": "Navigator, the interaction is used in.",
                    "type": "JSG.ui.navigator.JSGNavigator"
                }
            ]
        },
        "JSG.ui.scrollview.Arrow": {
            "name": "JSG.ui.scrollview.Arrow",
            "shortname": "Arrow",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview",
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\Arrow.js",
            "line": 9,
            "description": "A simple view class which displays an arrow to indicate a scroll into a certain direction.",
            "extends": "JSG.ui.Widget",
            "is_constructor": 1,
            "params": [
                {
                    "name": "direction",
                    "description": "The direction the arrowhead points to. Use one of predefined constants.",
                    "type": "Number"
                },
                {
                    "name": "observer",
                    "description": "An observer which gets notified about mouse up and down events. Usually this is an instance of\n{{#crossLink \"JSG.ui.scrollview.ScrollBar\"}}{{/crossLink}}.",
                    "type": "Object"
                }
            ]
        },
        "JSG.ui.scrollview.Range": {
            "name": "JSG.ui.scrollview.Range",
            "shortname": "Range",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview",
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\Range.js",
            "line": 9,
            "description": "The {{#crossLink \"JSG.ui.scrollview.ScrollBar\"}}{{/crossLink}} Range is the region between the two {{#crossLink \"JSG.ui.scrollview.Arrow\"}}{{/crossLink}}\nviews. The Range view contains a {{#crossLink \"JSG.ui.scrollview.Thumb\"}}{{/crossLink}} view which can be dragged to\ninitiate scrolling. Additionally a simple click within the visible Range area triggers a scroll too.",
            "extends": "JSG.ui.Widget",
            "params": [
                {
                    "name": "isVertical",
                    "description": "<code>true</code>, if this range belongs to a vertical ScrollBar, <code>false</code> otherwise.",
                    "type": "Boolean"
                },
                {
                    "name": "observer",
                    "description": "An observer which gets notified about mouse click and Thumb events. Usually this is an instance of\n{{#crossLink \"JSG.ui.scrollview.ScrollBar\"}}{{/crossLink}}.",
                    "type": "Object"
                }
            ],
            "is_constructor": 1
        },
        "JSG.ui.scrollview.RangeModel": {
            "name": "JSG.ui.scrollview.RangeModel",
            "shortname": "RangeModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview",
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\RangeModel.js",
            "line": 9,
            "description": "The base model to track scrolling. Each scroll update should be performed through this class in order to inform\nany observer. Observers can be registered and unregistered with {{#crossLink \"JSG.ui.scrollview.RangeModel/addObserver:method\"}}{{/crossLink}}\nand {{#crossLink \"JSG.ui.scrollview.RangeModel/removeObserver:method\"}}{{/crossLink}} respectively. Each registered \nobserver must implement an <code>onRangeChange(rangemodel, type)</code> method which is called with the changed range model instance\nand one of the predefined change types.",
            "is_constructor": 1
        },
        "JSG.ui.scrollview.ScrollBar": {
            "name": "JSG.ui.scrollview.ScrollBar",
            "shortname": "ScrollBar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview",
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 8,
            "description": "A Scrollbar is used by a {{#crossLink \"JSG.ui.scrollview.ScrollView\"}}{{/crossLink}} to move the content view of a\n{{#crossLink \"JSG.ui.scrollview.ViewPort\"}}{{/crossLink}}. It consists of two {{#crossLink \"JSG.ui.scrollview.Arrow\"}}{{/crossLink}}\nviews, a {{#crossLink \"JSG.ui.scrollview.Thumb\"}}{{/crossLink}} and a {{#crossLink \"JSG.ui.scrollview.Range\"}}{{/crossLink}} view.<br/>\nTo get notified about scrollbar events it is possible to register listeners which should implement following methods:\n<code>\n\t\tonThumbDrag = function(rangemodel, delta);\n\t\tonUp = function(arrow);\n\t\tonDown = function(arrow);\n\t\tonPageUp = function(rangemodel);\n\t\tonPageDown = function(rangemodel);\n<code>",
            "extends": "JSG.ui.Widget",
            "is_constructor": 1,
            "params": [
                {
                    "name": "isVertical",
                    "description": "Flag to indicate, whether this ScrollBar is either vertically or horizontally arranged.",
                    "type": "Boolean"
                }
            ]
        },
        "JSG.ui.scrollview.Mode": {
            "name": "JSG.ui.scrollview.Mode",
            "shortname": "Mode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview",
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 61,
            "description": "Predefined mode constants. These are used to specify the display behavior for this scrollbar.</br>\nSee {{#crossLink \"JSG.ui.scrollview.ScrollBar/setMode:method\"}}{{/crossLink}} too."
        },
        "JSG.ui.scrollview.ScrollView": {
            "name": "JSG.ui.scrollview.ScrollView",
            "shortname": "ScrollView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview",
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 18,
            "description": "The ScrollView contains the {{#crossLink \"JSG.ui.scrollview.ScrollBar\"}}{{/crossLink}}s and a \n{{#crossLink \"JSG.ui.scrollview.ViewPort\"}}{{/crossLink}} to scroll its content. The content itself is displayed by\na {{#crossLink \"JSG.ui.scrollview.ViewPanel\"}}{{/crossLink}} which in turn is used by the view port. To update and refresh each\npart all changes to the scroll position or which affects scrolling are done via the \n{{#crossLink \"JSG.ui.scrollview.RangeModel\"}}{{/crossLink}}.",
            "extends": "JSG.ui.scrollview.Widget",
            "is_constructor": 1,
            "params": [
                {
                    "name": "cs",
                    "description": "The coordinate system to use for size calculations.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ]
        },
        "JSG.ui.scrollview.Thumb": {
            "name": "JSG.ui.scrollview.Thumb",
            "shortname": "Thumb",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview",
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\Thumb.js",
            "line": 8,
            "description": "A Thumb view for a {{#crossLink \"JSG.ui.scrollview.Range\"}}{{/crossLink}} to initiate scrolling by dragging it.",
            "extends": "JSG.ui.Widget",
            "is_constructor": 1
        },
        "JSG.ui.scrollview.ViewPanel": {
            "name": "JSG.ui.scrollview.ViewPanel",
            "shortname": "ViewPanel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview",
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPanel.js",
            "line": 9,
            "description": "A ViewPanel is usually used in conjunction with a {{#crossLink \"JSG.ui.scrollview.ViewPort\"}}{{/crossLink}} to display \na view which bounds are larger then the currently available space. That means only a certain area of this view is visible. \nThe visible area is determined by the ViewPort whereas the ViewPanel specifies the correct bounds to use. Note: these bounds\ncan be larger then the view bounds to support kind of endless scrolling in all directions.",
            "extends": "JSG.ui.Widget",
            "is_constructor": 1
        },
        "JSG.ui.scrollview.ViewPort": {
            "name": "JSG.ui.scrollview.ViewPort",
            "shortname": "ViewPort",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview",
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPort.js",
            "line": 9,
            "description": "The ViewPort acts like a window to look at the currently visible area of a, usually larger, view. This content view is\nwrapped within a {{#crossLink \"JSG.ui.scrollview.ViewPanel\"}}{{/crossLink}} to move the visible area. This movement is \nrealized by using {{#crossLink \"JSG.ui.scrollview.RangeModel\"}}{{/crossLink}}s for the horizontal and vertical direction. \nWith this indirection it is possible to easily attach {{#crossLink \"JSG.ui.scrollview.ScrollBar\"}}{{/crossLink}}s to this \nViewPort. As an example refer to the {{#crossLink \"JSG.ui.scrollview.ScrollView\"}}{{/crossLink}} class. \n\nA ViewPort sends following notification: </br>\n<ul>\n\t<li>{{#crossLink \"JSG.ui.scrollview.ViewPort/BOUNDS_CHANGED_NOTIFICATION:property\"}}{{/crossLink}}</li>\n</ul>",
            "extends": "JSG.ui.Widget",
            "is_constructor": 1
        },
        "JSG.ui.shapelibrary.ShapeLibrary": {
            "name": "JSG.ui.shapelibrary.ShapeLibrary",
            "shortname": "ShapeLibrary",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.shapelibrary",
            "namespace": "JSG.ui.shapelibrary",
            "file": "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibrary.js",
            "line": 16,
            "description": "Shape Library main class. This library consists of a GraphEditor being attached to a provided canvas. The library\ncan be filled with categories and shapes, that are displayed within the canvas. If the canvas is resized, the library must \nalso be resized to layout it appropriately.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvasId",
                    "description": "Id of the canvas to attach to.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "width of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "height of the canvas.",
                    "type": "Number"
                }
            ]
        },
        "JSG.ui.shapelibrary.ShapeLibraryDefaultInteraction": {
            "name": "JSG.ui.shapelibrary.ShapeLibraryDefaultInteraction",
            "shortname": "ShapeLibraryDefaultInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.shapelibrary",
            "namespace": "JSG.ui.shapelibrary",
            "file": "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibraryDefaultInteraction.js",
            "line": 8,
            "description": "Special GraphInteraction used in ShapeLibrary.",
            "extends": "JSG.graph.interaction.GraphInteraction",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvasId",
                    "description": "Id of the canvas element to be used or a canvas element.",
                    "type": "String"
                }
            ]
        },
        "JSG.ui.shapelibrary.KeyHandler": {
            "name": "JSG.ui.shapelibrary.KeyHandler",
            "shortname": "KeyHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.shapelibrary",
            "namespace": "JSG.ui.shapelibrary",
            "file": "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibraryDefaultInteraction.js",
            "line": 31,
            "description": "A custom key handler used by {{#crossLink \"JSG.ui.shapelibrary.ShapeLibraryDefaultInteraction\"}}{{/crossLink}}. \nThis handler only allows scrolling via cursor keys inside a {{#crossLink \"JSG.ui.shapelibrary.ShapeLibrary\"}}{{/crossLink}}.",
            "extends": "JSG.graph.interaction.InteractionActivator",
            "is_constructor": 1
        },
        "JSG.ui.shapelibrary.ShapeLibraryEditor": {
            "name": "JSG.ui.shapelibrary.ShapeLibraryEditor",
            "shortname": "ShapeLibraryEditor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.shapelibrary",
            "namespace": "JSG.ui.shapelibrary",
            "file": "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibraryEditor.js",
            "line": 8,
            "description": "Special GraphEditor used in ShapeLibrary.",
            "extends": "JSG.ui.GraphEditor",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvasId",
                    "description": "Id of the canvas element to be used or a canvas element.",
                    "type": "Canvas | String"
                }
            ]
        },
        "JSG.ui.shapelibrary.ShapeLibrarySelectionView": {
            "name": "JSG.ui.shapelibrary.ShapeLibrarySelectionView",
            "shortname": "ShapeLibrarySelectionView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.shapelibrary",
            "namespace": "JSG.ui.shapelibrary",
            "file": "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibrarySelectionView.js",
            "line": 8,
            "description": "Special SelectionView used in ShapeLibrary.",
            "extends": "JSG.graph.view.selection.SelectionView",
            "access": "private",
            "tagname": "",
            "is_constructor": 1
        },
        "JSG.ui.shapelibrary.ShapeLibraryViewer": {
            "name": "JSG.ui.shapelibrary.ShapeLibraryViewer",
            "shortname": "ShapeLibraryViewer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.shapelibrary",
            "namespace": "JSG.ui.shapelibrary",
            "file": "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibraryViewer.js",
            "line": 8,
            "description": "Special Viewer used in ShapeLibrary.",
            "extends": "JSG.ui.viewer.ScrollableViewer",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "graphicSystem",
                    "description": "GraphicSystem to use.",
                    "type": "JSG.ui.graphics.GraphicSystem"
                }
            ]
        },
        "JSG.ui.viewer.ControllerViewer": {
            "name": "JSG.ui.viewer.ControllerViewer",
            "shortname": "ControllerViewer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer",
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 34,
            "description": "This is the base viewer class to display a hierarchy of {{#crossLink \"JSG.graph.controller.ModelController\"}}{{/crossLink}}s.</br>\nControllers are created by using a controller factory which can be set via \n{{#crossLink \"JSG.ui.viewer.ControllerViewer/setControllerFactory:method\"}}{{/crossLink}}, allowing applications to\npass in their own custom factory.</br>\nTo ease the lookup of certain controllers within displayed controller hierarchy this viewer defines some useful\n<code>find</code>-functions like {{#crossLink \"JSG.ui.viewer.ControllerViewer/findControllerAt:method\"}}{{/crossLink}}\nor {{#crossLink \"JSG.ui.viewer.ControllerViewer/findControllerByConditionAndLocation:method\"}}{{/crossLink}}.\n<b>Note:</b> some provided functions only work if the content controller is a kind of {{#crossLink \"JSG.graph.controller.GraphController\"}}{{/crossLink}}.",
            "is_constructor": 1
        },
        "JSG.ui.viewer.GraphViewer": {
            "name": "JSG.ui.viewer.GraphViewer",
            "shortname": "GraphViewer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer",
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 9,
            "description": "A <code>ControllerViewer</code> subclass to display a {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}} model.\nThis class provides base functionality to manage graph models and should therefore be used as the base viewer.</br>\nTo handle selection the viewer holds an instance of a {{#crossLink \"JSG.graph.view.SelectionProvider\"}}{{/crossLink}} \nand registers itself to it. Therefore the viewer will be notified about selection updates which it directly passes to\na {{#crossLink \"JSG.graph.view.selection.SelectionView\"}}{{/crossLink}}. An instance of this <code>View</code> can \nbe set via {{#crossLink \"JSG.ui.viewer.GraphViewer/setSelectionView:method\"}}{{/crossLink}}. In order to make this \nwork all selection changes should be done via the <code>SelectionProvider</code> to which an reference can be retrieved\nby calling {{#crossLink \"JSG.ui.viewer.GraphViewer/getSelectionProvider:method\"}}{{/crossLink}} or simply use one of \nthe selection handling methods this viewer defines.",
            "extends": "JSG.ui.viewer.ControllerViewer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "graphicSystem",
                    "description": "The graphic system to use for drawing, interaction and transformation.",
                    "type": "JSG.ui.graphics.GraphicSystem"
                }
            ]
        },
        "JSG.ui.viewer.ScrollableViewer": {
            "name": "JSG.ui.viewer.ScrollableViewer",
            "shortname": "ScrollableViewer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer",
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 9,
            "description": "A <code>JSG.ui.viewer.GraphViewer</code> subclass which uses a {{#crossLink \"JSG.ui.scrollview.ViewPanel\"}}{{/crossLink}} \nto show its content. This view panel is embedded within a scroll panel which is either passed to the constructor function\nor is an instance of {{#crossLink \"JSG.ui.ScrollPanel\"}}{{/crossLink}} by default.</br>\nTo detect mouse events which occur on {{#crossLink \"JSG.ui.scrollview.ScrollBar\"}}{{/crossLink}} of a <code>ScrollPanel</code>\nall mouse handling methods of current default {{#crossLink \"JSG.graph.interaction.Interaction\"}}{{/crossLink}} are\ndecorated by {{#crossLink \"JSG.ui.viewer.ScrollableViewerInteractionDecorator\"}}{{/crossLink}}.</br>\n{{#crossLink \"JSG.ui.viewer.ScrollableViewer/layout:method\"}}{{/crossLink}} should be called if the size of the enclosing\ncontainer or element has changed and {{#crossLink \"JSG.ui.viewer.ScrollableViewer/setZoom:method\"}}{{/crossLink}} can\nbe called to zoom displayed content.</br>",
            "extends": "JSG.ui.viewer.GraphViewer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "graphicSystem",
                    "description": "The graphic system to use for drawing, interaction and transformation.",
                    "type": "JSG.ui.graphics.GraphicSystem"
                },
                {
                    "name": "scrollPanel",
                    "description": "An optional custom scroll panel.",
                    "type": "JSG.ui.ScrollPanel",
                    "optional": true
                }
            ]
        },
        "JSG.ui.viewer.ScrollableViewerInteractionDecorator": {
            "name": "JSG.ui.viewer.ScrollableViewerInteractionDecorator",
            "shortname": "ScrollableViewerInteractionDecorator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer",
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 266,
            "description": "Used to decorate all mouse handling method of a default {{#crossLink \"JSG.graph.interaction.Interaction\"}}{{/crossLink}}\nof a {{#crossLink \"JSG.ui.viewer.ScrollableViewer\"}}{{/crossLink}}. \nSee {{#crossLink \"JSG.ui.viewer.ScrollableViewerInteractionDecorator/decorateInteraction:method\"}}{{/crossLink}}.</br>\n<b>Note:</b> this is a private class and not intended to be used outside a <code>ScrollableViewer</code>.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scrollPanel",
                    "description": "",
                    "type": "JSG.ui.ScrollPanel"
                }
            ]
        },
        "JSG.ui.Cursor": {
            "name": "JSG.ui.Cursor",
            "shortname": "Cursor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui",
            "namespace": "JSG.ui",
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 9,
            "description": "A simple wrapper object to define cursors used within JSG framework.</br>\nCurrently only styles are defined. More functionality might be added in future versions.",
            "is_constructor": 1
        },
        "JSG.ui.Style": {
            "name": "JSG.ui.Style",
            "shortname": "Style",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui",
            "namespace": "JSG.ui",
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 19,
            "description": "Predefined cursor style types.</br>\nNote: some styles exactly match their CSS counter parts while others define custom styles. Custom cursor styles\nare loaded during framework initialization in {{#crossLink \"JSG/init:method\"}}{{/crossLink}}."
        },
        "JSG.ui.GraphEditor": {
            "name": "JSG.ui.GraphEditor",
            "shortname": "GraphEditor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui",
            "namespace": "JSG.ui",
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 9,
            "description": "The <code>GraphEditor</code> connects default instances of a {{#crossLink \"JSG.ui.graphics.CoordinateSystem\"}}{{/crossLink}}, \na {{#crossLink \"JSG.ui.graphics.GraphicSystem\"}}{{/crossLink}} and a {{#crossLink \"JSG.ui.viewer.GraphViewer\"}}{{/crossLink}} to\nvisualize arbitrary {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}} models. To support graph {{#crossLink \"JSG.graph.interaction.Interaction\"}}{{/crossLink}}s \nan {{#crossLink \"JSG.graph.interaction.InteractionHandler\"}}{{/crossLink}} is used too.</br>\nSo to set up this environment the editor basically does the following:\n\n\tvar cs = new JSG.ui.graphics.MetricCoordinateSystem();\n\tvar graphicSystem = new JSG.ui.graphics.GraphicSystem(canvas, cs);\n\tvar graphViewer = new JSG.ui.viewer.ScrollableViewer(graphicSystem);\n\tgraphViewer.setControllerFactory(JSG.graph.controller.GraphControllerFactory.getInstance());\n\tvar interactionHandler = new JSG.graph.interaction.InteractionHandler(graphViewer);\n\tgraphicSystem.setContent(graphViewer.getRootView());\n\tgraphicSystem.setInteractionHandler(interactionHandler);\n\nThe <code>CoordinateSystem</code> is required to transform between the browser coordinate system and the logical \ncoordinate system of the graph. While a <code>GraphViewer</code> is responsible for displaying a graph model the \n<code>GraphicSystem</code> together with the <code>InteractionHandler</code> takes care of dispatching events to \nregistered interactions. Note: only a single interaction must \nand can be active at a time, i.e. the active interaction will receive all events. If no interaction is explicitly set \nas active a default interaction is activated which is provided by {{#crossLink \"JSG.ui.viewer.ControllerViewer/getDefaultInteraction:method\"}}{{/crossLink}}. \nUsually a default interaction is an instance of {{#crossLink \"JSG.graph.interaction.InteractionDispatcher\"}}{{/crossLink}}\nwhich receives the events and dispatches them to registered interactions.</br>\nOn top of this interaction mechanism the editor supports the registration of different default interactions for \ndifferent view modes. A typical example for this is to support a general edit mode and a restricted read-only mode.\nTherefore it is possible to change the editor behavior with different default interactions depending on current active mode.\nThe framework defines two view modes namely a {{#crossLink \"JSG.graph.model.settings.ViewMode/DEFAULT:property\"}}{{/crossLink}}\nand a {{#crossLink \"JSG.graph.model.settings.ViewMode/READ_ONLY:property\"}}{{/crossLink}} mode with their corresponding\ninteractions {{#crossLink \"JSG.graph.interaction.GraphInteraction\"}}{{/crossLink}} and {{#crossLink \"JSG.graph.interaction.ReadOnlyInteraction\"}}{{/crossLink}}\nrespectively. However custom applications can replace these or simply register their own default interactions for their\nown custom modes. E.g.\n\n\tvar VIEWMODE = JSG.graph.model.settings.ViewMode;\n\tmyEditor.registerInteractionForMode(VIEWMODE.DEFAULT, new CustomDefaultInteraction());\n\tmyEditor.registerInteractionForMode(VIEWMODE.READ_ONLY, new CustomReadOnlyInteraction());\n\tmyEditor.registerInteractionForMode(\"custom.mode.id\", new CustomModeInteraction());\n\nTo switch between different view modes simply call {{#crossLink \"JSG.ui.GraphEditor/activateViewMode:method\"}}{{/crossLink}}\nwith the identifier of the view mode to activate.</br>\n</br> \nThe editor supports the export of a graph model to <code>XML</code> or to the <code>SVG</code> format. To export a \ngraph to <code>SVG</code> use {{#crossLink \"JSG.ui.GraphEditor/saveSVG:method\"}}{{/crossLink}} or \n{{#crossLink \"JSG.ui.GraphEditor/saveSVGPage:method\"}}{{/crossLink}}. To export the graph to <code>XML</code> simply \ncall {{#crossLink \"JSG.ui.GraphEditor/saveXML:method\"}}{{/crossLink}}. The created <code>XML</code> can be imported \nagain via {{#crossLink \"JSG.ui.GraphEditor/readXML:method\"}}{{/crossLink}}. So to load a graph model from <code>XML</code> \nsimply set an empty graph instance and call <code>readXML</code> afterwards, e.g. like this:\n\n\teditor.setGraph(new JSG.graph.model.Graph());\n\teditor.readXML(xmldoc);\n\nFinally, if the editor is no longer needed {{#crossLink \"JSG.ui.GraphEditor/destroy:method\"}}{{/crossLink}} should be\ncalled to free used resources. \n\n</br>\nA GraphEditor sends following notifications: </br>\n<ul>\n\t<li>{{#crossLink \"JSG.ui.GraphEditor/ZOOM_NOTIFICATION:property\"}}{{/crossLink}}</li>\n\t<li>{{#crossLink \"JSG.ui.GraphEditor/DISPLAY_MODE_NOTIFICATION:property\"}}{{/crossLink}}</li>\n</ul>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvasArg",
                    "description": "Id of the canvas element to be used or the canvas element itself.",
                    "type": "Canvas | String"
                }
            ]
        },
        "JSG.ui.GraphListener": {
            "name": "JSG.ui.GraphListener",
            "shortname": "GraphListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui",
            "namespace": "JSG.ui",
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 880,
            "description": "A simple listener to check for {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}} changes of type \n{{#crossLink \"JSG.graph.model.events.Event/BBOX:property\"}}{{/crossLink}} or \n{{#crossLink \"JSG.graph.model.settings.SettingID:property\"}}{{/crossLink}}.",
            "extends": "JSG.graph.model.events.EventListener",
            "params": [
                {
                    "name": "editor",
                    "description": "The GraphEditor instance which uses this object as settings listener.",
                    "type": "JSG.ui.GraphEditor"
                }
            ],
            "is_constructor": 1
        },
        "JSG.ui.GraphViewPanel": {
            "name": "JSG.ui.GraphViewPanel",
            "shortname": "GraphViewPanel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui",
            "namespace": "JSG.ui",
            "file": "..\\dist\\wc\\jsg\\ui\\GraphViewPanel.js",
            "line": 8,
            "description": "A ViewPanel subclass to display a graph view.</br>\nThis is just a convenience class to register a GraphViewer instance and to provide custom preferred bounds.",
            "extends": "JSG.ui.scrollview.ViewPanel",
            "is_constructor": 1,
            "params": [
                {
                    "name": "viewer",
                    "description": "The GraphViewer instance which provides the graph view.",
                    "type": "JSG.ui.viewer.GraphViewer"
                }
            ]
        },
        "JSG.ui.Scale": {
            "name": "JSG.ui.Scale",
            "shortname": "Scale",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui",
            "namespace": "JSG.ui",
            "file": "..\\dist\\wc\\jsg\\ui\\Scale.js",
            "line": 8,
            "description": "Class to manage and display a vertical or horizontal scale based on current coordinate system.</br>\nThe coordinate system and graph settings are provided by specified GraphViewer instance. Note: a scale provides an\n<code>onRangeChange<code> method so it can be added as an observer to a {{#crossLink \"JSG.ui.scrollview.RangeModel\"}}{{/crossLink}}. \nThis is useful for scrolling in order to update the Scale automatically.",
            "extends": "JSG.ui.Widget",
            "is_constructor": 1,
            "params": [
                {
                    "name": "isVertical",
                    "description": "Specify <code>true</code>, to create a vertical scale and <code>false</code> to create a horizontal.",
                    "type": "Boolean"
                },
                {
                    "name": "viewer",
                    "description": "The graph viewer currently used for displaying graph content.",
                    "type": "JSG.ui.viewer.GraphViewer"
                }
            ]
        },
        "JSG.ui.ScrollPanel": {
            "name": "JSG.ui.ScrollPanel",
            "shortname": "ScrollPanel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui",
            "namespace": "JSG.ui",
            "file": "..\\dist\\wc\\jsg\\ui\\ScrollPanel.js",
            "line": 9,
            "description": "The ScrollPanel is the main editor panel to display the current {{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}}.\nIt adds a horizontal and a vertical {{#crossLink \"JSG.ui.Scale\"}}{{/crossLink}} to the base ScrollView.</br>\n\nA ScrollPanel sends following notification: </br>\n<ul>\n\t<li>{{#crossLink \"JSG.ui.ScrollPanel/SCROLL_NOTIFICATION:property\"}}{{/crossLink}}</li>\n</ul>",
            "extends": "JSG.ui.scrollview.ScrollView",
            "is_constructor": 1,
            "params": [
                {
                    "name": "viewer",
                    "description": "The controller viewer to use for displaying graph content.",
                    "type": "JSG.ui.viewer.ScrollableViewer"
                }
            ]
        },
        "JSG.ui.View": {
            "name": "JSG.ui.View",
            "shortname": "View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui",
            "namespace": "JSG.ui",
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 33,
            "description": "A View is the base class of all visible elements within this framework. It defines generic functions to handle view \nlogic like the management of sub-views, drawing and basic handling and dispatching of events (key, mouse, drag). \nUsually a View is sub-classed and not used on its own. E.g. a {{#crossLink \"JSG.graph.view.GraphItemView\"}}{{/crossLink}} \nuses a view as its base class to represent a graph item as well as a {{#crossLink \"JSG.ui.Widget\"}}{{/crossLink}} does \nto represent an UI control.</br>\n</br>\nIf the state of a view has changed call {{#crossLink \"JSG.ui.View/invalidate:method\"}}{{/crossLink}} or \n{{#crossLink \"JSG.ui.View/revalidate:method\"}}{{/crossLink}} to layout it again. To complete a view update \n{{#crossLink \"JSG.ui.View/validate:method\"}}{{/crossLink}} should be called sometimes after. If no layout is required \nin either <code>invalidate</code> or <code>validate</code> phase simply call {{#crossLink \"JSG.ui.View/setValid:method\"}}{{/crossLink}}. \nPlease refer to the corresponding method documentation for more information.",
            "is_constructor": 1
        },
        "JSG.ui.Widget": {
            "name": "JSG.ui.Widget",
            "shortname": "Widget",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.ui",
            "namespace": "JSG.ui",
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 9,
            "description": "A widget is the base class for any UI components used within this framework.</br>\nIt simply extends the view by providing bounds and {{#crossLink \"JSG.graph.attr.FormatAttributes\"}}{{/crossLink}} to \ndetermine its visual representation.",
            "extends": "JSG.ui.View",
            "is_constructor": 1
        },
        "JSG.JSG": {
            "name": "JSG.JSG",
            "shortname": "JSG",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG",
            "namespace": "JSG"
        },
        "JSG.Functions": {
            "name": "JSG.Functions",
            "shortname": "Functions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG",
            "namespace": "JSG"
        },
        "Monitor": {
            "name": "Monitor",
            "shortname": "Monitor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG",
            "namespace": "",
            "file": "..\\dist\\wc\\jsg\\Loader.js",
            "line": 240,
            "description": "Defines only a template of a Monitor object used by Loader.<br/>\nIt is not required to use this as a load monitor. However, a custom monitor object must provide the methods\nand public fields as defined here.",
            "is_constructor": 1
        },
        "JSG": {
            "name": "JSG",
            "shortname": "JSG",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG",
            "namespace": "",
            "file": "..\\dist\\wc\\jsg\\jsg.js",
            "line": 18,
            "description": "This class provides static helper functions for creating class hierarchy.",
            "is_constructor": 1
        },
        "JSG.SVG.Circle": {
            "name": "JSG.SVG.Circle",
            "shortname": "Circle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\circle.js",
            "line": 7,
            "description": "Class which represents a <code>circle</code> SVG element."
        },
        "JSG.SVG.Color": {
            "name": "JSG.SVG.Color",
            "shortname": "Color",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\color.js",
            "line": 7,
            "description": "Helper class which provides useful methods to convert color values."
        },
        "JSG.SVG.Defs": {
            "name": "JSG.SVG.Defs",
            "shortname": "Defs",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\defs.js",
            "line": 7,
            "description": "Represents the SVG <code>defs</code> container element.<br/>\nCurrently only gradients are supported."
        },
        "JSG.SVG.Element": {
            "name": "JSG.SVG.Element",
            "shortname": "Element",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\element.js",
            "line": 9,
            "description": "This is the base class to represent an SVG element.<br/>\nEach element has certain attributes and styles which can be accessed by using the corresponding\n{{#crossLink \"JSG.SVG.Element/attributes:property\"}}{{/crossLink}} and {{#crossLink \"JSG.SVG.Element/styles:property\"}}{{/crossLink}}\nproperties or the {{#crossLink \"JSG.SVG.Element/attribute:method\"}}{{/crossLink}} and \n{{#crossLink \"JSG.SVG.Element/style:method\"}}{{/crossLink}} methods respectively. Since a SVG document is hierarchically structured\neach element has {{#crossLink \"JSG.SVG.Element/parent:property\"}}{{/crossLink}} and \n{{#crossLink \"JSG.SVG.Element/children:property\"}}{{/crossLink}} properties too.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of this element.",
                    "type": "String"
                }
            ]
        },
        "JSG.SVG.Ellipse": {
            "name": "JSG.SVG.Ellipse",
            "shortname": "Ellipse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\ellipse.js",
            "line": 7,
            "description": "Class which represents an <code>ellipse</code> SVG element."
        },
        "JSG.SVG.Error": {
            "name": "JSG.SVG.Error",
            "shortname": "Error",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\error.js",
            "line": 7,
            "description": "A general error object which is thrown when an error occurs."
        },
        "JSG.SVG.Group": {
            "name": "JSG.SVG.Group",
            "shortname": "Group",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\group.js",
            "line": 7,
            "description": "Class which represents a <code>group</code> SVG element."
        },
        "JSG.SVG": {
            "name": "JSG.SVG",
            "shortname": "SVG",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG",
            "file": "..\\dist\\wc\\jsgsvg\\jsgsvg.js",
            "line": 20,
            "description": "This is an addition to the JSG graph library to convert SVG files to corresponding JSG models.<br/>\n<b>Note:</b> JSG.SVG must be loaded after the JSG api was loaded.<br/>\nFollowing is an example of its basic usage:",
            "example": [
                "\n\t\tvar svgurl = \"http://domain/with/svg/file.svg\";\n\t\tvar editor = this.getGraphEditor(); //get a JSG editor which presents current graph...\n\t\tJSG.SVG.load(svgurl, function(svg, error) {\n\t\t\tif(!error) {\n\t\t\t\tsvg.includeRoot = false; //don't return a model for base svg tag...\n\t\t\t\tvar jsgmodels = svg.toJSG(editor.getCoordinateSystem());\n\t\t\t\tjsgmodels.forEach(function(model) {\n\t\t\t\t\teditor.getGraph().addItem(model); //maybe adjust model location before...\n\t\t\t\t});\n\t\t\t\teditor.invalidate();\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Failed to load svg file: \"+error.url);\n\t\t\t}\n\t\t}"
            ],
            "is_constructor": 1
        },
        "JSG.SVG.Model": {
            "name": "JSG.SVG.Model",
            "shortname": "SVG.Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG",
            "file": "..\\dist\\wc\\jsgsvg\\jsgsvg.js",
            "line": 189,
            "description": "A SVG representation.<br/>\nThis model is used to define and start the conversion of an svg-file to corresponding JSG <code>GraphItem</code> models.",
            "params": [
                {
                    "name": "svg",
                    "description": "An element which represents the top-level svg tag.",
                    "type": "JSG.SVG.Element"
                }
            ],
            "is_constructor": 1
        },
        "JSG.SVG.Line": {
            "name": "JSG.SVG.Line",
            "shortname": "Line",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\line.js",
            "line": 7,
            "description": "Class which represents a <code>line</code> SVG element."
        },
        "JSG.SVG.Matrix": {
            "name": "JSG.SVG.Matrix",
            "shortname": "Matrix",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\matrix.js",
            "line": 8,
            "description": "Helper class which represents an SVG transformation matrix."
        },
        "JSG.SVG.Path": {
            "name": "JSG.SVG.Path",
            "shortname": "Path",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\path.js",
            "line": 7,
            "description": "Class which represents a <code>path</code> SVG element."
        },
        "JSG.SVG.PathData": {
            "name": "JSG.SVG.PathData",
            "shortname": "PathData",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\pathdata.js",
            "line": 8,
            "description": "Helper class for creating {{#crossLink \"JSG.graph.model.shapes.PathShape\"}}{{/crossLink}}s from SVG path data definitions."
        },
        "JSG.SVG.Polygon": {
            "name": "JSG.SVG.Polygon",
            "shortname": "Polygon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\polygon.js",
            "line": 7,
            "description": "Class which represents a <code>polygon</code> SVG element."
        },
        "JSG.SVG.Rect": {
            "name": "JSG.SVG.Rect",
            "shortname": "Rect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\rect.js",
            "line": 7,
            "description": "Class which represents a <code>rect</code> SVG element."
        },
        "JSG.SVG.Shapes": {
            "name": "JSG.SVG.Shapes",
            "shortname": "Shapes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\shapes.js",
            "line": 8,
            "description": "Helper class to create {{#crossLink \"JSG.SVG.Element\"}}{{/crossLink}}s representation of SVG node elements."
        },
        "JSG.SVG.Styles": {
            "name": "JSG.SVG.Styles",
            "shortname": "Styles",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\styles.js",
            "line": 7,
            "description": "Helper class which provides useful methods to convert style values to match corresponding JSG formats."
        },
        "JSG.SVG.Svg": {
            "name": "JSG.SVG.Svg",
            "shortname": "Svg",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\svg.js",
            "line": 7,
            "description": "Class which represents an <code>svg</code> SVG element."
        },
        "JSG.SVG.Text": {
            "name": "JSG.SVG.Text",
            "shortname": "Text",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\text.js",
            "line": 7,
            "description": "Class which represents a <code>text</code> SVG element."
        },
        "JSG.SVG.Transform": {
            "name": "JSG.SVG.Transform",
            "shortname": "Transform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\transform.js",
            "line": 7,
            "description": "Helper class which provides useful methods to apply SVG transformations to a JSG GraphItem model."
        },
        "JSG.SVG.TSpan": {
            "name": "JSG.SVG.TSpan",
            "shortname": "TSpan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\tspan.js",
            "line": 7,
            "description": "Helper class to create a text string from a SVG text element with nested <code>tspan</code> elements."
        },
        "JSG.SVG.Unit": {
            "name": "JSG.SVG.Unit",
            "shortname": "Unit",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\unit.js",
            "line": 7,
            "description": "Helper class which provides useful methods to convert unit values to pixel values. Pixel values can then be transformed\nto JSG by using a suited coordinate system.<br/>\nA unit value is a string which consists of a number, which represents the value, and an optional unit string. Following \nunit strings are supported: <code>em</code>, <code>ex</code>, <code>cm</code>, <code>mm</code>, <code>in</code>, <code>pc</code>,\n<code>pt</code> and <code>%</code>.<br/>\nNote: a unit value without a unit string is tread as pixel value."
        },
        "JSG.SVG.Utils": {
            "name": "JSG.SVG.Utils",
            "shortname": "Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\utils.js",
            "line": 8,
            "description": "Utility class."
        },
        "JSG.SVG.ViewBox": {
            "name": "JSG.SVG.ViewBox",
            "shortname": "ViewBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JSG.SVG",
            "namespace": "JSG.SVG",
            "file": "..\\dist\\wc\\jsgsvg\\viewbox.js",
            "line": 7,
            "description": "A representation of the SVG <code>viewbox</code> attribute.\nTo create an instance of it use {{#crossLink \"JSG.SVG.ViewBox/createFrom:method\"}}{{/crossLink}}."
        }
    },
    "classitems": [
        {
            "file": "..\\dist\\wc\\jsg\\anim\\Animation.js",
            "line": 42,
            "description": "Starts animation for the specified duration (in ms)",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "func",
                    "description": "Function to call during animation.",
                    "type": "Function"
                },
                {
                    "name": "duration.",
                    "description": "Duration that the animation is supposed to run.",
                    "type": "Number"
                }
            ],
            "class": "JSG.anim.Animation",
            "module": "JSG.anim",
            "namespace": "JSG.anim"
        },
        {
            "file": "..\\dist\\wc\\jsg\\anim\\Animation.js",
            "line": 69,
            "description": "Stops current animation",
            "itemtype": "method",
            "name": "stop",
            "class": "JSG.anim.Animation",
            "module": "JSG.anim",
            "namespace": "JSG.anim"
        },
        {
            "file": "..\\dist\\wc\\jsg\\anim\\AnimationType.js",
            "line": 47,
            "itemtype": "property",
            "name": "LINEAR",
            "class": "JSG.anim.AnimationType",
            "module": "JSG.anim",
            "namespace": "JSG.anim"
        },
        {
            "file": "..\\dist\\wc\\jsg\\anim\\AnimationType.js",
            "line": 51,
            "itemtype": "property",
            "name": "EASE_OUT",
            "class": "JSG.anim.AnimationType",
            "module": "JSG.anim",
            "namespace": "JSG.anim"
        },
        {
            "file": "..\\dist\\wc\\jsg\\anim\\AnimationType.js",
            "line": 55,
            "itemtype": "property",
            "name": "CIRC",
            "class": "JSG.anim.AnimationType",
            "module": "JSG.anim",
            "namespace": "JSG.anim"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Array.js",
            "line": 18,
            "description": "Moves array item within array.",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "from",
                    "description": "Index to move from",
                    "type": "Number"
                },
                {
                    "name": "to",
                    "description": "Index to move to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<code>true</code> if item could be moved, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "Subject to remove!! Please {{#crossLink \"JSG.commons.Arrays/move:method\"}}{{/crossLink}} instead!!",
            "class": "Array",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Array.js",
            "line": 57,
            "itemtype": "method",
            "name": "addAll",
            "params": [
                {
                    "name": "array",
                    "description": "The array to add the elements from.",
                    "type": "Array"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Subject to remove!! Please {{#crossLink \"JSG.commons.Arrays/addAll:method\"}}{{/crossLink}} instead!!",
            "class": "Array",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Array.js",
            "line": 68,
            "description": "Removes specified element from this array.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "obj",
                    "description": "the element to remove",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<code>true</code> if element was removed otherwise <code>false</code>.",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "Subject to remove!! Please {{#crossLink \"JSG.commons.Arrays/remove:method\"}}{{/crossLink}} instead!!",
            "class": "Array",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Array.js",
            "line": 88,
            "description": "Removes and returns the element at given index.",
            "itemtype": "method",
            "name": "removeAt",
            "params": [
                {
                    "name": "index",
                    "description": "Index of element to be removed.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "removed element or <code>undefined</code> if none was removed",
                "type": "Object"
            },
            "deprecated": true,
            "deprecationMessage": "Subject to remove!! Please {{#crossLink \"JSG.commons.Arrays/removeAt:method\"}}{{/crossLink}} instead!!",
            "class": "Array",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Array.js",
            "line": 111,
            "description": "Removes all elements within this array",
            "itemtype": "method",
            "name": "removeAll",
            "deprecated": true,
            "deprecationMessage": "Subject to remove!! Please {{#crossLink \"JSG.commons.Arrays/removeAll:method\"}}{{/crossLink}} instead!!",
            "class": "Array",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Array.js",
            "line": 124,
            "description": "Checks if this array contains given element",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "obj",
                    "description": "The element to check",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<code>true</code> if given element is within this array, false otherwise",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "Subject to remove!! Please {{#crossLink \"JSG.commons.Arrays/contains:method\"}}{{/crossLink}} instead!!",
            "class": "Array",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Array.js",
            "line": 140,
            "description": "Inserts given element at specified index",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "the",
                    "description": "element to insert",
                    "type": "Object"
                },
                {
                    "name": "the",
                    "description": "index to insert at",
                    "type": "Number"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Subject to remove!! Please {{#crossLink \"JSG.commons.Arrays/insertAt:method\"}}{{/crossLink}} instead!!",
            "class": "Array",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Array.js",
            "line": 158,
            "description": "Inserts specified elements into this array at given index.",
            "example": [
                "\n    var myArray = [0,1,2,3,4],\n        objArray = [obj1, obj2, obj3];\n\n    myArray.insertAt(2, obj1, obj2, obj3); //results in [0,1,obj1,obj2,obj3,2,3,4]\n    //or: myArray.insertAt(2, objArray);   //results in [0,1,obj1,obj2,obj3,2,3,4]"
            ],
            "itemtype": "method",
            "name": "insertAt",
            "params": [
                {
                    "name": "index",
                    "description": "Place to insert at.",
                    "type": "Number"
                },
                {
                    "name": "elements",
                    "description": "Elements to insert.",
                    "type": "Object | Array"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Subject to remove!! Please {{#crossLink \"JSG.commons.Arrays/insertAt:method\"}}{{/crossLink}} instead!!",
            "class": "Array",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Array.js",
            "line": 191,
            "description": "Checks if this array is empty",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "true if array is empty otherwise false",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "Subject to remove!! Please {{#crossLink \"JSG.commons.Arrays/isEmpty:method\"}}{{/crossLink}} instead!!",
            "class": "Array",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Array.js",
            "line": 205,
            "description": "Iterates through this array and calls specified function on each element.",
            "example": [
                "\n    array.forEach(function(el) {});\n\nSee {{#crossLink \"Array/every:method\"}}{{/crossLink}} too"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "func",
                    "description": "the function to call",
                    "type": "Function"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Subject to remove!! Native method should be widely supported by now!!",
            "class": "Array",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Array.js",
            "line": 228,
            "description": "Iterates through this array and calls specified function on each element. If provided\nfunction returns false the traversal is stopped.",
            "example": [
                "\n    array.every(function(el) {return true;});\n\nSee {{#crossLink \"Array/forEach:method\"}}{{/crossLink}} too"
            ],
            "itemtype": "method",
            "name": "every",
            "params": [
                {
                    "name": "func",
                    "description": "the function to call",
                    "type": "Function"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Subject to remove!! Please {{#crossLink \"JSG.commons.Arrays/every:method\"}}{{/crossLink}} instead!!",
            "class": "Array",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Array.js",
            "line": 254,
            "description": "Adds a filter method to Array which returns a new array containing only those elements which\npass provided filter function, i.e. the filter function returns true for these elements.",
            "example": [
                "\n    array.filter(function(el) {return true;});"
            ],
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "func",
                    "description": "the function for filtering. The function will receive the current object and needs to return a Boolean.",
                    "type": "Function"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Subject to remove!! Native method should be widely supported by now!!",
            "class": "Array",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Array.js",
            "line": 278,
            "description": "Returns the last element of the array",
            "itemtype": "method",
            "name": "last",
            "deprecated": true,
            "deprecationMessage": "Subject to remove!!",
            "class": "Array",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Array.js",
            "line": 291,
            "itemtype": "method",
            "name": "keep",
            "params": [
                {
                    "name": "n",
                    "description": "Number of elements to keep in array.",
                    "type": "Number"
                },
                {
                    "name": "factoryFunc",
                    "description": "A factory function to create new elements if required.",
                    "type": "Function"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Subject to remove!! Please {{#crossLink \"JSG.commons.Arrays/addAll:method\"}}{{/crossLink}} instead!!",
            "class": "Array",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Array.js",
            "line": 308,
            "description": "Checks if given value represents an instance of <code>Array</code>.",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "toTest",
                    "description": "The object to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<code>true</code> if value is an array, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "Subject to remove!! Native method should be widely supported by now!!",
            "class": "Array",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Array.js",
            "line": 324,
            "description": "Creates an array from given arguments.<br/>\nNote: if first argument is an array only this is returned as array!",
            "example": [
                "\n    var a = Array.toArray(\"hello\", \"world\");"
            ],
            "itemtype": "method",
            "name": "toArray",
            "params": [
                {
                    "name": "objects",
                    "description": "A list of objects to use as array contents.",
                    "type": "Object",
                    "multiple": true
                }
            ],
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "Subject to remove!! Please {{#crossLink \"JSG.commons.Arrays/toArray:method\"}}{{/crossLink}} instead!!",
            "class": "Array",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Array.js",
            "line": 354,
            "description": "Insert empty element into array.",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "at",
                    "description": "Index to insert at",
                    "type": "Number"
                },
                {
                    "name": "num",
                    "description": "Count of element to insert",
                    "type": "Number"
                },
                {
                    "name": "limit",
                    "description": "Max array size",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<code>true</code> if item could be moved, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "Subject to remove!! Please {{#crossLink \"JSG.commons.Arrays/insertEmpty:method\"}}{{/crossLink}} instead!!",
            "class": "Array",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Arrays.js",
            "line": 18,
            "description": "A shortcut for conveniently access to this <code>Arrays</code> object.",
            "itemtype": "property",
            "name": "JSG.Arrays",
            "type": "{JSG.commons.Arrays}",
            "static": 1,
            "class": "JSG.commons.Arrays",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Arrays.js",
            "line": 29,
            "description": "Moves an item within an array.",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "array",
                    "description": "The array to move in.",
                    "type": "Array"
                },
                {
                    "name": "from",
                    "description": "Index to move from.",
                    "type": "Number"
                },
                {
                    "name": "to",
                    "description": "Index to move to.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<code>true</code> if item was moved, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.commons.Arrays",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Arrays.js",
            "line": 66,
            "description": "Adds all elements from given array to specified array.",
            "itemtype": "method",
            "name": "addAll",
            "params": [
                {
                    "name": "array",
                    "description": "The array to add to.",
                    "type": "Array"
                },
                {
                    "name": "from",
                    "description": "The array to take the elements from.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The target array.",
                "type": "Array"
            },
            "static": 1,
            "class": "JSG.commons.Arrays",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Arrays.js",
            "line": 81,
            "description": "Removes specified element from given array.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "array",
                    "description": "The array to remove from.",
                    "type": "Array"
                },
                {
                    "name": "obj",
                    "description": "The element to remove.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<code>true</code> if item was removed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.commons.Arrays",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Arrays.js",
            "line": 100,
            "description": "Removes and returns the element at given index from specified array.",
            "itemtype": "method",
            "name": "removeAt",
            "params": [
                {
                    "name": "array",
                    "description": "The array to remove from.",
                    "type": "Array"
                },
                {
                    "name": "index",
                    "description": "Index of element to be removed.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "removed element or <code>undefined</code> if none was removed",
                "type": "Object"
            },
            "static": 1,
            "class": "JSG.commons.Arrays",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Arrays.js",
            "line": 121,
            "description": "Removes all elements within given array.",
            "itemtype": "method",
            "name": "removeAll",
            "params": [
                {
                    "name": "array",
                    "description": "The array to remove from.",
                    "type": "Array"
                }
            ],
            "static": 1,
            "class": "JSG.commons.Arrays",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Arrays.js",
            "line": 133,
            "description": "Checks if given array contains specified element.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "array",
                    "description": "The array to check.",
                    "type": "Array"
                },
                {
                    "name": "obj",
                    "description": "The element to check for.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<code>true</code> if given element is within array, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.commons.Arrays",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Arrays.js",
            "line": 148,
            "description": "Inserts specified elements into given array starting at index.<br/>\nIf index is less than 0 or greater than array length or not defined at all, the objects are added at array end.",
            "example": [
                "\n    var myArray = [0,1,2,3,4],\n        objArray = [obj1, obj2, obj3];\n\n    JSG.commons.Arrays.insertAt(myArray, 2, obj1, obj2, obj3); //results in [0,1,obj1,obj2,obj3,2,3,4]\n    //or: JSG.commons.Arrays.insertAt(myArray, 2, objArray);   //results in [0,1,obj1,obj2,obj3,2,3,4]"
            ],
            "itemtype": "method",
            "name": "insertAt",
            "params": [
                {
                    "name": "array",
                    "description": "The array to insert into.",
                    "type": "Array"
                },
                {
                    "name": "index",
                    "description": "Array index to insert at.",
                    "type": "Number"
                },
                {
                    "name": "elements",
                    "description": "Elements to insert.",
                    "type": "Object | Array"
                }
            ],
            "static": 1,
            "class": "JSG.commons.Arrays",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Arrays.js",
            "line": 181,
            "description": "Checks if given array is empty",
            "itemtype": "method",
            "name": "isEmpty",
            "params": [
                {
                    "name": "array",
                    "description": "The array to check.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "<code>true</code> if array is empty, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.commons.Arrays",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Arrays.js",
            "line": 194,
            "description": "Iterates through given array and calls specified function on each element. If provided\nfunction returns false the traversal is stopped.",
            "example": [
                "\n    JSG.commons.Arrays.every(array, function(el) {return true;});"
            ],
            "itemtype": "method",
            "name": "every",
            "params": [
                {
                    "name": "array",
                    "description": "The array to traverse.",
                    "type": "Array"
                },
                {
                    "name": "func",
                    "description": "the function to call",
                    "type": "Function"
                }
            ],
            "static": 1,
            "class": "JSG.commons.Arrays",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Arrays.js",
            "line": 230,
            "description": "Ensures that the given array has the specified length. If passed array is smaller then the specified length it will\nbe filled up using the passed <code>factoryFunc</code> function.",
            "itemtype": "method",
            "name": "keep",
            "params": [
                {
                    "name": "array",
                    "description": "The array to manipulate.",
                    "type": "Array"
                },
                {
                    "name": "n",
                    "description": "The amount of elements the resulting array should have.",
                    "type": "Number"
                },
                {
                    "name": "factoryFunc",
                    "description": "A factory function to create new array elements if required.",
                    "type": "Function"
                }
            ],
            "static": 1,
            "class": "JSG.commons.Arrays",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Arrays.js",
            "line": 249,
            "description": "Creates an array from given arguments.<br/>\nNote: if first argument is an array only this is returned as array!",
            "example": [
                "\n    var a = JSG.commons.Arrays.toArray(\"hello\", \"world\");"
            ],
            "itemtype": "method",
            "name": "toArray",
            "params": [
                {
                    "name": "objects",
                    "description": "A list of objects to use as array contents.",
                    "type": "Object",
                    "multiple": true
                }
            ],
            "return": {
                "description": "A new array containing specified objects.",
                "type": "Array"
            },
            "static": 1,
            "class": "JSG.commons.Arrays",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Arrays.js",
            "line": 277,
            "description": "Inserts empty elements into given array.",
            "itemtype": "method",
            "name": "insertEmpty",
            "params": [
                {
                    "name": "array",
                    "description": "The array to insert elements into.",
                    "type": "Array"
                },
                {
                    "name": "at",
                    "description": "Index to start insert at.",
                    "type": "Number"
                },
                {
                    "name": "num",
                    "description": "Number of elements to insert.",
                    "type": "Number"
                },
                {
                    "name": "limit",
                    "description": "Max array size.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<code>true</code> if elements were inserted, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.commons.Arrays",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 31,
            "description": "Specifies that the tree should be traversed in order.",
            "itemtype": "property",
            "name": "IN_ORDER",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.commons.TraverseOrder",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 38,
            "description": "Specifies that the tree should be traversed in pre-order.",
            "itemtype": "property",
            "name": "PRE_ORDER",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.commons.TraverseOrder",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 45,
            "description": "Specifies that the tree should be traversed in post-order.",
            "itemtype": "property",
            "name": "POST_ORDER",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.commons.TraverseOrder",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 54,
            "description": "Adds given data object to this tree. The data object must provide a <code>compareTo(otherdata)</code> method and\na <code>value</code> property. For an example of a simple data object please refer to \n{{#crossLink \"JSG.commons.BSTree.NumericData\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "data",
                    "description": "the data object to add.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns added object as convenience.",
                "type": "Object"
            },
            "class": "JSG.commons.TraverseOrder",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 72,
            "description": "Appends given node to current node. If it is added to left or right branch depends on the value of wrapped data object.",
            "itemtype": "method",
            "name": "_insert",
            "params": [
                {
                    "name": "node",
                    "description": "The node to insert.",
                    "type": "Object"
                },
                {
                    "name": "current",
                    "description": "The current node to insert at.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.commons.TraverseOrder",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 97,
            "description": "Checks if this tree contains a data object equal to the given one. The check is based on the \n<code>compareTo</code> method of each data object.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "data",
                    "description": "The data object to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<code>true</code> if this tree already contains an equal data object as provided, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.commons.TraverseOrder",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 108,
            "description": "Tries to find an equal data object as provided.",
            "itemtype": "method",
            "name": "_find",
            "params": [
                {
                    "name": "data",
                    "description": "The data object to find.",
                    "type": "Object"
                },
                {
                    "name": "current",
                    "description": "The currently visited node.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An equal data object as provided one or <code>undefined</code>.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.commons.TraverseOrder",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 130,
            "description": "Returns the data object with the minimum value of this tree.",
            "itemtype": "method",
            "name": "getMin",
            "return": {
                "description": "The data object with the minimum value or <code>undefined</code> if this tree is empty.",
                "type": "Object"
            },
            "class": "JSG.commons.TraverseOrder",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 139,
            "description": "Traverses the left side of this tree to return the node with the minimum value.",
            "itemtype": "method",
            "name": "_min",
            "params": [
                {
                    "name": "node",
                    "description": "The currently visited node.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The node with the minimum value.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.commons.TraverseOrder",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 151,
            "description": "Returns the data object with the maximum value of this tree.",
            "itemtype": "method",
            "name": "getMax",
            "return": {
                "description": "The data object with the maximum value.",
                "type": "Object"
            },
            "class": "JSG.commons.TraverseOrder",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 160,
            "description": "Traverses the right side of this tree to return the node with the maximum value.",
            "itemtype": "method",
            "name": "_max",
            "params": [
                {
                    "name": "node",
                    "description": "The currently visited node.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The node with the maximum value.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.commons.TraverseOrder",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 172,
            "description": "Clears the complete tree.",
            "itemtype": "method",
            "name": "removeAll",
            "class": "JSG.commons.TraverseOrder",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 180,
            "description": "Removes the data object from this tree which is equal to the given data object. The check is based on the \n<code>compareTo</code> method of each data object.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "data",
                    "description": "The data object to remove.",
                    "type": "Object"
                }
            ],
            "class": "JSG.commons.TraverseOrder",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 190,
            "description": "Tries to remove an equal data object as provided.",
            "itemtype": "method",
            "name": "_remove",
            "params": [
                {
                    "name": "data",
                    "description": "The data object to remove.",
                    "type": "Object"
                },
                {
                    "name": "current",
                    "description": "The currently visited node.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An equal data object as provided one or <code>undefined</code>.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.commons.TraverseOrder",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 216,
            "description": "Traverses this tree in specified order. On each tree node the provided function is called with the data object stored\nin corresponding node.",
            "itemtype": "method",
            "name": "traverse",
            "params": [
                {
                    "name": "func",
                    "description": "The function to call on each visited node.",
                    "type": "Function"
                },
                {
                    "name": "order",
                    "description": "The order of traversal. If not given the tree is traversed in order.",
                    "type": "JSG.commons.BSTree.TraverseOrder",
                    "optional": true
                }
            ],
            "class": "JSG.commons.TraverseOrder",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 234,
            "description": "Traverses this tree in order and calls specified function for visited node.",
            "itemtype": "method",
            "name": "_inOrder",
            "params": [
                {
                    "name": "node",
                    "description": "The currently visited node.",
                    "type": "Object"
                },
                {
                    "name": "func",
                    "description": "The function to call on visited node.",
                    "type": "Function"
                }
            ],
            "class": "JSG.commons.TraverseOrder",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 248,
            "description": "Traverses this tree in pre-order and calls specified function for visited node.",
            "itemtype": "method",
            "name": "_preOrder",
            "params": [
                {
                    "name": "node",
                    "description": "The currently visited node.",
                    "type": "Object"
                },
                {
                    "name": "func",
                    "description": "The function to call on visited node.",
                    "type": "Function"
                }
            ],
            "class": "JSG.commons.TraverseOrder",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 262,
            "description": "Traverses this tree in post-order and calls specified function for visited node.",
            "itemtype": "method",
            "name": "_postOrder",
            "params": [
                {
                    "name": "node",
                    "description": "The currently visited node.",
                    "type": "Object"
                },
                {
                    "name": "func",
                    "description": "The function to call on visited node.",
                    "type": "Function"
                }
            ],
            "class": "JSG.commons.TraverseOrder",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 292,
            "description": "Dumps the contents of this tree in specified order.",
            "itemtype": "method",
            "name": "toString",
            "params": [
                {
                    "name": "order",
                    "description": "The order of traversal.",
                    "type": "JSG.commons.BSTree.TraverseOrder"
                }
            ],
            "return": {
                "description": "The tree content as string.",
                "type": "String"
            },
            "class": "JSG.commons.TraverseOrder",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 311,
            "description": "Wraps given data object into a node to insert it into a <code>BSTree</code>.",
            "itemtype": "method",
            "name": "_newNode",
            "params": [
                {
                    "name": "data",
                    "description": "A data object to wrap.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new node object for using inside <code>BSTree</code>.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.commons.TraverseOrder",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 336,
            "description": "The numerical data value.",
            "itemtype": "property",
            "name": "value",
            "type": "{NUmeric}",
            "class": "JSG.commons.NumericData",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\BSTree.js",
            "line": 343,
            "description": "Compares this data object with given one by comparing their value property. Hence, provided data object should be of \ntype <code>NumericData</code>.",
            "itemtype": "method",
            "name": "compareTo",
            "params": [
                {
                    "name": "data",
                    "description": "The data object to compare to.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns 1 if the value of this data is greater than the value of given data object, -1 if it is less and 0 if both are equal.",
                "type": "Number"
            },
            "class": "JSG.commons.NumericData",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\ImagePool.js",
            "line": 46,
            "description": "Adds a new image to the image pool for the given url, if the image is not already available. If an image with the given url is already available\nin the pool, the existing image will be returned. Otherwise the image is loaded from the server and added to the pool \nUpon completion all registered graphs are invalidated.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "url",
                    "description": "URL pointing to an image on the server.",
                    "type": "String"
                },
                {
                    "name": "key",
                    "description": "Identifier for image. If not given, the url is used.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the new image. It may not be loaded directly upon return.",
                "type": "Image"
            },
            "class": "JSG.commons.ImagePool",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\ImagePool.js",
            "line": 74,
            "description": "Sets an new image to the image pool for the given key. The image is loaded from the server and added to the pool \nUpon completion all registered graphs are invalidated.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "url",
                    "description": "URL pointing to an image on the server.",
                    "type": "String"
                },
                {
                    "name": "key",
                    "description": "Identifier for image.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the new image. It may not be loaded directly upon return.",
                "type": "Image"
            },
            "class": "JSG.commons.ImagePool",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\ImagePool.js",
            "line": 122,
            "description": "Validating an URL.",
            "itemtype": "method",
            "name": "validateURL",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True, if URL is valid, false, if not.",
                "type": "Boolean"
            },
            "class": "JSG.commons.ImagePool",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\ImagePool.js",
            "line": 132,
            "description": "Register an editor. All registered editors are invalidated, when an image is loaded from the image pool.",
            "itemtype": "method",
            "name": "registerEditor",
            "params": [
                {
                    "name": "editor",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "JSG.commons.ImagePool",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\ImagePool.js",
            "line": 142,
            "description": "Deregister an editor. A registered editor has to be unregistered to free resources.",
            "itemtype": "method",
            "name": "unregisterEditor",
            "params": [
                {
                    "name": "editor",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "JSG.commons.ImagePool",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\ManagedList.js",
            "line": 24,
            "description": "Copies this ManagedList.</br>\nNote that this is not a deep copy, i.e. the contained items are not copied.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a new ManagedList instance.",
                "type": "JSG.commons.ManagedList"
            },
            "class": "JSG.commons.ManagedList",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\ManagedList.js",
            "line": 44,
            "description": "Adds given observer to the list of all observers which gets notified if inner array change. The\nprovided observer must implement <code>onListChanged(list, type, data)</code>, where\nthe given list is an instance of <code>ManagedList</code>, the type is one of the defined constants \nand data represents the changed data which can be <code>undefined</code>.",
            "itemtype": "method",
            "name": "addObserver",
            "params": [
                {
                    "name": "observer",
                    "description": "The observer to add.",
                    "type": "Object"
                }
            ],
            "class": "JSG.commons.ManagedList",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\ManagedList.js",
            "line": 59,
            "description": "Removes given observer from the list of all list observers.",
            "itemtype": "method",
            "name": "removeObserver",
            "params": [
                {
                    "name": "observer",
                    "description": "The observer to remove.",
                    "type": "Object"
                }
            ],
            "class": "JSG.commons.ManagedList",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\ManagedList.js",
            "line": 69,
            "description": "Adds given item to this list and notifies each registered observer.",
            "itemtype": "method",
            "name": "addItem",
            "params": [
                {
                    "name": "item",
                    "description": "The item to add.",
                    "type": "Object"
                }
            ],
            "class": "JSG.commons.ManagedList",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\ManagedList.js",
            "line": 82,
            "description": "Removes given item from this list and notifies each registered observer.",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "item",
                    "description": "The item to remove.",
                    "type": "Object"
                }
            ],
            "class": "JSG.commons.ManagedList",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\ManagedList.js",
            "line": 94,
            "description": "Removes all items this list currently contains and notifies each registered observer.",
            "itemtype": "method",
            "name": "removeAllItems",
            "class": "JSG.commons.ManagedList",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\ManagedList.js",
            "line": 106,
            "description": "Gives direct access to the underlying items array.</br>\n<b>Note:</b> it is not recommended to change the items  array directly! Better use the \nprovided methods instead.",
            "itemtype": "method",
            "name": "getItems",
            "return": {
                "description": "Returns the list items.",
                "type": "Array"
            },
            "class": "JSG.commons.ManagedList",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\ManagedList.js",
            "line": 118,
            "description": "Returns the number of items this list currently contains.",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "The number of items within this list.",
                "type": "Number"
            },
            "class": "JSG.commons.ManagedList",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\ManagedList.js",
            "line": 128,
            "description": "Notifies each registered observer about a list change.",
            "itemtype": "method",
            "name": "_notifyObservers",
            "params": [
                {
                    "name": "id",
                    "description": "The type of change.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "The changed data.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.commons.ManagedList",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Map.js",
            "line": 28,
            "description": "Remove all values from map.",
            "itemtype": "method",
            "name": "clear",
            "class": "JSG.commons.Map",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Map.js",
            "line": 37,
            "description": "Create a copy of the map.<br/>\n<b>Note:</b> this will not produce a deep copy, i.e. the map values are not copied.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "Copy of the map.",
                "type": "JSG.commons.Map"
            },
            "class": "JSG.commons.Map",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Map.js",
            "line": 51,
            "description": "Checks, if an object is part of the map identified by the given key.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "key",
                    "description": "Key to check for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True, if an object object using the given key is part of the Map.",
                "type": "Boolean"
            },
            "class": "JSG.commons.Map",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Map.js",
            "line": 62,
            "description": "Checks, if the map contains objects.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "True, if map does contain an object else false.",
                "type": "Boolean"
            },
            "class": "JSG.commons.Map",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Map.js",
            "line": 72,
            "description": "Retrieves an object from the map identified by the given key.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "Key used for identifying the object.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Object identified by key.",
                "type": "Object"
            },
            "class": "JSG.commons.Map",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Map.js",
            "line": 83,
            "description": "Adds the specified element under given key. The key must be a string.",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "key",
                    "description": "Identifier key .",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "Object to be stored.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The previously stored Object.",
                "type": "Object"
            },
            "class": "JSG.commons.Map",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Map.js",
            "line": 97,
            "description": "Adds all elements of the specified map to this map",
            "itemtype": "method",
            "name": "putAll",
            "params": [
                {
                    "name": "map",
                    "description": "Another Map.",
                    "type": "JSG.commons.Map"
                }
            ],
            "class": "JSG.commons.Map",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Map.js",
            "line": 110,
            "description": "Removes and returns the element under given key from this map",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "key",
                    "description": "Key to identify object.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Object, that was removed.",
                "type": "Object"
            },
            "class": "JSG.commons.Map",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Map.js",
            "line": 125,
            "description": "Return the amount of object in the map.",
            "itemtype": "method",
            "name": "size",
            "return": {
                "description": "Object count.",
                "type": "Number"
            },
            "class": "JSG.commons.Map",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Map.js",
            "line": 135,
            "description": "Returns an array with all keys this map contains.",
            "itemtype": "method",
            "name": "keys",
            "return": {
                "description": "Array with all keys.",
                "type": "Array"
            },
            "class": "JSG.commons.Map",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Map.js",
            "line": 149,
            "description": "Returns an array with all objects this map contains.",
            "itemtype": "method",
            "name": "elements",
            "return": {
                "description": "Array with all objects",
                "type": "Array"
            },
            "class": "JSG.commons.Map",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Map.js",
            "line": 163,
            "description": "Iterates over all map entries and calls specified function with key & element as parameters. If provided function \nreturns <code>true</code> iteration is stopped.",
            "example": [
                "\n    map.iterate(\n        function(key, element) {\n            doSomethingWith(key, element);\n            if(key === lookFor) {\n                return true; //stop iteration\n            }\n        }\n    );"
            ],
            "itemtype": "method",
            "name": "iterate",
            "params": [
                {
                    "name": "func",
                    "description": "Function to be executed for each object in the map. Should return <code>true</code> to stop iteration.",
                    "type": "Function"
                }
            ],
            "class": "JSG.commons.Map",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Map.js",
            "line": 188,
            "description": "Calls the specified function on all properties of given object. Call parameters are property\nname and value.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_forAllPropertiesOf",
            "params": [
                {
                    "name": "from",
                    "description": "Desc",
                    "type": "Number"
                }
            ],
            "class": "JSG.commons.Map",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\NamedImage.js",
            "line": 21,
            "description": "Copies this NamedImage.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a new NamedImage instance.",
                "type": "JSG.commons.NamedImage"
            },
            "class": "JSG.commons.NamedImage",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\NamedImage.js",
            "line": 32,
            "description": "Saves this NamedImage to the given XML Stream.",
            "itemtype": "method",
            "name": "saveXML",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the tag to create.",
                    "type": "String"
                },
                {
                    "name": "file",
                    "description": "XML Writer to use for streaming.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "class": "JSG.commons.NamedImage",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\NamedImage.js",
            "line": 46,
            "description": "Reads from given DOM node to initialize this NamedImage.",
            "itemtype": "method",
            "name": "readXML",
            "params": [
                {
                    "name": "xmlnode",
                    "description": "Node to read from.",
                    "type": "Node"
                }
            ],
            "class": "JSG.commons.NamedImage",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Number.js",
            "line": 12,
            "description": "Checks, if specified value represents a Number",
            "itemtype": "method",
            "name": "isNumber",
            "params": [
                {
                    "name": "value",
                    "description": "Number to validate.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True, if its a number, else false.",
                "type": "Boolean"
            },
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.commons.Numbers/isNumber:method\"}}{{/crossLink}} instead!",
            "class": "Number",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Number.js",
            "line": 30,
            "description": "Checks, if specified value can be converted into a Number",
            "itemtype": "method",
            "name": "canBeNumber",
            "params": [
                {
                    "name": "value",
                    "description": "Number to validate.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True, if its convertable, else false.",
                "type": "Boolean"
            },
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.commons.Numbers/cnBeNumber:method\"}}{{/crossLink}} instead!",
            "class": "Number",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Number.js",
            "line": 46,
            "description": "Checks, if both numbers are either even or odd, false otherwise",
            "itemtype": "method",
            "name": "areBothEvenOrOdd",
            "params": [
                {
                    "name": "nr1",
                    "description": "First number to validate.",
                    "type": "Number"
                },
                {
                    "name": "nr2",
                    "description": "Second number to validate.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True, if both are odd or both are even, else false.",
                "type": "Boolean"
            },
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "Subject to remove!!",
            "class": "Number",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Number.js",
            "line": 68,
            "description": "Checks if this number has same sign as given number.",
            "itemtype": "method",
            "name": "hasSameSignAs",
            "params": [
                {
                    "name": "other",
                    "description": "Number to check against.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<code>true</code> if this number has same sign as given one, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.commons.Numbers/haveSameSign:method\"}}{{/crossLink}} instead!",
            "class": "Number",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Number.js",
            "line": 84,
            "description": "Checks, if the given number is equal or close to equal to this number with some tolerance.",
            "itemtype": "method",
            "name": "isEqual",
            "params": [
                {
                    "name": "other",
                    "description": "Number to check.",
                    "type": "Number"
                },
                {
                    "name": "accuracy",
                    "description": "Tolerance value to be used for comparison.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True, if the number is equal, else false.",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.commons.Numbers/areEqual:method\"}}{{/crossLink}} instead!",
            "class": "Number",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Number.js",
            "line": 100,
            "description": "Checks, if specified value is even.",
            "itemtype": "method",
            "name": "isEven",
            "params": [
                {
                    "name": "value",
                    "description": "Number to validate.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True, if its an even number, else false.",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.commons.Numbers/isEven:method\"}}{{/crossLink}} instead!",
            "class": "Number",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Number.js",
            "line": 115,
            "itemtype": "method",
            "name": "format",
            "return": {
                "description": "Formatted string.",
                "type": "String"
            },
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.commons.Numbers/format:method\"}}{{/crossLink}} instead!",
            "class": "Number",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Numbers.js",
            "line": 18,
            "description": "A shortcut for conveniently access to this <code>Numbers</code> object.",
            "itemtype": "property",
            "name": "JSG.Numbers",
            "type": "{JSG.commons.Numbers}",
            "static": 1,
            "class": "JSG.commons.Numbers",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Numbers.js",
            "line": 27,
            "description": "Checks if value is defined, i.e. not equals <code>null</code> or <code>undefined</code>.<br/>\nNote: this will not check if value is a number at all. The value 0 returns <code>true</code>.",
            "itemtype": "method",
            "name": "isDefined",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<code>true</code> if the number value is defined or 0, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "static": 1,
            "since": "1.6.0",
            "class": "JSG.commons.Numbers",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Numbers.js",
            "line": 41,
            "description": "Checks, if specified value represents a Number.",
            "itemtype": "method",
            "name": "isNumber",
            "params": [
                {
                    "name": "value",
                    "description": "Number to validate.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<code>true</code> if its a number, else <code>false</code>.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.commons.Numbers",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Numbers.js",
            "line": 57,
            "description": "Checks, if specified value can be converted into a Number.",
            "itemtype": "method",
            "name": "canBeNumber",
            "params": [
                {
                    "name": "value",
                    "description": "Number to validate.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<code>true</code> if can be converted into a number, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.commons.Numbers",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Numbers.js",
            "line": 70,
            "description": "Checks if both numbers have same sign.",
            "itemtype": "method",
            "name": "haveSameSign",
            "params": [
                {
                    "name": "nr1",
                    "description": "First number to validate.",
                    "type": "Number"
                },
                {
                    "name": "nr2",
                    "description": "Second number to validate.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<code>true</code> if both numbers have same sign, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.commons.Numbers",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Numbers.js",
            "line": 84,
            "description": "Checks, if both numbers are equal or close to equal with some tolerance.",
            "itemtype": "method",
            "name": "areEqual",
            "params": [
                {
                    "name": "nr1",
                    "description": "First number to check.",
                    "type": "Number"
                },
                {
                    "name": "nr2",
                    "description": "Second number to check.",
                    "type": "Number"
                },
                {
                    "name": "accuracy",
                    "description": "Tolerance value to be used for comparison.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<code>true</code> if both numbers are equal, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.commons.Numbers",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Numbers.js",
            "line": 99,
            "description": "Checks if specified Number is even.",
            "itemtype": "method",
            "name": "isEven",
            "params": [
                {
                    "name": "value",
                    "description": "Number to validate.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<code>true</code> if value is event, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.commons.Numbers",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Numbers.js",
            "line": 112,
            "description": "Formats given number",
            "itemtype": "method",
            "name": "format",
            "params": [
                {
                    "name": "nr",
                    "description": "The number to format.",
                    "type": "Number"
                },
                {
                    "name": "decPlaces",
                    "description": "The number of decimal places.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "2"
                },
                {
                    "name": "thouSeparator",
                    "description": "An optional thousand marker.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "."
                },
                {
                    "name": "decSeparator",
                    "description": "An optional decimal separator to use.",
                    "type": "String",
                    "optional": true,
                    "optdefault": ","
                },
                {
                    "name": "currencySymbol",
                    "description": "An optional currency symbol to use. If not given \"$\" is used.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "$"
                }
            ],
            "return": {
                "description": "The formatted number string.",
                "type": "String"
            },
            "class": "JSG.commons.Numbers",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\StableMap.js",
            "line": 32,
            "description": "Returns the first object added to this map or <code>undefined</code> if map is empty.",
            "itemtype": "method",
            "name": "getFirst",
            "return": {
                "description": "The first object which was added to this map.",
                "type": "Object"
            },
            "since": "1.6.0",
            "class": "JSG.commons.StableMap",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\StableMap.js",
            "line": 42,
            "description": "Returns the last object added to this map or <code>undefined</code> if map is empty.",
            "itemtype": "method",
            "name": "getLast",
            "return": {
                "description": "The last object which was added to this map.",
                "type": "Object"
            },
            "since": "1.6.0",
            "class": "JSG.commons.StableMap",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\StableMap.js",
            "line": 103,
            "description": "Iterates this map and calls given function with key and element as parameter. .",
            "itemtype": "method",
            "name": "iterate",
            "params": [
                {
                    "name": "func",
                    "description": "Function to be called during iteration with key and element as parameter.",
                    "type": "Function"
                }
            ],
            "class": "JSG.commons.StableMap",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\StableMap.js",
            "line": 117,
            "description": "Iterates this map in reverse order and calls given function with key and element as parameter.",
            "itemtype": "method",
            "name": "iterateReverse",
            "params": [
                {
                    "name": "func",
                    "description": "Function to be called during iteration with key and element as parameter.",
                    "type": "Function"
                }
            ],
            "class": "JSG.commons.StableMap",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\String.js",
            "line": 13,
            "description": "Checks whether this string contains given string.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "str",
                    "description": "String to check",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True, if string is contained, otherwise false.",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.commons.Strings/contains:method\"}}{{/crossLink}} instead!",
            "class": "String",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\String.js",
            "line": 28,
            "description": "Checks, if string starts with the given string.",
            "itemtype": "method",
            "name": "startsWith",
            "params": [
                {
                    "name": "str",
                    "description": "String to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True, if string is found, otherwise false.",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.commons.Strings/startsWith:method\"}}{{/crossLink}} instead!",
            "class": "String",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\String.js",
            "line": 43,
            "description": "Checks, if string ends with the given string.",
            "itemtype": "method",
            "name": "endsWith",
            "params": [
                {
                    "name": "str",
                    "description": "String to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True, if string is found, otherwise false.",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.commons.Strings/endsWith:method\"}}{{/crossLink}} instead!",
            "class": "String",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\String.js",
            "line": 58,
            "description": "Insert given string at given position.",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "index",
                    "description": "Index to insert string at.",
                    "type": "Number"
                },
                {
                    "name": "string",
                    "description": "String to insert.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "New string including insertion.",
                "type": "String"
            },
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.commons.Strings/insert:method\"}}{{/crossLink}} instead!",
            "class": "String",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\String.js",
            "line": 78,
            "description": "Remove chars from string.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "index",
                    "description": "Index where to start removing",
                    "type": "Number"
                },
                {
                    "name": "charcount",
                    "description": "Number of chars to remove",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Result string.",
                "type": "String"
            },
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.commons.Strings/remove:method\"}}{{/crossLink}} instead!",
            "class": "String",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\String.js",
            "line": 94,
            "description": "Checks, if passed parameter is a string.</br>\nNote: this returns <code>true</code> even for <code>new String()</code> objects!",
            "itemtype": "method",
            "name": "isString",
            "params": [
                {
                    "name": "toTest",
                    "description": "Variable to check.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True, if variable is a String, otherwise false.",
                "type": "Boolean"
            },
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.commons.Strings/isString:method\"}}{{/crossLink}} instead!",
            "class": "String",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\String.js",
            "line": 113,
            "description": "Checks, if passed string is empty.</br>\nEmpty means that passed string is either undefined or has no length.",
            "itemtype": "method",
            "name": "isEmpty",
            "params": [
                {
                    "name": "toTest",
                    "description": "String to check.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<code>true</code> if passed string is either <code>undefined</code> or has no length, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.commons.Strings/isEmpty:method\"}}{{/crossLink}} instead!",
            "class": "String",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\String.js",
            "line": 130,
            "description": "Encodes this string. Special characters (<, >, %, &, \", \\n, are encoded using '~??' instead of '%??'.",
            "itemtype": "method",
            "name": "encode",
            "return": {
                "description": "Encoded copy of this string",
                "type": "String"
            },
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.commons.Strings/encode:method\"}}{{/crossLink}} instead!",
            "class": "String",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\String.js",
            "line": 154,
            "description": "Decodes this string. Special characters (<, >, %, &, \", \\n, are decoded regarding '~??' instead of '%??'",
            "itemtype": "method",
            "name": "decode",
            "return": {
                "description": "Decoded copy of this string.",
                "type": "String"
            },
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.commons.Strings/decode:method\"}}{{/crossLink}} instead!",
            "class": "String",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\String.js",
            "line": 176,
            "description": "Encodes this string assuming it represents XML.",
            "itemtype": "method",
            "name": "encodeXML",
            "return": {
                "description": "Encoded XML string.",
                "type": "String"
            },
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.commons.Strings/encodeXML:method\"}}{{/crossLink}} instead!",
            "class": "String",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\String.js",
            "line": 189,
            "description": "Decodes this string assuming it represents XML.",
            "itemtype": "method",
            "name": "decodeXML",
            "return": {
                "description": "Decoded XML string.",
                "type": "String"
            },
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.commons.Strings/decodeXML:method\"}}{{/crossLink}} instead!",
            "class": "String",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\StringBuffer.js",
            "line": 16,
            "description": "Append given string to buffer.",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "str",
                    "description": "String to append.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Return this object",
                "type": "StringBuffer"
            },
            "class": "StringBuffer",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\StringBuffer.js",
            "line": 28,
            "description": "Checks, if buffer is empty.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "True, if empty.",
                "type": "Boolean"
            },
            "class": "StringBuffer",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\StringBuffer.js",
            "line": 38,
            "description": "Clear Buffer.",
            "itemtype": "method",
            "name": "reset",
            "return": {
                "description": "Return this object",
                "type": "StringBuffer"
            },
            "class": "StringBuffer",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\StringBuffer.js",
            "line": 49,
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "StringBuffer",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\StringBuffer.js",
            "line": 59,
            "description": "Push buffer to result string.",
            "itemtype": "method",
            "name": "_concat",
            "params": [
                {
                    "name": "buffer",
                    "description": "Other buffer",
                    "type": "StringBuffer"
                }
            ],
            "return": {
                "description": "Result string.",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "StringBuffer",
            "module": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Strings.js",
            "line": 18,
            "description": "A shortcut for conveniently access to this <code>Strings</code> object.",
            "itemtype": "property",
            "name": "JSG.Strings",
            "type": "{JSG.commons.Strings}",
            "static": 1,
            "class": "JSG.commons.Strings",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Strings.js",
            "line": 28,
            "description": "Checks, if passed parameter is a string.</br>\nNote: this returns <code>true</code> even for <code>new String()</code> objects!",
            "itemtype": "method",
            "name": "isString",
            "params": [
                {
                    "name": "toTest",
                    "description": "Variable to check.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True, if variable is a String, otherwise false.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.commons.Strings",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Strings.js",
            "line": 44,
            "description": "Checks whether a given string is contained within another string.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "str",
                    "description": "The containment string to check.",
                    "type": "String"
                },
                {
                    "name": "contain",
                    "description": "The string to check for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<code>true</code>, if string is contained, otherwise <code>false</code>.",
                "type": "Boolean"
            },
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "Not used. Subject to remove!",
            "class": "JSG.commons.Strings",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Strings.js",
            "line": 58,
            "description": "Checks if a given string starts with another string.",
            "itemtype": "method",
            "name": "startsWith",
            "params": [
                {
                    "name": "str",
                    "description": "The string to check.",
                    "type": "String"
                },
                {
                    "name": "prefix",
                    "description": "The prefix to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<code>true</code>, if string starts with given string, otherwise <code>false</code>.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.commons.Strings",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Strings.js",
            "line": 71,
            "description": "Checks if a given string ends with another string.",
            "itemtype": "method",
            "name": "endsdWith",
            "params": [
                {
                    "name": "str",
                    "description": "The string to check.",
                    "type": "String"
                },
                {
                    "name": "suffix",
                    "description": "The suffix to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<code>true</code>, if string ends with given string, otherwise <code>false</code>.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.commons.Strings",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Strings.js",
            "line": 84,
            "description": "Cuts off a substring from given string. The substring is specified by start end end strings. That means the returned \nstring is the substring between the first occurrence of defined start and end string (exclusively).<br/>",
            "itemtype": "method",
            "name": "cut",
            "params": [
                {
                    "name": "str",
                    "description": "String to cut off from.",
                    "type": "String"
                },
                {
                    "name": "startStr",
                    "description": "The leading string to start cut off. If not given returned substring starts at 0.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "endStr",
                    "description": "The ending string to cut off. If not given returned substring ends at string length.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The substring between start and end strings.",
                "type": "String"
            },
            "static": 1,
            "since": "1.6.0",
            "class": "JSG.commons.Strings",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Strings.js",
            "line": 106,
            "description": "Insert given string at given position.",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "str",
                    "description": "String to insert into.",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "Index to insert string at.",
                    "type": "Number"
                },
                {
                    "name": "insert",
                    "description": "String to insert.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "New string including insertion.",
                "type": "String"
            },
            "static": 1,
            "class": "JSG.commons.Strings",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Strings.js",
            "line": 124,
            "description": "Removes given amount of characters from given string, starting at specified position.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "str",
                    "description": "String to remove characters from.",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "Index where to start removal.",
                    "type": "Number"
                },
                {
                    "name": "charcount",
                    "description": "Number of characters to remove.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Result string.",
                "type": "String"
            },
            "static": 1,
            "class": "JSG.commons.Strings",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Strings.js",
            "line": 139,
            "description": "Checks, if passed string is empty.</br>\nEmpty means that passed string is either undefined or has no length.",
            "itemtype": "method",
            "name": "isEmpty",
            "params": [
                {
                    "name": "toTest",
                    "description": "String to check.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<code>true</code> if passed string is either <code>undefined</code> or has no length, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "Not used. Subject to remove!",
            "class": "JSG.commons.Strings",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Strings.js",
            "line": 155,
            "description": "Encodes this string. Special characters (<, >, %, &, \", \\n, are encoded using '~??' instead of '%??'.",
            "itemtype": "method",
            "name": "encode",
            "params": [
                {
                    "name": "str",
                    "description": "The string to encode.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Encoded copy of this string",
                "type": "String"
            },
            "static": 1,
            "class": "JSG.commons.Strings",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Strings.js",
            "line": 177,
            "description": "Decodes this string. Special characters (<, >, %, &, \", \\n, are decoded regarding '~??' instead of '%??'",
            "itemtype": "method",
            "name": "decode",
            "params": [
                {
                    "name": "str",
                    "description": "The string to decode.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Decoded copy of this string.",
                "type": "String"
            },
            "static": 1,
            "class": "JSG.commons.Strings",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Strings.js",
            "line": 196,
            "description": "Encodes given string assuming it represents XML.",
            "itemtype": "method",
            "name": "encodeXML",
            "params": [
                {
                    "name": "xml",
                    "description": "The XML string to encode.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Encoded XML string.",
                "type": "String"
            },
            "static": 1,
            "class": "JSG.commons.Strings",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\Strings.js",
            "line": 207,
            "description": "Decodes given string assuming it represents XML.",
            "itemtype": "method",
            "name": "decodeXML",
            "params": [
                {
                    "name": "xml",
                    "description": "The XML string to decode.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Decoded XML string.",
                "type": "String"
            },
            "static": 1,
            "class": "JSG.commons.Strings",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\XML.js",
            "line": 15,
            "description": "Iterates over all siblings of first child element of given parent node.<br/>\nFor each visited child node the given callback function is called with provided <code>source</code> parameter and \nthe current node.",
            "itemtype": "method",
            "name": "iterateChildren",
            "params": [
                {
                    "name": "source",
                    "description": "The caller of this method which is passed to the callback.",
                    "type": "Object"
                },
                {
                    "name": "parent",
                    "description": "Parent node which should provide an element child to start iteration at.",
                    "type": "Node"
                },
                {
                    "name": "callback",
                    "description": "A function to call on each visited child node. The caller and the node are passed as parameters.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns true, of all elements have been iterated, false if the callback interrupted the enumeration.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.commons.XML",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\XML.js",
            "line": 41,
            "description": "Returns the first child element with given <code>tagname</code> (a.k.a. node name) of specified XML node or \n<code>undefined</code> if none could be found.",
            "itemtype": "method",
            "name": "findElementByTagName",
            "params": [
                {
                    "name": "xmlnode",
                    "description": "The XML node to traverse the child nodes of.",
                    "type": "Node"
                },
                {
                    "name": "tagname",
                    "description": "The element name to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A matching child node or <code>undefined</code>.",
                "type": "Node"
            },
            "static": 1,
            "class": "JSG.commons.XML",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\XML.js",
            "line": 65,
            "description": "Returns a list of child elements of specified XML node which match the given <code>tagname</code> (a.k.a. node name).",
            "itemtype": "method",
            "name": "findAllElementsByTagName",
            "params": [
                {
                    "name": "xmlnode",
                    "description": "The XML node to traverse the child nodes of.",
                    "type": "Node"
                },
                {
                    "name": "tagname",
                    "description": "The element name to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A list of matching child nodes.",
                "type": "Array"
            },
            "static": 1,
            "class": "JSG.commons.XML",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\XMLWriter.js",
            "line": 46,
            "description": "Create a new XML Document.",
            "itemtype": "method",
            "name": "writeStartDocument",
            "class": "JSG.commons.XMLWriter",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\XMLWriter.js",
            "line": 56,
            "description": "Finish the XML Document.",
            "itemtype": "method",
            "name": "writeEndDocument",
            "class": "JSG.commons.XMLWriter",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\XMLWriter.js",
            "line": 66,
            "description": "Start a new node.",
            "itemtype": "method",
            "name": "writeStartElement",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the node.",
                    "type": "String"
                }
            ],
            "class": "JSG.commons.XMLWriter",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\XMLWriter.js",
            "line": 91,
            "description": "Finish node.</br>\nUse the optional <code>cancel</code> parameter to prevent XMLWriter to save started element to XML.",
            "itemtype": "method",
            "name": "writeEndElement",
            "params": [
                {
                    "name": "cancel",
                    "description": "Cancels started element so that it is not written to XML.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "<code>true</code> if element was written, <code>false</code> if it was cancelled.",
                "type": "Boolean"
            },
            "class": "JSG.commons.XMLWriter",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\XMLWriter.js",
            "line": 112,
            "description": "Add attribute to the current node.",
            "itemtype": "method",
            "name": "writeAttributeString",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the attribute.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Value of the attribute.",
                    "type": "String"
                }
            ],
            "class": "JSG.commons.XMLWriter",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\XMLWriter.js",
            "line": 126,
            "description": "Add attribute to the current node using a number a optionally rounding it to n decimals.",
            "itemtype": "method",
            "name": "writeAttributeString",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the attribute.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Value of the attribute.",
                    "type": "Number"
                },
                {
                    "name": "decimals",
                    "description": "Round value to. If not supplied, no rounding will take place.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "JSG.commons.XMLWriter",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\XMLWriter.js",
            "line": 146,
            "description": "Add text to node.",
            "itemtype": "method",
            "name": "writeString",
            "params": [
                {
                    "name": "text",
                    "description": "Text to write.",
                    "type": "String"
                }
            ],
            "class": "JSG.commons.XMLWriter",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\XMLWriter.js",
            "line": 158,
            "description": "Add Node with text in one step.",
            "itemtype": "method",
            "name": "writeElementString",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the node.",
                    "type": "String"
                },
                {
                    "name": "text",
                    "description": "Text to write.",
                    "type": "String"
                }
            ],
            "class": "JSG.commons.XMLWriter",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\XMLWriter.js",
            "line": 171,
            "description": "Add CDATA Section to Node.",
            "itemtype": "method",
            "name": "writeCDATA",
            "params": [
                {
                    "name": "text",
                    "description": "Text to write.",
                    "type": "String"
                }
            ],
            "class": "JSG.commons.XMLWriter",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\XMLWriter.js",
            "line": 181,
            "description": "Add Comment.",
            "itemtype": "method",
            "name": "writeComment",
            "params": [
                {
                    "name": "text",
                    "description": "Text to write.",
                    "type": "String"
                }
            ],
            "class": "JSG.commons.XMLWriter",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\XMLWriter.js",
            "line": 191,
            "description": "Create String with the XML Information.",
            "itemtype": "method",
            "name": "flush",
            "params": [
                {
                    "name": "plain",
                    "description": "False to format returned String and add the XML header to it, true to leave it unformatted.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "XML as string.",
                "type": "String"
            },
            "class": "JSG.commons.XMLWriter",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\XMLWriter.js",
            "line": 225,
            "description": "Close XML Document. Calling this will destroy all XML Information in the XMLWriter",
            "itemtype": "method",
            "name": "close",
            "class": "JSG.commons.XMLWriter",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\commons\\XMLWriter.js",
            "line": 238,
            "description": "Get XML Document.",
            "itemtype": "method",
            "name": "getDocument",
            "return": {
                "description": "An XML Document.",
                "type": "DOMParser"
            },
            "class": "JSG.commons.XMLWriter",
            "module": "JSG.commons",
            "namespace": "JSG.commons"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 34,
            "description": "Create a Bounding Box.",
            "itemtype": "method",
            "name": "Factory",
            "return": {
                "description": "New BoundingBox",
                "type": "JSG.geometry.BoundingBox"
            },
            "static": 1,
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 45,
            "description": "Create a bounding box from a given JSG.geometry.Rectangle.",
            "itemtype": "method",
            "name": "fromRectangle",
            "params": [
                {
                    "name": "rect",
                    "description": "Rectangle to use.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "return": {
                "description": "New BoundingBox",
                "type": "JSG.geometry.BoundingBox"
            },
            "static": 1,
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 62,
            "description": "Internal usage only! Shared between all instances, use with care!",
            "itemtype": "property",
            "name": "_tmppoints",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 70,
            "description": "Save the bounding box as XML",
            "itemtype": "method",
            "name": "saveXML",
            "params": [
                {
                    "name": "name",
                    "description": "Tag name to be used.",
                    "type": "Name"
                },
                {
                    "name": "name",
                    "description": "XML Writer to be used.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 87,
            "description": "Read Bounding Box from an XML Node",
            "itemtype": "method",
            "name": "readXML",
            "params": [
                {
                    "name": "node",
                    "description": "DOM Node to read from.",
                    "type": "Node"
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 111,
            "description": "Copy the bounding box.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "A copy of this BoundingBox.",
                "type": "JSG.geometry.BoundingBox"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 123,
            "description": "Checks whether a BoundingBox contains a given point.",
            "itemtype": "method",
            "name": "containsPoint",
            "params": [
                {
                    "name": "point",
                    "description": "Point to check.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "<code>true</code> if point is within this BoundingBox, otherwise <code>false</code>.",
                "type": "Boolean"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 135,
            "description": "Checks if given BoundingBox is completely contained within this BoundingBox.",
            "itemtype": "method",
            "name": "containsBBox",
            "params": [
                {
                    "name": "bbox",
                    "description": "BoundingBox to check.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "return": {
                "description": "<code>true</code> if this BoundingBox contains given BoundingBox, otherwise <code>false</code>.",
                "type": "Boolean"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 154,
            "description": "Checks if this BoundingBox is equal to the given one. If an accuracy is given, there equality\nis only true, if the other values are within the interval of the tolerance.",
            "itemtype": "method",
            "name": "isEqualTo",
            "params": [
                {
                    "name": "otherBox",
                    "description": "BoundingBox to check.",
                    "type": "JSG.geometry.BoundingBox"
                },
                {
                    "name": "accuracy",
                    "description": "Tolerance value for comparison.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "<code>true</code> if this BoundingBox is equal to given BoundingBox, otherwise <code>false</code>.",
                "type": "Boolean"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 179,
            "description": "Expand the size of the BoundingBox.",
            "itemtype": "method",
            "name": "expandBy",
            "params": [
                {
                    "name": "width",
                    "description": "Value to expand the width of the box by.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Value to expand the height of the box by. Optional, if height is not given, width and height are both expanded by the width",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 205,
            "description": "Reduce the size of the BoundingBox",
            "itemtype": "method",
            "name": "reduceBy",
            "params": [
                {
                    "name": "amount",
                    "description": "Value to reduce the size by.",
                    "type": "Number"
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 215,
            "description": "Retrieve the center of this BoundingBox, relative to its top left point and rotated by inner angle.",
            "itemtype": "method",
            "name": "getCenter",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "Point allowed to be used as a return value. If provided no new Point needs to be allocated.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                },
                {
                    "name": "toParent",
                    "description": "Set to <code>true</code> if center point should be relative to parent, i.e. top-left point is added.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Center of the BoundingBox.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 230,
            "description": "Retrieve the top left corner of the BoundingBox.",
            "itemtype": "method",
            "name": "getTopLeft",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "Point allowed to be used as a return value. If provided no new Point needs to be allocated.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "Top left of the BoundingBox.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 243,
            "description": "Retrieve the unrotated left position of the BoundingBox.",
            "itemtype": "method",
            "name": "getLeft",
            "return": {
                "description": "Left position of the BoundingBox.",
                "type": "Number"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 253,
            "description": "Retrieves the unrotated right position of the BoundingBox.",
            "itemtype": "method",
            "name": "getRight",
            "return": {
                "description": "Right position of the BoundingBox.",
                "type": "Number"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 263,
            "description": "Retrieve the unrotated top position of the BoundingBox.",
            "itemtype": "method",
            "name": "getTop",
            "return": {
                "description": "Top position of the BoundingBox.",
                "type": "Number"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 273,
            "description": "Retrieves the unrotated bottom position of the BoundingBox.",
            "itemtype": "method",
            "name": "getBottom",
            "return": {
                "description": "Top position of the BoundingBox.",
                "type": "Number"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 283,
            "description": "Retrieve the bottom right corner of the BoundingBox.",
            "itemtype": "method",
            "name": "getBottomRight",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "Point allowed to be used as a return value. If provided no new Point needs to be allocated.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "Bottom right corner of the BoundingBox.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 296,
            "description": "Retrieves the top right corner of this BoundingBox.",
            "itemtype": "method",
            "name": "getTopRight",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "Point allowed to be used as a return value. If provided no new Point needs to be allocated.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "Top right corner of this BoundingBox.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 309,
            "description": "Retrieves the bottom left corner of this BoundingBox.",
            "itemtype": "method",
            "name": "getBottomLeft",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "Point allowed to be used as a return value. If provided no new Point needs to be allocated.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "Bottom left corner of this BoundingBox.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 345,
            "description": "Get width of the BoundingBox.</br>\n<b>Note:</b> the returned width might be negative!",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "Width value.",
                "type": "Number"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 356,
            "description": "Get height of the BoundingBox.\n<b>Note:</b> the returned height might be negative!",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "Height value.",
                "type": "Number"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 367,
            "description": "Get size of the BoundingBox.",
            "itemtype": "method",
            "name": "getSize",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "Point allowed to be used as a return value. If provided no new Point needs to be allocated.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "Size of the BoundingBox.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 380,
            "description": "Reset all values to 0.",
            "itemtype": "method",
            "name": "reset",
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 391,
            "description": "Define top left corner.",
            "itemtype": "method",
            "name": "setTopLeftTo",
            "params": [
                {
                    "name": "point",
                    "description": "New top left corner of the BoundingBox.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 401,
            "description": "Set top left corner.",
            "itemtype": "method",
            "name": "setTopLeft",
            "params": [
                {
                    "name": "x",
                    "description": "X Position of the top left corner.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y Position of the top left corner.",
                    "type": "Number"
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 418,
            "description": "Sets the bottom right corner of this bounding box to the given point.",
            "itemtype": "method",
            "name": "setBottomRightTo",
            "params": [
                {
                    "name": "point",
                    "description": "The new bottom right location.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 427,
            "description": "Sets the bottom right corner of this bounding box to the location defined by given x and y values.",
            "itemtype": "method",
            "name": "setBottomRight",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate of new bottom right location.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate of new bottom right location.",
                    "type": "Number"
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 440,
            "description": "Set the size of the BoundingBox.",
            "itemtype": "method",
            "name": "setSizeTo",
            "params": [
                {
                    "name": "point",
                    "description": "New size of the BoundingBox.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 450,
            "description": "Set the size of the BoundingBox.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "New width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "New height.",
                    "type": "Number"
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 462,
            "description": "Set width.",
            "itemtype": "method",
            "name": "setWidth",
            "params": [
                {
                    "name": "width",
                    "description": "New width of the BoundingBox.",
                    "type": "Number"
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 473,
            "description": "Set top.",
            "itemtype": "method",
            "name": "setTop",
            "params": [
                {
                    "name": "y",
                    "description": "New top or y position of the BoundingBox.",
                    "type": "Number"
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 485,
            "description": "Set left position.",
            "itemtype": "method",
            "name": "setLeft",
            "params": [
                {
                    "name": "x",
                    "description": "New left or x position of the BoundingBox.",
                    "type": "Number"
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 497,
            "description": "Set height.",
            "itemtype": "method",
            "name": "setHeight",
            "params": [
                {
                    "name": "height",
                    "description": "New height of the BoundingBox.",
                    "type": "Number"
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 508,
            "description": "Assign the values of another BoundingBox to this BoundingBox.",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "bbox",
                    "description": "Bounding box to retrieve values from.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "return": {
                "description": "This box.",
                "type": "JSG.geometry.BoundingBox"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 522,
            "description": "Rotates BoundingBox around its origin, i.e. its top left coordinate.",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "Angle in radians.",
                    "type": "Number"
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 532,
            "description": "Rotate Bounding Box around given point.",
            "itemtype": "method",
            "name": "rotateAroundPoint",
            "params": [
                {
                    "name": "point",
                    "description": "Point to rotate around.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "angle",
                    "description": "Angle to rotate by in radians.",
                    "type": "Number"
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 545,
            "description": "Retrieve current BoundingBox angle in Radians",
            "itemtype": "method",
            "name": "getAngle",
            "return": {
                "description": "Angle in radiant",
                "type": "Number"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 555,
            "description": "Set the angle of the BoundingBox.",
            "itemtype": "method",
            "name": "setAngle",
            "params": [
                {
                    "name": "angle",
                    "description": "Angle in radians.",
                    "type": "Number"
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 565,
            "description": "Retrieves the current rotation matrix.",
            "itemtype": "method",
            "name": "getRotationMatrix",
            "return": {
                "description": "Current matrix.",
                "type": "JSG.geometry.Matrix"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 575,
            "description": "Define new rotation matrix.",
            "itemtype": "method",
            "name": "setRotationMatrixTo",
            "params": [
                {
                    "name": "matrix",
                    "description": "New rotation matrix.",
                    "type": "JSG.geometry.Matrix"
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 585,
            "description": "Move BoundingBox to a new position.",
            "itemtype": "method",
            "name": "translateTo",
            "params": [
                {
                    "name": "point",
                    "description": "Offset to move the BoundingBox by.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 595,
            "description": "Move BoundingBox to a new position.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "x",
                    "description": "X value to move.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y value to move.",
                    "type": "Number"
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 614,
            "description": "Get the bounding rectangle of the rotated BoundingBox.",
            "itemtype": "method",
            "name": "getBoundingRectangle",
            "params": [
                {
                    "name": "reuserect",
                    "description": "Rectangle, that can be used as the return value to avoid new allocation.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "return": {
                "description": "Bounding rectangle of the rotated bounding box.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 655,
            "description": "Retrieve a string representation of the BoundingBox",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "String with the location and dimensions of the box.",
                "type": "String"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 666,
            "description": "Retrieve a string representation of the BoundingBox",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "String with the corner if the BoundingBox.",
                "type": "String"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 677,
            "description": "Calculate the union of this BoundingBox and a given BoundingBox. The result will be saved in this BoundingBox",
            "itemtype": "method",
            "name": "union",
            "params": [
                {
                    "name": "bbox",
                    "description": "BoundingBox to union this box with.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 712,
            "description": "Extends this BoundingBox, if required, to enclose given list of {{#crossLink \"JSG.geometry.Point\"}}{{/crossLink}}s.<br/>\nThe points must be given either as an array or simply as an enumeration of points.",
            "itemtype": "method",
            "name": "enclosePoints",
            "params": [
                {
                    "name": "points",
                    "description": "An array or enumeration of points to enclose.",
                    "type": "Array|JSG.geometry.Point"
                }
            ],
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 869,
            "description": "Returns the intersection index of a line with this BoundingBox. The line is defined by given points.\nThe index is clockwise and zero based, i.e. 0 refers to the site between top-left and top-right points.\nIf no intersection can be determined -1 is returned. The intersection point itself can be retrieved by\nspecifying the optional parameter <code>interpt</code>.</br>\n<b>Note.</b> the line direction is important, because the intersection point is only valid if\nit is in the same direction!",
            "itemtype": "method",
            "name": "getIntersectionIndex",
            "params": [
                {
                    "name": "linepoint0",
                    "description": "The line start point, relative to BoundingBox parent.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "linepoint1",
                    "description": "The line end point, relative to BoundingBox parent.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "interpt",
                    "description": "An optional point which will be set to the intersection point.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "Zero based intersection index or -1 of line has no intersection with this BoundingBox.",
                "type": "Number"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 906,
            "description": "Returns the intersection point of BoundingBox center to the segment specified by index.",
            "itemtype": "method",
            "name": "getOrthoFromCenterToIndex",
            "params": [
                {
                    "name": "index",
                    "description": "The segment index as defined by {{#crossLink \"JSG.geometry.BoundingBox/getIntersectionIndex:method\"}}{{/crossLink}}.",
                    "type": "Number"
                },
                {
                    "name": "reusepoint",
                    "description": "Point allowed to be used as a return value. If provided no new Point needs to be allocated.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The intersection point.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 926,
            "description": "Checks if given line, specified by <code>linepoint0</code> and <code>linepoint1</code>, intersects\nthis BoundingBox.",
            "itemtype": "method",
            "name": "isIntersectedByLine",
            "params": [
                {
                    "name": "linepoint0",
                    "description": "The line start point, relative to BoundingBox parent.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "linepoint1",
                    "description": "The line end point, relative to BoundingBox parent.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "<code>true</code> if given line intersects this BoundingBox, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 954,
            "description": "Checks if this BoundingBox intersects with given one.",
            "itemtype": "method",
            "name": "doesIntersectWith",
            "params": [
                {
                    "name": "bbox",
                    "description": "The BoundingBox to check intersection with.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "return": {
                "description": "<code>true</code> if BoundingBoxes intersect, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\BoundingBox.js",
            "line": 1048,
            "description": "Returns the number of cached BoundingBoxes which are currently marked as used.</br>\nFor debugging purpose.",
            "itemtype": "method",
            "name": "inUse",
            "return": {
                "description": "Number of cached BoundingBoxes which are currently marked as used.",
                "type": "Number"
            },
            "class": "JSG.geometry.BoundingBox",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Constants.js",
            "line": 18,
            "description": "45 degrees in radians.",
            "itemtype": "property",
            "name": "RAD_45",
            "type": "Number",
            "static": 1,
            "final": 1,
            "class": "JSG.geometry.Constants",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Constants.js",
            "line": 27,
            "description": "135 degrees in radians.",
            "itemtype": "property",
            "name": "RAD_135",
            "type": "Number",
            "static": 1,
            "final": 1,
            "class": "JSG.geometry.Constants",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Constants.js",
            "line": 38,
            "description": "5 degrees in radians.",
            "itemtype": "property",
            "name": "RAD_5",
            "type": "Number",
            "static": 1,
            "final": 1,
            "class": "JSG.geometry.Constants",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Constants.js",
            "line": 48,
            "description": "175 degrees in radians.",
            "itemtype": "property",
            "name": "RAD_175",
            "type": "Number",
            "static": 1,
            "final": 1,
            "class": "JSG.geometry.Constants",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Matrix.js",
            "line": 20,
            "description": "Create a matrix from the given string. The string is parsed and the values are assign to the matrix. The values must\nbe comma separated. Four values must be supplied (e.g.: \"1,0,0,1\")",
            "itemtype": "method",
            "name": "fromString",
            "params": [
                {
                    "name": "str",
                    "description": "String to parse.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "New Matrix with values.",
                "type": "JSG.geometry.Matrix"
            },
            "static": 1,
            "class": "JSG.geometry.Matrix",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Matrix.js",
            "line": 42,
            "description": "Checks whether another Matrix is equal to this one.",
            "itemtype": "method",
            "name": "isEqualTo",
            "params": [
                {
                    "name": "other",
                    "description": "Matrix to compare with.",
                    "type": "JSG.geometry.Matrix"
                },
                {
                    "name": "accuracy",
                    "description": "The tolerance for comparison.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "True, if matrices are equal.",
                "type": "Boolean"
            },
            "class": "JSG.geometry.Matrix",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Matrix.js",
            "line": 61,
            "description": "Copy the matrix.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "A new allocated copy of this matrix.",
                "type": "JSG.geometry.Matrix"
            },
            "class": "JSG.geometry.Matrix",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Matrix.js",
            "line": 73,
            "description": "Get the angle defined in this matrix in radians.",
            "itemtype": "method",
            "name": "getAngle",
            "return": {
                "description": "Angle.",
                "type": "Number"
            },
            "class": "JSG.geometry.Matrix",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Matrix.js",
            "line": 87,
            "description": "Rotate the matrix by the given angle.",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "Angle to rotate the matrix by.",
                    "type": "Number"
                }
            ],
            "class": "JSG.geometry.Matrix",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Matrix.js",
            "line": 123,
            "description": "Rotate a given point using the matrix definition.",
            "itemtype": "method",
            "name": "rotatePoint",
            "params": [
                {
                    "name": "point",
                    "description": "Point to be rotated.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "Result point",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.Matrix",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Matrix.js",
            "line": 139,
            "description": "Rotate a given point using the matrix definition in negative direction.",
            "itemtype": "method",
            "name": "rotatePointInverse",
            "params": [
                {
                    "name": "point",
                    "description": "Point to be rotated.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "Result point",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.Matrix",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Matrix.js",
            "line": 155,
            "description": "Assign a new angle in radians to the matrix definition.",
            "itemtype": "method",
            "name": "setAngle",
            "params": [
                {
                    "name": "angle",
                    "description": "New angle to assign.",
                    "type": "Nummber"
                }
            ],
            "class": "JSG.geometry.Matrix",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Matrix.js",
            "line": 168,
            "description": "Resets this matrix so that it equals the identity matrix.",
            "itemtype": "method",
            "name": "setToIdentity",
            "class": "JSG.geometry.Matrix",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Matrix.js",
            "line": 181,
            "description": "Assign the values of another matrix to this matrix.",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "matrix",
                    "description": "Matrix to retrieve values from.",
                    "type": "JSG.geometry.Matrix"
                }
            ],
            "class": "JSG.geometry.Matrix",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Matrix.js",
            "line": 192,
            "description": "Return a string representation of the matrix.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "Matrix content as String separated by commas.",
                "type": "String"
            },
            "class": "JSG.geometry.Matrix",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 28,
            "description": "X-Coordinate of the point.",
            "itemtype": "property",
            "name": "x",
            "type": "{Number}",
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 34,
            "description": "Y-Coordinate of the point.",
            "itemtype": "property",
            "name": "y",
            "type": "{Number}",
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 46,
            "description": "Set x and y values.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "The new x value.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The new y value.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This point to support method concatenation.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 59,
            "description": "Assign new coordinates to the point.",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "point",
                    "description": "The point to take x, y values from.",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "This point to support method concatenation.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 71,
            "description": "Adds x and y values of specified point to this point.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "point",
                    "description": "The point to add.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "This point to support method concatenation.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 83,
            "description": "Subtracts x and y values of specified point from this point.",
            "itemtype": "method",
            "name": "subtract",
            "params": [
                {
                    "name": "point",
                    "description": "The point to subtract.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "This point to support method concatenation.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 95,
            "description": "Rotates this point by specified angle.",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle in radians.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This point to support method concatenation.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 106,
            "description": "Calculate distance of a point from the origin (0, 0).",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "Distance to origin.",
                "type": "Number"
            },
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 115,
            "description": "Calculate squared distance of a point from the origin (0, 0).",
            "itemtype": "method",
            "name": "lengthSquared",
            "return": {
                "description": "Squared distance to origin.",
                "type": "Number"
            },
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 131,
            "description": "Multiplies x and y by the given factor.",
            "itemtype": "method",
            "name": "multiply",
            "params": [
                {
                    "name": "factor",
                    "description": "Factor to multiply the coordinates of this point with.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This point to support method concatenation.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 143,
            "description": "Normalizes this Point, i.e. divides it x and y components by its length. If this Point has no\nlength, calling this method has no effect.",
            "itemtype": "method",
            "name": "normalize",
            "return": {
                "description": "This point to support method concatenation.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 158,
            "description": "Returns the dot product of this point with given point.<br/>\nA dot product value greater 0 means that both points are pointing into same direction, a value\nless than 0 means opposite direction and a value equal to 0 means that both points are\northogonal to each other.",
            "itemtype": "method",
            "name": "dotProduct",
            "params": [
                {
                    "name": "point",
                    "description": "The point to use for calculating the dot product.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The dot product value.",
                "type": "Number"
            },
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 173,
            "description": "Projects this point on the line specified by given points. <br/>\nNote that the projection might be on an extension of the line and not on the defined segment.",
            "itemtype": "method",
            "name": "projectOnLine",
            "params": [
                {
                    "name": "lp1",
                    "description": "The first line point.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "lp2",
                    "description": "The second line point.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "This point to support method concatenation.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 194,
            "description": "Calculates the distance of this point to specified line.",
            "itemtype": "method",
            "name": "distanceToLine",
            "params": [
                {
                    "name": "lp1",
                    "description": "The first line point.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "lp2",
                    "description": "The second line point.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The distance of this point to specified line.",
                "type": "Number"
            },
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 213,
            "description": "Returns the angle between this point as the x-Axis in radians.",
            "itemtype": "method",
            "name": "angle",
            "return": {
                "description": "Angle in radians from the origin"
            },
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 223,
            "description": "Translates this point by adding given x and y values.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "dx",
                    "description": "The value to add to x.",
                    "type": "Number"
                },
                {
                    "name": "dy",
                    "description": "The value to add to y.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This point to support method concatenation.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 236,
            "description": "Swaps the x and y values of this point.",
            "itemtype": "method",
            "name": "swap",
            "return": {
                "description": "This point to support method concatenation.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 248,
            "description": "Creates a copy of this point.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "A copy of this point.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 259,
            "description": "Checks if given object is equal to this point. If an accuracy is given, there equality\nis also true, if the other values are within the interval of the tolerance.",
            "itemtype": "method",
            "name": "isEqualTo",
            "params": [
                {
                    "name": "other",
                    "description": "Object to compare with.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "accuracy",
                    "description": "Tolerance for comparison.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "<code>true</code> if other is a point with same x and y value,\n         <code>false </code> otherwise."
            },
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 278,
            "description": "Checks if given Point is orthogonal to this Point relative to same origin, i.e. (0, 0).",
            "itemtype": "method",
            "name": "isOrthogonalTo",
            "params": [
                {
                    "name": "point",
                    "description": "The Point to check orthogonality with.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "<code>true</code> if other is Point is orthogonal to this one, <code>false </code> otherwise."
            },
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 290,
            "description": "Checks if given Point is parallel to this Point relative to same origin, i.e. (0, 0).",
            "itemtype": "method",
            "name": "isParallelTo",
            "params": [
                {
                    "name": "point",
                    "description": "The Point to check parallelism with.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "<code>true</code> if other is Point is parallel to this one, <code>false </code> otherwise."
            },
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 302,
            "description": "Returns a string representation of this point: (x,y)",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 311,
            "description": "Save the point in XML format.",
            "itemtype": "method",
            "name": "saveXML",
            "params": [
                {
                    "name": "name",
                    "description": "Name of created xml tag.",
                    "type": "String"
                },
                {
                    "name": "xml",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 324,
            "description": "Read the point from an XML Node.",
            "itemtype": "method",
            "name": "readXML",
            "params": [
                {
                    "name": "Node",
                    "description": "Node to read the point from.",
                    "type": "Node"
                }
            ],
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Point.js",
            "line": 409,
            "description": "Returns the number of cached Points which are currently marked as used.<br/>\nFor debugging purpose.",
            "itemtype": "method",
            "name": "inUse",
            "return": {
                "description": "Number of cached Points which are currently marked as used.",
                "type": "Number"
            },
            "class": "JSG.geometry.Point",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 31,
            "description": "Copy point list.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "A copy of this point list.",
                "type": "JSG.geometry.PointList"
            },
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 43,
            "description": "Calls given function on all {@link JSG.geometry.Point}s of this list.",
            "example": [
                "\n    pointlist.forEach(function(point, index) {\n        //...do something with point...\n    });"
            ],
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "func",
                    "description": "The function to call on each point.",
                    "type": "Function"
                }
            ],
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 61,
            "description": "Save the PointList in XML format.",
            "itemtype": "method",
            "name": "saveXML",
            "params": [
                {
                    "name": "name",
                    "description": "Name for xml tag.",
                    "type": "String"
                },
                {
                    "name": "writer",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 82,
            "description": "Delete all points in PointList.",
            "itemtype": "method",
            "name": "clear",
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 91,
            "description": "Gives access to the point array.",
            "itemtype": "method",
            "name": "getPoints",
            "return": {
                "description": "Array with {@link JSG.geometry.Point}.",
                "type": "Array"
            },
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 101,
            "description": "Return the point list length.",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "Number of points in this list.",
                "type": "Number"
            },
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 111,
            "description": "Set new point list.",
            "itemtype": "method",
            "name": "setPoints",
            "params": [
                {
                    "name": "points",
                    "description": "Array with new {@link JSG.geometry.Point}s.",
                    "type": "Array"
                }
            ],
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 122,
            "description": "Fill with this point list with points of other point list.",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "pointList",
                    "description": "Another PointList.",
                    "type": "JSG.geometriy.PointList"
                }
            ],
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 140,
            "description": "Get point at specified index.",
            "itemtype": "method",
            "name": "getPointAt",
            "params": [
                {
                    "name": "index",
                    "description": "Index of item to be retrieved.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Point at index.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 151,
            "description": "Checks if PointList is empty.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "<code>true</code> if PointList has at least one point,\n         <code>false </code> otherwise."
            },
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 162,
            "description": "Set point coordinates at index",
            "itemtype": "method",
            "name": "setPointAtTo",
            "params": [
                {
                    "name": "index",
                    "description": "Index of point to be changed.",
                    "type": "Number"
                },
                {
                    "name": "point",
                    "description": "The point to take the coordinates from",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 173,
            "description": "Set point coordinates at index",
            "itemtype": "method",
            "name": "setPointAt",
            "params": [
                {
                    "name": "index",
                    "description": "Index of point to be changed."
                },
                {
                    "name": "x",
                    "description": "New x-coordinate.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "New y-coordinate.",
                    "type": "Number"
                }
            ],
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 187,
            "description": "Add a copy of given point to PointList",
            "itemtype": "method",
            "name": "addPoint",
            "params": [
                {
                    "name": "point",
                    "description": "New point",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 197,
            "description": "Adds a new point to PointList at the given index. The current point at index and all subsequent\npoints are moved to the right, i.e. one is added to their indices. If specified index is less than\nzero calling this method has no effect. If it is equal or greater than the current size of the\nlist, the given point is simply pushed at the end of this list.",
            "itemtype": "method",
            "name": "addPointAt",
            "params": [
                {
                    "name": "index",
                    "description": "the index of the new point in PointList",
                    "type": "Number"
                },
                {
                    "name": "point",
                    "description": "New point",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 217,
            "description": "Add array of points to PointList",
            "itemtype": "method",
            "name": "addPoints",
            "params": [
                {
                    "name": "points",
                    "description": "Array of {@link JSG.geometry.Point}s to be added.",
                    "type": "Array"
                }
            ],
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 231,
            "description": "Remove point at index.",
            "itemtype": "method",
            "name": "removePointAt",
            "params": [
                {
                    "name": "index",
                    "description": "Index of point to be removed.",
                    "type": "Number"
                }
            ],
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 243,
            "description": "Keeps the specified number of points within this list. Afterwards the list has exactly count\nitems, i.e. list#size() == count.",
            "itemtype": "method",
            "name": "keepPoints",
            "params": [
                {
                    "name": "count",
                    "description": "The number of points to keep.",
                    "type": "Number"
                }
            ],
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 259,
            "description": "Returns the center of the bounding rectangle of this PointList.",
            "itemtype": "method",
            "name": "getCenter",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "The point to reuse",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "Center point.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 274,
            "description": "Rotates all points around given center by specified angle (in radiant)",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "Rotation angle.",
                    "type": "Number"
                },
                {
                    "name": "center",
                    "description": "Point to rotate around.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 289,
            "description": "Scale all points by given factors.",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "sX",
                    "description": "Factor for x-coordinates.",
                    "type": "Number"
                },
                {
                    "name": "sY",
                    "description": "Factor for y-coordinates.",
                    "type": "Number"
                }
            ],
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 305,
            "description": "Translate all points by given point coordinate. Translate adds the given coordinate to all points in the PointList.",
            "itemtype": "method",
            "name": "translateTo",
            "params": [
                {
                    "name": "point",
                    "description": "Coordinates to translate by.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 315,
            "description": "Translate all points by given coordinates. Translate adds the given coordinates to all points in the PointList.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "dX",
                    "description": "X-Coordinate to translate by.",
                    "type": "Number"
                },
                {
                    "name": "dY",
                    "description": "Y-Coordinate to translate by.",
                    "type": "Number"
                }
            ],
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 387,
            "description": "Checks whether a point lies inside the polygon described by the PointList",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "point",
                    "description": "Coordinates to check.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "<code>true</code> if point lies inside polygon,\n         <code>false </code> otherwise."
            },
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 399,
            "description": "Returns the smallest distance from the point to the polyline",
            "itemtype": "method",
            "name": "distance",
            "params": [
                {
                    "name": "point",
                    "description": "Coordinates to check.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "closed",
                    "description": "Polyline is closed.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "<code>true</code> if point lies on polyline,\n         <code>false </code> otherwise."
            },
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 433,
            "description": "Return the distance of any point in the point list from the given point, if within a given tolerance. The\nmethod also checks as an option, if the point is close to the center of the imaginary line between two points.",
            "itemtype": "method",
            "name": "getOffsetFromPoint",
            "params": [
                {
                    "name": "point",
                    "description": "Point to check for.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "tolerance",
                    "description": "Tolerance to check within.",
                    "type": "Number"
                },
                {
                    "name": "closed",
                    "description": "Emulate closed polygon, if true.",
                    "type": "Boolean"
                },
                {
                    "name": "center",
                    "description": "If true, checks also, if the point is close to the middle of a polyline segment.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The offset of the point and the point being close or undefined, if no point close.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 475,
            "description": "Return the distance of any line or segment deducted from the point list from the given point, if within a given tolerance.",
            "itemtype": "method",
            "name": "getOffsetFromSegment",
            "params": [
                {
                    "name": "point",
                    "description": "Point to check for.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "pointGrid",
                    "description": "Grid point to align offset to.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "tolerance",
                    "description": "Tolerance to check within.",
                    "type": "Number"
                },
                {
                    "name": "closed",
                    "description": "Emulate closed polygon, if true.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The offset of the point and the point being close or undefined, if no point close to the segment.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\PointList.js",
            "line": 524,
            "description": "Returns number of points in this list.",
            "itemtype": "method",
            "name": "size",
            "return": {
                "description": "Number of points.",
                "type": "Number"
            },
            "class": "JSG.geometry.PointList",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 28,
            "description": "X-Coordinate of the rectangle.",
            "itemtype": "property",
            "name": "[x=0]",
            "type": "Number",
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 33,
            "description": "Y-Coordinate of the rectangle.",
            "itemtype": "property",
            "name": "[y=0]",
            "type": "Number",
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 38,
            "description": "Width of the rectangle.",
            "itemtype": "property",
            "name": "[width=0]",
            "type": "Number",
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 43,
            "description": "Height of the rectangle.",
            "itemtype": "property",
            "name": "[height=0]",
            "type": "Number",
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 54,
            "description": "Resets this Rectangle, i.e. sets all values to 0.\nCalling this method is equal to calling <code>set(0, 0, 0, 0)</code>.",
            "itemtype": "method",
            "name": "reset",
            "return": {
                "description": "This rectangle to support method concatenation.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 66,
            "description": "Set rectangle coordinates.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "X Coordinate of the rectangle.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y Coordinate of the rectangle.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Width of the rectangle.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Height of the rectangle.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This rectangle to support method concatenation.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 84,
            "description": "Set rectangle coordinates using a {@link JSG.geometry.Rectangle} obect.",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "rect",
                    "description": ""
                }
            ],
            "return": {
                "description": "This rectangle to support method concatenation.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 95,
            "description": "Sets rectangle width and height.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "Width of the rectangle.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Height of the rectangle.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This rectangle to support method concatenation.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 109,
            "description": "Returns the current location of this Rectangle as point.",
            "itemtype": "method",
            "name": "getLocation",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The location point.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 122,
            "description": "Sets the location of this Rectangle, i.e. its x and y values, to the specified point.",
            "itemtype": "method",
            "name": "setLocationTo",
            "params": [
                {
                    "name": "The",
                    "description": "new location point.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "This rectangle to support method concatenation.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 132,
            "description": "Sets the x and y values of this Rectangle to the specified values.",
            "itemtype": "method",
            "name": "setLocation",
            "params": [
                {
                    "name": "x",
                    "description": "The new x coordinate of this Rectangle.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The new y coordinate of this Rectangle.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This rectangle to support method concatenation.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 146,
            "description": "Compares the coordinates of the rectangle.",
            "itemtype": "method",
            "name": "isEqualTo",
            "params": [
                {
                    "name": "rect",
                    "description": "Rectangle to compare coordinates with."
                },
                {
                    "name": "accuracy",
                    "description": "Optional tolerance for comparison.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "True, if rectangle coordinates are equal, otherwise false.",
                "type": "Boolean"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 165,
            "description": "Calculates the right coordinate of the rectangle.",
            "itemtype": "method",
            "name": "getRight",
            "return": {
                "description": "Coordinate of right side.",
                "type": "Number"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 175,
            "description": "Calculates the bottom coordinate of the rectangle.",
            "itemtype": "method",
            "name": "getBottom",
            "return": {
                "description": "Coordinate of bottom side.",
                "type": "Number"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 185,
            "description": "Calculates the center point of the rectangle.",
            "itemtype": "method",
            "name": "getCenter",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "The point to reuse",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "Resulting center point.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 198,
            "description": "Calculates the horizontal center of the rectangle.",
            "itemtype": "method",
            "name": "getCenterX",
            "return": {
                "description": "X-Coordinate of the center of the rectangle.",
                "type": "Number"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 208,
            "description": "Calculates the vertical center of the rectangle.",
            "itemtype": "method",
            "name": "getCenterY",
            "return": {
                "description": "Y-Coordinate of the center of the rectangle.",
                "type": "Number"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 218,
            "description": "Copies the rectangle and returns a new rectangle.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "Copy of this rectangle.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 230,
            "description": "Checks whether the given coordinates lie within the rectangle.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "x",
                    "description": "X-Coordinate to check for.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y-Coordinate to check for.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Width of coordinate space.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "\"undefined\""
                },
                {
                    "name": "height",
                    "description": "Height of coordinate space.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "\"undefined\""
                }
            ],
            "return": {
                "description": "true, if coordinates lie within the rectangle, else false",
                "type": "Boolean"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 251,
            "description": "Checks whether the given point lies within the rectangle.",
            "itemtype": "method",
            "name": "containsPoint",
            "params": [
                {
                    "name": "p",
                    "description": "Point to check for.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "true, if point lies within the rectangle, else false",
                "type": "Boolean"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 262,
            "description": "Checks whether the given rectangle lies within this rectangle.",
            "itemtype": "method",
            "name": "containsRect",
            "params": [
                {
                    "name": "rect",
                    "description": "Rectangle to check for.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "return": {
                "description": "true, if rectangle completely lies within the rectangle, else false",
                "type": "Boolean"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 273,
            "description": "Evaluates if another rectangle intersects with this rectangle.",
            "itemtype": "method",
            "name": "intersect",
            "params": [
                {
                    "name": "rect",
                    "description": "Rectangle to evaluate.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "return": {
                "description": "True, if rectangles intersect, otherwise false.",
                "type": "Boolean"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 284,
            "description": "Evaluates if a BoundingBox is completely contained in this rectangle.",
            "itemtype": "method",
            "name": "containsBBox",
            "params": [
                {
                    "name": "bbox",
                    "description": "BoundingBox to check.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "return": {
                "description": "True, if rectangle contains BoundingBox, otherwise false.",
                "type": "Boolean"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 303,
            "description": "Checks if at least one corner point of given <code>BoundingBox</code> intersects with this rectangle.",
            "itemtype": "method",
            "name": "intersectedByBBox",
            "params": [
                {
                    "name": "bbox",
                    "description": "BoundingBox to check.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "return": {
                "description": "<code>true</code> if at least one corner point intersects, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 323,
            "description": "Combines this rectangle with the given rectangle to form the union of both rectangles.",
            "itemtype": "method",
            "name": "union",
            "params": [
                {
                    "name": "rect",
                    "description": "Rectangle to union with this rectangle.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "return": {
                "description": "This rectangle to support method concatenation.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 341,
            "description": "Calculates the intersection or the common rectangle area of this and another rectangle, if there is\none, otherwise undefined.",
            "itemtype": "method",
            "name": "intersection",
            "params": [
                {
                    "name": "rect",
                    "description": "Result Rectangle, if existing.",
                    "type": "JSG.geometry.Rectangle"
                },
                {
                    "name": "reuserect",
                    "description": "A rectangle to reuse, if not supplied a new one will be created.",
                    "type": "JSG.geometry.Rectangle",
                    "optional": true
                }
            ],
            "return": {
                "description": "The intersection rectangle.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 364,
            "description": "Combines this rectangle with the given rectangle to form the union of both rectangles, but only in horizontal direction.",
            "itemtype": "method",
            "name": "unionX",
            "params": [
                {
                    "name": "rect",
                    "description": "Rectangle to union with this rectangle.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "return": {
                "description": "This rectangle to support method concatenation.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 378,
            "description": "Combines this rectangle with the given rectangle to form the union of both rectangles, but only in vertical direction.",
            "itemtype": "method",
            "name": "unionY",
            "params": [
                {
                    "name": "rect",
                    "description": "Rectangle to union with this rectangle.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "return": {
                "description": "This rectangle to support method concatenation.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 392,
            "description": "Reduce the size of this rectangle by the given amount.",
            "itemtype": "method",
            "name": "reduceBy",
            "params": [
                {
                    "name": "amount",
                    "description": "Amount to subtract from the rectangle dimensions"
                }
            ],
            "return": {
                "description": "This rectangle to support method concatenation.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 403,
            "description": "Expand the size of this rectangle by the given amount.",
            "itemtype": "method",
            "name": "expandBy",
            "params": [
                {
                    "name": "amount",
                    "description": "Amount to add to the rectangle dimensions"
                }
            ],
            "return": {
                "description": "This rectangle to support method concatenation.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 418,
            "description": "Move the rectangle by the given coordinates.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "dx",
                    "description": "X-Coordinate to move the rectangle by.",
                    "type": "Number"
                },
                {
                    "name": "dy",
                    "description": "Y-Coordinate to move the rectangle by.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This rectangle to support method concatenation.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 432,
            "description": "Move the rectangle by the given point.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "p",
                    "description": "Point to move the rectangle by.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "This rectangle to support method concatenation.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 445,
            "description": "Swaps this rectangle, i.e. its x and y values as well as its width and height values are switched.",
            "itemtype": "method",
            "name": "swap",
            "return": {
                "description": "This rectangle to support method concatenation.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 461,
            "description": "Sort the given rectangle coordinates",
            "itemtype": "method",
            "name": "sort",
            "params": [
                {
                    "name": "rect",
                    "description": ""
                }
            ],
            "return": {
                "description": "This rectangle to support method concatenation.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 487,
            "description": "Convert rectangle to a string representation.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "A string with the properties of the Rectangle.",
                "type": "String"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 497,
            "description": "Converts rectangle to a BoundingBox object.",
            "itemtype": "method",
            "name": "toBoundingBox",
            "params": [
                {
                    "name": "reusebox",
                    "description": "An optional bounding box to reuse. If not provided a new one will be created.",
                    "type": "JSG.geometry.BoundingBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "The newly created BoundingBox or the provided <code>reusebox</code>.",
                "type": "JSG.geometry.BoundingBox"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 514,
            "description": "Get a polygon representation of the rectangle consisting of 4 points.",
            "itemtype": "method",
            "name": "getPoints",
            "params": [
                {
                    "name": "reusepoints",
                    "description": "an optional array of 4 {{#crossLink \"JSG.geometry.Point\"}}{{/crossLink}}s to reuse.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array with {{#crossLink \"JSG.geometry.Point\"}}{{/crossLink}}s.",
                "type": "Array"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 533,
            "description": "Read rectangle from a xml node.",
            "itemtype": "method",
            "name": "readXML",
            "params": [
                {
                    "name": "node",
                    "description": "Node to read from.",
                    "type": "Node"
                }
            ],
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Rectangle.js",
            "line": 610,
            "description": "Returns the number of cached Rectangles which are currently marked as used.</br>\nFor debugging purpose.",
            "itemtype": "method",
            "name": "inUse",
            "return": {
                "description": "Number of cached Rectangles which are currently marked as used.",
                "type": "Number"
            },
            "class": "JSG.geometry.Rectangle",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 22,
            "description": "Convert degrees to radians",
            "itemtype": "method",
            "name": "toRadians",
            "params": [
                {
                    "name": "degrees",
                    "description": "Degrees to convert.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Result in radians.",
                "type": "Number"
            },
            "static": 1,
            "class": "JSG.geometry.Utils",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 34,
            "description": "Convert radians to degrees.",
            "static": 1,
            "itemtype": "method",
            "name": "toDegrees",
            "params": [
                {
                    "name": "radians",
                    "description": "Radians to convert.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Result in degrees.",
                "type": "Number"
            },
            "class": "JSG.geometry.Utils",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 47,
            "description": "Round a number to the next integer",
            "itemtype": "method",
            "name": "round",
            "params": [
                {
                    "name": "number",
                    "description": "Number to be rounded.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Rounded number.",
                "type": "Number"
            },
            "class": "JSG.geometry.Utils",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 67,
            "description": "Calculates the vertical distance between a point and a line.",
            "itemtype": "method",
            "name": "getLinePointDistance",
            "params": [
                {
                    "name": "pointLine1",
                    "description": "Start point of the line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "pointLine2",
                    "description": "End point of the line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "point",
                    "description": "Point to calculate distance for.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "Distance of the point from the line.",
                "type": "Number"
            },
            "static": 1,
            "class": "JSG.geometry.Utils",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 112,
            "description": "Evaluates the offset between a point and a line.",
            "itemtype": "method",
            "name": "getLinePointOffset",
            "params": [
                {
                    "name": "pointLine1",
                    "description": "Start point of line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "pointLine2",
                    "description": "End point of line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "point",
                    "description": "Point to evaluate.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "reusepoint",
                    "description": "A point to reuse for returned offset. If not provided a new one is created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "Offset with x and y values from the Point to the Line.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.geometry.Utils",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 158,
            "description": "Calculates the orthogonal projection point of given point on the line defined by linepoint1 and linepoint2.\nNote: no new point is created, the projection point is stored in specified point.",
            "itemtype": "method",
            "name": "getOrthogonalProjectionOfPoint",
            "params": [
                {
                    "name": "point",
                    "description": "The point to calculate the projection of.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "linepoint1",
                    "description": "The first line point.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "linepoint2",
                    "description": "The second line point.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The passed point representing the orthogonal projection.",
                "type": "JSG.geometry.Point"
            },
            "static": 1,
            "class": "JSG.geometry.Utils",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 198,
            "description": "Checks if the two lines, specified by given points, are parallel. </br>",
            "itemtype": "method",
            "name": "areLinesParallel",
            "params": [
                {
                    "name": "l1start",
                    "description": "The start point of first line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "l1end",
                    "description": "The end point of first line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "l2start",
                    "description": "The start point of second line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "l2end",
                    "description": "The end point of second line.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "Returns <code>true</code> if both lines are parallel otherwise <code>false</code>.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.geometry.Utils",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 215,
            "description": "Checks if the two lines, specified by given points, are on top of each other. </br>\nNote: lines which are on top of each other are of course parallel.",
            "itemtype": "method",
            "name": "areLinesOnTop",
            "params": [
                {
                    "name": "l1start",
                    "description": "The start point of first line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "l1end",
                    "description": "The end point of first line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "l2start",
                    "description": "The start point of second line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "l2end",
                    "description": "The end point of second line.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "Returns <code>true</code> if both lines are on top of each other or <code>false</code> if not.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.geometry.Utils",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 236,
            "description": "Checks if the two lines, specified by given points, are parallel. </br>\nThis is actually same as calling ({{#crossLink \"JSG.geometry.Utils/areLinesParallel:method\"}}{{/crossLink}})\nwith (0,0) as start point of each line.",
            "itemtype": "method",
            "name": "arePointsParallel",
            "params": [
                {
                    "name": "p1",
                    "description": "The end point of first line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "p2",
                    "description": "The end point of second line.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "Returns <code>true</code> if both lines are parallel otherwise <code>false</code>.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.geometry.Utils",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 276,
            "description": "Calculates the square of the distance between two points.",
            "itemtype": "method",
            "name": "getSquaredDistance",
            "params": [
                {
                    "name": "point1",
                    "description": "First point.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "point2",
                    "description": "Second point.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "Calculated square of the distance.",
                "type": "Number"
            },
            "static": 1,
            "class": "JSG.geometry.Utils",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 293,
            "description": "Calculates the length of a line defined by two points.",
            "itemtype": "method",
            "name": "getLineLength",
            "params": [
                {
                    "name": "pointLine1",
                    "description": "Start point of the line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "pointLine2",
                    "description": "End point of the line.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "Length of the line.",
                "type": "Number"
            },
            "static": 1,
            "class": "JSG.geometry.Utils",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 307,
            "description": "Calculates the angle between to crossing lines in radians.",
            "itemtype": "method",
            "name": "getAngleBetweenLines",
            "params": [
                {
                    "name": "p1",
                    "description": "Point to define one line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "p2",
                    "description": "Point to define the second line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "pCross",
                    "description": "Cross point of the two lines. If not specified (0, 0) is taken.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "Angle between the lines in radians.",
                "type": "Number"
            },
            "static": 1,
            "class": "JSG.geometry.Utils",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 328,
            "description": "Calculates the angle of a line in relation to a horizontal line in radians.",
            "itemtype": "method",
            "name": "getAngleBetweenPoints",
            "params": [
                {
                    "name": "p1",
                    "description": "Point to define one line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "p2",
                    "description": "Point to define the second line.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "Angle between the lines in radians.",
                "type": "Number"
            },
            "static": 1,
            "class": "JSG.geometry.Utils",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 341,
            "description": "Rotate a point around a center using the given angle.",
            "itemtype": "method",
            "name": "getRotatedPoint",
            "params": [
                {
                    "name": "rotate",
                    "description": "To be rotated point.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "center",
                    "description": "Rotation center.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "angle",
                    "description": "Angle in radians to rotate by.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The rotated point.",
                "type": "JSG.geometry.Point"
            },
            "static": 1,
            "class": "JSG.geometry.Utils",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 360,
            "description": "Rotates the given point by specified angle around its origin.</br>\nNote: no rotation is done if specified angle is 0.",
            "itemtype": "method",
            "name": "rotatePoint",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "angle",
                    "description": "The angle. It must be given in radians.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Passed in and now rotated point.",
                "type": "JSG.geometry.Point"
            },
            "static": 1,
            "class": "JSG.geometry.Utils",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 383,
            "description": "Rotates given point around specified center using the given angle. The difference to\ngetRotatedPoint() is that this function works on given point directly without creating a new one.",
            "itemtype": "method",
            "name": "rotatePointAround",
            "params": [
                {
                    "name": "center",
                    "description": "Rotation center.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "rotate",
                    "description": "To be rotated point.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "angle",
                    "description": "Angle in radians to rotate by.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The passed in and now rotated point.",
                "type": "JSG.geometry.Point"
            },
            "static": 1,
            "class": "JSG.geometry.Utils",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 408,
            "description": "Checks whether a point lies within a polygon.",
            "itemtype": "method",
            "name": "isPointInPolygon",
            "params": [
                {
                    "name": "points",
                    "description": "Array of points that describe the polygon.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "p",
                    "description": "Point to check for.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "Returns true, if point lies within the polygon, else false.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.geometry.Utils",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 437,
            "description": "Evaluates whether the squared distance from a point to a line.",
            "itemtype": "method",
            "name": "isPointOnLineSegment",
            "params": [
                {
                    "name": "point",
                    "description": "Point to check for.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "linestart",
                    "description": "Start point of line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "lineend",
                    "description": "End point of line.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "Squared distance from point to line.",
                "type": "Number"
            },
            "class": "JSG.geometry.Utils",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 474,
            "description": "Checks if given point instance points into same direction as defined by specified line.</br>\n<b>Note:</b> this does not mean that the point is on the line! Rather it means that it points\nin line direction +/- 90 degrees (exclusively) in respect to linestart.",
            "itemtype": "method",
            "name": "isPointInDirectionOfLine",
            "params": [
                {
                    "name": "point",
                    "description": "The point to check.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "linestart",
                    "description": "The line start point.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "lineend",
                    "description": "The line end point.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "<code>true</code> if given point points into the same direction as specified\nline, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.geometry.Utils",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\geometry\\Utils.js",
            "line": 506,
            "description": "Evaluates whether two lines intersect and if so, fill the intersection point with the coordinates of the intersection.",
            "itemtype": "method",
            "name": "getIntersectionOfLines",
            "params": [
                {
                    "name": "l1start",
                    "description": "Start point of first line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "l1end",
                    "description": "End point of first line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "l2start",
                    "description": "Start point of second line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "l2end",
                    "description": "End point of second line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "intersectionPoint",
                    "description": "Point, where the lines intersect, if available.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "True,",
                    "description": "if the two lines are treated as endless lines by extending them or false, if lines are completely defined using the start and end point.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "True, if lines intersect, otherwise false.",
                "type": "Boolean"
            },
            "class": "JSG.geometry.Utils",
            "module": "JSG.geometry",
            "namespace": "JSG.geometry"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 43,
            "description": "The attribute path delimiter definition.<br/>\n<b>Note:</b> the delimiter should not be used inside attribute name!",
            "itemtype": "property",
            "name": "PATH_DELIMITER",
            "type": "{String}",
            "static": 1,
            "final": 1,
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 53,
            "description": "The complete class name, i.e. including namespace.",
            "itemtype": "property",
            "name": "CLASSNAME",
            "type": "{String}",
            "static": 1,
            "final": 1,
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 63,
            "description": "Shared reference to companion AttributeUtils class.",
            "itemtype": "property",
            "name": "Utils",
            "type": "{JSG.graph.attr.AttributeUtils}",
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 71,
            "description": "Returns the complete class String of this Attribute instance. The class String is the name\nof the Attribute instance including its complete path, e.g. the class String of this general Attribute is\n<code>JSG.graph.attr.Attribute</code>.<br/>",
            "itemtype": "method",
            "name": "getClassString",
            "return": {
                "description": "The complete class String of this Attribute instance.",
                "type": "String"
            },
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 83,
            "description": "Returns the path of this Attribute.<br/>\nIf this attribute does not belong to an {{#crossLink \"JSG.graph.attr.AttributeList\"}}{{/crossLink}}\nthe path is simply the unique name of this attribute. Otherwise the path is the concatenation of the\nAttributeList path and the attribute name.",
            "itemtype": "method",
            "name": "getPath",
            "return": {
                "description": "The path of this Attribute.",
                "type": "String"
            },
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 100,
            "description": "Returns the unique name of this Attribute.<br/>",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "The Attribute name.",
                "type": "String"
            },
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 110,
            "description": "Internal method to set the Attribute name.",
            "itemtype": "method",
            "name": "_setName",
            "params": [
                {
                    "name": "name",
                    "description": "The new Attribute name.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 123,
            "description": "Returns the display name to use for this Attribute.<br/>\nNote: in contrast to the Attribute name the display name does not need to be unique and might\nchange.",
            "itemtype": "method",
            "name": "getDisplayName",
            "return": {
                "description": "The display name to use for this Attribute.",
                "type": "String"
            },
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 134,
            "description": "Sets the display name to use for this Attribute.<br/>\nNote: in contrast to the Attribute name the display name does not need to be unique and might\nchange.",
            "itemtype": "method",
            "name": "setDisplayName",
            "params": [
                {
                    "name": "name",
                    "description": "The new display name.",
                    "type": "String"
                }
            ],
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 146,
            "description": "Checks if this Attribute is marked as transient.<br/>\nNote: Attributes marked as transient are not saved to XML.",
            "itemtype": "method",
            "name": "isTransient",
            "return": {
                "description": "<code>true</code> if this Attribute is marked as transient, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 157,
            "description": "Marks this Attribute as transient or not.<br/>\nNote: Attributes marked as transient are not saved to XML.",
            "itemtype": "method",
            "name": "setTransient",
            "params": [
                {
                    "name": "transient",
                    "description": "Set to <code>true</code> to mark this Attribute as transient, to <code>false</code> otherwise.",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 168,
            "description": "Creates a new Attribute instance. <br/>\nThis method is part of our copy-pattern, in which a copy is initially created by\n<code>newInstance</code>. Therefore subclasses should overwrite this method.",
            "itemtype": "method",
            "name": "newInstance",
            "return": {
                "description": "A new Attribute instance.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 179,
            "description": "Creates a copy of this Attribute.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "A copy of this Attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 195,
            "description": "Returns the AttributeList which contains this Attribute or <code>undefined</code> if this Attribute\ndoes not belong to an AttributeList",
            "itemtype": "method",
            "name": "getAttributeList",
            "return": {
                "description": "The AttributeList this Attribute belongs to\nor <code>undefined</code>",
                "type": "JSG.graph.attr.AttributeList"
            },
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 207,
            "description": "Returns direct access to the Attributes value Expression.<br/>\nSee {{#crossLink \"JSG.graph.attr.Attribute/getValue:method\"}}{{/crossLink}} to\nget the value defined by this Expression.",
            "itemtype": "method",
            "name": "getExpression",
            "return": {
                "description": "The current value Expression.",
                "type": "JSG.graph.expr.Expression"
            },
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 219,
            "description": "Returns the Attribute value which is defined by the Attributes value Expression.<br/>\nSee {{#crossLink \"JSG.graph.attr.Attribute/getExpression:method\"}}{{/crossLink}} to\nget the Expression which defines the Attribute value.",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "The current value.",
                "type": "Object"
            },
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 232,
            "description": "Sets the Attributes value Expression.<br/>\nConsider that if this attribute belongs to an {{#crossLink \"JSG.graph.attr.AttributeList\"}}{{/crossLink}} which\nis part of a GraphItem attributes hierarchy, a corresponding {{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}}\nis raised.<br/>",
            "itemtype": "method",
            "name": "setExpressionOrValue",
            "params": [
                {
                    "name": "value",
                    "description": "The new value or Expression for this Attribute.",
                    "type": "JSG.graph.expr.Expression | Object"
                }
            ],
            "return": {
                "description": "Returns <code>true</code> if value was changed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 247,
            "description": "Checks if given expression or value is different from current attribute value/expression.<br/>\n<b>Note:</b> the passed expression or value must be valid otherwise always <code>false</code> is\nreturned.",
            "itemtype": "method",
            "name": "hasDifferentValue",
            "params": [
                {
                    "name": "value",
                    "description": "The value or expression to check.",
                    "type": "JSG.graph.expr.Expression | Object"
                }
            ],
            "return": {
                "description": "Returns <code>true</code> if value or expression is different from current one, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 260,
            "description": "Replaces currently used value Expression with specified one.",
            "itemtype": "method",
            "name": "replaceValueExpression",
            "params": [
                {
                    "name": "newexpr",
                    "description": "The new Expression to use for this Attribute value.",
                    "type": "JSG.graph.expr.Expression"
                }
            ],
            "return": {
                "description": "<code>true</code> if new Expression was set, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 275,
            "description": "Resets this Attribute with given default value. If no value is passed, this implementation does nothing.<br/>\nNote: this method can be overwritten by subclasses to implement custom behavior.",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "defValue",
                    "description": "An optional default value to reset this Attribute with.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 289,
            "description": "Evaluates this Attribute using an optional GraphItem.",
            "itemtype": "method",
            "name": "evaluate",
            "params": [
                {
                    "name": "item",
                    "description": "Used to resolve references within Attribute value Expression.",
                    "type": "JSG.graph.model.GraphItem",
                    "optional": true
                }
            ],
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 303,
            "description": "Resolves parent references within the attribute's value Expression.<br/>\nThe passed GraphItem is used to resolve parent reference and the optional <code>doRemove</code>\nflag can be used to clear the complete Expression formula.",
            "itemtype": "method",
            "name": "resolveParentReference",
            "params": [
                {
                    "name": "item",
                    "description": "Used to resolve parent reference.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "doRemove",
                    "description": "Specify <code>true</code> to remove value Expression formula completely.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 316,
            "description": "Saves this Attribute to XML.<br/>\n<b>Note:</b> custom attributes should overwrite\n{{#crossLink \"JSG.graph.attr.Attribute/_saveTagAttributes:method\"}}{{/crossLink}} and\n{{#crossLink \"JSG.graph.attr.Attribute/_saveValue:method\"}}{{/crossLink}} to save\ntheir value.",
            "itemtype": "method",
            "name": "saveXML",
            "params": [
                {
                    "name": "file",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "return": {
                "description": "<code>true</code> if attribute was save, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 330,
            "description": "Performs the actual saving of this Attribute.<br/>\nUsually it is not required to overwrite this method. Instead subclasses should overwrite\n{{#crossLink \"JSG.graph.attr.Attribute/_saveTagAttributes:method\"}}{{/crossLink}} and\n{{#crossLink \"JSG.graph.attr.Attribute/_saveValue:method\"}}{{/crossLink}} to\nsave Attribute value.",
            "itemtype": "method",
            "name": "_saveXML",
            "params": [
                {
                    "name": "tag",
                    "description": "The Attribute tag name.",
                    "type": "String"
                },
                {
                    "name": "file",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "return": {
                "description": "<code>true</code> if attribute was save, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 355,
            "description": "Writes optional XML attributes to the start tag for this Attribute. The saved XML attributes are\nused in {{#crossLink \"JSG.graph.attr.Attribute/_readTagAttributes:method\"}}{{/crossLink}} to\ncreate an instance of this attribute from XML.<br/>\nBy default this method writes the display name, the class name and the type of this Attribute.<br/>\nSubclasses might overwrite to customize saving.",
            "itemtype": "method",
            "name": "_saveTagAttributes",
            "params": [
                {
                    "name": "xml",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 370,
            "description": "Writes given tag and value to XML.",
            "itemtype": "method",
            "name": "_writeAttribute",
            "params": [
                {
                    "name": "tag",
                    "description": "An XML tag name.",
                    "type": "String"
                },
                {
                    "name": "valuestr",
                    "description": "The value to write as string.",
                    "type": "String"
                },
                {
                    "name": "xml",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 385,
            "description": "This method is called before the display name field is written to XML.<br/>\nSubclasses can override this method to decide if this field should be written or not. Default\nimplementation simply returns <code>true</code>.",
            "itemtype": "method",
            "name": "doSaveDisplayName",
            "return": {
                "description": "<code>true</code> to save display name to XML, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 397,
            "description": "This method is called before the class name field is written to XML.<br/>\nSubclasses can override this method to decide if this field should be written or not. Default\nimplementation simply checks current class name against\n{{#crossLink \"JSG.graph.attr.Attribute/CLASSNAME:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "doSaveClassName",
            "return": {
                "description": "<code>true</code> to save class name to XML, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 411,
            "description": "Saves the Attributes value to XML.<br/>\nSubclasses can overwrite to perform custom value save.",
            "itemtype": "method",
            "name": "_saveValue",
            "params": [
                {
                    "name": "file",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "return": {
                "description": "<code>true</code> if a value was written, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 425,
            "description": "Reads Attribute content from given XML Node.<br/>\n<b>Note:</b> custom attributes should overwrite <code>_readValue</code> to read their custom value.",
            "itemtype": "method",
            "name": "readXML",
            "params": [
                {
                    "name": "xmlnode",
                    "description": "XML node to read from.",
                    "type": "Node"
                }
            ],
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 437,
            "description": "Reads the attributes of the main XML tag for this Attribute.<br/>\nSubclasses can overwrite to perform custom reading.",
            "itemtype": "method",
            "name": "_readTagAttributes",
            "params": [
                {
                    "name": "xmlnode",
                    "description": "XML node to read from.",
                    "type": "Node"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Attribute.js",
            "line": 449,
            "description": "Reads the Attribute value from XML.<br/>\nSubclasses can overwrite to perform custom reading.",
            "itemtype": "method",
            "name": "_readValue",
            "params": [
                {
                    "name": "xmlnode",
                    "description": "XML node to read from.",
                    "type": "Node"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.attr.Attribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 46,
            "description": "The complete class name, i.e. including namespace.",
            "itemtype": "property",
            "name": "CLASSNAME",
            "type": "{String}",
            "static": 1,
            "final": 1,
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 72,
            "description": "Checks if this list contains any attributes. <b>Note:</b> this will not check its optional defined template! That\nmeans calling this method might return <code>true</code> although its template contains attributes and therefore",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "<code>true</code> if this list contains no attribute or <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 82,
            "description": "Resets all attributes of this list.<br/>\n<b>Note:</b> if this list has a defined template, calling <code>reset</code> will remove all attributes which are \nalready defined within its template. Furthermore, if this AttributeList is added to a GraphItem calling this method \nmight raises an {{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "reset",
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 102,
            "description": "Checks if this list contains an attribute with the specified name.<br/>\n<b>Note:</b> by default an optional defined template is not checked! Use optional <code>checkTemplate</code> parameter \nto traverse the template hierarchy too.",
            "itemtype": "method",
            "name": "hasAttribute",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the attribute to look for.",
                    "type": "String"
                },
                {
                    "name": "checkParent",
                    "description": "Specify <code>true</code> to check parent hierarchy too.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "<code>true</code> if this list contains given attribute or <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 117,
            "description": "Adds given Attribute to this list.<br/>\n<b>Note:</b> this will replace any previous added Attribute with the same name!<br/>\nFurthermore note: if this AttributeList is added to a GraphItem calling this method might raises an\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "addAttribute",
            "params": [
                {
                    "name": "attribute",
                    "description": "The Attribute to add.",
                    "type": "JSG.graph.attr.Attribute"
                }
            ],
            "return": {
                "description": "The added Attribute as convenience or <code>undefined</code>\nif attribute could not be added.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 139,
            "description": "Adds given Attribute to this AttributeList at specified path.<br/>\nThe path references the parent to add the attribute to. If the parent attribute could not be\nfound the attribute is not added at all.<br/>\n<b>Note:</b> if this AttributeList is added to a GraphItem calling this method might raises an\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "addAttributeAtPath",
            "params": [
                {
                    "name": "path",
                    "description": "An Attribute path specifying the parent AttributeList to add given attribute to.",
                    "type": "String"
                },
                {
                    "name": "attribute",
                    "description": "The Attribute to add.",
                    "type": "JSG.graph.attr.Attribute"
                }
            ],
            "return": {
                "description": "The added Attribute as convenience or <code>undefined</code>\nif attribute could not be added.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 157,
            "description": "Returns the Attribute for the specified name or <code>undefined</code> if none could be found.<br/>\nNote: this method just looks for direct children of this AttributeList or within its template. To reference a deeper\nnested Attribute use <code>getAttributeAtPath</code>.",
            "itemtype": "method",
            "name": "getAttribute",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the Attribute to get.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The referenced Attribute or <code>undefined</code>",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 177,
            "description": "Returns the attribute at specified path or <code>undefined</code> if none could be found.<br/>\nNote: the path must be relative to this AttributeList, i.e. the Attribute look up starts at this\nAttributeList. If not attribute s found and this list has a defined template it will be traversed too.",
            "itemtype": "method",
            "name": "getAttributeAtPath",
            "params": [
                {
                    "name": "path",
                    "description": "The path which reference wanted Attribute.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The referenced Attribute or <code>undefined</code>\nif none could be found.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 199,
            "description": "Sets the value of the Attribute specified by given name.<br/>\nThis method just looks for direct children of this AttributeList. To reference a deeper\nnested Attribute use <code>setAttributeAtPath</code>.<br/>\n<b>Note:</b> if the attribute to change is defined by a template, it will be copied into this list before its value\nis set. Setting its value back again to match the value defined by the template will not remove the attribute from\nthis list. To remove it call {{#crossLink \"JSG.graph.attr.AttributeList/reset:method\"}}{{/crossLink}}.<br/>\nFurthermore, if this AttributeList is added to a GraphItem calling this method might raises an\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setAttribute",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the Attribute to set the value of.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value or Expression for this Attribute.",
                    "type": "JSG.graph.expr.Expression | Object"
                }
            ],
            "return": {
                "description": "Returns <code>true</code> if value was changed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 228,
            "description": "Sets the value of the Attribute specified by given path.<br/>\n<b>Note:</b> if the attribute to change is defined by a template, it will be copied into the list which is specified\nby given path before its value is set. Setting its value back again to match the value defined by the template will \nnot remove the attribute from this list. To remove it call {{#crossLink \"JSG.graph.attr.AttributeList/reset:method\"}}{{/crossLink}}.<br/>\nFurthermore, if this AttributeList is added to a GraphItem calling this method might raises an\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setAttributeAtPath",
            "params": [
                {
                    "name": "path",
                    "description": "The path of the Attribute to set the value of.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value or Expression for this Attribute.",
                    "type": "JSG.graph.expr.Expression | Object"
                }
            ],
            "return": {
                "description": "Returns <code>true</code> if value was changed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 254,
            "description": "Sets the value of given Attribute.<br/>\n<b>Note:</b> if the attribute to change is defined by a template, it will be copied into this list before its value\nis set. Setting its value back again to match the value defined by the template will not remove the attribute from\nthis list. To remove it call {{#crossLink \"JSG.graph.attr.AttributeList/reset:method\"}}{{/crossLink}}.<br/>\nFurthermore, if this AttributeList is added to a GraphItem calling this method might raises an\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setAttributeValue",
            "params": [
                {
                    "name": "attribute",
                    "description": "The Attribute to set the value of.",
                    "type": "JSG.graph.attr.Attribute"
                },
                {
                    "name": "value",
                    "description": "The new value or Expression for this Attribute.",
                    "type": "JSG.graph.expr.Expression | Object"
                }
            ],
            "return": {
                "description": "Returns <code>true</code> if value was changed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 275,
            "description": "Removes given Attribute from this AttributeList.<br/>\n<b>Note:</b> if the attribute to remove is defined by a template, it might be deleted from this list, but never from\nthe template. Therefore <code>undefined</code> is returned in such cases.<br/>\nFurthermore, if this AttributeList was added to a GraphItem calling this method might raises an\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "removeAttribute",
            "params": [
                {
                    "name": "attribute",
                    "description": "The Attribute to remove.",
                    "type": "JSG.graph.attr.Attribute"
                }
            ],
            "return": {
                "description": "The removed attribute as convenience or <code>undefined</code>.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 297,
            "description": "Removes the Attribute specified by given path.<br/>\n<b>Note:</b> if the attribute to remove is defined by a template, it might be deleted from this list, but never from\nthe template. Therefore <code>undefined</code> is returned in such cases.<br/>\nFurthermore, if this AttributeList was added to a GraphItem calling this method might raises an\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "removeAttributeAtPath",
            "params": [
                {
                    "name": "path",
                    "description": "A path referencing the Attribute to remove.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The removed Attribute or <code>undefined</code> if none was found.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 314,
            "description": "Retains only those Attributes in this list which have a corresponding Attribute in given AttributeList.\nAn optional condition function can be passed to decide if matching Attributes should be retained or\nnot.",
            "example": [
                "\n    var retainFunc = function(attr1, attr2) {\n        return (attr1 != undefined) && (attr2 != undefined) && attr1.getValue() == attr2.getValue();\n    }\n\n<b>Note:</b> this can only affect attributes which are contained in this list, i.e. if a template is registered to \nthis list its attributes will neither be traversed nor changed!"
            ],
            "itemtype": "method",
            "name": "retainAll",
            "params": [
                {
                    "name": "attributeList",
                    "description": "An AttributeList containing the Attributes to retain.",
                    "type": "JSG.graph.attr.AttributeList"
                },
                {
                    "name": "condition",
                    "description": "An optional condition Function.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "<code>true</code> if this AttributeList was changed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 356,
            "description": "Iterates over all attributes stored in this list and calls given function on each attribute. If provided function \nreturns <code>true</code> iteration is stopped.<br/>\nNote: this will not iterate the attributes of this list's template.",
            "itemtype": "method",
            "name": "iterate",
            "params": [
                {
                    "name": "func",
                    "description": "The function to call. Gets current attribute as parameter. Should return <code>true</code> to stop iteration.",
                    "type": "Function"
                }
            ],
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 372,
            "description": "Adds all the attributes of given list to this list.<br/>\n<b>Note:</b> this will replace any previous added Attribute with the same name!<br/>\nFurthermore note: if this AttributeList is added to a GraphItem calling this method might raises an\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "addAll",
            "params": [
                {
                    "name": "fromList",
                    "description": "The list which provides the attributes to add.",
                    "type": "JSG.graph.attr.AttributeList"
                }
            ],
            "return": {
                "description": "<code>true</code> if at least one attribute was added.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 385,
            "description": "API internal method to add all attributes of given <code>fromList</code> to given <code>toList</code>.<br/>",
            "itemtype": "method",
            "name": "_addAll",
            "params": [
                {
                    "name": "fromList",
                    "description": "The list which provides the attributes to add.",
                    "type": "JSG.graph.attr.AttributeList"
                },
                {
                    "name": "toList",
                    "description": "The list to add the attributes to.",
                    "type": "JSG.graph.attr.AttributeList"
                }
            ],
            "return": {
                "description": "<code>true</code> if at least one attribute was added.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 402,
            "description": "Creates a so called flat list from this list. Flat means that all the attributes of a registered parent will be\nin the returned list too.",
            "itemtype": "method",
            "name": "toFlatList",
            "params": [
                {
                    "name": "fromList",
                    "description": "The list which provides the attributes to add.",
                    "type": "JSG.graph.attr.AttributeList"
                }
            ],
            "return": {
                "description": "A list which contains all attributes from this list including its parent\nattributes.",
                "type": "JSG.graph.attr.AttributeList"
            },
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 423,
            "description": "Creates a map of name/expression pairs for each stored attribute this list contains.<br/>\nIf this list has a defined parent list, its attributes will not be part of returned map by default. Specify <code>true</code>\nto get the parent attributes too.<br/>\n<b>Note:</b> the attribute expressions are copied!",
            "itemtype": "method",
            "name": "toMap",
            "params": [
                {
                    "name": "withParent",
                    "description": "Specify <code>true</code> to include parent attributes within returned map.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "A map containing a name/expression pair for each attribute.",
                "type": "JSG.commons.Map"
            },
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 447,
            "description": "Creates an array of all attributes currently stored within this list.<br/>\nThis overwrites the base class method {{#crossLink \"JSG.graph.attr.Attribute/getValue:method\"}}{{/crossLink}} to take \nan optional parent into account. I.e. if <code>true</code> is passed the attributes of a registered parent are\nadded to returned array too.<br/>",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "withParent",
                    "description": "Specify <code>true</code> to include template parent attributes within returned array.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of attributes this list contains.",
                "type": "Array"
            },
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 480,
            "description": "Sets the values of several attributes. The attributes to change and the values\n(or {{#crossLink \"JSG.graph.expr.Expression\"}}{{/crossLink}}s) to set are defined by the map\nwhich stores pairs of attribute names and values (or expressions respectively).<br/>",
            "itemtype": "method",
            "name": "applyMap",
            "params": [
                {
                    "name": "map",
                    "description": "A map which contains pairs of attribute names and values(expressions).",
                    "type": "JSG.commons.Map"
                },
                {
                    "name": "item",
                    "description": "If a GraphItem is passed calling this function will trigger\nan {{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} event with\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent/BULK:property\"}}{{/crossLink}}\nas detailId.",
                    "type": "JSG.graph.model.GraphItem",
                    "optional": true
                }
            ],
            "return": {
                "description": "<code>true</code> if at least one attribute was changed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 520,
            "description": "Sets a new parent for this AttributeList.<br/>\n<b>Note:</b> to support store and restore parent correctly it is required that it is attached to a\n{{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} within the same {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}}\nas the <code>GraphItem</code> of this list belongs to. Otherwise if the parent is not attached to a <code>GraphItem</code> \nit should be an instance of {{#crossLink \"JSG.graph.attr.Template\"}}{{/crossLink}}.<br/>\nFinally note that it is allowed to pass <code>undefined</code> in order to remove any formerly applied parent.",
            "itemtype": "method",
            "name": "setParent",
            "params": [
                {
                    "name": "list",
                    "description": "The new parent list to use for this AttributeList. Specifying \n<code>undefined</code> is allowed.",
                    "type": "JSG.graph.attr.AttributeList"
                }
            ],
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 536,
            "description": "Returns the currently used parent list for this AttributeList.<br/>",
            "itemtype": "method",
            "name": "getParent",
            "return": {
                "description": "The currently used parent or <code>undefined</code> if none was set.",
                "type": "JSG.graph.attr.AttributeList"
            },
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 547,
            "description": "Creates a new template from this AttributeList.<br/>",
            "itemtype": "method",
            "name": "toTemplate",
            "return": {
                "description": "A new template which contains all attributes currently within this AttributeList.",
                "type": "JSG.graph.attr.Template"
            },
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 574,
            "description": "This method is called before the reference to a parent list is written to XML.<br/>\nAnalog to {{#crossLink \"JSG.graph.attr.Attribute/doSaveClassName:method\"}}{{/crossLink}} or\n{{#crossLink \"JSG.graph.attr.Attribute/doSaveDisplayName:method\"}}{{/crossLink}} subclasses can override this method \nto decide if the parent reference should be written or not. E.g. if a list defines a default parent saving the\nreference might not be required.<br/>\n<b>Note:</b> a parent reference can only be created and stored if the parent list is either directly or indirectly\nconnected to a {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}.<br/>  \nDefault implementation simply checks if a parent is registered to this list.",
            "itemtype": "method",
            "name": "doSaveParentRef",
            "return": {
                "description": "<code>true</code> to save parent reference to XML, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 620,
            "description": "Saves an Attribute of this AttributeList.<br/>\nCan be overwritten by subclasses to perform custom saving of Attribute children.",
            "itemtype": "method",
            "name": "_saveAttribute",
            "params": [
                {
                    "name": "attribute",
                    "description": "The Attribute to save.",
                    "type": "JSG.graph.attr.Attribute"
                },
                {
                    "name": "xml",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "return": {
                "description": "<code>true</code> if Attribute was saved, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 647,
            "description": "Saves an AttributeList which is part of this AttributeList.<br/>\nCan be overwritten by subclasses to perform custom saving of AttributeList children.",
            "itemtype": "method",
            "name": "_saveAttributeList",
            "params": [
                {
                    "name": "attrList",
                    "description": "The AttributeList to save.",
                    "type": "JSG.graph.attr.AttributeList"
                },
                {
                    "name": "xml",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "return": {
                "description": "<code>true</code> if AttributeList was saved, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 666,
            "description": "Reads the parent tag from given XML node. If a parent reference could be resolved it is set as new parent. If not the\nrefereence is stored to try resolving it later via {{#crossLink \"JSG.graph.attr.AttributeList/evaluate:method\"}}{{/crossLink}}.<br/>",
            "itemtype": "method",
            "name": "_readParentTag",
            "params": [
                {
                    "name": "xmlnode",
                    "description": "XML node to read from.",
                    "type": "Node"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeList.js",
            "line": 684,
            "description": "Checks if given parent is defined and if so use it as new parent for this list. If parent is not defined the \noptional given reference is stored to try resolving again via {{#crossLink \"JSG.graph.attr.AttributeList/evaluate:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "_applyParent",
            "params": [
                {
                    "name": "parent",
                    "description": "The new parent AttributeList to set.",
                    "type": "JSG.graph.attr.AttributeList",
                    "optional": true
                },
                {
                    "name": "ref",
                    "description": "A parent reference to store for later resolve.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "<code>true</code> if either parent was set or reference stored, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.attr.AttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeProxy.js",
            "line": 28,
            "description": "The complete class name, i.e. including namespace.",
            "itemtype": "property",
            "name": "CLASSNAME",
            "type": "{String}",
            "static": 1,
            "final": 1,
            "class": "JSG.graph.attr.AttributeProxy",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeProxy.js",
            "line": 39,
            "description": "Returns the original attribute of this AttributeProxy.</br>\n<b>Note:</b> this provides direct access to the underlying attribute!",
            "itemtype": "method",
            "name": "attribute",
            "return": {
                "description": "The original attribute of this AttributeProxy.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.AttributeProxy",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeUtils.js",
            "line": 16,
            "description": "Creates an Attribute path for the given attribute name. The returned path references an ItemAttribute\nand therefore the passed name should be a defined name of an ItemAttribute.<br/>\nSee {{#crossLink \"JSG.graph.attr.ItemAttributes\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "createItemAttributePath",
            "params": [
                {
                    "name": "attrname",
                    "description": "The name of the item Attribute to create the Attribute path for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An Attribute path.",
                "type": "String"
            },
            "static": 1,
            "class": "JSG.graph.attr.AttributeUtils",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeUtils.js",
            "line": 30,
            "description": "Creates an Attribute path for the given attribute name. The returned path references an TextFormatAttribute\nand therefore the passed name should be a defined name of a TextFormatAttribute.<br/>\nSee {{#crossLink \"JSG.graph.attr.TextFormatAttributes\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "createTextAttributePath",
            "params": [
                {
                    "name": "attrname",
                    "description": "The name of the item text format Attribute to create the Attribute path for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An Attribute path.",
                "type": "String"
            },
            "static": 1,
            "class": "JSG.graph.attr.AttributeUtils",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeUtils.js",
            "line": 44,
            "description": "Creates an Attribute path from given path strings. The strings should be given either as an\nArray or as an enumeration?",
            "itemtype": "method",
            "name": "createPath",
            "params": [
                {
                    "name": "parts",
                    "description": "The parts to create the Attribute path from.",
                    "type": "Array | String..."
                }
            ],
            "return": {
                "description": "An Attribute path.",
                "type": "String"
            },
            "static": 1,
            "class": "JSG.graph.attr.AttributeUtils",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeUtils.js",
            "line": 63,
            "description": "Looks up an Attribute specified by the given path starting at given AttributeList. That means\nthe path must be relative to the AttributeList.",
            "itemtype": "method",
            "name": "findAttributeByPath",
            "params": [
                {
                    "name": "path",
                    "description": "An Attribute path.",
                    "type": "String"
                },
                {
                    "name": "inAttributes",
                    "description": "The AttributeList to start the look up at.",
                    "type": "JSG.graph.attr.AttributeList"
                }
            ],
            "return": {
                "description": "The referenced Attribute or <code>undefined</code> if none\ncould be found.",
                "type": "JSG.graph.attr.Attribute"
            },
            "static": 1,
            "class": "JSG.graph.attr.AttributeUtils",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeUtils.js",
            "line": 78,
            "description": "Looks up the Attribute specified by given path array, starting at given AttributeList.",
            "itemtype": "method",
            "name": "_lookUpAttribute",
            "params": [
                {
                    "name": "path",
                    "description": "Path parts.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The referenced Attribute or <code>undefined</code> if none was found.",
                "type": "JSG.graph.attr.Attribute"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.attr.AttributeUtils",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeUtils.js",
            "line": 98,
            "description": "Adds given Attribute under specified path to given AttributeList.</br>\nThat means the path must be relative to the AttributeList and specifies the parent to add the\nAttribute to.",
            "itemtype": "method",
            "name": "addAttributeAtPath",
            "params": [
                {
                    "name": "path",
                    "description": "The parent Attribute path.",
                    "type": "String"
                },
                {
                    "name": "attribute",
                    "description": "The Attribute to add.",
                    "type": "JSG.graph.attr.Attribute"
                },
                {
                    "name": "toAttributes",
                    "description": "The AttributeList to start the parent look up at.",
                    "type": "JSG.graph.attr.AttributeList"
                }
            ],
            "return": {
                "description": "The added Attribute or undefined if attribute parent could\nnot be found.",
                "type": "JSG.graph.attr.Attribute"
            },
            "static": 1,
            "class": "JSG.graph.attr.AttributeUtils",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeUtils.js",
            "line": 129,
            "description": "Removes the Attribute specified by given path within given AttributeList.",
            "itemtype": "method",
            "name": "removeAttributeAtPath",
            "params": [
                {
                    "name": "path",
                    "description": "A complete Attribute path, i.e. path includes Attribute name.",
                    "type": "String"
                },
                {
                    "name": "inAttributes",
                    "description": "The AttributeList to start the parent look up at.",
                    "type": "JSG.graph.attr.AttributeList"
                }
            ],
            "return": {
                "description": "The removed Attribute or <code>undefined</code>",
                "type": "JSG.graph.attr.Attribute"
            },
            "static": 1,
            "class": "JSG.graph.attr.AttributeUtils",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeUtils.js",
            "line": 143,
            "description": "Removes specified Attribute.",
            "itemtype": "method",
            "name": "removeAttribute",
            "params": [
                {
                    "name": "attribute",
                    "description": "The Attribute to remove.",
                    "type": "JSG.graph.attr.Attribute"
                }
            ],
            "return": {
                "description": "The removed Attribute or <code>undefined</code>",
                "type": "JSG.graph.attr.Attribute"
            },
            "static": 1,
            "class": "JSG.graph.attr.AttributeUtils",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeUtils.js",
            "line": 155,
            "description": "Creates a reference to given Attribute.<br/>\nNote: if the Attribute is not attached to a {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} and not\nrepresents a {{#crossLink \"JSG.graph.attr.Template\"}}{{/crossLink}} <code>undefined</code> will be returned.",
            "itemtype": "method",
            "name": "createAttributeRef",
            "params": [
                {
                    "name": "attribute",
                    "description": "The Attribute to create a reference for.",
                    "type": "JSG.graph.attr.Attribute"
                }
            ],
            "return": {
                "description": "The reference for the Attribute or <code>undefined</code>.",
                "type": "String"
            },
            "static": 1,
            "class": "JSG.graph.attr.AttributeUtils",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeUtils.js",
            "line": 172,
            "description": "Returns the GraphItem given Attribute is attached to.<br/>",
            "itemtype": "method",
            "name": "_getItem",
            "params": [
                {
                    "name": "attribute",
                    "description": "The Attribute to get the item of.",
                    "type": "JSG.graph.attr.Attribute"
                }
            ],
            "return": {
                "description": "The GraphItem given Attribute is attached to or <code>undefined</code>.",
                "type": "JSG.graph.model.GraphItem"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "JSG.graph.attr.AttributeUtils",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeUtils.js",
            "line": 184,
            "description": "Tries to resolve given reference.<br/>\nNote: the optional <code>ctxt</code> parameter is used to resolve given reference and must be either an Attribute \nwhich is attached to a {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} or a {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}} \ninstance. For {{#crossLink \"JSG.graph.attr.Template\"}}{{/crossLink}} references this parameter is not required.",
            "itemtype": "method",
            "name": "resolveAttributeRef",
            "params": [
                {
                    "name": "ref",
                    "description": "The reference to resolve.",
                    "type": "String"
                },
                {
                    "name": "ctxt",
                    "description": "Context parameter used for resolving. Not required for Template references.",
                    "type": "JSG.graph.attr.Attribute | JSG.graph.model.Graph",
                    "optional": true
                }
            ],
            "return": {
                "description": "Resolved Attribute or <code>undefined</code>.",
                "type": "JSG.graph.attr.Attribute"
            },
            "static": 1,
            "class": "JSG.graph.attr.AttributeUtils",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeUtils.js",
            "line": 217,
            "description": "Tries to resolve a Graph instance from given context parameter.",
            "itemtype": "method",
            "name": "_getGraph",
            "params": [
                {
                    "name": "ctxt",
                    "description": "Context parameter used to resolve Graph instance.",
                    "type": "JSG.graph.attr.Attribute | JSG.graph.model.Graph",
                    "optional": true
                }
            ],
            "return": {
                "description": "A Graph instance or <code>undefined</code>.",
                "type": "JSG.graph.model.Graph"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "JSG.graph.attr.AttributeUtils",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeUtils.js",
            "line": 239,
            "description": "Adds given attribute to the specified attribute list without sending an event.<br/>\n<b>Note: this is an API internal method!</b> Its usage is discouraged.",
            "itemtype": "method",
            "name": "addAttributeToList",
            "params": [
                {
                    "name": "attribute",
                    "description": "The Attribute to add.",
                    "type": "JSG.graph.attr.Attribute"
                },
                {
                    "name": "list",
                    "description": "The AttributeList to add given Attribute to.",
                    "type": "JSG.graph.attr.AttributeList"
                }
            ],
            "return": {
                "description": "The added Attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.attr.AttributeUtils",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeUtils.js",
            "line": 259,
            "description": "Adds all attributes of given <code>fromList</code> to given <code>toList</code> without sending an event.</br>\n<b>Note: this is an API internal method!</b> Its usage is discouraged.",
            "itemtype": "method",
            "name": "addAll",
            "params": [
                {
                    "name": "fromList",
                    "description": "The list which provides the attributes to add.",
                    "type": "JSG.graph.attr.AttributeList"
                },
                {
                    "name": "toList",
                    "description": "The list to add the attributes to.",
                    "type": "JSG.graph.attr.AttributeList"
                }
            ],
            "return": {
                "description": "<code>true</code> if at least one attribute was added.",
                "type": "Boolean"
            },
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.attr.AttributeUtils",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeUtils.js",
            "line": 287,
            "description": "Removes given attribute from specified attribute list without sending an event.<br/>\n<b>Note: this is an API internal method!</b> Its usage is discouraged.",
            "itemtype": "method",
            "name": "removeAttributeFromList",
            "params": [
                {
                    "name": "attribute",
                    "description": "The Attribute to remove.",
                    "type": "JSG.graph.attr.Attribute"
                },
                {
                    "name": "list",
                    "description": "The AttributeList to remove given Attribute from.",
                    "type": "JSG.graph.attr.AttributeList"
                }
            ],
            "return": {
                "description": "The removed Attribute or <code>undefined</code> if given\nAttribute could not be removed.",
                "type": "JSG.graph.attr.Attribute"
            },
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.attr.AttributeUtils",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeUtils.js",
            "line": 306,
            "description": "Resets given attribute list without sending an event.<br/>\n<b>Note: this is an API internal method!</b> Its usage is discouraged.",
            "itemtype": "method",
            "name": "resetList",
            "params": [
                {
                    "name": "list",
                    "description": "The AttributeList to reset.",
                    "type": "JSG.graph.attr.AttributeList"
                }
            ],
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.attr.AttributeUtils",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\AttributeUtils.js",
            "line": 329,
            "description": "Sets the value of given attribute without raising an event.<br/>\n<b>Note: this is an API internal method!</b> Its usage is discouraged.",
            "itemtype": "method",
            "name": "setAttributeValue",
            "params": [
                {
                    "name": "attribute",
                    "description": "The Attribute to set the value for.",
                    "type": "JSG.graph.attr.Attribute"
                },
                {
                    "name": "value",
                    "description": "The new value or Expression for this Attribute.",
                    "type": "JSG.graph.expr.Expression | Object"
                }
            ],
            "return": {
                "description": "Returns <code>true</code> if value was changed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.attr.AttributeUtils",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\BooleanAttribute.js",
            "line": 27,
            "description": "A convenience method to create a <code>BooleanAttribute</code> with given name, value and display name.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "name",
                    "description": "The attribute name.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "An optional value to initialize the attribute with.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "dplname",
                    "description": "An optional display name for the attribute.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The newly created <code>BooleanAttribute</code>.",
                "type": "JSG.graph.attr.BooleanAttribute"
            },
            "static": 1,
            "class": "JSG.graph.attr.BooleanAttribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ConditionalAttribute.js",
            "line": 37,
            "description": "Adds given condition to the list of all conditions which are referenced before the actual \nattribute value is determined.",
            "itemtype": "method",
            "name": "addCondition",
            "params": [
                {
                    "name": "cond",
                    "description": "The condition to add.",
                    "type": "JSG.graph.model.Condition"
                },
                {
                    "name": "index",
                    "description": "An optional insert index. If not provided the condition is simply appended to the list.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "JSG.graph.attr.ConditionalAttribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ConditionalAttribute.js",
            "line": 53,
            "description": "Checks if there is at least one {{#crossLink \"JSG.graph.model.Condition\"}}{{/crossLink}} registered to this \n<code>ConditionalAttribute</code>.",
            "itemtype": "method",
            "name": "hasConditions",
            "return": {
                "description": "<code>true</code> if this <code>ConditionalAttribute</code> has at least one \n<code>Condition</code>, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.ConditionalAttribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ConditionalAttribute.js",
            "line": 65,
            "description": "Sorts all registered {{#crossLink \"JSG.graph.model.Condition\"}}{{/crossLink}}s by its <code>prio</code> value.",
            "itemtype": "method",
            "name": "sortConditions",
            "class": "JSG.graph.attr.ConditionalAttribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ConditionalAttribute.js",
            "line": 79,
            "description": "Removes given condition from  the list of all conditions which are referenced before the actual \nattribute value is determined.",
            "itemtype": "method",
            "name": "removeCondition",
            "params": [
                {
                    "name": "cond",
                    "description": "The condition to remove.",
                    "type": "JSG.graph.model.Condition"
                }
            ],
            "class": "JSG.graph.attr.ConditionalAttribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ConditionalAttribute.js",
            "line": 127,
            "description": "Tries to convert given attribute correctly. Framework internal method!! Work in progress!!",
            "itemtype": "method",
            "name": "_convertValue",
            "params": [
                {
                    "name": "value",
                    "description": "The value to convert.",
                    "type": "Number|Boolean|String"
                }
            ],
            "return": {
                "description": "The converted value.",
                "type": "Number|Boolean|String"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.attr.ConditionalAttribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ConstAttribute.js",
            "line": 32,
            "description": "Creates a new <code>ConstAttribute</code> instance based on given <code>Attribute</code>. The <code>Attribute</code>\nshould correctly implement {{#crossLink \"JSG.graph.attr.Attribute/getClassString:method\"}}{{/crossLink}}\nso that an instance of it can be created by calling {{#crossLink \"JSG.graph.attr.ConstAttribute/toAttribute:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "fromAttribute",
            "params": [
                {
                    "name": "attr",
                    "description": "The attribute which provides the value for the constant attribute.",
                    "type": "JSG.graph.attr.Attribute"
                },
                {
                    "name": "name",
                    "description": "An optional name used to rename created constant attribute. If not specified the name of given\nattribute is used.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "A new constant attribute instance based on given attribute.",
                "type": "JSG.graph.attr.ConstAttribute"
            },
            "static": 1,
            "class": "JSG.graph.attr.ConstAttribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ConstAttribute.js",
            "line": 52,
            "description": "Creates a mutable <code>Attribute</code> from this <code>ConstAttribute</code> instance. If the <code>ConstAttribute</code> \nwas created via {{#crossLink \"JSG.graph.attr.ConstAttribute/fromAttribute:method\"}}{{/crossLink}} the returned \n<code>Attribute</code> instance should be of same type as the <code>Attribute</code> provided to <code>fromAttribute</code>.\nBy default the returned attribute is of type {{#crossLink \"JSG.graph.attr.Attribute\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "toAttribute",
            "return": {
                "description": "A new mutable attribute instance based on this constant attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ConstAttribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ConstAttributeList.js",
            "line": 33,
            "description": "Creates a new <code>ConstAttributeList</code> from given <code>AttributeList</code>. The created <code>ConstAttributeList</code>\ncontains {{#crossLink \"JSG.graph.attr.ConstAttribute\"}}{{/crossLink}}s for each attribute the provided list contains.</br>\nThe given <code>AttributeList</code> should correctly implement {{#crossLink \"JSG.graph.attr.Attribute/getClassString:method\"}}{{/crossLink}}\nso that an instance of it can be created by calling {{#crossLink \"JSG.graph.attr.ConstAttributeList/toList:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "fromList",
            "params": [
                {
                    "name": "attrlist",
                    "description": "The list of attributes to create <code>ConstAttributeList</code> from.",
                    "type": "JSG.graph.attr.AttributeList"
                },
                {
                    "name": "name",
                    "description": "An optional name for the new <code>ConstAttributeList</code>. If not provided the name of\ngiven <code>AttributeList</code> is used.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "A new <code>ConstAttributeList</code> based on given <code>AttributeList</code>.",
                "type": "JSG.graph.attr.ConstAttributeList"
            },
            "static": 1,
            "class": "JSG.graph.attr.ConstAttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ConstAttributeList.js",
            "line": 60,
            "description": "Creates a new mutable <code>AttributeList</code> containing mutable <code>Attribute</code>s based on this <code>ConstAttributeList</code>.\nThe returned list is an instance of the class which was automatically set if this <code>ConstAttributeList</code>\nwas created via {{#crossLink \"JSG.graph.attr.ConstAttributeList/fromList:method\"}}{{/crossLink}} or which could be\ndefined manually by calling {{#crossLink \"JSG.graph.attr.ConstAttributeList/setClassString:method\"}}{{/crossLink}}.\nIf no class was defined the returned list is of type {{#crossLink \"JSG.graph.attr.AttributeList\"}}{{/crossLink}} by default.",
            "itemtype": "method",
            "name": "toList",
            "return": {
                "description": "A mutable attribute list.",
                "type": "JSG.graph.attr.AttributeList"
            },
            "class": "JSG.graph.attr.ConstAttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ConstAttributeList.js",
            "line": 108,
            "description": "Defines the class to use for creating a mutable list from this instance. The given class string must contain the\ncomplete path, i.e. it must include the complete namespace. E.g. the class string of an <code>AttributeList</code>\nis <code>JSG.graph.attr.AttributeList</code>.</br> \nSee {{#crossLink \"JSG.graph.attr.ConstAttributeList/toList:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "setClassString",
            "params": [
                {
                    "name": "clstr",
                    "description": "The complete class string, i.e. including the namespace.",
                    "type": "String"
                }
            ],
            "class": "JSG.graph.attr.ConstAttributeList",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 14,
            "description": "No port creation is offered.",
            "itemtype": "property",
            "name": "NONE",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.PortMode",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 22,
            "description": "A port is offered at any point on the shape lines or curves.",
            "itemtype": "property",
            "name": "SHAPE",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.PortMode",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 30,
            "description": "A port is offered at the center of the shape.",
            "itemtype": "property",
            "name": "CENTER",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.PortMode",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 38,
            "description": "A port is offered at the centers of the sides of the the bounding rectangle.",
            "itemtype": "property",
            "name": "SIDESCENTER",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.PortMode",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 46,
            "description": "A port is offered at the 1/4th, the center and 3/4th of the sides of the bounding rectangle.",
            "itemtype": "property",
            "name": "SIDESQUARTER",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.PortMode",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 55,
            "description": "A port is offered at the corners of the bounding rectangle.",
            "itemtype": "property",
            "name": "CORNERS",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.PortMode",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 63,
            "description": "A port is offered at each definition point of the polygon.",
            "itemtype": "property",
            "name": "POINTS",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.PortMode",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 71,
            "description": "A port is offered in the middle of each line of the polygon.",
            "itemtype": "property",
            "name": "LINECENTER",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.PortMode",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 79,
            "description": "A port is offered at each definition point of the shape\nand in the middle between two definition points.",
            "itemtype": "property",
            "name": "DEFAULT",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.PortMode",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 88,
            "description": "A combination of all port modes.",
            "itemtype": "property",
            "name": "ALL",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.PortMode",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 103,
            "description": "Item can not be selected.",
            "itemtype": "property",
            "name": "NONE",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.SelectionMode",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 111,
            "description": "Item can only be selected at be border or frame of the item.",
            "itemtype": "property",
            "name": "BORDER",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.SelectionMode",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 119,
            "description": "Item can only be selected by clicking in the area of the object.",
            "itemtype": "property",
            "name": "AREA",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.SelectionMode",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 127,
            "description": "How item can be selected is defined by the framework. In general items are selected, if clicked with the area\nof the GraphItem. If the FillStyle is set to NONE, the item can only be selected at the border.",
            "itemtype": "property",
            "name": "DEFAULT",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.SelectionMode",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 136,
            "description": "The parent item of this item is selected, if the item is hit.",
            "itemtype": "property",
            "name": "SELECTPARENT",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.SelectionMode",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 151,
            "description": "Moving is disabled.",
            "itemtype": "property",
            "name": "NONE",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.Moveable",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 159,
            "description": "Only moveable in the vertical direction.",
            "itemtype": "property",
            "name": "VERTICAL",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.Moveable",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 167,
            "description": "Only moveable in the horizontal direction.",
            "itemtype": "property",
            "name": "HORIZONTAL",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.Moveable",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 175,
            "description": "Moveable in both directions.",
            "itemtype": "property",
            "name": "BOTH",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.Moveable",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 183,
            "description": "Moveable: Moving is limited to the parent container. The parent can also not be changed.",
            "itemtype": "property",
            "name": "LIMITTOCONTAINER",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.Moveable",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 199,
            "description": "Collapsible: Collapsing is not enabled. \nAlwaysVisible: Invalid flag. \nMoveable: Moving is disabled.",
            "itemtype": "property",
            "name": "NONE",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.Direction",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 209,
            "description": "Collapsible: Collapsing is enabled and the item collapses in the vertical dimension \nAlwaysVisible: In the vertical direction. \nMoveable: Only moveable in the vertical direction.",
            "itemtype": "property",
            "name": "VERTICAL",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.Direction",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 219,
            "description": "Collapsible: Collapsing is enabled and the item collapses in the horizontal dimension \nAlwaysVisible: In the horizontal direction. \nMoveable: Only moveable in the horizontal direction.",
            "itemtype": "property",
            "name": "HORIZONTAL",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.Direction",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 229,
            "description": "Collapsing is enabled and the item collapses in both dimensions. \nAlwaysVisible: Invalid flag. \nMoveable: Moveable in both directions.",
            "itemtype": "property",
            "name": "BOTH",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.Direction",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 246,
            "description": "The collapse button is displayed in the top left corner of the GraphItem.",
            "itemtype": "property",
            "name": "TOPLEFT",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ButtonPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 254,
            "description": "The collapse button is displayed in the top right corner of the GraphItem.",
            "itemtype": "property",
            "name": "TOPRIGHT",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ButtonPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 262,
            "description": "The collapse button is displayed at the top center of the GraphItem.",
            "itemtype": "property",
            "name": "TOPCENTER",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ButtonPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 270,
            "description": "The collapse button is displayed at the bottom center of the GraphItem.",
            "itemtype": "property",
            "name": "BOTTOMCENTER",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ButtonPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 287,
            "description": "Signals no edit restriction, i.e. all properties of a {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} can be edited.</br>\nSee {{#crossLink \"JSG.graph.attr.ItemAttributes/setEditMask:method\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "NONE",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.EditMask",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 296,
            "description": "If set the coordinates of a {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} cannot be edited.</br>\nSee {{#crossLink \"JSG.graph.attr.ItemAttributes/setEditMask:method\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "COORDINATES",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.EditMask",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 305,
            "description": "If set the inner label of a {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} cannot be edited.</br>\nSee {{#crossLink \"JSG.graph.attr.ItemAttributes/setEditMask:method\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "LABEL",
            "final": 1,
            "static": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.EditMask",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 330,
            "description": "Use this flag to let the layout algorithm completely decide how to arrange the shape coordinates.",
            "itemtype": "property",
            "name": "AUTO",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.attr.LineBehavior",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 338,
            "description": "Use this flag to disable the layout algorithm.",
            "itemtype": "property",
            "name": "MANUAL",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.attr.LineBehavior",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 346,
            "description": "Using this flag the layout algorithm tries to enter source and/or target node horizontally.",
            "itemtype": "property",
            "name": "HORIZONTAL",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.attr.LineBehavior",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 354,
            "description": "Using this flag the layout algorithm tries to enter source and/or target node vertically.",
            "itemtype": "property",
            "name": "VERTICAL",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.attr.LineBehavior",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Consts.js",
            "line": 363,
            "description": "Using this flag will disable any edge layout, i.e. neither automatic layout nor any point\nadjustment is done. This could lead to none orthogonal edges.",
            "itemtype": "property",
            "name": "DISABLED",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.attr.LineBehavior",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\EdgeLayoutAttributes.js",
            "line": 25,
            "description": "Predefined constant to reference type attribute.",
            "itemtype": "property",
            "name": "TYPE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.EdgeLayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\EdgeLayoutAttributes.js",
            "line": 33,
            "description": "Predefined constant to reference line behavior attribute.",
            "itemtype": "property",
            "name": "LINEBEHAVIOR",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.EdgeLayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\EdgeLayoutAttributes.js",
            "line": 41,
            "description": "Predefined constant to reference minimum distance to port attribute.",
            "itemtype": "property",
            "name": "MIN_DIST_TO_PORT",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.EdgeLayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\EdgeLayoutAttributes.js",
            "line": 61,
            "description": "Returns the layout type attribute.",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "The layout type attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.EdgeLayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\EdgeLayoutAttributes.js",
            "line": 71,
            "description": "Sets the new layout type of an {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding \n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setType",
            "params": [
                {
                    "name": "type",
                    "description": "The new layout type to use.",
                    "type": "JSG.graph.expr.StringExpression | String"
                }
            ],
            "class": "JSG.graph.attr.EdgeLayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\EdgeLayoutAttributes.js",
            "line": 84,
            "description": "Returns the line behavior attribute.<br/>\nRefer to {{#crossLink \"JSG.graph.attr.consts.LineBehavior\"}}{{/crossLink}} for supported \nline behavior properties.",
            "itemtype": "method",
            "name": "getLineBehavior",
            "return": {
                "description": "The line behavior attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.EdgeLayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\EdgeLayoutAttributes.js",
            "line": 96,
            "description": "Sets the new line behavior of an edge layout.<br/>\nRefer to {{#crossLink \"JSG.graph.attr.consts.LineBehavior\"}}{{/crossLink}} for supported \nline behavior properties.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding \n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setLineBehavior",
            "params": [
                {
                    "name": "type",
                    "description": "The new line behavior to use.",
                    "type": "JSG.graph.expr.StringExpression | String"
                }
            ],
            "class": "JSG.graph.attr.EdgeLayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\EdgeLayoutAttributes.js",
            "line": 111,
            "description": "Returns the minimum-distance-to-port attribute.<br/>\nThe minimum distance defines the distance of the next line point from attached port point.",
            "itemtype": "method",
            "name": "getMinDistToPort",
            "return": {
                "description": "The minimum-distance-to-port attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.EdgeLayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\EdgeLayoutAttributes.js",
            "line": 122,
            "description": "Sets the new minimum-distance-to-port to use for line layout.<br/>\nThis defines the minimum distance of the next line point from attached port point.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding \n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setMinDistToPort",
            "params": [
                {
                    "name": "mindist",
                    "description": "The new minimum distance to use.",
                    "type": "JSG.graph.expr.NumberExpression | Number"
                }
            ],
            "class": "JSG.graph.attr.EdgeLayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 38,
            "description": "No Arrow.",
            "itemtype": "property",
            "name": "NONE",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 45,
            "description": "A filled arrow as line end.",
            "itemtype": "property",
            "name": "ARROWFILLED",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 52,
            "description": "A small filled arrow as line end.",
            "itemtype": "property",
            "name": "ARROWFILLEDSMALL",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 59,
            "description": "A half filled arrow as line end.\nArrow Type Filled",
            "itemtype": "property",
            "name": "ARROWHALFFILLED",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 67,
            "description": "A small and half filled arrow as line end.",
            "itemtype": "property",
            "name": "ARROWHALFFILLEDSMALL",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 74,
            "description": "A narrow and filled arrow as line end.",
            "itemtype": "property",
            "name": "ARROWNNARROWFILLED",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 81,
            "description": "A small, narrow and filled arrow as line end.",
            "itemtype": "property",
            "name": "ARROWNARROWFILLEDSMALL",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 88,
            "description": "Two filled arrows as line end.",
            "itemtype": "property",
            "name": "ARROWDOUBLEFILLED",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 95,
            "description": "Two small filled arrows as line end.",
            "itemtype": "property",
            "name": "ARROWDOUBLEFILLEDSMALL",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 102,
            "description": "A simple arrow as line end.",
            "itemtype": "property",
            "name": "ARROW",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 109,
            "description": "A small arrow as line end.",
            "itemtype": "property",
            "name": "ARROWSMALL",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 116,
            "description": "Two arrows as line end.",
            "itemtype": "property",
            "name": "ARROWDOUBLE",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 123,
            "description": "Two small arrows as line end.",
            "itemtype": "property",
            "name": "ARROWDOUBLESMALL",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 130,
            "description": "An arrow with only one side of the arrow as line end.",
            "itemtype": "property",
            "name": "ARROWFILLED",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 137,
            "description": "A reversed filled arrow as line end.",
            "itemtype": "property",
            "name": "ARROWREVERSEFILLED",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 144,
            "description": "A reversed small filled arrow as line end.",
            "itemtype": "property",
            "name": "ARROWREVERSEFILLEDSMALL",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 151,
            "description": "A reversed arrow as line end.",
            "itemtype": "property",
            "name": "ARROWREVERSE",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 158,
            "description": "A reversed small arrow as line end.",
            "itemtype": "property",
            "name": "ARROWREVERSESMALL",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 165,
            "description": "A small and narrow arrow.",
            "itemtype": "property",
            "name": "ARROWREVERSENARROW",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 172,
            "description": "A reversed small and narrow arrow.",
            "itemtype": "property",
            "name": "ARROWREVERSENARROWSMALL",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 179,
            "description": "An orthogonal line and a reversed arrow as line end.",
            "itemtype": "property",
            "name": "LINEARROWREVERSE",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 186,
            "description": "A circle and an arrow as line end.",
            "itemtype": "property",
            "name": "CIRCLEARROWREVERSE",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 193,
            "description": "Circle as line end.",
            "itemtype": "property",
            "name": "CIRCLE",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 200,
            "description": "Small circle as line end.",
            "itemtype": "property",
            "name": "CIRCLESMALL",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 207,
            "description": "Diamond as line end.",
            "itemtype": "property",
            "name": "DIAMOND",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 214,
            "description": "Small diamond as line end.",
            "itemtype": "property",
            "name": "DIAMONDSMALL",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 221,
            "description": "An narrow diamond as line end",
            "itemtype": "property",
            "name": "DIAMONDNARROW",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 228,
            "description": "Narrow and small diamond as line end.",
            "itemtype": "property",
            "name": "DIAMONDNARROWSMALL",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 235,
            "description": "A circle and two orthogonal lines as line end.",
            "itemtype": "property",
            "name": "CIRCLEDOUBLELINE",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 242,
            "description": "Two orthogonal lines as line end.",
            "itemtype": "property",
            "name": "DOUBLELINE",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 249,
            "description": "Square line end.",
            "itemtype": "property",
            "name": "SQUARE",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 256,
            "description": "Small squared line end.",
            "itemtype": "property",
            "name": "SQUARESMALL",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 263,
            "description": "Narrow and diamond as line end.",
            "itemtype": "property",
            "name": "DIAMONDNARROWLONG",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 270,
            "description": "Narrow and diamond as line end.",
            "itemtype": "property",
            "name": "ARROWNARROWFILLEDLONG",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 277,
            "description": "Narrow and diamond as line end.",
            "itemtype": "property",
            "name": "DIAGONALLINE",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 284,
            "description": "Narrow and diamond as line end.",
            "itemtype": "property",
            "name": "CIRCLESMALLAROUND",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.ArrowStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 297,
            "description": "Solid line with 1 pixel width, which does not zoom.",
            "itemtype": "property",
            "name": "HAIRLINE",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.LineStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 304,
            "description": "No visible line.",
            "itemtype": "property",
            "name": "NONE",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.LineStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 311,
            "description": "Solid line.",
            "itemtype": "property",
            "name": "SOLID",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.LineStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 318,
            "description": "Line with dots.",
            "itemtype": "property",
            "name": "DOT",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.LineStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 325,
            "description": "Lines with dashes.",
            "itemtype": "property",
            "name": "DASH",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.LineStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 332,
            "description": "Line with dashes and dots.",
            "itemtype": "property",
            "name": "DASHDOT",
            "type": "{Number}",
            "final": 1,
            "class": "JSG.graph.attr.LineStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 339,
            "description": "Line with dashes and double dots.",
            "itemtype": "property",
            "name": "DASHDOTDOT",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.graph.attr.LineStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 352,
            "description": "The default line ending. A flat edge which is perpendicular to the edge of the line.",
            "itemtype": "property",
            "name": "BUTT",
            "final": 1,
            "type": "{String}",
            "class": "JSG.graph.attr.LineCap",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 359,
            "description": "A semicircle which has a diameter that is half the line width.",
            "itemtype": "property",
            "name": "ROUND",
            "final": 1,
            "type": "{String}",
            "class": "JSG.graph.attr.LineCap",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 366,
            "description": "A rectangle with the length of the line width and the width of half the line width which is placed flat perpendicular\nto the edge of the line.",
            "itemtype": "property",
            "name": "SQUARE",
            "final": 1,
            "type": "{String}",
            "class": "JSG.graph.attr.LineCap",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 380,
            "description": "No fill.",
            "itemtype": "property",
            "name": "NONE",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.FillStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 386,
            "description": "Solid fill with color.",
            "itemtype": "property",
            "name": "SOLID",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.FillStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 392,
            "description": "Gradient fill with foreground and background color.",
            "itemtype": "property",
            "name": "GRADIENT",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.FillStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 398,
            "description": "Pattern fill with image.",
            "itemtype": "property",
            "name": "PATTERN",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.FillStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 410,
            "description": "Linear gradient along line.",
            "itemtype": "property",
            "name": "LINEAR",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.GradientStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 416,
            "description": "Circular gradient fill around center.",
            "itemtype": "property",
            "name": "RADIAL",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.GradientStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 428,
            "description": "Stretch image to fill object.",
            "itemtype": "property",
            "name": "STRETCH",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.PatternStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 434,
            "description": "Repeat image to fill object.",
            "itemtype": "property",
            "name": "REPEAT",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.PatternStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 440,
            "description": "Center image in object. Does not rescale the image.",
            "itemtype": "property",
            "name": "CENTER",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.PatternStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 446,
            "description": "Stretch image to fill object keeping the height/width ratio.",
            "itemtype": "property",
            "name": "STRETCHPROPORTIONAL",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.PatternStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 458,
            "description": "Shadow to left and top direction.",
            "itemtype": "property",
            "name": "LEFTTOP",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.ShadowDirection",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 464,
            "description": "Shadow to left and bottom direction.",
            "itemtype": "property",
            "name": "LEFTTOP",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.ShadowDirection",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 470,
            "description": "Shadow to right and top direction.",
            "itemtype": "property",
            "name": "RIGHTTOP",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.ShadowDirection",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 476,
            "description": "Shadow to right and bottom direction.",
            "itemtype": "property",
            "name": "RIGHTBOTTOM",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.ShadowDirection",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 485,
            "description": "Our unique name constant.",
            "itemtype": "property",
            "name": "NAME",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 494,
            "description": "Predefined constant to reference brightness attribute.",
            "itemtype": "property",
            "name": "BRIGHTNESS",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 502,
            "description": "Predefined constant to reference fill style attribute.",
            "itemtype": "property",
            "name": "FILLSTYLE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 510,
            "description": "Predefined constant to reference fill color attribute.",
            "itemtype": "property",
            "name": "FILLCOLOR",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 518,
            "description": "Predefined constant to reference gradient color attribute.",
            "itemtype": "property",
            "name": "GRADIENTCOLOR",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 526,
            "description": "Predefined constant to reference gradient angle attribute.",
            "itemtype": "property",
            "name": "GRADIENTANGLE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 534,
            "description": "Predefined constant to reference gradient type attribute.",
            "itemtype": "property",
            "name": "GRADIENTTYPE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 542,
            "description": "Predefined constant to reference attribute for gradient offset in x direction.",
            "itemtype": "property",
            "name": "GRADIENTOFFSET_X",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 550,
            "description": "Predefined constant to reference attribute for gradient offset in y direction.",
            "itemtype": "property",
            "name": "GRADIENTOFFSET_Y",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 558,
            "description": "Predefined constant to reference line cap attribute.",
            "itemtype": "property",
            "name": "LINECAP",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 566,
            "description": "Predefined constant to reference line color attribute.",
            "itemtype": "property",
            "name": "LINECOLOR",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 574,
            "description": "Predefined constant to reference line width attribute.",
            "itemtype": "property",
            "name": "LINEWIDTH",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 582,
            "description": "Predefined constant to reference line style attribute.",
            "itemtype": "property",
            "name": "LINESTYLE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 590,
            "description": "Predefined constant to reference line arrow start attribute.",
            "itemtype": "property",
            "name": "LINEARROWSTART",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 598,
            "description": "Predefined constant to reference line arrow end attribute.",
            "itemtype": "property",
            "name": "LINEARROWEND",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 606,
            "description": "Predefined constant to reference line corner attribute.",
            "itemtype": "property",
            "name": "LINECORNER",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 614,
            "description": "Predefined constant to reference pattern attribute.",
            "itemtype": "property",
            "name": "PATTERN",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 622,
            "description": "Predefined constant to reference pattern style attribute.",
            "itemtype": "property",
            "name": "PATTERNSTYLE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 630,
            "description": "Predefined constant to reference shadow color attribute.",
            "itemtype": "property",
            "name": "SHADOWCOLOR",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 638,
            "description": "Predefined constant to reference attribute for shadow offset in x direction",
            "itemtype": "property",
            "name": "SHADOWOFFSET_X",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 646,
            "description": "Predefined constant to reference attribute for shadow offset in y direction.",
            "itemtype": "property",
            "name": "SHADOWOFFSET_Y",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 654,
            "description": "Predefined constant to reference shadow blur attribute.",
            "itemtype": "property",
            "name": "SHADOWBLUR",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 662,
            "description": "Predefined constant to reference shadow direction attribute.",
            "itemtype": "property",
            "name": "SHADOWDIRECTION",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 670,
            "description": "Predefined constant to reference transparency attribute.",
            "itemtype": "property",
            "name": "TRANSPARENCY",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 703,
            "description": "Creates a new list containing only those attributes which have the same value in each of the selected \n{{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s.",
            "itemtype": "method",
            "name": "retainFromSelection",
            "params": [
                {
                    "name": "selection",
                    "description": "An array of selected <code>GraphItem</code>s.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A list containing only those attributes which have the same value in each \nof the selected <code>GraphItem</code>s.",
                "type": "JSG.graph.attr.FormatAttributes"
            },
            "static": 1,
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 731,
            "description": "Applies the values of given FormatAttributes to this instance.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setFormatTo",
            "params": [
                {
                    "name": "format",
                    "description": "The Format object to get the values from.",
                    "type": "JSG.graph.attr.FormatAttributes"
                }
            ],
            "return": {
                "description": "<code>true</code> if at least one attribute was changed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 745,
            "description": "Checks, if a format has a visible fill format.",
            "itemtype": "method",
            "name": "hasFill",
            "return": {
                "description": "True, if a fill is visible, otherwise false.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 756,
            "description": "Checks, if a format has a visible border.",
            "itemtype": "method",
            "name": "hasBorder",
            "return": {
                "description": "True, if a border is visible, otherwise false.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 896,
            "description": "Returns the fill color using a hexadecimal RGB String prefixed by a '#' char.",
            "itemtype": "method",
            "name": "getFillColor",
            "return": {
                "description": "Color attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 905,
            "description": "Sets a new fill color. The color must be given as a hexadecimal RGB string, prefixed by a '#' char.\nFor example to set a red color use '#FF0000'.</br>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setFillColor",
            "params": [
                {
                    "name": "color",
                    "description": "Color to assign.",
                    "type": "JSG.graph.expr.Expression | String"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 917,
            "description": "Set fill color using red, green and blue values.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setFillColorRGB",
            "params": [
                {
                    "name": "r",
                    "description": "Red part of the color. Values between 0 and 255 are valid.",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "Green part of the color. Values between 0 and 255 are valid.",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "Blue part of the color. Values between 0 and 255 are valid.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 931,
            "description": "Returns current fill style.",
            "itemtype": "method",
            "name": "getFillStyle",
            "return": {
                "description": "Current style attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 940,
            "description": "Set a new fill style.</br>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setFillStyle",
            "params": [
                {
                    "name": "style",
                    "description": "New fill style for format.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.FormatAttributes.FillStyle"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 952,
            "description": "Returns brightness factor between 0 (dark) to 100 (bright).",
            "itemtype": "method",
            "name": "getBrightness",
            "return": {
                "description": "Current brightness attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 961,
            "description": "Set a brightness factor for the format.</br>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setBrightness",
            "params": [
                {
                    "name": "brightness",
                    "description": "Brightness factor between 0 (dark) to 100 (bright)",
                    "type": "JSG.graph.expr.Expression | Number"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 973,
            "description": "Returns transparency factor between 0 (transparent) to 100 (intransparent).",
            "itemtype": "method",
            "name": "getTransparency",
            "return": {
                "description": "Current transparency attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 982,
            "description": "Set a transparent fill factor for the format.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setTransparency",
            "params": [
                {
                    "name": "transparency",
                    "description": "Transparency factor between 0 (transparent) to 100 (intransparent)",
                    "type": "JSG.graph.expr.Expression | Number"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 994,
            "description": "Returns the gradient color using a hexadecimal RGB String prefixed by a '#' char.",
            "itemtype": "method",
            "name": "getGradientColor",
            "return": {
                "description": "Color attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1003,
            "description": "Set a new gradient color. The color must be given as a hexadecimal RGB string, preceeded by a '#' char.\nThe color is used as the target color for the gradient. The source color is set using setFillColor.\nFor example to set a red gradient color use '#FF0000'.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setGradientColor",
            "params": [
                {
                    "name": "color",
                    "description": "Color to assign.",
                    "type": "JSG.graph.expr.Expression | String"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1016,
            "description": "Set gradient color using red, green and blue values.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setGradientColorRGB",
            "params": [
                {
                    "name": "r",
                    "description": "Red part of the color. Values between 0 and 255 are valid.",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "Green part of the color. Values between 0 and 255 are valid.",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "Blue part of the color. Values between 0 and 255 are valid.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1030,
            "description": "Get the angle for a linear gradient in degrees.",
            "itemtype": "method",
            "name": "getGradientAngle",
            "return": {
                "description": "Angle attribute of linear gradient.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1039,
            "description": "Set the angle for a linear gradient. Currently only values of 0, 45, 90, 135 are allowed.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setGradientAngle",
            "params": [
                {
                    "name": "angle.",
                    "description": "Angle of linear gradient in degrees.",
                    "type": "JSG.graph.expr.Expression | Number"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1051,
            "description": "Returns the horizontal offset for a radial gradient.",
            "itemtype": "method",
            "name": "getGradientOffsetX",
            "return": {
                "description": "Horizontal offset attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1060,
            "description": "Defines the horizontal offset for a radial gradient. Allowed values range from 0 to 100 percent.\nA value of 50 center the gradient in the middle of the object.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setGradientOffsetX",
            "params": [
                {
                    "name": "offset",
                    "description": "Horizontal offset.",
                    "type": "JSG.graph.expr.Expression | Number"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1073,
            "description": "Returns the vertical offset for a radial gradient.",
            "itemtype": "method",
            "name": "getGradientOffsetY",
            "return": {
                "description": "Vertical offset attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1082,
            "description": "Defines the vertical offset for a radial gradient. Allowed values range from 0 to 100 percent.\nA value of 50 center the gradient in the middle of the object.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setGradientOffsetY",
            "params": [
                {
                    "name": "offset",
                    "description": "Vertical offset.",
                    "type": "JSG.graph.expr.Expression | Number"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1095,
            "description": "Returns the gradient type.",
            "itemtype": "method",
            "name": "getGradientType",
            "return": {
                "description": "Current gradient type attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1104,
            "description": "Sets the gradient type.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setGradientType",
            "params": [
                {
                    "name": "type",
                    "description": "Gradient type to set.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.FormatAttributes.GradientStyle"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1116,
            "description": "Return the current URL for an image used to a pattern fill.",
            "itemtype": "method",
            "name": "getPattern",
            "return": {
                "description": "Current pattern attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1125,
            "description": "Defines a image for a pattern fill. The image must be an url to an image available on the server.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setPattern",
            "params": [
                {
                    "name": "pattern",
                    "description": "URL to image.",
                    "type": "JSG.graph.expr.Expression | String"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1137,
            "description": "Return the current PatternStyle used for a pattern fill.",
            "itemtype": "method",
            "name": "getPatternStyle",
            "return": {
                "description": "Current pattern style attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1146,
            "description": "Defines the PatternStyle for a pattern fill. The image can be displayed using several options.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setPatternStyle",
            "params": [
                {
                    "name": "style",
                    "description": "Pattern style used for displaying the pattern.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.FormatAttributes.PatternStyle"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1158,
            "description": "Returns the line cap attribute.<br/>\nPlease refer to {{#crossLink \"JSG.graph.attr.FormatAttributes.LineCap\"}}{{/crossLink}} for information on supported\nline caps.",
            "itemtype": "method",
            "name": "getLineCap",
            "return": {
                "description": "The line cap attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "since": "1.6.0",
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1170,
            "description": "Sets the new line cap to use.<br/>\nPlease refer to {{#crossLink \"JSG.graph.attr.FormatAttributes.LineCap\"}}{{/crossLink}} for information on supported\nline caps.",
            "itemtype": "method",
            "name": "setLineCap",
            "params": [
                {
                    "name": "The",
                    "description": "new line cap value.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.FormatAttributes.LineCap"
                }
            ],
            "since": "1.6.0",
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1182,
            "description": "Returns the line color using a hexadecimal RGB String prefixed by a '#' char.",
            "itemtype": "method",
            "name": "getLineColor",
            "return": {
                "description": "Color attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1191,
            "description": "Set a new line color. The color must be given as a hexadecimal RGB string, prefixed by a '#' char.\nFor example to set a red line color use '#FF0000'.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setLineColor",
            "params": [
                {
                    "name": "color",
                    "description": "Color to assign.",
                    "type": "JSG.graph.expr.Expression | String"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1203,
            "description": "Set line color using red, green and blue values.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setLineColorRGB",
            "params": [
                {
                    "name": "r",
                    "description": "Red part of the color. Values between 0 and 255 are valid.",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "Green part of the color. Values between 0 and 255 are valid.",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "Blue part of the color. Values between 0 and 255 are valid.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1217,
            "description": "Returns the line corner in 1/100th mm.",
            "itemtype": "method",
            "name": "getLineCorner",
            "return": {
                "description": "Corner radius attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1226,
            "description": "Set a new line corner radius. The corner radius must be given in 1/100 mm. It is only used for polylines.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setLineCorner",
            "params": [
                {
                    "name": "corner",
                    "description": "Corner radius to assign.",
                    "type": "JSG.graph.expr.Expression | String"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1238,
            "description": "Returns the current arrow type at the beginning of a line.",
            "itemtype": "method",
            "name": "getLineArrowStart",
            "return": {
                "description": "Arrow type attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1247,
            "description": "Defines an arrow for a line at the beginning of the line.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setLineArrowStart",
            "params": [
                {
                    "name": "arrow",
                    "description": "Arrow type.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.FormatAttributes.ArrowStyle"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1259,
            "description": "Returns the current arrow type at the end of a line.",
            "itemtype": "method",
            "name": "getLineArrowEnd",
            "return": {
                "description": "Arrow type attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1268,
            "description": "Defines an arrow for a line at the end of the line.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setLineArrowEnd",
            "params": [
                {
                    "name": "arrow",
                    "description": "Arrow type.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.FormatAttributes.ArrowStyle"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1280,
            "description": "Returns the line color using a hexadecimal RGB String prefixed by a '#' char.",
            "itemtype": "method",
            "name": "getShadowColor",
            "return": {
                "description": "Color attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1289,
            "description": "Set a new shadow color. The color must be given as a hexadecimal RGB string, prefixed by a '#' char.\nFor example to set a red shadow color use '#FF0000'.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setShadowColor",
            "params": [
                {
                    "name": "color",
                    "description": "Color to assign.",
                    "type": "JSG.graph.expr.Expression | String"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1301,
            "description": "Set shadow color using red, green and blue values.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setShadowColorRGB",
            "params": [
                {
                    "name": "r",
                    "description": "Red part of the color. Values between 0 and 255 are valid.",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "Green part of the color. Values between 0 and 255 are valid.",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "Blue part of the color. Values between 0 and 255 are valid.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1315,
            "description": "Returns the horizontal offset of a shadow.",
            "itemtype": "method",
            "name": "getShadowOffsetX",
            "return": {
                "description": "Current horizontal offset attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1324,
            "description": "Defines the horizontal offset of a shadow for an object.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setShadowOffsetX",
            "params": [
                {
                    "name": "offsetX",
                    "description": "Offset for a shadow. The offset defines the width and depth of the shadow.",
                    "type": "JSG.graph.expr.Expression | Number"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1336,
            "description": "Returns the vertical offset of a shadow.",
            "itemtype": "method",
            "name": "getShadowOffsetY",
            "return": {
                "description": "Current vertical offset attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1345,
            "description": "Defines the vertical offset of a shadow for an object.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setShadowOffsetY",
            "params": [
                {
                    "name": "offsetX",
                    "description": "Offset for a shadow. The offset defines the width and depth of the shadow.",
                    "type": "JSG.graph.expr.Expression | Number"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1357,
            "description": "Returns the shadow direction. The shadow direction defines in which direction the shadow is thrown.",
            "itemtype": "method",
            "name": "getShadowDirection",
            "return": {
                "description": "Current shadow direction attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1366,
            "description": "Defines the shadow direction. The shadow direction defines in which direction the shadow is thrown.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setShadowDirection",
            "params": [
                {
                    "name": "direction",
                    "description": "Shadow direction to set.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.FormatAttributes.ShadowDirection"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1378,
            "description": "Return the factor on how much a shadow is blurred.",
            "itemtype": "method",
            "name": "getShadowBlur",
            "return": {
                "description": "Blur attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1387,
            "description": "Defines a factor on how much a shadow is blurred. It can range from 0 (no blur) to 100.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setShadowBlur",
            "params": [
                {
                    "name": "blur",
                    "description": "Blur factor.",
                    "type": "JSG.graph.expr.Expression | Number"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1399,
            "description": "Returns the current line width.",
            "itemtype": "method",
            "name": "getLineWidth",
            "return": {
                "description": "Current width attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1408,
            "description": "Defines the line width.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setLineWidth",
            "params": [
                {
                    "name": "width",
                    "description": "New line width.",
                    "type": "JSG.graph.expr.Expression | Number"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1420,
            "description": "Returns current line style.",
            "itemtype": "method",
            "name": "getLineStyle",
            "return": {
                "description": "Line style attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\FormatAttributes.js",
            "line": 1429,
            "description": "Sets line style using a predefined type.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setLineStyle",
            "params": [
                {
                    "name": "style",
                    "description": "Line style type.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.FormatAttributes.LineStyle"
                }
            ],
            "class": "JSG.graph.attr.FormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 24,
            "description": "Our unique name constant.",
            "itemtype": "property",
            "name": "NAME",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 34,
            "description": "Predefined constant to reference clip children attribute.",
            "itemtype": "property",
            "name": "CLIPCHILDREN",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 42,
            "description": "Predefined constant to reference closed attribute.",
            "itemtype": "property",
            "name": "CLOSED",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 50,
            "description": "Predefined constant to reference collapsable attribute.",
            "itemtype": "property",
            "name": "COLLAPSABLE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 58,
            "description": "Predefined constant to reference collapsed attribute.",
            "itemtype": "property",
            "name": "COLLAPSED",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 66,
            "description": "Predefined constant to reference collapsed button attribute.",
            "itemtype": "property",
            "name": "COLLAPSEDBUTTON",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 74,
            "description": "Predefined constant to reference container attribute.",
            "itemtype": "property",
            "name": "CONTAINER",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 82,
            "description": "Predefined constant to reference ddeletable attribute.",
            "itemtype": "property",
            "name": "DELETEABLE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 90,
            "description": "Predefined constant to reference moveable attribute.",
            "itemtype": "property",
            "name": "MOVEABLE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 98,
            "description": "Predefined constant to reference port mode attribute.",
            "itemtype": "property",
            "name": "PORTMODE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 106,
            "description": "Predefined constant to reference rotatable attribute.",
            "itemtype": "property",
            "name": "ROTATABLE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 114,
            "description": "Predefined constant to reference selection mode attribute.",
            "itemtype": "property",
            "name": "SELECTIONMODE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 122,
            "description": "Predefined constant to reference selected attribute.",
            "itemtype": "property",
            "name": "SELECTED",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 130,
            "description": "Predefined constant to reference sizeable attribute.",
            "itemtype": "property",
            "name": "SIZEABLE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 138,
            "description": "Predefined constant to reference snap to attribute.",
            "itemtype": "property",
            "name": "SNAPTO",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 146,
            "description": "Predefined constant to reference visible attribute.",
            "itemtype": "property",
            "name": "VISIBLE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 154,
            "description": "Predefined constant to reference always visible attribute.",
            "itemtype": "property",
            "name": "ALWAYSVISIBLE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 162,
            "description": "Predefined constant to reference margin top attribute.",
            "itemtype": "property",
            "name": "MARGINTOP",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 170,
            "description": "Predefined constant to reference margin left attribute.",
            "itemtype": "property",
            "name": "MARGINLEFT",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 178,
            "description": "Predefined constant to reference margin right attribute.",
            "itemtype": "property",
            "name": "MARGINRIGHT",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 186,
            "description": "Predefined constant to reference margin bottom attribute.",
            "itemtype": "property",
            "name": "MARGINBOTTOM",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 194,
            "description": "Predefined constant to reference item part attribute.",
            "itemtype": "property",
            "name": "ITEMPART",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 202,
            "description": "Predefined constant to reference edit mask attribute.",
            "itemtype": "property",
            "name": "EDITMASK",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 221,
            "description": "Defines, that an item is always displayed, even if it outside of the viewport. If the item is scrolled out of the visible area, it is displayed\nat the left border of the screen.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setAlwaysVisible",
            "params": [
                {
                    "name": "alwaysVisible",
                    "description": "You can pass either an expression or a value. The value will automatically converted into\na static expression.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.consts.Direction"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 235,
            "description": "Returns the attribute for the AlwaysVisbile setting.",
            "itemtype": "method",
            "name": "getAlwaysVisible",
            "return": {
                "description": "Attribute with current setting for AlwaysVisible.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 245,
            "description": "Defines whether the children or subitems of a container get clipped, if they are located outside the border of the container.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setClipChildren",
            "params": [
                {
                    "name": "clipchildren",
                    "description": "True to enable the flag, otherwise false. You can pass either an expression or a value. The value will automatically converted into",
                    "type": "JSG.graph.expr.Expression | Boolean"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 257,
            "description": "Returns the attribute the ClipChildren flag. The flag defines whether the children or subitems of a container get clipped,\nif they are located outside the border of the container.",
            "itemtype": "method",
            "name": "getClipChildren",
            "return": {
                "description": "Attribute with current setting for ClipChildren.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 268,
            "description": "Defines, whether a GraphItem gets closed. This applies primarily to polylines and bezier curves.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setClosed",
            "params": [
                {
                    "name": "closed",
                    "description": "True to enable the flag, otherwise false. You can pass either an expression or a value. The value will automatically converted into",
                    "type": "JSG.graph.expr.Expression | Boolean"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 280,
            "description": "Returns the attribute for the Closed flag. The flag defines whether an item is displayed as closed.",
            "itemtype": "method",
            "name": "getClosed",
            "return": {
                "description": "Attribute with current setting for Closed.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 290,
            "description": "Defines, whether and how a GraphItem can be collapsed and expanded.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setCollapsable",
            "params": [
                {
                    "name": "collapsable",
                    "description": "Collapse setting. There are different options for the\ncollapsable behaviour.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.consts.Direction"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 303,
            "description": "Returns the attribute for the Collapsable flag. The flag defines whether and how an item can be collapsed or expanded.",
            "itemtype": "method",
            "name": "getCollapsable",
            "return": {
                "description": "Attribute with current setting for Collapsable.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 313,
            "description": "Defines, whether a GraphItem is collapsed and expanded.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setCollapsed",
            "params": [
                {
                    "name": "collapsed",
                    "description": "Collapsed setting. True to collapse the item, otherwise false.",
                    "type": "JSG.graph.expr.Expression | Boolean"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 325,
            "description": "Returns the attribute for the Collapsed flag. The flag defines whether an item is collapsed or expanded.",
            "itemtype": "method",
            "name": "getCollapsed",
            "return": {
                "description": "Attribute with current setting for Collapsed.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 335,
            "description": "Defines, where the collapse/expand button is displayed.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setCollapsedButton",
            "params": [
                {
                    "name": "collapsedButton",
                    "description": "CollapsedButton setting. They are different position available as defined in ButtonPosition",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.consts.ButtonPosition"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 347,
            "description": "Returns the attribute for the CollapsedButton flag. The setting defines where the collapse/expand button is displayed.",
            "itemtype": "method",
            "name": "getCollapsedButton",
            "return": {
                "description": "Attribute with current setting for CollapsedButton.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 358,
            "description": "Defines whether the user can drag other or new items into this item becoming part of the GraphItem as a subitems. Subitems are moved are managed with the container.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setContainer",
            "params": [
                {
                    "name": "collapsed",
                    "description": "Container setting. True to define item as a container, otherwise false.",
                    "type": "JSG.graph.expr.Expression | Boolean"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 370,
            "description": "Returns the attribute for the container flag status.",
            "itemtype": "method",
            "name": "getContainer",
            "return": {
                "description": "Attribute with current setting for Container status.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 380,
            "description": "Defines, whether an item can be deleted by the user. API calls to delete the item are still allowed.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setDeleteable",
            "params": [
                {
                    "name": "collapsed",
                    "description": "Deleteable setting. True to allow deleting, otherwise false.",
                    "type": "JSG.graph.expr.Expression | Boolean"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 392,
            "description": "Returns the attribute for the Deleteable flag status.",
            "itemtype": "method",
            "name": "getDeleteable",
            "return": {
                "description": "Attribute with current setting for Deleteable flag.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 402,
            "description": "Defines, whether an item can be moved by the user using a direction definition. API calls to move the item are still allowed.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setMoveable",
            "params": [
                {
                    "name": "moveable",
                    "description": "Moveable setting.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.consts.Direction"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 414,
            "description": "Returns the attribute for the Moveable direction allowed setting.",
            "itemtype": "method",
            "name": "getMoveable",
            "return": {
                "description": "Attribute with current setting for Moveable.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 424,
            "description": "Defines the port mode for the item. The port mode describes where a port can be created, if the user hovers with the mouse over the item.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setPortMode",
            "params": [
                {
                    "name": "portMode",
                    "description": "PortMode setting.\nThe different options are described at {{#crossLink \"JSG.graph.attr.consts.PortMode\"}}{{/crossLink}}.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.consts.PortMode"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 437,
            "description": "Returns the PortMode attribute. The port mode describes where a port can be created, if the user hovers with the mouse over the item.",
            "itemtype": "method",
            "name": "getPortMode",
            "return": {
                "description": "Attribute with current setting for the PortMode setting.\nThe different options are described at {{#crossLink \"JSG.graph.attr.consts.PortMode\"}}{{/crossLink}}.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 448,
            "description": "Defines, whether an item can be rotated by the user.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setRotatable",
            "params": [
                {
                    "name": "rotatable",
                    "description": "Rotatable setting. True to allow rotation, otherwise false.",
                    "type": "JSG.graph.expr.Expression | Boolean"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 460,
            "description": "Returns the attribute for the Rotatable flag status.",
            "itemtype": "method",
            "name": "getRotatable",
            "return": {
                "description": "Attribute with current setting for Rotatable flag.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 470,
            "description": "Defines the SelectionMode. The selection mode defines, how and where items are selectable.\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setSelectionMode",
            "params": [
                {
                    "name": "selectionMode",
                    "description": "SelectionMode setting.\nThe different options are described at {{#crossLink \"JSG.graph.attr.consts.SelectionMode\"}}{{/crossLink}}.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.consts.SelectionMode"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 483,
            "description": "Returns the SelectionMode attribute. The selection mode defines, how and where items are selectable.",
            "itemtype": "method",
            "name": "getSelectionMode",
            "return": {
                "description": "Attribute with current setting for the SelectionMode setting.\nThe different options are described at {{#crossLink \"JSG.graph.attr.consts.SelectionMode\"}}{{/crossLink}}.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 512,
            "description": "Defines, whether an item can be resized by the user.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setSizeable",
            "params": [
                {
                    "name": "sizeable",
                    "description": "Sizeable setting. True to allow resizing, otherwise false.",
                    "type": "JSG.graph.expr.Expression | Boolean"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 524,
            "description": "Returns the attribute for the Sizeable flag status.",
            "itemtype": "method",
            "name": "getSizeable",
            "return": {
                "description": "Attribute with current setting for the Sizeable flag.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 534,
            "description": "Set the SnapTo flag status. The Snap defines whether the border of this item is used for aligning other items as a guideline while moving it.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setSnapTo",
            "params": [
                {
                    "name": "snapTo",
                    "description": "Expression or flag with current setting for the SnapTo flag.",
                    "type": "JSG.graph.expr.Expression | Boolean"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 546,
            "description": "Returns the attribute for the SnapTo flag status. The Snap defines whether the border of this item is used for aligning other items as a guideline while moving it.",
            "itemtype": "method",
            "name": "getSnapTo",
            "return": {
                "description": "Attribute with current setting for the SnapTo flag.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 556,
            "description": "Defines, whether an item is visible.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setVisible",
            "params": [
                {
                    "name": "visible",
                    "description": "Visible setting. True to make the item visible otherwise false.",
                    "type": "JSG.graph.expr.Expression | Boolean"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 568,
            "description": "Returns the attribute for the Visible flag status.",
            "itemtype": "method",
            "name": "getVisible",
            "return": {
                "description": "Attribute with current setting for the Visible flag.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 578,
            "description": "Defines the left margin of an item.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setLeftMargin",
            "params": [
                {
                    "name": "margin",
                    "description": "Left margin setting in 1/100th mm.",
                    "type": "JSG.graph.expr.NumberExpression | Number"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 590,
            "description": "Returns the attribute for the left margin.",
            "itemtype": "method",
            "name": "getLeftMargin",
            "return": {
                "description": "Attribute with current setting for the left margin.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 600,
            "description": "Defines the right margin of an item.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setRightMargin",
            "params": [
                {
                    "name": "margin",
                    "description": "Right margin setting in 1/100th mm.",
                    "type": "JSG.graph.expr.NumberExpression | Number"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 612,
            "description": "Returns the attribute for the right margin.",
            "itemtype": "method",
            "name": "getRightMargin",
            "return": {
                "description": "Attribute with current setting for the right margin.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 621,
            "description": "Defines the top margin of an item.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setTopMargin",
            "params": [
                {
                    "name": "margin",
                    "description": "Top margin setting in 1/100th mm.",
                    "type": "JSG.graph.expr.NumberExpression | Number"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 633,
            "description": "Returns the attribute for the top margin.",
            "itemtype": "method",
            "name": "getTopMargin",
            "return": {
                "description": "Attribute with current setting for the top margin.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 642,
            "description": "Defines the bottom margin of an item.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setBottomMargin",
            "params": [
                {
                    "name": "margin",
                    "description": "Bottom margin setting in 1/100th mm.",
                    "type": "JSG.graph.expr.NumberExpression | Number"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 654,
            "description": "Returns the attribute for the bottom margin.",
            "itemtype": "method",
            "name": "getBottomMargin",
            "return": {
                "description": "Attribute with current setting for the bottom margin.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 664,
            "description": "Defines whether a GraphItem works as a part of another GraphItem and should not be used on itself.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setItemPart",
            "params": [
                {
                    "name": "isPart",
                    "description": "Item Expression or boolean flag to mark a GraphItem as part of another.",
                    "type": "JSG.graph.expr.BooleanExpression | Boolean"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 676,
            "description": "Retrieve the status of the <code>ITEMPART</code> flag. The flag defines whether an GraphItem is marked\nas part of another GraphItem.",
            "itemtype": "method",
            "name": "getItemPart",
            "return": {
                "description": "Attribute with current setting for the current <code>ITEMPART</code> setting.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 687,
            "description": "Defines an GraphItem edit mask. </br>\nThe edit mask defines which properties of a GraphItem cannot be edited. Please refer to\n{{#crossLink \"JSG.graph.attr.consts.EditMask\"}}{{/crossLink}} for supported edit mask values.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setEditMask",
            "params": [
                {
                    "name": "editmask",
                    "description": "The new edit mask setting.",
                    "type": "JSG.graph.expr.NumberExpression | JSG.graph.attr.consts.EditMask"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 701,
            "description": "Gets the current edit mask setting.</br>\nThe edit mask defines which properties of a GraphItem cannot be edited. Please refer to\n{{#crossLink \"JSG.graph.attr.consts.EditMask\"}}{{/crossLink}} for supported edit mask values.",
            "itemtype": "method",
            "name": "getEditMask",
            "return": {
                "description": "Attribute with current setting for the current edit mask setting.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 713,
            "description": "Checks if given edit mask constant is set. </br>\nPlease refer to {{#crossLink \"JSG.graph.attr.consts.EditMask\"}}{{/crossLink}} for supported edit mask values.",
            "itemtype": "method",
            "name": "hasEditMask",
            "params": [
                {
                    "name": "mask",
                    "description": "The edit constant mask to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<code>true</code> if given mask is set, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\ItemAttributes.js",
            "line": 726,
            "description": "Applies values from a legacy Attributes object.",
            "itemtype": "method",
            "name": "applyLegacyAttributes",
            "params": [
                {
                    "name": "attributes",
                    "description": "The legacy Attributes object to get values from.",
                    "type": "JSG.graph.model.attributes.Attributes"
                }
            ],
            "class": "JSG.graph.attr.ItemAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 26,
            "description": "Our unique name constant.",
            "itemtype": "property",
            "name": "NAME",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 35,
            "description": "Predefined constant to reference layout attribute.",
            "itemtype": "property",
            "name": "LAYOUT",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 43,
            "description": "Predefined constant to reference layoutable attribute.",
            "itemtype": "property",
            "name": "LAYOUTABLE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 51,
            "description": "Predefined constant to reference layout size attribute.",
            "itemtype": "property",
            "name": "LAYOUTSIZE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 59,
            "description": "Predefined constant to reference auto layout attribute.",
            "itemtype": "property",
            "name": "AUTOLAYOUT",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 67,
            "description": "Predefined constant to reference auto resize attribute.",
            "itemtype": "property",
            "name": "AUTORESIZE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 75,
            "description": "Predefined constant to reference auto resize level attribute.",
            "itemtype": "property",
            "name": "AUTORESIZELEVEL",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 94,
            "description": "Adds given Attribute to this AttributeList and initializes it with provided AttributeValidator.",
            "itemtype": "method",
            "name": "initAndAddAttribute",
            "params": [
                {
                    "name": "attribute",
                    "description": "The Attribute to add and initialize.",
                    "type": "JSG.graph.attr.Attribute"
                },
                {
                    "name": "validator",
                    "description": "The AttributeValidator to use for initialization.",
                    "type": "JSG.graph.attr.AttributeValidator"
                }
            ],
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 132,
            "description": "Returns the Layout attribute attached to a GraphItem. This attribute simply defines the layout\nname currently used.",
            "itemtype": "method",
            "name": "getLayout",
            "return": {
                "description": "Attribute with current layout name.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 143,
            "description": "Sets the name of the Layout to use for a GraphItem.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setLayout",
            "params": [
                {
                    "name": "newLayout",
                    "description": "Layout name of the layout to be used.",
                    "type": "JSG.graph.expr.StringExpression | String"
                }
            ],
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 155,
            "description": "Defines whether an assigned layout type should be executed automatically each time a change to the container occurs.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setAutoLayout",
            "params": [
                {
                    "name": "autoLayout",
                    "description": "True to initiate a layout on any change, otherwise false.",
                    "type": "JSG.graph.expr.BooleanExpression | Boolean"
                }
            ],
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 167,
            "description": "Returns whether a layout gets executed automatically upon a change in the container.",
            "itemtype": "method",
            "name": "getAutoLayout",
            "return": {
                "description": "Attribute with current status of the autoLayout flag.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 177,
            "description": "Set the AutoResize flag, if desired. The container can be resized automatically in the vertical or horizontal\ndirection. <br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setAutoResize",
            "params": [
                {
                    "name": "autoResize",
                    "description": "New AutoResize status.",
                    "type": "JSG.graph.expr.NumberExpression | JSG.graph.attr.consts.Direction"
                }
            ],
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 190,
            "description": "Retrieves the AutoResize attribute. The container can be resized automatically in the vertical or horizontal\ndirection, if the layout placement placed GraphItem outside the dimensions of the container.",
            "itemtype": "method",
            "name": "getAutoResize",
            "return": {
                "description": "Attribute with current AutoResize status.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 201,
            "description": "Sets the AutoResizeLevel. This option allows the resizing in conclusion to a layout execution is\napplied to a parent container. The level defines how many parent levels will be stepped up for resizing.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setAutoResizeLevel",
            "params": [
                {
                    "name": "autoResizeLevel",
                    "description": "Amount of levels.",
                    "type": "JSG.graph.expr.NumberExpression | Number"
                }
            ],
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 214,
            "description": "Retrieve the AutoResizeLevel attribute. The option allows the resizing in conclusion to a layout\nexecution is applied to a parent container. The level defines how many parent levels will be stepped\nup for resizing.",
            "itemtype": "method",
            "name": "getAutoResizeLevel",
            "return": {
                "description": "Attribute with current levels of layout.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 226,
            "description": "Defines whether a GraphItem can be changed during the layout operation.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setLayoutable",
            "params": [
                {
                    "name": "layoutable",
                    "description": "True, if the layouter can place this GraphItem during a layout or false if it should be left untouched.",
                    "type": "JSG.graph.expr.BooleanExpression | Boolean"
                }
            ],
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 238,
            "description": "Retrieve the layoutable status attribute. The status is <code>true</code> if the layouter can place\nthis GraphItem during a layout or <code>false</code> if it is left untouched.",
            "itemtype": "method",
            "name": "getLayoutable",
            "return": {
                "description": "Attribute with current layoutable status.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 249,
            "description": "Defines a layout size unit. The unit can be used by the layouter as a guideline for resizing items. The result depends on the layout implementation.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setLayoutSize",
            "params": [
                {
                    "name": "layoutSize",
                    "description": "Layout unit.",
                    "type": "JSG.graph.expr.NumberExpression | Number"
                }
            ],
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 261,
            "description": "Returns the attribute for the defined layout size unit. The unit can be used by the layouter as a\nguideline for resizing items. The result depends on the layout implementation.",
            "itemtype": "method",
            "name": "getLayoutSize",
            "return": {
                "description": "Attribute with current layout size.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 272,
            "description": "Reads old layout attributes from given XML and applies their values to this instance.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "readLegacyXML",
            "params": [
                {
                    "name": "xmlnode",
                    "description": "XML node to read from.",
                    "type": "Node"
                },
                {
                    "name": "item",
                    "description": "GraphItem to use for register legacy attributes.",
                    "type": "GraphItem"
                }
            ],
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\LayoutAttributes.js",
            "line": 287,
            "description": "Applies values from a legacy Attributes object.",
            "itemtype": "method",
            "name": "applyLegacyAttributes",
            "params": [
                {
                    "name": "attributes",
                    "description": "The legacy Attributes object to get values from.",
                    "type": "JSG.graph.model.attributes.LayoutAttributes"
                }
            ],
            "class": "JSG.graph.attr.LayoutAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\NumberAttribute.js",
            "line": 27,
            "description": "A convenience method to create a <code>NumberAttribute</code> with given name, value and display name.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "name",
                    "description": "The attribute name.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "An optional value to initialize the attribute with.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "dplname",
                    "description": "An optional display name for the attribute.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The newly created <code>NumberAttribute</code>.",
                "type": "JSG.graph.attr.NumberAttribute"
            },
            "static": 1,
            "class": "JSG.graph.attr.NumberAttribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\StringAttribute.js",
            "line": 27,
            "description": "A convenience method to create a <code>StringAttribute</code> with given name, value and display name.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "name",
                    "description": "The attribute name.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "An optional value to initialize the attribute with.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "dplname",
                    "description": "An optional display name for the attribute.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The newly created <code>StringAttribute</code>.",
                "type": "JSG.graph.attr.StringAttribute"
            },
            "static": 1,
            "class": "JSG.graph.attr.StringAttribute",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Template.js",
            "line": 31,
            "description": "Creates a new <code>Template</code> from given <code>AttributeList</code>.</br>\nNote: the given <code>AttributeList</code> should correctly implement {{#crossLink \"JSG.graph.attr.Attribute/getClassString:method\"}}{{/crossLink}}\nso that an instance of it can be created by calling {{#crossLink \"JSG.graph.attr.ConstAttributeList/toList:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "fromList",
            "params": [
                {
                    "name": "attrlist",
                    "description": "The list of attributes to create the <code>Template</code> from.",
                    "type": "JSG.graph.attr.AttributeList"
                },
                {
                    "name": "name",
                    "description": "An optional name for the new <code>Template</code>. If not provided the name of\ngiven <code>AttributeList</code> is used.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "A new <code>Template</code> based on given <code>AttributeList</code>.",
                "type": "JSG.graph.attr.Template"
            },
            "static": 1,
            "class": "JSG.graph.attr.Template",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Template.js",
            "line": 56,
            "description": "Updates this <code>Template</code> with the attributes from given list or array.<br/>\nNote: attributes which are within <code>Template</code> will be replaced and attributes which are not in\n<code>Template</code> will be added.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "list",
                    "description": "A list or array of attributes which define the new <code>Template</code> settings.",
                    "type": "Array | JSG.graph.attr.AttributeList"
                }
            ],
            "return": {
                "description": "<code>true</code> if specified <code>Template</code> was changed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "since": "1.6.0",
            "class": "JSG.graph.attr.Template",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\Template.js",
            "line": 85,
            "description": "Updates the {{#crossLink \"JSG.graph.attr.Attribute\"}}{{/crossLink}} specified by given name.<br/>\nNote: if the attribute is not within this template or within its parent hierarchy calling this method has no effect.",
            "itemtype": "method",
            "name": "updateAttribute",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the <code>Attribute</code> to change.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value or Expression.",
                    "type": "JSG.graph.expr.Expression | Object"
                }
            ],
            "return": {
                "description": "<code>true</code> if specified <code>Attribute</code> was changed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "since": "1.6.0",
            "class": "JSG.graph.attr.Template",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TemplateStore.js",
            "line": 32,
            "description": "Called on store creation to add default <code>Template</code>s. By default all framework <code>Template</code>s are registered.",
            "itemtype": "method",
            "name": "addDefaultTemplates",
            "class": "JSG.graph.attr.TemplateStore",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TemplateStore.js",
            "line": 49,
            "description": "Adds given <code>Template</code> to this store.<br/>\n<b>Note:</b> if a <code>Template</code> of same name is already in store, adding given <code>Template</code> is ignored. \nTo update a <code>Template</code> use {{#crossLink \"JSG.graph.attr.TemplateStore/updateTemplate:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "addTemplate",
            "params": [
                {
                    "name": "template",
                    "description": "The <code>Template</code> to add.",
                    "type": "JSG.graph.attr.Template"
                }
            ],
            "return": {
                "description": "<code>true</code> if <code>Template</code> was added, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.TemplateStore",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TemplateStore.js",
            "line": 74,
            "description": "Returns the template which is registered under given name.",
            "itemtype": "method",
            "name": "getTemplate",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the template to get.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The template or <code>undefined</code>.",
                "type": "JSG.graph.attr.ConstAttributeList"
            },
            "class": "JSG.graph.attr.TemplateStore",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TemplateStore.js",
            "line": 84,
            "description": "Checks if there is already a <code>Template</code> stored which has the same name as given <code>Template</code> or\nString.",
            "itemtype": "method",
            "name": "hasTemplate",
            "params": [
                {
                    "name": "template",
                    "description": "Either a <code>Template</code> name or a <code>Template</code> instance.",
                    "type": "String|JSG.graph.attr.Template"
                }
            ],
            "return": {
                "description": "<code>true</code> if a <code>Template</code> of same name is already stored, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.TemplateStore",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TemplateStore.js",
            "line": 96,
            "description": "Updates specified <code>Template</code> with the attributes from given list or array.<br/>\nNote: attributes which are not in <code>Template</code> will be added.",
            "itemtype": "method",
            "name": "updateTemplate",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the <code>Template</code> to update.",
                    "type": "String"
                },
                {
                    "name": "list",
                    "description": "A list or array of attributes which define the new <code>Template</code> settings.",
                    "type": "Array | JSG.graph.attr.AttributeList"
                }
            ],
            "return": {
                "description": "<code>true</code> if specified <code>Template</code> was changed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.TemplateStore",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TemplateStore.js",
            "line": 111,
            "description": "Removes given <code>Template</code> from this store.<br/>\n<b>Note:</b> use with care!! Ensure that removed <code>Template</code> is not referenced by an {{#crossLink \"JSG.graph.attr.AttributeList\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "removeTemplate",
            "params": [
                {
                    "name": "template",
                    "description": "The <code>Template</code> to remove.",
                    "type": "JSG.graph.attr.ConstAttributeList"
                }
            ],
            "class": "JSG.graph.attr.TemplateStore",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 37,
            "description": "Left align text.",
            "itemtype": "property",
            "name": "LEFT",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.TextAlignment",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 43,
            "description": "Center text horizontally.",
            "itemtype": "property",
            "name": "CENTER",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.TextAlignment",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 49,
            "description": "Right align text.",
            "itemtype": "property",
            "name": "RIGHT",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.TextAlignment",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 63,
            "description": "Aligns text below baseline.",
            "itemtype": "property",
            "name": "TOP",
            "type": "String",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.TextBaseline",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 69,
            "description": "Specifies a hanging text alignment which results in a bit lower align then \n{{#crossLink \"JSG.graph.attr.TextFormatAttributes.TextBaseline/TOP:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "HANGING",
            "type": "String",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.TextBaseline",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 76,
            "description": "Vertically centers text.",
            "itemtype": "property",
            "name": "MIDDLE",
            "type": "String",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.TextBaseline",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 82,
            "description": "Moves the baseline at the vertical bottom of fonts like Latin or Arabic.",
            "itemtype": "property",
            "name": "ALPHABETIC",
            "type": "String",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.TextBaseline",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 88,
            "description": "Moves the baseline at the horizontal bottom of fonts like Hangul or Hiragana.",
            "itemtype": "property",
            "name": "IDEOGRAPHIC",
            "type": "String",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.TextBaseline",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 94,
            "description": "Aligns the text above baseline.",
            "itemtype": "property",
            "name": "BOTTOM",
            "type": "String",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.TextBaseline",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 106,
            "description": "Text is positioned by its coordinate",
            "itemtype": "property",
            "name": "CUSTOM",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.VerticalTextPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 112,
            "description": "Place text vertically above box.",
            "itemtype": "property",
            "name": "ONTOP",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.VerticalTextPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 118,
            "description": "Place text before line.",
            "itemtype": "property",
            "name": "BEFORESTART",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.VerticalTextPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 124,
            "description": "Top align text or at beginning of line",
            "itemtype": "property",
            "name": "TOP",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.VerticalTextPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 130,
            "description": "Place text at beginning of line",
            "itemtype": "property",
            "name": "START",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.VerticalTextPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 136,
            "description": "Center text.",
            "itemtype": "property",
            "name": "CENTER",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.VerticalTextPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 142,
            "description": "Place text at bottom.",
            "itemtype": "property",
            "name": "BOTTOM",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.VerticalTextPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 148,
            "description": "Place text at end of line..",
            "itemtype": "property",
            "name": "END",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.VerticalTextPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 154,
            "description": "Place text below bottom of box.",
            "itemtype": "property",
            "name": "BELOWBOTTOM",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.VerticalTextPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 160,
            "description": "Place text behind end of line.",
            "itemtype": "property",
            "name": "BEHINDEND",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.VerticalTextPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 172,
            "description": "Text is positioned by its coordinate",
            "itemtype": "property",
            "name": "CUSTOM",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 178,
            "description": "Place text left to the box or at in direction of the line to the left",
            "itemtype": "property",
            "name": "TOLEFT",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 184,
            "description": "Left align text or at in direction of the line to the left",
            "itemtype": "property",
            "name": "LEFT",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 190,
            "description": "Center text horizontally.",
            "itemtype": "property",
            "name": "CENTER",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 196,
            "description": "Right align text or at in direction of the line to the right",
            "itemtype": "property",
            "name": "RIGHT",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 202,
            "description": "Place text right to the box or at in direction of the line to the right",
            "itemtype": "property",
            "name": "TORIGHT",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 214,
            "description": "Default font style.",
            "itemtype": "property",
            "name": "NORMAL",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.FontStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 220,
            "description": "Bold font style.",
            "itemtype": "property",
            "name": "BOLD",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.FontStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 226,
            "description": "Italic font style.",
            "itemtype": "property",
            "name": "ITALIC",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.FontStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 232,
            "description": "Underline font style.",
            "itemtype": "property",
            "name": "UNDERLINE",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextFormatAttributes.FontStyle",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 241,
            "description": "Our unique name constant.",
            "itemtype": "property",
            "name": "NAME",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 250,
            "description": "Predefined constant to reference vertical align attribute.",
            "itemtype": "property",
            "name": "VERTICALALIGN",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 258,
            "description": "Predefined constant to reference horizontal align attribute.",
            "itemtype": "property",
            "name": "HORIZONTALALIGN",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 266,
            "description": "Predefined constant to reference font size attribute.",
            "itemtype": "property",
            "name": "FONTSIZE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 274,
            "description": "Predefined constant to reference font name attribute.",
            "itemtype": "property",
            "name": "FONTNAME",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 282,
            "description": "Predefined constant to reference font color attribute.",
            "itemtype": "property",
            "name": "FONTCOLOR",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 290,
            "description": "Predefined constant to reference font style attribute.",
            "itemtype": "property",
            "name": "FONTSTYLE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 298,
            "description": "Predefined constant to reference vertical position attribute.",
            "itemtype": "property",
            "name": "VERTICALPOSITION",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 306,
            "description": "Predefined constant to reference horizontal position attribute.",
            "itemtype": "property",
            "name": "HORIZONTALPOSITION",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 314,
            "description": "Predefined constant to reference rich text attribute.",
            "itemtype": "property",
            "name": "RICHTEXT",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 322,
            "description": "Predefined constant to reference ellipse text attribute. If set to true the text will be limited to one\nline and its parent container width. If the text is longer, it will be cut and 3 dots will be displayed to\nvisualize this effect.",
            "itemtype": "property",
            "name": "ELLIPSETEXT",
            "type": "{String}",
            "static": 1,
            "since": "1.6.7",
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 344,
            "description": "Creates a new list containing only those attributes which have the same value in each of the selected \n{{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s.",
            "itemtype": "method",
            "name": "retainFromSelection",
            "params": [
                {
                    "name": "selection",
                    "description": "An array of selected <code>GraphItem</code>s.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A list containing only those attributes which have the same value in each \nof the selected <code>GraphItem</code>s.",
                "type": "JSG.graph.attr.FormatAttributes"
            },
            "static": 1,
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 372,
            "description": "Applies the values of given TextFormatAttributes to this instance.",
            "itemtype": "method",
            "name": "setFormatTo",
            "params": [
                {
                    "name": "format",
                    "description": "The Format object to get the values from.",
                    "type": "JSG.graph.attr.TextFormatAttributes"
                }
            ],
            "return": {
                "description": "<code>true</code> if at least one attribute was changed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 384,
            "description": "Applies the text format values to given Graphics object.",
            "itemtype": "method",
            "name": "applyToGraphics",
            "params": [
                {
                    "name": "graphics",
                    "description": "The Graphics object to apply the text format to.",
                    "type": "JSG.ui.graphics.Graphics"
                },
                {
                    "name": "noZoom",
                    "description": "Specify <code>true</code> to ignore current zoom for font-size value.",
                    "type": "Booleam",
                    "optional": true
                }
            ],
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 420,
            "description": "Get the vertical text alignment. Supported values are defined in {{#crossLink \"JSG.graph.attr.TextFormatAttributes.TextBaseline\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getVerticalAlignment",
            "return": {
                "description": "Vertical text alignment attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "since": "1.6.3",
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 430,
            "description": "Sets the new vertical text alignment. The vertical alignment is actually defined by the font baseline.\nSupported values are specified in {{#crossLink \"JSG.graph.attr.TextFormatAttributes.TextBaseline\"}}{{/crossLink}}.</br>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setVerticalAlignment",
            "params": [
                {
                    "name": "baseline",
                    "description": "The new text baseline to use.",
                    "type": "JSG.graph.expr.Expression | String"
                }
            ],
            "since": "1.6.3",
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 444,
            "description": "Get the horizontal text alignment.",
            "itemtype": "method",
            "name": "getHorizontalAlignment",
            "return": {
                "description": "Horizontal text alignment attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 453,
            "description": "Define the horizontal text alignment.\nSupported values are specified in {{#crossLink \"JSG.graph.attr.TextFormatAttributes.TextAlignment\"}}{{/crossLink}}.</br>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setHorizontalAlignment",
            "params": [
                {
                    "name": "horizontalAlignment",
                    "description": "Horizontal text alignment.",
                    "type": "JSG.graph.expr.Expression | String"
                }
            ],
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 466,
            "description": "Get the vertical text node position within the parent container or edge. The text position for nodes and edges are defined\nusing different constants. The vertical text position within an edge defines the position along the line.",
            "itemtype": "method",
            "name": "getVerticalPosition",
            "return": {
                "description": "Current vertical text position attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 476,
            "description": "Set the vertical text node position within the parent container or edge. The text position for nodes and edges are defined\nusing different constants. The vertical text position within an edge defines the position along the line. Therefore you can\ndefine a START or END position for a label attached to a line. Just look an the definitions to choose the appropriate one.</br>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setVerticalPosition",
            "params": [
                {
                    "name": "position",
                    "description": "New vertical text position.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.TextFormatAttributes.VerticalTextPosition"
                }
            ],
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 490,
            "description": "Get the horizontal text node position within the parent container. The text position for nodes are defined\nusing different constants.",
            "itemtype": "method",
            "name": "getHorizontalPosition",
            "return": {
                "description": "Current horizontal text position attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 500,
            "description": "Set the horizontal text node position within the parent container. The horizontal text position is currently not used\nfor edges. Just look an the definitions to choose the appropriate one. </br>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setHorizontalPosition",
            "params": [
                {
                    "name": "position",
                    "description": "New horizontal text position.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition"
                }
            ],
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 513,
            "description": "Get the current font size.",
            "itemtype": "method",
            "name": "getFontSize",
            "return": {
                "description": "Font size attribute",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 522,
            "description": "Define the font size in points.</br>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setFontSize",
            "params": [
                {
                    "name": "fontSize",
                    "description": "Font size in points.",
                    "type": "JSG.graph.expr.Expression | Number"
                }
            ],
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 534,
            "description": "Returm the current font name.",
            "itemtype": "method",
            "name": "getFontName",
            "return": {
                "description": "Current font name attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 543,
            "description": "Define the font name to be used.</br>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setFontName",
            "params": [
                {
                    "name": "fontName",
                    "description": "New font name.",
                    "type": "JSG.graph.expr.Expression | String"
                }
            ],
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 555,
            "description": "Return the current font color. The color is returned as a hexadecimal RGB string, preceded by a '#' char.",
            "itemtype": "method",
            "name": "getFontColor",
            "return": {
                "description": "The current font color attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 565,
            "description": "Set the font color. The color must be given as a hexadecimal RGB string, preceded by a '#' char.</br>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setFontColor",
            "params": [
                {
                    "name": "fontColor",
                    "description": "The new font color.",
                    "type": "JSG.graph.expr.Expression | String"
                }
            ],
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 577,
            "description": "Define the new font style.",
            "itemtype": "method",
            "name": "getFontStyle",
            "return": {
                "description": "The current font style attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 586,
            "description": "Define the font style.</br>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setFontStyle",
            "params": [
                {
                    "name": "fontStyle",
                    "description": "The new font style.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.FontStyle"
                }
            ],
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 598,
            "description": "Gets rich text flag. If enabled, the user can apply text formatting to\ntext parts.",
            "itemtype": "method",
            "name": "getRichText",
            "return": {
                "description": "The current rich text attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 608,
            "description": "Define the rich text flag. If enabled, the user can apply text formatting to text parts.</br>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setRichText",
            "params": [
                {
                    "name": "richText",
                    "description": "True to enable rich text, otherwise false or an expression.",
                    "type": "JSG.graph.expr.Expression | boolean"
                }
            ],
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 620,
            "description": "Gets ellipse text flag. If enabled, the text is shortened to one line and at maximum the width\nof the parent item of the text. If it is shortened, three dots are displayed to visualize this.",
            "itemtype": "method",
            "name": "getEllipseText",
            "return": {
                "description": "The current ellipse text attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "since": "1.6.7",
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextFormatAttributes.js",
            "line": 631,
            "description": "Define the ellipse text flag. If enabled, the text is shortened to one line and at maximum the width\nof the parent item of the text. If it is shortened, three dots are displayed to visualize this.</br>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setEllipseText",
            "params": [
                {
                    "name": "ellipseText",
                    "description": "True to enable ellipse text, otherwise false or an expression.",
                    "type": "JSG.graph.expr.Expression | boolean"
                }
            ],
            "since": "1.6.7",
            "class": "JSG.graph.attr.TextFormatAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextNodeAttributes.js",
            "line": 30,
            "description": "Default size mode.</br>\nSpecifies that the size of a {{#crossLink \"JSG.graph.model.TextNode\"}}{{/crossLink}} is\ndefined by its current text  value.",
            "itemtype": "property",
            "name": "TEXT",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextNodeAttributes.SizeMode",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextNodeAttributes.js",
            "line": 38,
            "description": "Specifies that the size of a {{#crossLink \"JSG.graph.model.TextNode\"}}{{/crossLink}} is\ndefined by its current width, i.e. the width is constant and only its height grows.</br>\nNote: this means that the TextNode text is wrapped.",
            "itemtype": "property",
            "name": "WIDTH",
            "type": "Number",
            "final": 1,
            "class": "JSG.graph.attr.TextNodeAttributes.SizeMode",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextNodeAttributes.js",
            "line": 46,
            "description": "Specifies that the visible text within a {{#crossLink \"JSG.graph.model.TextNode\"}}{{/crossLink}} is\nlimited by its current height.</br> Any text that does not fit into the textnode area will be cut off. \nThis is visualized by ellipsing the text.",
            "itemtype": "property",
            "name": "HEIGHT",
            "type": "Number",
            "final": 1,
            "since": "1.6.7",
            "class": "JSG.graph.attr.TextNodeAttributes.SizeMode",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextNodeAttributes.js",
            "line": 59,
            "description": "Predefined constant to reference size mode attribute.",
            "itemtype": "property",
            "name": "SIZEMODE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.attr.TextNodeAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextNodeAttributes.js",
            "line": 79,
            "description": "Returns the current size mode attribute.</br>\nThe value of returned attribute is either an <code>Expression</code> or one of the predefined\n{{#crossLink \"JSG.graph.attr.TextNodeAttributes.SizeMode\"}}{{/crossLink}} constants.",
            "itemtype": "method",
            "name": "getSizeMode",
            "return": {
                "description": "The current size mode attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.attr.TextNodeAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\TextNodeAttributes.js",
            "line": 89,
            "description": "Sets the new size mode.</br>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setSizeMode",
            "params": [
                {
                    "name": "sizemode",
                    "description": "The new size mode.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.TextNodeAttributes.SizeMode"
                }
            ],
            "class": "JSG.graph.attr.TextNodeAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 35,
            "description": "Top align watermark",
            "itemtype": "property",
            "name": "TOP",
            "type": "Number",
            "since": "1.6.7",
            "final": 1,
            "class": "JSG.graph.attr.WatermarkAttributes.VerticalPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 42,
            "description": "Center watermark.",
            "itemtype": "property",
            "name": "CENTER",
            "type": "Number",
            "since": "1.6.7",
            "final": 1,
            "class": "JSG.graph.attr.WatermarkAttributes.VerticalPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 49,
            "description": "Place watermark at bottom.",
            "itemtype": "property",
            "name": "BOTTOM",
            "type": "Number",
            "since": "1.6.7",
            "final": 1,
            "class": "JSG.graph.attr.WatermarkAttributes.VerticalPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 56,
            "description": "Repeat watermark text within node.",
            "itemtype": "property",
            "name": "REPEAT",
            "type": "Number",
            "since": "1.6.7",
            "final": 1,
            "class": "JSG.graph.attr.WatermarkAttributes.VerticalPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 69,
            "description": "Left align watermark.",
            "itemtype": "property",
            "name": "LEFT",
            "type": "Number",
            "since": "1.6.7",
            "final": 1,
            "class": "JSG.graph.attr.WatermarkAttributes.HorizontalPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 76,
            "description": "Center watermark.",
            "itemtype": "property",
            "name": "CENTER",
            "type": "Number",
            "since": "1.6.7",
            "final": 1,
            "class": "JSG.graph.attr.WatermarkAttributes.HorizontalPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 83,
            "description": "Right align watermark.",
            "itemtype": "property",
            "name": "RIGHT",
            "type": "Number",
            "since": "1.6.7",
            "final": 1,
            "class": "JSG.graph.attr.WatermarkAttributes.HorizontalPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 90,
            "description": "Repeat watermark text.",
            "itemtype": "property",
            "name": "REPEAT",
            "type": "Number",
            "since": "1.6.7",
            "final": 1,
            "class": "JSG.graph.attr.WatermarkAttributes.HorizontalPosition",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 99,
            "description": "Our unique name constant.",
            "itemtype": "property",
            "name": "NAME",
            "type": "{String}",
            "static": 1,
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 110,
            "description": "Text to display as watermark",
            "itemtype": "property",
            "name": "TEXT",
            "type": "{String}",
            "since": "1.6.7",
            "static": 1,
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 120,
            "description": "Predefined constant to reference margin top attribute.",
            "itemtype": "property",
            "name": "MARGINTOP",
            "type": "{String}",
            "since": "1.6.7",
            "static": 1,
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 129,
            "description": "Predefined constant to reference margin left attribute.",
            "itemtype": "property",
            "name": "MARGINLEFT",
            "type": "{String}",
            "since": "1.6.7",
            "static": 1,
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 138,
            "description": "Predefined constant to reference margin right attribute.",
            "itemtype": "property",
            "name": "MARGINRIGHT",
            "type": "{String}",
            "since": "1.6.7",
            "static": 1,
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 147,
            "description": "Predefined constant to reference margin bottom attribute.",
            "itemtype": "property",
            "name": "MARGINBOTTOM",
            "type": "{String}",
            "since": "1.6.7",
            "static": 1,
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 156,
            "description": "Predefined constant to reference vertical position attribute.",
            "itemtype": "property",
            "name": "VERTICALPOSITION",
            "type": "{String}",
            "since": "1.6.7",
            "static": 1,
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 165,
            "description": "Predefined constant to reference horizontal position attribute.",
            "itemtype": "property",
            "name": "HORIZONTALPOSITION",
            "type": "{String}",
            "since": "1.6.7",
            "static": 1,
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 174,
            "description": "Predefined constant to reference vertical distance between watermarks, if \nthey are configured to be repeated horizontally.",
            "itemtype": "property",
            "name": "VERTICALDISTANCE",
            "type": "{String}",
            "since": "1.6.7",
            "static": 1,
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 185,
            "description": "Predefined constant to reference horizontal distance between watermarks, if \nthey are configured to be repeated vertically",
            "itemtype": "property",
            "name": "HORIZONTALDISTANCE",
            "type": "{String}",
            "since": "1.6.7",
            "static": 1,
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 195,
            "description": "Predefined constant to reference font size attribute.",
            "itemtype": "property",
            "name": "FONTSIZE",
            "type": "{String}",
            "since": "1.6.7",
            "static": 1,
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 204,
            "description": "Predefined constant to reference font name attribute.",
            "itemtype": "property",
            "name": "FONTNAME",
            "type": "{String}",
            "since": "1.6.7",
            "static": 1,
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 213,
            "description": "Predefined constant to reference font color attribute.",
            "itemtype": "property",
            "name": "FONTCOLOR",
            "type": "{String}",
            "since": "1.6.7",
            "static": 1,
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 222,
            "description": "Predefined constant to reference font style attribute.",
            "itemtype": "property",
            "name": "FONTSTYLE",
            "type": "{String}",
            "since": "1.6.7",
            "static": 1,
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 242,
            "description": "Applies the text format values to given Graphics object.",
            "itemtype": "method",
            "name": "applyToGraphics",
            "params": [
                {
                    "name": "graphics",
                    "description": "The Graphics object to apply the text format to.",
                    "type": "JSG.ui.graphics.Graphics"
                },
                {
                    "name": "noZoom",
                    "description": "Specify <code>true</code> to ignore current zoom for font-size value.",
                    "type": "Booleam",
                    "optional": true
                }
            ],
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 265,
            "description": "Get the watermark text.",
            "itemtype": "method",
            "name": "getText",
            "return": {
                "description": "Current watermark text.",
                "type": "JSG.graph.attr.Attribute"
            },
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 275,
            "description": "Set the watermark text.",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "text",
                    "description": "New watermark text.",
                    "type": "JSG.graph.expr.Expression | String"
                }
            ],
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 286,
            "description": "Defines the left margin of an item.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setLeftMargin",
            "params": [
                {
                    "name": "margin",
                    "description": "Left margin setting in 1/100th mm.",
                    "type": "JSG.graph.expr.NumberExpression | Number"
                }
            ],
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 299,
            "description": "Returns the attribute for the left margin.",
            "itemtype": "method",
            "name": "getLeftMargin",
            "return": {
                "description": "Attribute with current setting for the left margin.",
                "type": "JSG.graph.attr.Attribute"
            },
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 310,
            "description": "Defines the right margin of an item.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setRightMargin",
            "params": [
                {
                    "name": "margin",
                    "description": "Right margin setting in 1/100th mm.",
                    "type": "JSG.graph.expr.NumberExpression | Number"
                }
            ],
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 323,
            "description": "Returns the attribute for the right margin.",
            "itemtype": "method",
            "name": "getRightMargin",
            "return": {
                "description": "Attribute with current setting for the right margin.",
                "type": "JSG.graph.attr.Attribute"
            },
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 333,
            "description": "Defines the top margin of an item.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setTopMargin",
            "params": [
                {
                    "name": "margin",
                    "description": "Top margin setting in 1/100th mm.",
                    "type": "JSG.graph.expr.NumberExpression | Number"
                }
            ],
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 346,
            "description": "Returns the attribute for the top margin.",
            "itemtype": "method",
            "name": "getTopMargin",
            "return": {
                "description": "Attribute with current setting for the top margin.",
                "type": "JSG.graph.attr.Attribute"
            },
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 356,
            "description": "Defines the bottom margin of an item.<br/>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setBottomMargin",
            "params": [
                {
                    "name": "margin",
                    "description": "Bottom margin setting in 1/100th mm.",
                    "type": "JSG.graph.expr.NumberExpression | Number"
                }
            ],
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 369,
            "description": "Returns the attribute for the bottom margin.",
            "itemtype": "method",
            "name": "getBottomMargin",
            "return": {
                "description": "Attribute with current setting for the bottom margin.",
                "type": "JSG.graph.attr.Attribute"
            },
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 380,
            "description": "Get the vertical distance between two watermarks.",
            "itemtype": "method",
            "name": "getVerticalDistance",
            "return": {
                "description": "Current vertical distance.",
                "type": "JSG.graph.attr.Attribute"
            },
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 390,
            "description": "Set the vertical distance between two watermarks. This setting only has an effect, if the\nvertical position is set to REPEAT",
            "itemtype": "method",
            "name": "setVerticalDistance",
            "params": [
                {
                    "name": "distance",
                    "description": "New vertical distance in 1/100th mm.",
                    "type": "JSG.graph.expr.Expression | Number"
                }
            ],
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 402,
            "description": "Get the horizontal distance between two watermarks.",
            "itemtype": "method",
            "name": "getHorizontalDistance",
            "return": {
                "description": "Current horizontal distance.",
                "type": "JSG.graph.attr.Attribute"
            },
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 412,
            "description": "Set the horizontal distance between two watermarks. This setting only has an effect, if the\nhorizontal position is set to REPEAT",
            "itemtype": "method",
            "name": "setHorizontalDistance",
            "params": [
                {
                    "name": "distance",
                    "description": "New horizontal distance in 1/100th mm.",
                    "type": "JSG.graph.expr.Expression | Number"
                }
            ],
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 424,
            "description": "Get the vertical watermark position within node.",
            "itemtype": "method",
            "name": "getVerticalPosition",
            "return": {
                "description": "Current vertical position attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 434,
            "description": "Set the vertical watermark position within the node.",
            "itemtype": "method",
            "name": "setVerticalPosition",
            "params": [
                {
                    "name": "position",
                    "description": "New vertical text position.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.VerticalTextPosition"
                }
            ],
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 445,
            "description": "Get the horizontal watermark position within node.",
            "itemtype": "method",
            "name": "getHorizontalPosition",
            "return": {
                "description": "Current horizontal position attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 455,
            "description": "Set the horizontal watermark position within the node.",
            "itemtype": "method",
            "name": "setHorizontalPosition",
            "params": [
                {
                    "name": "position",
                    "description": "New horizontal watermark position.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.HorizontalTextPosition"
                }
            ],
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 466,
            "description": "Get the current font size.",
            "itemtype": "method",
            "name": "getFontSize",
            "return": {
                "description": "Font size attribute",
                "type": "JSG.graph.attr.Attribute"
            },
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 476,
            "description": "Define the font size in points.</br>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setFontSize",
            "params": [
                {
                    "name": "fontSize",
                    "description": "Font size in points.",
                    "type": "JSG.graph.expr.Expression | Number"
                }
            ],
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 489,
            "description": "Return the current font name.",
            "itemtype": "method",
            "name": "getFontName",
            "return": {
                "description": "Current font name attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 499,
            "description": "Define the font name to be used.</br>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setFontName",
            "params": [
                {
                    "name": "fontName",
                    "description": "New font name.",
                    "type": "JSG.graph.expr.Expression | String"
                }
            ],
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 512,
            "description": "Return the current font color. The color is returned as a hexadecimal RGB string, preceded by a '#' char.",
            "itemtype": "method",
            "name": "getFontColor",
            "return": {
                "description": "The current font color attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 523,
            "description": "Set the font color. The color must be given as a hexadecimal RGB string, preceded by a '#' char.</br>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setFontColor",
            "params": [
                {
                    "name": "fontColor",
                    "description": "The new font color.",
                    "type": "JSG.graph.expr.Expression | String"
                }
            ],
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 536,
            "description": "Define the new font style.",
            "itemtype": "method",
            "name": "getFontStyle",
            "return": {
                "description": "The current font style attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\attr\\WatermarkAttributes.js",
            "line": 546,
            "description": "Define the font style.</br>\nNote: if this AttributeList is attached to a GraphItem attributes hierarchy, a corresponding\n{{#crossLink \"JSG.graph.model.events.AttributeChangeEvent\"}}{{/crossLink}} is raised.",
            "itemtype": "method",
            "name": "setFontStyle",
            "params": [
                {
                    "name": "fontStyle",
                    "description": "The new font style.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.attr.FontStyle"
                }
            ],
            "since": "1.6.7",
            "class": "JSG.graph.attr.WatermarkAttributes",
            "module": "JSG.graph.attr",
            "namespace": "JSG.graph.attr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AbstractGroupUngroupCommand.js",
            "line": 52,
            "description": "Returns those {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s from given selection which can be grouped.<br/>\nPlease refer to {{#crossLink \"JSG.graph.command.AbstractGroupUngroupCommand/filterItems:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "getItemsFromSelection",
            "params": [
                {
                    "name": "selection",
                    "description": "A list of {{#crossLink \"JSG.graph.controller.GraphItemController\"}}{{/crossLink}}s which represents current selection.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A list of GraphItems to group.",
                "type": "Array"
            },
            "class": "JSG.graph.command.AbstractGroupUngroupCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AbstractGroupUngroupCommand.js",
            "line": 70,
            "description": "Called by {{#crossLink \"JSG.graph.command.AbstractGroupUngroupCommand/getItemsFromSelection:method\"}}{{/crossLink}} \nto filter possible group items and returns a list of those which should be added to new group.<br/>\nThe default implementation returns those items which have same parent.",
            "itemtype": "method",
            "name": "filterItems",
            "params": [
                {
                    "name": "items",
                    "description": "A list of possible group items.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A list of items to add to group.",
                "type": "Array"
            },
            "class": "JSG.graph.command.AbstractGroupUngroupCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AbstractGroupUngroupCommand.js",
            "line": 93,
            "description": "Create a new Group or Container Node. It is visualized as an invisible Rectangle.",
            "itemtype": "method",
            "name": "newGroup",
            "return": {
                "description": "A node with invisible line and fill formats.",
                "type": "JSG.graph.model.Node"
            },
            "class": "JSG.graph.command.AbstractGroupUngroupCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AbstractGroupUngroupCommand.js",
            "line": 102,
            "description": "Calculates the BoundingBox for the new group which is defined by the BoundingBoxes of given \n{{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s.",
            "itemtype": "method",
            "name": "getGroupBBox",
            "params": [
                {
                    "name": "items",
                    "description": "The group items.",
                    "type": "Array"
                },
                {
                    "name": "reusebbox",
                    "description": "An optional bounding box to reuse, if not supplied a new one will be created.",
                    "type": "JSG.geometry.BoundingBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "The BoundingBox for the group to create.",
                "type": "JSG.geometry.BoundingBox"
            },
            "class": "JSG.graph.command.AbstractGroupUngroupCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AbstractGroupUngroupCommand.js",
            "line": 122,
            "description": "Adds given {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s to newly created group. This will translate\neach item to the groups coordinate system.<br/>\nPlease refer to {{#crossLink \"JSG.graph.command.AbstractGroupUngroupCommand/initItem:method\"}}{{/crossLink}} which\nis called for each item.",
            "itemtype": "method",
            "name": "addItems",
            "params": [
                {
                    "name": "items",
                    "description": "The items to add to the group.",
                    "type": "Array"
                },
                {
                    "name": "group",
                    "description": "The newly created group to add the items to.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "class": "JSG.graph.command.AbstractGroupUngroupCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AbstractGroupUngroupCommand.js",
            "line": 151,
            "description": "Group an array of items within a container. The items will be inserted a subitems in the given group item and\nthe items will receive formulas to proportionally resize with the group extensions. Items in the group are not\nmoveable or sizeable.<br/>\nPlease refer to {{#crossLink \"JSG.graph.command.AbstractGroupUngroupCommand/initItem:method\"}}{{/crossLink}}\nand {{#crossLink \"JSG.graph.command.AbstractGroupUngroupCommand/filterItems:method\"}}{{/crossLink}} to customize\ngroup content.",
            "itemtype": "method",
            "name": "group",
            "params": [
                {
                    "name": "items",
                    "description": "Array with GraphItems to be grouped.",
                    "type": "Array"
                },
                {
                    "name": "newGroup",
                    "description": "Node to group items inside as subitems.",
                    "type": "JSG.graph.model.Node"
                }
            ],
            "class": "JSG.graph.command.AbstractGroupUngroupCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AbstractGroupUngroupCommand.js",
            "line": 175,
            "description": "Ungroup items in the given node.",
            "itemtype": "method",
            "name": "ungroup",
            "params": [
                {
                    "name": "group",
                    "description": "Group that contains the items to be ungrouped.",
                    "type": "JSG.graph.model.Node"
                }
            ],
            "class": "JSG.graph.command.AbstractGroupUngroupCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AbstractGroupUngroupCommand.js",
            "line": 235,
            "description": "Creates and returns a new group object.",
            "itemtype": "method",
            "name": "create",
            "return": {
                "description": "A newly created group.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.graph.command.GroupCreator",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AbstractGroupUngroupCommand.js",
            "line": 247,
            "description": "Initializes given group item.",
            "itemtype": "method",
            "name": "initGroup",
            "params": [
                {
                    "name": "group",
                    "description": "The group item to initialize.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "groupbox",
                    "description": "The bounding.box to use for the group.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "class": "JSG.graph.command.GroupCreator",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AbstractGroupUngroupCommand.js",
            "line": 261,
            "description": "Initializes given group item, e.g. adjust certain attribute values or set a relative pin position.<br/>",
            "itemtype": "method",
            "name": "initItem",
            "params": [
                {
                    "name": "item",
                    "description": "The item to initialize.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "groupbox",
                    "description": "The bounding-box of the group to which given item belongs.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "class": "JSG.graph.command.GroupCreator",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AbstractItemCommand.js",
            "line": 24,
            "description": "Get stored GraphItem",
            "itemtype": "method",
            "name": "getItem",
            "return": {
                "description": "Return handled GraphItem",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.graph.command.AbstractItemCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AbstractItemCommand.js",
            "line": 34,
            "description": "Execute the command. By default we simply call the redo method.",
            "itemtype": "method",
            "name": "execute",
            "class": "JSG.graph.command.AbstractItemCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AbstractItemCommand.js",
            "line": 43,
            "description": "Overwritten from superclass to call restoreState.</br>",
            "itemtype": "method",
            "name": "restoreStateAfterUndo",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by calling InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.command.AbstractItemCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AbstractItemCommand.js",
            "line": 52,
            "description": "Overwritten from superclass to call restoreState.</br>",
            "itemtype": "method",
            "name": "restoreStateAfterRedo",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by calling InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.command.AbstractItemCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AbstractItemCommand.js",
            "line": 62,
            "description": "Simply select inner GraphItem.</br>",
            "itemtype": "method",
            "name": "restoreState",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by calling InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.command.AbstractItemCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AddItemCommand.js",
            "line": 32,
            "description": "Undo the operation. Here the previously added GraphItem will be removed again.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.AddItemCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AddItemCommand.js",
            "line": 44,
            "description": "Redo an undone operation. Here the GraphItem will be inserted again.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.AddItemCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AddLabelCommand.js",
            "line": 31,
            "description": "Undo the previously executed operation. The label will be removed from the GraphItem.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.AddLabelCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AddLabelCommand.js",
            "line": 40,
            "description": "Redo the command. Here the label is attached to the GraphItem again.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.AddLabelCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AddPortCommand.js",
            "line": 37,
            "description": "Remove previously created node.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.AddPortCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AddPortCommand.js",
            "line": 46,
            "description": "Recreate from previous undo operation.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.AddPortCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AlignItemsCommand.js",
            "line": 13,
            "description": "Align items to the top.",
            "itemtype": "property",
            "name": "TOP",
            "type": "{Number}",
            "final": 1,
            "class": "JSG.graph.command.Alignment",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AlignItemsCommand.js",
            "line": 20,
            "description": "Align items to the vertical center.",
            "itemtype": "property",
            "name": "MIDDLE",
            "type": "{Number}",
            "final": 1,
            "class": "JSG.graph.command.Alignment",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AlignItemsCommand.js",
            "line": 27,
            "description": "Align items to the bottom.",
            "itemtype": "property",
            "name": "BOTTOM",
            "type": "{Number}",
            "final": 1,
            "class": "JSG.graph.command.Alignment",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AlignItemsCommand.js",
            "line": 34,
            "description": "Align items to the left.",
            "itemtype": "property",
            "name": "LEFT",
            "type": "{Number}",
            "final": 1,
            "class": "JSG.graph.command.Alignment",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AlignItemsCommand.js",
            "line": 41,
            "description": "Align items to the horizontal center.",
            "itemtype": "property",
            "name": "CENTER",
            "type": "{Number}",
            "final": 1,
            "class": "JSG.graph.command.Alignment",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AlignItemsCommand.js",
            "line": 48,
            "description": "Align items to the right.",
            "itemtype": "property",
            "name": "RIGHT",
            "type": "{Number}",
            "final": 1,
            "class": "JSG.graph.command.Alignment",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AlignItemsCommand.js",
            "line": 55,
            "description": "Distribute items evenly in the horizontal direction.",
            "itemtype": "property",
            "name": "HDISTRIBUTE",
            "type": "{Number}",
            "final": 1,
            "class": "JSG.graph.command.Alignment",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AlignItemsCommand.js",
            "line": 62,
            "description": "Distribute items evenly in the vertical direction.",
            "itemtype": "property",
            "name": "VDISTRIBUTE",
            "type": "{Number}",
            "final": 1,
            "class": "JSG.graph.command.Alignment",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AlignItemsCommand.js",
            "line": 124,
            "description": "Execute the alignment of the GraphItems.",
            "itemtype": "method",
            "name": "execute",
            "class": "JSG.graph.command.AlignItemsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AlignItemsCommand.js",
            "line": 133,
            "description": "Undo the alignment operation. The position of the GraphItems are restored.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.AlignItemsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AlignItemsCommand.js",
            "line": 152,
            "description": "Redo a previously undone alignment command.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.AlignItemsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AttachCommand.js",
            "line": 29,
            "description": "Undo the attach operation.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.AttachCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\AttachCommand.js",
            "line": 46,
            "description": "Redo a previously undone attach operation.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.AttachCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\ChangeItemOrderCommand.js",
            "line": 13,
            "description": "Move items to the top.",
            "itemtype": "property",
            "name": "TOTOP",
            "type": "{Number}",
            "final": 1,
            "class": "JSG.graph.command.ChangeItemOrder",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\ChangeItemOrderCommand.js",
            "line": 20,
            "description": "Move items to the bottom.",
            "itemtype": "property",
            "name": "TOBOTTOM",
            "type": "{Number}",
            "final": 1,
            "class": "JSG.graph.command.ChangeItemOrder",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\ChangeItemOrderCommand.js",
            "line": 27,
            "description": "Move items further to the top.",
            "itemtype": "property",
            "name": "UP",
            "type": "{Number}",
            "final": 1,
            "class": "JSG.graph.command.ChangeItemOrder",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\ChangeItemOrderCommand.js",
            "line": 34,
            "description": "Move items further to the bottom.",
            "itemtype": "property",
            "name": "DOWN",
            "type": "{Number}",
            "final": 1,
            "class": "JSG.graph.command.ChangeItemOrder",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\ChangeItemOrderCommand.js",
            "line": 85,
            "description": "Execute the change command.",
            "itemtype": "method",
            "name": "execute",
            "class": "JSG.graph.command.ChangeItemOrderCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\ChangeItemOrderCommand.js",
            "line": 94,
            "description": "Undo a previously executed change command.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.ChangeItemOrderCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\ChangeItemOrderCommand.js",
            "line": 103,
            "description": "Redo a previously undone change command.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.ChangeItemOrderCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\ChangeParentCommand.js",
            "line": 25,
            "description": "Undo the previous assignment of a new parent GraphItem.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.ChangeParentCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\ChangeParentCommand.js",
            "line": 37,
            "description": "Redo a previously undone Change Parent command.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.ChangeParentCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\Command.js",
            "line": 38,
            "description": "Executes this command. Default implementation does nothing.",
            "itemtype": "method",
            "name": "execute",
            "class": "JSG.graph.command.Command",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\Command.js",
            "line": 46,
            "description": "Undo an executed command. Default implementation does nothing.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.Command",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\Command.js",
            "line": 54,
            "description": "Redo an undone command. Default implementation does nothing.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.Command",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\Command.js",
            "line": 62,
            "description": "Called by IneractionHandler after undo.</br>\nSubclasses may overwrite to restore state of affected objects, e.g. to set its selection state.\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "restoreStateAfterUndo",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by calling InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.command.Command",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\Command.js",
            "line": 72,
            "description": "Called by IneractionHandler after redo.</br>\nSubclasses may overwrite to restore state of affected objects, e.g. to set its selection state.\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "restoreStateAfterRedo",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by calling InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.command.Command",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\Command.js",
            "line": 83,
            "description": "Convenience method to select a single or multiple items.",
            "itemtype": "method",
            "name": "selectAll",
            "params": [
                {
                    "name": "items",
                    "description": "A single GraphItem or an enumeration or an array of GraphItems to select.",
                    "type": "Array | GraphItem"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.command.Command",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CommandStack.js",
            "line": 23,
            "description": "Execute a given command and adds it to the undo stack.",
            "itemtype": "method",
            "name": "execute",
            "params": [
                {
                    "name": "cmd",
                    "description": "Command to be executed.",
                    "type": "JSG.graph.command.Command"
                }
            ],
            "class": "JSG.graph.command.CommandStack",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CommandStack.js",
            "line": 41,
            "description": "Information function to find out, whether any command can be undone.",
            "itemtype": "method",
            "name": "canUndo",
            "return": {
                "description": "True, if there is a Command to undo, otherwise false.",
                "type": "Boolean"
            },
            "class": "JSG.graph.command.CommandStack",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CommandStack.js",
            "line": 51,
            "description": "Information function to find out, whether any command can be redone.",
            "itemtype": "method",
            "name": "canRedo",
            "return": {
                "description": "True, if there is a Command to redo, otherwise false.",
                "type": "Boolean"
            },
            "class": "JSG.graph.command.CommandStack",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CommandStack.js",
            "line": 61,
            "description": "Undo a previosly executed Command. The last executed command is undone, removed from the undo list and added to the redo list.",
            "itemtype": "method",
            "name": "undo",
            "return": {
                "description": "The command on which undo was performed.",
                "type": "JSG.graph.command.Command"
            },
            "class": "JSG.graph.command.CommandStack",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CommandStack.js",
            "line": 78,
            "description": "Redo a previously undone Command. The last undone command is redone, removed from the redo list and added to the undo list.",
            "itemtype": "method",
            "name": "redo",
            "return": {
                "description": "The command on which redo was performed.",
                "type": "JSG.graph.command.Command"
            },
            "class": "JSG.graph.command.CommandStack",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CompoundCommand.js",
            "line": 24,
            "description": "The list of inner Commands this CompoundCommand consists of.",
            "itemtype": "property",
            "name": "commands",
            "type": "{Array}",
            "class": "JSG.graph.command.CompoundCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CompoundCommand.js",
            "line": 34,
            "description": "Flag which specifies execution order of inner Commands on <code>undo</code>. Default order is <code>lifo</code>, \ni.e. undo starts at the last added Command. Set this flag to <code>true</code> to execute inner Commands in\nreverse order, i.e. first added Command is executed first.",
            "itemtype": "property",
            "name": "reverseUndo",
            "type": "{Boolean}",
            "class": "JSG.graph.command.CompoundCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CompoundCommand.js",
            "line": 47,
            "description": "Checks if this CompoundCommand has any commands registered.",
            "itemtype": "method",
            "name": "hasCommands",
            "return": {
                "description": "<code>true</code> if at least one command was added to this CompoundCommand, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.command.CompoundCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CompoundCommand.js",
            "line": 57,
            "description": "Add a command to a CompoundCommand.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "cmd",
                    "description": "Command to add.",
                    "type": "JSG.graph.command.Command"
                }
            ],
            "return": {
                "description": "This command to support method concatenation.",
                "type": "JSG.graph.command.CompoundCommand"
            },
            "class": "JSG.graph.command.CompoundCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CompoundCommand.js",
            "line": 71,
            "description": "Execute all commands in this CompoundCommand.",
            "itemtype": "method",
            "name": "execute",
            "class": "JSG.graph.command.CompoundCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CompoundCommand.js",
            "line": 88,
            "description": "This is called before the next command is executed. Subclasses can override this method and\nperform command initialization. Default implementation does nothing.",
            "itemtype": "method",
            "name": "initNextCommand",
            "params": [
                {
                    "name": "cmd",
                    "description": "the next command which is executed",
                    "type": "JSG.graph.command.Command"
                },
                {
                    "name": "index",
                    "description": "the index of next command",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.command.CompoundCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CompoundCommand.js",
            "line": 99,
            "description": "Undo all commands in this CompoundCommand",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.CompoundCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CompoundCommand.js",
            "line": 126,
            "description": "Redo all commands in this CompoundCommand",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.CompoundCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CompoundCommand.js",
            "line": 141,
            "description": "Disables refresh notification of all involved GraphItems before this Command is executed. After\nexecution the old refresh state is restored and optionally called. Sub-Commands must provide a\n<code>getItem</code> function returning the GraphItem on which the refresh state should be\ndisabled.",
            "itemtype": "method",
            "name": "disableRefresh",
            "params": [
                {
                    "name": "callIt",
                    "description": "Set to <code>true</code> to execute refresh on enable.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "JSG.graph.command.CompoundCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CompoundCommand.js",
            "line": 155,
            "description": "Disables refresh notification of GraphItem in sub commands.",
            "itemtype": "method",
            "name": "_disableRefresh",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.command.CompoundCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CompoundCommand.js",
            "line": 174,
            "description": "Enables refresh notification of GraphItem in sub commands.",
            "itemtype": "method",
            "name": "_enableRefresh",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.command.CompoundCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CompoundCommand.js",
            "line": 194,
            "description": "Returns involved GraphItem of given Command or <code>undefined</code>",
            "itemtype": "method",
            "name": "_getItemFrom",
            "params": [
                {
                    "name": "cmd",
                    "description": "The Command to get the GraphItem from.",
                    "type": "JSG.graph.command.Command"
                }
            ],
            "return": {
                "description": "The involved GraphItem of given Command or <code>undefined</code>",
                "type": "JSG.graph.model.GraphItem"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.command.CompoundCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CompoundCommand.js",
            "line": 206,
            "description": "Overwritten from superclass to call restoreState.</br>",
            "itemtype": "method",
            "name": "restoreStateAfterUndo",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by calling InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.command.CompoundCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CompoundCommand.js",
            "line": 215,
            "description": "Overwritten from superclass to call restoreState.</br>",
            "itemtype": "method",
            "name": "restoreStateAfterUndo",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by calling InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.command.CompoundCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\CompoundCommand.js",
            "line": 224,
            "description": "Simply select all GraphItems of all inner Commands.</br>",
            "itemtype": "method",
            "name": "restoreState",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by calling InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.command.CompoundCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\DeleteNodeCommand.js",
            "line": 37,
            "description": "Will detach edges from deleted node itself or from any sub nodes",
            "itemtype": "method",
            "name": "detachEdges",
            "params": [
                {
                    "name": "node",
                    "description": "Node to be detach edges from.",
                    "type": "JSG.graph.model.Node"
                }
            ],
            "class": "JSG.graph.command.DeleteNodeCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\DeleteNodeCommand.js",
            "line": 71,
            "description": "Creates a new command to use for detaching an edge from given port.<br/>\nThis method can be overwritten by subclasses to add custom behavior on detach. Default implementation\nsimply creates a {{#crossLink \"JSG.graph.command.DetachCommand\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "createDetachCommand",
            "params": [
                {
                    "name": "edge",
                    "description": "The edge to detach.",
                    "type": "JSG.graph.model.Edge"
                },
                {
                    "name": "port",
                    "description": "The port to detach from, i.e. either the source or target port of given edge.",
                    "type": "JSG.graph.model.Port"
                }
            ],
            "class": "JSG.graph.command.DeleteNodeCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\FormatItemCommand.js",
            "line": 38,
            "description": "Undo the format operation.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.FormatItemCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\FormatItemCommand.js",
            "line": 48,
            "description": "Redo the format operation.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.FormatItemCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\GroupItemsCommand.js",
            "line": 48,
            "description": "Execute grouping.",
            "itemtype": "method",
            "name": "execute",
            "class": "JSG.graph.command.GroupItemsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\GroupItemsCommand.js",
            "line": 59,
            "description": "Undo the group operation.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.GroupItemsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\GroupItemsCommand.js",
            "line": 69,
            "description": "Redo the group operation.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.GroupItemsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\InsertLinePointsAtCommand.js",
            "line": 49,
            "description": "Undo the point insertion by removing the points.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.InsertLinePointsAtCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\InsertLinePointsAtCommand.js",
            "line": 60,
            "description": "Redo the point insertion.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.InsertLinePointsAtCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\InternalDeleteItemCommand.js",
            "line": 32,
            "description": "Undo the delete operation by adding it to the parent.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.InternalDeleteItemCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\InternalDeleteItemCommand.js",
            "line": 43,
            "description": "Redo a previously undone operation by adding it again.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.InternalDeleteItemCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\InternalResizeItemCommand.js",
            "line": 41,
            "description": "Undo the resize operation.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.InternalResizeItemCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\InternalResizeItemCommand.js",
            "line": 55,
            "description": "Redo the resize operation.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.InternalResizeItemCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\InternalRotateItemCommand.js",
            "line": 37,
            "description": "Undo the delete operation by adding it to the parent.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.InternalRotateItemCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\InternalRotateItemCommand.js",
            "line": 50,
            "description": "Redo a previously undone operation by adding it again.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.InternalRotateItemCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\PasteItemsCommand.js",
            "line": 51,
            "description": "Execute the paste command by pasting the items.",
            "itemtype": "method",
            "name": "execute",
            "class": "JSG.graph.command.PasteItemsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\PasteItemsCommand.js",
            "line": 269,
            "description": "Undoing this paste command by removing the previously pasted items.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.PasteItemsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\PasteItemsCommand.js",
            "line": 283,
            "description": "Redoing the previously undone paste operations.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.PasteItemsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\RemoveLinePointsCommand.js",
            "line": 40,
            "description": "Execute the removal of points.",
            "itemtype": "method",
            "name": "execute",
            "class": "JSG.graph.command.RemoveLinePointsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\RemoveLinePointsCommand.js",
            "line": 63,
            "description": "Undo the removal of points.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.RemoveLinePointsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\RemoveLinePointsCommand.js",
            "line": 80,
            "description": "Redo the removal of points.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.RemoveLinePointsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\ReshapeItemCommand.js",
            "line": 42,
            "description": "Undo the change of the reshape coordinate",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.ReshapeItemCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\ReshapeItemCommand.js",
            "line": 51,
            "description": "Redo the change of the reshape coordinate",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.ReshapeItemCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\ResizeItemCommand.js",
            "line": 46,
            "description": "Get stored GraphItem",
            "itemtype": "method",
            "name": "getItem",
            "return": {
                "description": "Return handled GraphItem",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.graph.command.ResizeItemCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetAttributeCommand.js",
            "line": 38,
            "description": "Undo the attribute assignment.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.SetAttributeCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetAttributeCommand.js",
            "line": 47,
            "description": "Redo the attribute assignment.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.SetAttributeCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetAttributeCommand.js",
            "line": 56,
            "description": "Do the actual attribute assignment.",
            "itemtype": "method",
            "name": "_setAttributeValue",
            "params": [
                {
                    "name": "value",
                    "description": "New value of attribute.",
                    "type": "JSG.graph.expr.Expression | Value"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.command.SetAttributeCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetAttributesMapCommand.js",
            "line": 61,
            "description": "Undo the format operation.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.SetAttributesMapCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetAttributesMapCommand.js",
            "line": 73,
            "description": "Redo the format operation.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.SetAttributesMapCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetBezierShapePointsCommand.js",
            "line": 70,
            "description": "Undo the change of the bezier points.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.SetBezierShapePointsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetBezierShapePointsCommand.js",
            "line": 80,
            "description": "Redo the change of the bezier points.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.SetBezierShapePointsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetBezierShapePointsCommand.js",
            "line": 90,
            "description": "Create coordinates relative to the bounding box of the item from the given coordinate points. This is\nnecessary to scale the bezier shape automatically with the bounding box.",
            "itemtype": "method",
            "name": "_setCoordinates",
            "params": [
                {
                    "name": "bbox",
                    "description": "BoundingBox of the item.",
                    "type": "JSG.geometry.BoundingBox"
                },
                {
                    "name": "pointlist",
                    "description": "PointList with the new context points.",
                    "type": "JSG.geometry.PointList"
                },
                {
                    "name": "cpFromPointList",
                    "description": "PointList with the new control points before the context point.",
                    "type": "JSG.geometry.PointList"
                },
                {
                    "name": "cpToPointList",
                    "description": "PointList with the new control points behind the context point.",
                    "type": "JSG.geometry.PointList"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.command.SetBezierShapePointsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetBezierShapePointsCommand.js",
            "line": 143,
            "description": "Resize bounding box to fit it to the new points.",
            "itemtype": "method",
            "name": "_setCoordinates",
            "params": [
                {
                    "name": "bbox",
                    "description": "BoundingBox of the item.",
                    "type": "JSG.geometry.BoundingBox"
                },
                {
                    "name": "pointlist",
                    "description": "PointList with the new context points.",
                    "type": "JSG.geometry.PointList"
                },
                {
                    "name": "cpFromPointList",
                    "description": "PointList with the new control points before the context point.",
                    "type": "JSG.geometry.PointList"
                },
                {
                    "name": "cpToPointList",
                    "description": "PointList with the new control points behind the context point.",
                    "type": "JSG.geometry.PointList"
                }
            ],
            "return": {
                "description": "New BoundingBox.",
                "type": "JSG.geometry.BoundingBox"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.command.SetBezierShapePointsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetBezierShapePointsCommand.js",
            "line": 204,
            "description": "Translate points, if bounding box position has changed.",
            "itemtype": "method",
            "name": "_translate",
            "params": [
                {
                    "name": "pointlist",
                    "description": "PointList with the new context points.",
                    "type": "JSG.geometry.PointList"
                },
                {
                    "name": "cpFromPointList",
                    "description": "PointList with the new control points before the context point.",
                    "type": "JSG.geometry.PointList"
                },
                {
                    "name": "cpToPointList",
                    "description": "PointList with the new control points behind the context point.",
                    "type": "JSG.geometry.PointList"
                },
                {
                    "name": "oldbbox",
                    "description": "Current BoundingBox of the item.",
                    "type": "JSG.geometry.BoundingBox"
                },
                {
                    "name": "newbbox",
                    "description": "New BoundingBox of the item.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.command.SetBezierShapePointsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetLayoutAttributeCommand.js",
            "line": 34,
            "description": "Do the actual layout attribute assignment.",
            "itemtype": "method",
            "name": "_setAttributeValue",
            "params": [
                {
                    "name": "value",
                    "description": "New value of layout attribute.",
                    "type": "JSG.graph.expr.Expression | Value"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.command.SetLayoutAttributeCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetLinePointAtCommand.js",
            "line": 35,
            "description": "Execute the point change.",
            "itemtype": "method",
            "name": "execute",
            "class": "JSG.graph.command.SetLinePointAtCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetLinePointAtCommand.js",
            "line": 45,
            "description": "Undo the point change.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.SetLinePointAtCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetLinePointAtCommand.js",
            "line": 56,
            "description": "Redo the point change.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.SetLinePointAtCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetLineShapePointsCommand.js",
            "line": 59,
            "description": "Undo the line point replacement.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.SetLineShapePointsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetLineShapePointsCommand.js",
            "line": 68,
            "description": "Redo the line point replacement.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.SetLineShapePointsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetLinkCommand.js",
            "line": 34,
            "description": "Undo the link change.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.SetLinkCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetLinkCommand.js",
            "line": 43,
            "description": "Redo the link change.",
            "itemtype": "method",
            "name": "Redo",
            "class": "JSG.graph.command.SetLinkCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetNameCommand.js",
            "line": 34,
            "description": "Undo the name change.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.SetNameCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetNameCommand.js",
            "line": 43,
            "description": "Redo the name change.",
            "itemtype": "method",
            "name": "Redo",
            "class": "JSG.graph.command.SetNameCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetShapeCommand.js",
            "line": 34,
            "description": "Undo the shape assignment",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.SetShapeCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetShapeCommand.js",
            "line": 43,
            "description": "Redo the shape assignment",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.SetShapeCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetShapePointsCommand.js",
            "line": 70,
            "description": "Undo the point replacement.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.SetShapePointsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetShapePointsCommand.js",
            "line": 84,
            "description": "Redo the point replacement.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.SetShapePointsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetShapePointsCommand.js",
            "line": 94,
            "description": "Create coordinates with formulas relative to the bounding box of the item from the given coordinate points. This is \nnecessary to scale the shape automatically with the bounding box.",
            "itemtype": "method",
            "name": "_setCoordinates",
            "params": [
                {
                    "name": "bbox",
                    "description": "BoundingBox of the item.",
                    "type": "JSG.geometry.BoundingBox"
                },
                {
                    "name": "pointlist",
                    "description": "PointList with the new  points.",
                    "type": "JSG.geometry.PointList"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.command.SetShapePointsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetShapePointsCommand.js",
            "line": 129,
            "description": "Resize bounding box to fit it to the new points.",
            "itemtype": "method",
            "name": "_setCoordinates",
            "params": [
                {
                    "name": "bbox",
                    "description": "BoundingBox of the item.",
                    "type": "JSG.geometry.BoundingBox"
                },
                {
                    "name": "points",
                    "description": "PointList with the new points.",
                    "type": "JSG.geometry.PointList"
                }
            ],
            "return": {
                "description": "New BoundingBox.",
                "type": "JSG.geometry.BoundingBox"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.command.SetShapePointsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetShapePointsCommand.js",
            "line": 171,
            "description": "Translate points, if bounding box position has changed.",
            "itemtype": "method",
            "name": "_translate",
            "params": [
                {
                    "name": "points",
                    "description": "PointList with the new context points.",
                    "type": "JSG.geometry.PointList"
                },
                {
                    "name": "oldbbox",
                    "description": "Current BoundingBox of the item.",
                    "type": "JSG.geometry.BoundingBox"
                },
                {
                    "name": "newbbox",
                    "description": "New BoundingBox of the item.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.command.SetShapePointsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetTextCommand.js",
            "line": 35,
            "description": "Undo the text change.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.SetTextCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SetTextCommand.js",
            "line": 44,
            "description": "Redo the text change.",
            "itemtype": "method",
            "name": "Redo",
            "class": "JSG.graph.command.SetTextCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SizeItemsCommand.js",
            "line": 13,
            "description": "Vertically size items to highest item in group.",
            "itemtype": "property",
            "name": "VERTICALMAX",
            "type": "{Number}",
            "final": 1,
            "class": "JSG.graph.command.SizeItems",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SizeItemsCommand.js",
            "line": 20,
            "description": "Vertically size items to smallest item in group.",
            "itemtype": "property",
            "name": "VERTICALMIN",
            "type": "{Number}",
            "final": 1,
            "class": "JSG.graph.command.SizeItems",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SizeItemsCommand.js",
            "line": 27,
            "description": "Horizontally size items to widest item in group.",
            "itemtype": "property",
            "name": "HORIZONTALMAX",
            "type": "{Number}",
            "final": 1,
            "class": "JSG.graph.command.SizeItems",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SizeItemsCommand.js",
            "line": 34,
            "description": "Horizontally size items to smallest item in group.",
            "itemtype": "property",
            "name": "HORIZONTALMIN",
            "type": "{Number}",
            "final": 1,
            "class": "JSG.graph.command.SizeItems",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SizeItemsCommand.js",
            "line": 41,
            "description": "Size items to item with largest width and item with largest height in group.",
            "itemtype": "property",
            "name": "AREAMAX",
            "type": "{Number}",
            "final": 1,
            "class": "JSG.graph.command.SizeItems",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SizeItemsCommand.js",
            "line": 48,
            "description": "Size items to item with smallest width and item with smallest height in group.",
            "itemtype": "property",
            "name": "AREAMIN",
            "type": "{Number}",
            "final": 1,
            "class": "JSG.graph.command.SizeItems",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SizeItemsCommand.js",
            "line": 101,
            "description": "Execute size operation.",
            "itemtype": "method",
            "name": "execute",
            "class": "JSG.graph.command.SizeItemsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SizeItemsCommand.js",
            "line": 110,
            "description": "Undo size command.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.SizeItemsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\SizeItemsCommand.js",
            "line": 125,
            "description": "Redo size command.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.SizeItemsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\TextFormatItemCommand.js",
            "line": 38,
            "description": "Undo the text format operation.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.TextFormatItemCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\TextFormatItemCommand.js",
            "line": 52,
            "description": "Redo the text format operation.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.TextFormatItemCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\UnGroupItemsCommand.js",
            "line": 44,
            "description": "Execute the ungroup operation.",
            "itemtype": "method",
            "name": "execute",
            "class": "JSG.graph.command.UnGroupItemsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\UnGroupItemsCommand.js",
            "line": 53,
            "description": "Undo the ungroup operation.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.command.UnGroupItemsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\command\\UnGroupItemsCommand.js",
            "line": 67,
            "description": "Redo the ungroup operation.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.command.UnGroupItemsCommand",
            "module": "JSG.graph.command",
            "namespace": "JSG.graph.command"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ConnectionController.js",
            "line": 25,
            "description": "Create the corresponding view for a ConnectionController.",
            "itemtype": "method",
            "name": "createView",
            "params": [
                {
                    "name": "model",
                    "description": "Model to create View for.",
                    "type": "JSG.graph.model.Edge"
                }
            ],
            "return": {
                "description": "New view.",
                "type": "JSG.graph.view.EdgeView"
            },
            "class": "JSG.graph.controller.ConnectionController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ConnectionController.js",
            "line": 107,
            "description": "Handles detach of associated model.</br>",
            "itemtype": "method",
            "name": "_handleDetach",
            "params": [
                {
                    "name": "edge",
                    "description": "The detached edge model.",
                    "type": "JSG.graph.model.Edge"
                },
                {
                    "name": "port",
                    "description": "The port given edge was detached from.",
                    "type": "JSG.graph.model.Port"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.controller.ConnectionController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ConnectionController.js",
            "line": 121,
            "description": "Registers this controller as listener to the node of given port.</br>",
            "itemtype": "method",
            "name": "_registerToPortNode",
            "params": [
                {
                    "name": "port",
                    "description": "The port to which parent node we register to.",
                    "type": "JSG.graph.model.Port"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.controller.ConnectionController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ConnectionController.js",
            "line": 135,
            "description": "Unregisters this controller as listener from the node of given port.</br>",
            "itemtype": "method",
            "name": "_deregisterFromPortNode",
            "params": [
                {
                    "name": "port",
                    "description": "The port from which parent node we unregister.",
                    "type": "JSG.graph.model.Port"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.controller.ConnectionController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ConnectionController.js",
            "line": 149,
            "description": "Checks if associated model either has a source or a target node attached.",
            "itemtype": "method",
            "name": "isAttached",
            "return": {
                "description": "<code>true</code> if model is at least attached to a source or target node, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.controller.ConnectionController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ConnectionController.js",
            "line": 194,
            "description": "Registers this listener to given node.",
            "itemtype": "method",
            "name": "registerTo",
            "params": [
                {
                    "name": "node",
                    "description": "The node to register to.",
                    "type": "JSG.graph.model.Node"
                }
            ],
            "class": "JSG.graph.controller.ConnectionController.PathListener",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ConnectionController.js",
            "line": 205,
            "description": "Unregisters this listener from given node.",
            "itemtype": "method",
            "name": "deregisterFrom",
            "params": [
                {
                    "name": "node",
                    "description": "The node to register from.",
                    "type": "JSG.graph.model.Node"
                }
            ],
            "class": "JSG.graph.controller.ConnectionController.PathListener",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ConnectionController.js",
            "line": 215,
            "description": "Handles any pre events send by observed node.</br>",
            "itemtype": "method",
            "name": "handlePreEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The pre event send before node change.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.controller.ConnectionController.PathListener",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ConnectionController.js",
            "line": 224,
            "description": "Handles any post events send by observed node. Of course events should be of type JSG.graph.model.events.Event.PATH.</br>",
            "itemtype": "method",
            "name": "handlePostEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The post event send after node changed.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.controller.ConnectionController.PathListener",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ContentNodeController.js",
            "line": 54,
            "description": "Sets the given ContentPaneController.",
            "itemtype": "method",
            "name": "_setContentPaneController",
            "params": [
                {
                    "name": "cpController",
                    "description": "The ContentPaneController to use.",
                    "type": "JSG.graph.controller.ContentPaneController"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.controller.ContentNodeController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ContentNodeController.js",
            "line": 69,
            "description": "Returns the ContentPaneController which manages the ContentNodes content pane.",
            "itemtype": "method",
            "name": "getContentPaneController",
            "return": {
                "description": "The ContentPaneController for ContentNodes content pane.",
                "type": "JSG.graph.controller.ContentPaneController"
            },
            "class": "JSG.graph.controller.ContentNodeController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphController.js",
            "line": 38,
            "description": "Create the corresponding GraphView.",
            "itemtype": "method",
            "name": "createView",
            "params": [
                {
                    "name": "model",
                    "description": "Model to create view for.",
                    "type": "JSG.graph.mode.Graph"
                }
            ],
            "return": {
                "description": "View representing a Graph.",
                "type": "JSG.graph.view.GraphView"
            },
            "class": "JSG.graph.controller.GraphController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphController.js",
            "line": 49,
            "description": "Get the children of the associated model of the controller.",
            "itemtype": "method",
            "name": "getModelChildren",
            "return": {
                "description": "Model children.",
                "type": "JSG.graph.model.GraphItem[]"
            },
            "class": "JSG.graph.controller.GraphController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphControllerFactory.js",
            "line": 29,
            "description": "Returns the controller constructor function for given model or <code>undefined</code> if\nmodel is not known to this factory.",
            "itemtype": "method",
            "name": "getController",
            "params": [
                {
                    "name": "model",
                    "description": "The model to get the controller constructor function for.",
                    "type": "JSG.graph.model.Model"
                }
            ],
            "return": {
                "description": "The controller constructor function or <code>undefined</code>.",
                "type": "Function"
            },
            "class": "JSG.graph.controller.GraphControllerFactory",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphControllerFactory.js",
            "line": 54,
            "description": "Creates a new controller instance for given model.</br>\nReturns <code>undefined</code> if model is not known to this factory.",
            "itemtype": "method",
            "name": "createController",
            "params": [
                {
                    "name": "model",
                    "description": "The model to create a controller for.",
                    "type": "JSG.graph.model.Model"
                }
            ],
            "return": {
                "description": "The controller or <code>undefined</code>.",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.graph.controller.GraphControllerFactory",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphControllerFactory.js",
            "line": 75,
            "description": "Returns the static factory instance",
            "itemtype": "method",
            "name": "getInstance",
            "return": {
                "description": "The sole controller factory",
                "type": "JSG.graph.controller.GraphControllerFactory"
            },
            "static": 1,
            "class": "JSG.graph.controller.GraphControllerFactory",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 26,
            "description": "Sends this notification on each observed model change.",
            "itemtype": "property",
            "name": "ITEM_CHANGED_NOTIFICATION",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.controller.GraphItemController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 35,
            "description": "Returns the controller that is associated with with given model or <code>undefined</code> if none could be found.</br>\nIn contrast to {{#crossLink \"JSG.graph.controller.ModelController/getModelController:method\"}}{{/crossLink}} this\nmethod traverses the complete controller hierarchy.",
            "itemtype": "method",
            "name": "findModelController",
            "params": [
                {
                    "name": "model",
                    "description": "The graph item model to get the controller for.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "The associated model controller or <code>undefined</code>",
                "type": "JSG.graph.controller.GraphItemController"
            },
            "class": "JSG.graph.controller.GraphItemController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 51,
            "description": "Returns the controller for the specified model path or <code>undefined</code> if none could be found.",
            "itemtype": "method",
            "name": "_findModelControllerByPath",
            "params": [
                {
                    "name": "path",
                    "description": "The model path to get the controller for.",
                    "type": "JSG.graph.model.Path"
                }
            ],
            "return": {
                "description": "The matching controller or <code>undefined</code>",
                "type": "JSG.graph.controller.GraphItemController"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.controller.GraphItemController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 81,
            "description": "Returns the children of the model of this controller.",
            "itemtype": "method",
            "name": "getModelChildren",
            "return": {
                "description": "Array of GraphItems.",
                "type": "GraphItem []"
            },
            "class": "JSG.graph.controller.GraphItemController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 91,
            "description": "Creates a new View instance to visualize associated model.",
            "itemtype": "method",
            "name": "createView",
            "params": [
                {
                    "name": "model",
                    "description": "The model to create the view for.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "A view to use for GraphItem visualization.",
                "type": "JSG.graph.view.GraphItemView"
            },
            "class": "JSG.graph.controller.GraphItemController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 102,
            "description": "Called, if the mouse is pressed on top of the controller. For a complex interaction you should implement an\ninteraction handler and activate it in response to this event.",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "location",
                    "description": "Location, relative to the container coordinates, of the mouse event.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "viewer",
                    "description": "Viewer to which the controller belongs.",
                    "type": "JSG.ui.viewer.GraphViewer"
                },
                {
                    "name": "event",
                    "description": "MouseEvent parameters.",
                    "type": "JSG.ui.events.MouseEvent"
                }
            ],
            "return": {
                "description": "Return false to intercept the event. No further processing will occur or true to allow default handling.",
                "type": "Boolean"
            },
            "class": "JSG.graph.controller.GraphItemController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 116,
            "description": "Returns the current collapsable state of associated model",
            "itemtype": "method",
            "name": "isCollapsable",
            "return": {
                "description": "<code>true</code> if the controller model is collapsable, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.controller.GraphItemController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 126,
            "description": "Returns the current collapsed state of associated model",
            "itemtype": "method",
            "name": "isCollapsed",
            "return": {
                "description": "<code>true</code> if the controller model is collapsed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.controller.GraphItemController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 141,
            "description": "Checks if given controller is selectable within its hierarchy, i.e. each parent is asked if given\ncontroller can be selected. This is useful to prevent selection of an actually not visible controller.\nSee {JSG.graph.controller.ContentNodeController} as an example.",
            "itemtype": "method",
            "name": "_isSelectableInParent",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to check for selection.",
                    "type": "JSG.graph.controller.GraphItemController"
                }
            ],
            "return": {
                "description": "<code>true</code> if given controller can be selected, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "DON'T USE!! CURRENTYL UNDER REVIEW...",
            "class": "JSG.graph.controller.GraphItemController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 157,
            "description": "Checks, if item of this controller is selected.",
            "itemtype": "method",
            "name": "isSelected",
            "return": {
                "description": "True, if item is selected, otherwise false.",
                "type": "Boolean"
            },
            "class": "JSG.graph.controller.GraphItemController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 167,
            "description": "Selects or deselects this controller. This means the select attribute state of inner model is\nchanged and might raise an event.",
            "itemtype": "method",
            "name": "setSelected",
            "params": [
                {
                    "name": "selected",
                    "description": "Specify either <code>true</code> or <code>false</code> to select or deselect this controller.",
                    "type": "Boolean"
                },
                {
                    "name": "disableEvent",
                    "description": "Specify <code>true</code> to disable selection event raised by controller.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "JSG.graph.controller.GraphItemController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 187,
            "description": "Returns the GraphController of the controller hierarchy this controller belongs to or <code>undefined</code> if\nhierarchy has none.",
            "itemtype": "method",
            "name": "getGraphController",
            "return": {
                "description": "The graph controller of this controllers hierarchy or <code>undefined</code>",
                "type": "JSG.graph.controller.GraphController"
            },
            "class": "JSG.graph.controller.GraphItemController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 208,
            "description": "Handles any pre event send by associated model.</br>\nNote: subclasses may overwrite to perform custom behavior but should call superclass implementation.",
            "itemtype": "method",
            "name": "handlePreEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The pre event send before model change.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.controller.GraphItemController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 217,
            "description": "Handles any post event send by associated model.</br>\nNote: subclasses may overwrite to perform custom behavior but should call superclass implementation.",
            "itemtype": "method",
            "name": "handlePostEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The post event send after model changed.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.controller.GraphItemController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 265,
            "description": "Handles attribute changed of associated model.</br>\nNote: subclasses may overwrite to perform custom behavior but should call superclass implementation.\nBy default only changes to the selection attributes are considered.",
            "itemtype": "method",
            "name": "_handleAttributeChanged",
            "params": [
                {
                    "name": "event",
                    "description": "The corresponding change event.",
                    "type": "JSG.graph.model.events.AttributeChangeEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.controller.GraphItemController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 304,
            "description": "Selects or deselects given item.",
            "itemtype": "method",
            "name": "selectItem",
            "params": [
                {
                    "name": "item",
                    "description": "The graph item to select.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "doIt",
                    "description": "Specify <code>true</code> to select item, <code>false</code> to deselect it.",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.graph.controller.GraphItemController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 327,
            "description": "Clears current selection within {{#crossLink \"JSG.ui.viewer.GraphViewer\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "clearSelection",
            "class": "JSG.graph.controller.GraphItemController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 340,
            "description": "Handles parent switch of associated model.</br>\nNote: subclasses may overwrite to perform custom behavior but should call superclass implementation.",
            "itemtype": "method",
            "name": "_onParentChange",
            "params": [
                {
                    "name": "newparent",
                    "description": "The new parent of associated model.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.controller.GraphItemController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 375,
            "description": "Create a feedback object derived from this controller. Feedback items are used during the manipulation of items\nduring a user interaction. The feedback visualizes the operation usually using a somehow changed visual appearance. It \nis mostly a less detailed visualization to allow a faster redraw operation during the interaction. In addition the feedback needs\nto handle dependencies of the original controller, which might not be available during an interaction.",
            "itemtype": "method",
            "name": "createFeedback",
            "return": {
                "description": "Feedback item that is created.",
                "type": "JSG.graph.feedback.Feedback"
            },
            "class": "JSG.graph.controller.GraphItemController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 399,
            "description": "Create an item that is a copy of the controller item and change some of its properties to allow\na faster or reduced drawing operation.",
            "itemtype": "method",
            "name": "createFeedbackItem",
            "params": [
                {
                    "name": "detailed",
                    "description": "True to allow a more detailed visualization on the feedback item and its subitems.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The new model for the feedback.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.graph.controller.GraphItemController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GraphItemController.js",
            "line": 470,
            "description": "Create a feedback view derived from this controller. Feedback views are used during the manipulation of items\nduring a user interaction. The feedback visualizes the operation usually using a somehow changed visual appearance. It \nis mostly a less detailed visualization to allow a faster redraw operation during the interaction.",
            "itemtype": "method",
            "name": "createFeedbackView",
            "params": [
                {
                    "name": "fbItem",
                    "description": "Item to create the view for.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "detailed",
                    "description": "True to allow a more detailed visualization on the feedback item and its subitems.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Feedback view that is created.",
                "type": "new JSG.graph.feedback.Feedback"
            },
            "class": "JSG.graph.controller.GraphItemController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GroupController.js",
            "line": 80,
            "description": "Unregisters our <code>EventListener</code> from given graph-item.",
            "itemtype": "method",
            "name": "_unregisterGroupListener",
            "params": [
                {
                    "name": "item",
                    "description": "The graph-item to unregister internal listener from.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.controller.GroupController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\GroupController.js",
            "line": 94,
            "description": "Registers our <code>EventListener</code> to given graph-item.",
            "itemtype": "method",
            "name": "_registerGroupListener",
            "params": [
                {
                    "name": "item",
                    "description": "The graph-item to register internal listener to.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.controller.GroupController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 38,
            "description": "The associated controller model.",
            "itemtype": "property",
            "name": "model",
            "type": "{JSG.graph.model.Model}",
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 45,
            "description": "The associated controller view.",
            "itemtype": "property",
            "name": "view",
            "type": "{JSG.ui.View}",
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 52,
            "description": "Flag to indicate if this controller is active or not.",
            "itemtype": "property",
            "name": "isActive",
            "type": "{Boolean}",
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 59,
            "description": "The parent controller.",
            "itemtype": "property",
            "name": "parent",
            "type": "{JSG.graph.controller.ModelController}",
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 66,
            "description": "The child controllers.",
            "itemtype": "property",
            "name": "children",
            "type": "{Array}",
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 75,
            "description": "Returns the parent of this controller or <code>undefined</code> if it has none.",
            "itemtype": "method",
            "name": "getParent",
            "return": {
                "description": "The parent controller or <code>undefined</code>",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 85,
            "description": "Returns the index of this controller within the children list of its parent. If this controller\nhas no parent -1 is returned.",
            "itemtype": "method",
            "name": "getIndex",
            "return": {
                "description": "The index in children list of its parent or -1 if parent is undefined.",
                "type": "Number"
            },
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 96,
            "description": "Moves this controller to the specified index within the children list of its parent. If the\nindex is out of range calling this method has no effect.",
            "itemtype": "method",
            "name": "moveToIndex",
            "params": [
                {
                    "name": "newIndex",
                    "description": "The index within the parent children list to  move this controller to.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 114,
            "description": "Moves this controller to the top of the children list of its parent.",
            "itemtype": "method",
            "name": "moveToTop",
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 126,
            "description": "Moves this controller one step up within the children list of its parent.",
            "itemtype": "method",
            "name": "moveUp",
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 140,
            "description": "Moves this controller to the bottom of the children list of its parent.",
            "itemtype": "method",
            "name": "moveToBottom",
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 152,
            "description": "Moves this controller one step down within the children list of its parent.",
            "itemtype": "method",
            "name": "moveDown",
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 166,
            "description": "Checks if this controller has any registered child controllers.",
            "itemtype": "method",
            "name": "hasChildren",
            "return": {
                "description": "<code>true</code> if this controller has children, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 176,
            "description": "Returns direct access to the underlying children list of this controller.",
            "itemtype": "method",
            "name": "getChildren",
            "return": {
                "description": "The controller children list.",
                "type": "Array"
            },
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 186,
            "description": "Returns the controller child at specified index or <code>undefined</code> if index is out of range.",
            "itemtype": "method",
            "name": "getChildAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index within this controller children list.",
                    "type": "Numvber"
                }
            ],
            "return": {
                "description": "The controller at specified index or <code>undefined</code>.",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 197,
            "description": "Returns the current selectable state of this controller. I.e. if this controller can be\nselected or not.</br>\n<b>Note:</b> this method is intended to be overwritten by subclasses. Default implementation\nsimply returns <code>false</code>.",
            "itemtype": "method",
            "name": "isSelectable",
            "return": {
                "description": "<code>true</code> if this controller can be selected, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 210,
            "description": "Returns the current selection state of this controller.</br>\n<b>Note:</b> this method is intended to be overwritten by subclasses. Default implementation\nsimply returns <code>false</code>.",
            "itemtype": "method",
            "name": "isSelected",
            "return": {
                "description": "<code>true</code> if this controller is selected, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 222,
            "description": "Sets the selection state of this controller.</br>\n<b>Note:</b> this method is intended to be overwritten by subclasses. Default implementation does nothing.",
            "itemtype": "method",
            "name": "setSelected",
            "params": [
                {
                    "name": "selected",
                    "description": "The new selection state.",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 232,
            "description": "Returns the currently associated model.",
            "itemtype": "method",
            "name": "getModel",
            "return": {
                "description": "The associated controller model.",
                "type": "JSG.graph.model.Model"
            },
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 242,
            "description": "Returns the currently associated view.",
            "itemtype": "method",
            "name": "getView",
            "return": {
                "description": "The view currently used for model visualization.",
                "type": "JSG.ui.View"
            },
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 255,
            "description": "Creates a new View instance to visualize associated model.</br>\n<b>Note:</b> this method is intended to be overwritten by subclasses.",
            "itemtype": "method",
            "name": "createView",
            "params": [
                {
                    "name": "model",
                    "description": "The model to create the view for.",
                    "type": "JSG.graph.model.Model"
                }
            ],
            "return": {
                "description": "A view to use for model visualization.",
                "type": "JSG.ui.View"
            },
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 267,
            "description": "Sets given view as associated controller view.",
            "itemtype": "method",
            "name": "setView",
            "params": [
                {
                    "name": "view",
                    "description": "The view to use for model visualization.",
                    "type": "JSG.ui.View"
                }
            ],
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 277,
            "description": "Adds given controller to the children list of this controller.",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to add.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "atIndex",
                    "description": "The index within the children list to given controller at.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 295,
            "description": "Called when this controller was added.</br>\nSubclasses can overwrite, default implementation simply notifies registered child controllers.",
            "itemtype": "method",
            "name": "_notifyAdd",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 311,
            "description": "Activates this controller and all of its children.</br>\nSubclasses can overwrite to perform any initialization tasks, e.g. to register listeners. Default\nimplementation simply calls <code>activate</code> on all registered child controllers.",
            "itemtype": "method",
            "name": "activate",
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 328,
            "description": "Adds the view of given controller to this controller associated view at specified index.",
            "itemtype": "method",
            "name": "addChildView",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller whose view should be added.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "atIndex",
                    "description": "The index within sub view list of this controller view.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 339,
            "description": "Removes given controller from the children list of this controller.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to remove.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 356,
            "description": "Called if this controller is about to be removed.</br>\nSubclasses can overwrite to perform any clean up tasks, e.g. to unregister listeners. Default\nimplementation simply calls <code>deactivate</code> on all registered child controllers.",
            "itemtype": "method",
            "name": "deactivate",
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 372,
            "description": "Called when this controller was removed.</br>\nSubclasses can overwrite. Default implementation simply notifies registered child controllers.",
            "itemtype": "method",
            "name": "_notifyRemove",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 387,
            "description": "Removes the view associated with given controller from the sub views of this controller view.</br>\nSubclasses can overwrite.",
            "itemtype": "method",
            "name": "removeChildView",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller whose view should be removed.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 398,
            "description": "Refreshes this controller to reflect changes within the list of model children.</br>\nUsually this method should be called after an item was added to or removed from the model\nchildren list.",
            "itemtype": "method",
            "name": "refresh",
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 414,
            "description": "Refreshes the views of child controllers.</br>\n<b>Note:</b> this method can be overwritten by subclasses. Default implementation does nothing.",
            "itemtype": "method",
            "name": "_refreshViews",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 424,
            "description": "Refreshes the child controllers list.</br>\nI.e. it synchronizes with the model to reflect changes within the list of model children.",
            "itemtype": "method",
            "name": "_refreshChildren",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 458,
            "description": "Returns the sub items of associated model.</br>\n<b>Note:</b> this method is intended to be overwritten by subclasses. Default implementation\nsimply returns an empty list.",
            "itemtype": "method",
            "name": "getModelChildren",
            "return": {
                "description": "The sub items of associated model.",
                "type": "Array"
            },
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 470,
            "description": "Returns the ControllerViewer this controller is added to or <code>undefined</code> if controller\nwas not added yet.",
            "itemtype": "method",
            "name": "getViewer",
            "return": {
                "description": "The viewer which displays a controller hierarchy.",
                "type": "JSG.ui.viewer.ControllerViewer"
            },
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 484,
            "description": "Returns the root of the controller hierarchy this controller belongs to or <code>undefined</code>\nif this controller is not part of a controller hierarchy.</br>\n<b>Note:</b> a controller hierarchy can only be build by using a {{#crossLink \"JSG.ui.viewer.ControllerViewer\"}}{{/crossLink}}\nwhich defines the hierarchy root.",
            "itemtype": "method",
            "name": "getRootParent",
            "return": {
                "description": "The root of the controller hierarchy or <code>undefined</code>.",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 497,
            "description": "Returns the direct sub controller that is associated with given model or <code>undefined</code> if none could be found.</br>\nNote that only the sub controllers of this controller are queried!",
            "itemtype": "method",
            "name": "getModelController",
            "params": [
                {
                    "name": "model",
                    "description": "The model to get the controller for.",
                    "type": "JSG.graph.model.Model"
                }
            ],
            "return": {
                "description": "The associated model controller or <code>undefined</code>",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 518,
            "description": "Returns the controller whose model matches given id or <code>undefined</code> if none could be found.",
            "itemtype": "method",
            "name": "getControllerByModelId",
            "params": [
                {
                    "name": "id",
                    "description": "The model id to get controller for.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A matching controller of <code>undefined</code>.",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 559,
            "description": "Returns first controller which fulfills given condition function or <code>undefined</code> if none could be found.</br>\nThe search is solely based on provided condition function, which gets called with a controller and specified\nlocation. The condition should return <code>true</code> if passed controller is valid and to\nstop the search, otherwise <code>false</code>.",
            "itemtype": "method",
            "name": "findControllerByConditionAndLocation",
            "params": [
                {
                    "name": "location",
                    "description": "A location to be passed to condition function.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "condition",
                    "description": "A condition function to check any possible controllers.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A valid controller or <code>undefined</code>",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 601,
            "description": "Returns first controller which fulfills given condition function or <code>undefined</code> if none could be found.</br>\nThe search is solely based on provided condition function, which gets called with a controller and specified\nBoundingBox. The condition should return <code>true</code> if passed controller is valid and to\nstop the search, otherwise <code>false</code>.",
            "itemtype": "method",
            "name": "findControllerByConditionAndBox",
            "params": [
                {
                    "name": "box",
                    "description": "A BoundingBox instance to pass to condition function.",
                    "type": "JSG.geometry.BoundingBox"
                },
                {
                    "name": "condition",
                    "description": "A condition function to check any possible controllers.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A valid controller or <code>undefined</code>",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 638,
            "description": "Returns the controller at specified location or <code>undefined</code> if none could be found.</br>\nThe controller look up can be affected by the flags and condition parameter. The condition must\nbe a function which gets called with a possible controller as parameter. If passed controller\nis valid, the function should return <code>true</code>.",
            "itemtype": "method",
            "name": "getControllerAt",
            "params": [
                {
                    "name": "location",
                    "description": "The location to look at.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "flags",
                    "description": "One of the predefined flags to affect to controller look up.",
                    "type": "JSG.graph.controller.FindFlags",
                    "optional": true
                },
                {
                    "name": "condition",
                    "description": "An optional condition function to check any possible controllers.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The controller at specified location.",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 689,
            "description": "Returns the sub controller for specified location or <code>undefined</code> if none could be found.</br>\nThe controller look up can be affected by the flags and condition parameter. The condition must\nbe a function which gets called with any possible controller as parameter. If passed controller\nis valid, the function should return <code>true</code>.",
            "itemtype": "method",
            "name": "_getSubControllerAt",
            "params": [
                {
                    "name": "location",
                    "description": "The location to look at.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "flags",
                    "description": "One of the predefined flags to affect to controller look up.",
                    "type": "JSG.graph.controller.FindFlags",
                    "optional": true
                },
                {
                    "name": "condition",
                    "description": "An optional condition function to check any possible controllers.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The controller at specified location.",
                "type": "JSG.graph.controller.ModelController"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 719,
            "description": "Checks if this controller contains given location.</br>\nThe is equal to asking the inner {{#crossLink \"JSG.ui.View\"}}{{/crossLink}} object if it contains passed location.",
            "itemtype": "method",
            "name": "containsPoint",
            "params": [
                {
                    "name": "location",
                    "description": "The location to check.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "flags",
                    "description": "One of the predefined flags to affect to controller look up.",
                    "type": "JSG.graph.controller.FindFlags",
                    "optional": true
                }
            ],
            "return": {
                "description": "<code>true</code> if given location is within the bounds of inner view, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 732,
            "description": "Traverse controllers hierarchy starting with this controller. The currently visited controller\nis passed as parameter to specified function. If the function returns <code>false</code>\ntraversing is stopped for this controller branch.",
            "itemtype": "method",
            "name": "traverse",
            "params": [
                {
                    "name": "func",
                    "description": "The function to call on traversal. Should return <code>false</code> to stop traversal.",
                    "type": "Function"
                }
            ],
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 752,
            "description": "Iterates over controller hierarchy starting with this controller. The currently visited controller\nis passed as parameter to specified function. If the function returns <code>true</code> the iteration stops at\ncurrent controller. If given function returns nothing or <code>false</code> iteration goes on.<br/>\nPlease refer to {{#crossLink \"JSG.graph.controller.ModelController/traverse:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "iterate",
            "params": [
                {
                    "name": "func",
                    "description": "The function to call when visiting controller. Should return <code>true</code> to stop \niteration at current controller.",
                    "type": "Function"
                }
            ],
            "since": "1.6.0",
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 777,
            "description": "Creates and returns a new Feedback instance.</br>\nNote: this method is intended to be overwritten by subclasses. Default implementation does nothing.",
            "itemtype": "method",
            "name": "createFeedback",
            "return": {
                "description": "A new Feedback instance.",
                "type": "JSG.graph.feedback.Feedback"
            },
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\ModelController.js",
            "line": 787,
            "description": "Called on Controller look up. Subclasses can overwrite if they want to handle events. Default\nimplementation returns <code>false</code>",
            "itemtype": "method",
            "name": "_stopLookUp",
            "params": [
                {
                    "name": "location",
                    "description": "The current location",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "<code>true</code> to stop controller look up at this controller, <code>false</code> to go on.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "deprecated": true,
            "deprecationMessage": "DON'T USE!! CURRENTYL ONLY FOR TESTING AND SUBJECT TO BE REMOVED...",
            "class": "JSG.graph.controller.ModelController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\NodeController.js",
            "line": 52,
            "description": "Adds given PortController to the list of registered port controllers.",
            "itemtype": "method",
            "name": "addPort",
            "params": [
                {
                    "name": "portController",
                    "description": "The PortController to add.",
                    "type": "JSG.graph.controller.PortController"
                }
            ],
            "class": "JSG.graph.controller.NodeController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\NodeController.js",
            "line": 68,
            "description": "Adds the view of given PortController to the sub views of this controller associated view.",
            "itemtype": "method",
            "name": "addPortView",
            "params": [
                {
                    "name": "portController",
                    "description": "The PortController whose view should be added.",
                    "type": "JSG.graph.controller.PortController"
                }
            ],
            "class": "JSG.graph.controller.NodeController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\NodeController.js",
            "line": 78,
            "description": "Removes given PortController from the list of registered port controllers.",
            "itemtype": "method",
            "name": "removePort",
            "params": [
                {
                    "name": "portController",
                    "description": "The PortController to remove.",
                    "type": "JSG.graph.controller.PortController"
                }
            ],
            "class": "JSG.graph.controller.NodeController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\NodeController.js",
            "line": 95,
            "description": "Removes the view of given PortController form the sub views of this controller associated view.",
            "itemtype": "method",
            "name": "removePortView",
            "params": [
                {
                    "name": "portController",
                    "description": "The PortController whose view should be removed.",
                    "type": "JSG.graph.controller.PortController"
                }
            ],
            "class": "JSG.graph.controller.NodeController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\NodeController.js",
            "line": 114,
            "description": "Checks if this controller has any {{#crossLink \"JSG.graph.controller.PortController\"}}{{/crossLink}}s registered to it.",
            "itemtype": "method",
            "name": "hasPorts",
            "return": {
                "description": "<code>true</code> if PortControllers are registered, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.controller.NodeController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\NodeController.js",
            "line": 124,
            "description": "Returns direct access to the {{#crossLink \"JSG.graph.controller.PortController\"}}{{/crossLink}}s list.",
            "itemtype": "method",
            "name": "getPortControllers",
            "return": {
                "description": "A list of registered PortControllers.",
                "type": "Array"
            },
            "class": "JSG.graph.controller.NodeController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\NodeController.js",
            "line": 145,
            "description": "Called when an attribute is about to be changed.<br/>\nTo veto the change simply set the <code>doIt</code> flag of passed event object to <code>false</code>.<br/>\nThe default implementation only handles the\n{{#crossLink \"JSG.graph.attr.ItemAttributes/COLLAPSED:property\"}}{{/crossLink}} state change of\na node.<br/> Subclasses might overwrite but should call this base method.",
            "itemtype": "method",
            "name": "handlePreAttributeChange",
            "params": [
                {
                    "name": "attribute",
                    "description": "The attribute which might change.",
                    "type": "JSG.graph.attr.Attribute"
                },
                {
                    "name": "event",
                    "description": "The pre event send before attribute might changed.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.controller.NodeController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\NodeController.js",
            "line": 295,
            "description": "Called when an attribute has changed.<br/>\n<b>Note:</b> a change could be vetoed by other classes. This is the case if the <code>doIt</code> flag\nof passed event object is set to <code>false</code>!<br/>\nThe default implementation only handles the\n{{#crossLink \"JSG.graph.attr.ItemAttributes/COLLAPSED:property\"}}{{/crossLink}} state change of\na node.<br/> Subclasses might overwrite but should call this base method.",
            "itemtype": "method",
            "name": "handlePostAttributeChange",
            "params": [
                {
                    "name": "attribute",
                    "description": "The attribute which might was changed.",
                    "type": "JSG.graph.attr.Attribute"
                },
                {
                    "name": "event",
                    "description": "The post event send after attribute might changed.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.controller.NodeController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\PortController.js",
            "line": 21,
            "description": "Returns, if the port is selectable.",
            "itemtype": "method",
            "name": "isSelectable",
            "return": {
                "description": "Always false, as a port is not selectable.",
                "type": "Boolean"
            },
            "class": "JSG.graph.controller.PortController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\PortController.js",
            "line": 31,
            "description": "Creates the corresponding view for a Port model.",
            "itemtype": "method",
            "name": "createView",
            "params": [
                {
                    "name": "model",
                    "description": "Port model to create a view for.",
                    "type": "JSG.graph.model.Port"
                }
            ],
            "return": {
                "description": "View, which is created for the port model.",
                "type": "JSG.graph.view.PortView"
            },
            "class": "JSG.graph.controller.PortController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\RootController.js",
            "line": 21,
            "description": "The viewer which contains this controller.",
            "itemtype": "property",
            "name": "viewer",
            "type": "{JSG.ui.viewer.ControllerViewer}",
            "class": "JSG.graph.controller.RootController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\RootController.js",
            "line": 28,
            "description": "The actual root of controller hierarchy.",
            "itemtype": "property",
            "name": "content",
            "type": "{JSG.graph.controller.ModelController}",
            "class": "JSG.graph.controller.RootController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\RootController.js",
            "line": 38,
            "description": "Returns the viewer which contains this controller.",
            "itemtype": "method",
            "name": "getViewer",
            "return": {
                "description": "The viewer of this controller.",
                "type": "JSG.ui.viewer.ControllerViewer"
            },
            "class": "JSG.graph.controller.RootController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\RootController.js",
            "line": 47,
            "description": "Registers a ControllerViewer.</br>\n<b>Note:</b> the viewer should contain this controller as root.",
            "itemtype": "method",
            "name": "setViewer",
            "params": [
                {
                    "name": "The",
                    "description": "viewer of this controller.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.controller.RootController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\RootController.js",
            "line": 62,
            "description": "Returns <code>true</code> if this RootController has a content, <code>false</code> otherwise.",
            "itemtype": "method",
            "name": "hasContent",
            "return": {
                "description": "Returns <code>true</code> if a content is defined, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.controller.RootController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\RootController.js",
            "line": 72,
            "description": "Returns the content of this controller.</br>\nThe content is the actual root of the controller hierarchy. For example: the content of\nRootController for a {{#crossLink \"JSG.ui.viewer.GraphViewer\"}}{{/crossLink}} is a\n{{#crossLink \"JSG.graph.controller.GraphController\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getContent",
            "return": {
                "description": "The actual root of controller hierarchy.",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.graph.controller.RootController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\controller\\RootController.js",
            "line": 84,
            "description": "Sets the content of this controller.</br>\nThe content is the actual root of the controller hierarchy. For example: the content of\nRootController for a {{#crossLink \"JSG.ui.viewer.GraphViewer\"}}{{/crossLink}} is a\n{{#crossLink \"JSG.graph.controller.GraphController\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setContent",
            "params": [
                {
                    "name": "The",
                    "description": "actual root of controller hierarchy.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "class": "JSG.graph.controller.RootController",
            "module": "JSG.graph.controller",
            "namespace": "JSG.graph.controller"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\AttributeExpression.js",
            "line": 24,
            "description": "Returns the referenced attribute.</br>\nNote: <code>undefined</code> is returned if this expression is either not evaluated yet or the\nformula is invalid.",
            "itemtype": "method",
            "name": "getAttribute",
            "return": {
                "description": "The referenced attribute or <code>undefined</code>.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.expr.AttributeExpression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\AttributeExpression.js",
            "line": 36,
            "description": "Returns the GraphItem to which the referenced attribute belongs.</br>\nNote: <code>undefined</code> is returned if this expression is either not evaluated yet or the\nformula is invalid.",
            "itemtype": "method",
            "name": "getAttributeOwner",
            "return": {
                "description": "The attribute owner or <code>undefined</code>.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.graph.expr.AttributeExpression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\AttributeExpression.js",
            "line": 68,
            "description": "Saves this Expression to XML.</br>\n<b>Note:</b> this method takes an option GraphItem parameter. If given any possible Parent\nreferences in inner formula are replaced by the Id of the corresponding GraphItems before this\nexpression is saved.",
            "itemtype": "method",
            "name": "saveXML",
            "params": [
                {
                    "name": "name",
                    "description": "Name of created xml tag.",
                    "type": "String"
                },
                {
                    "name": "writer",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                },
                {
                    "name": "item",
                    "description": "The GraphItem which uses this Expression. If given\nParent references of inner formula are resolved.",
                    "type": "JSG.graph.model.GraphItem",
                    "optional": true
                }
            ],
            "class": "JSG.graph.expr.AttributeExpression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\AttributeReference.js",
            "line": 26,
            "description": "Creates a copy of this AttributeReference instance.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "A copy of this AttributeReference instance.",
                "type": "JSG.graph.expr.AttributeReference"
            },
            "class": "JSG.graph.expr.AttributeReference",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\AttributeReference.js",
            "line": 37,
            "description": "Returns the attribute owner.</br>",
            "itemtype": "method",
            "name": "getAttributeOwner",
            "return": {
                "description": "item The attribute owner, might be <code>undefined</code>.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.graph.expr.AttributeReference",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\AttributeReference.js",
            "line": 47,
            "description": "Returns the referenced attribute. </br>",
            "itemtype": "method",
            "name": "getAttribute",
            "return": {
                "description": "The referenced attribute, might be <code>undefined</code>.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.expr.AttributeReference",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\AttributeReference.js",
            "line": 57,
            "description": "Returns the value of referenced attribute. </br>",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "The value of referenced attribute.",
                "type": "Object"
            },
            "class": "JSG.graph.expr.AttributeReference",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\ConstExpression.js",
            "line": 28,
            "description": "Creates a constant expression from given expression.",
            "itemtype": "method",
            "name": "fromExpression",
            "params": [
                {
                    "name": "expr",
                    "description": "An expression the constant expression is based of.",
                    "type": "JSG.graph.expr.Expression"
                }
            ],
            "return": {
                "description": "A constant expression, based on given one.",
                "type": "JSG.graph.expr.ConstExpression"
            },
            "static": 1,
            "class": "JSG.graph.expr.ConstExpression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 70,
            "description": "Creates a new <code>Expression</code> instance. This method is part of our copy-pattern, in which\nthe copy is initially created by <code>newInstance</code>.",
            "itemtype": "method",
            "name": "newInstance",
            "return": {
                "description": "a new expression instance",
                "type": "JSG.graph.expr.Expression"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 81,
            "description": "Creates a copy of this expression. The returned copy and this expression are equal in terms of\n<code>equal</code> function.</br>\n<b>Note:</b> a possible existing term is not copied! Therefore a caller should run <code>evaluate()</code>\non the returned copy before first usage.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a copy of this expression",
                "type": "JSG.graph.expr.Expression"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 100,
            "description": "Returns <code>true</code> if this expression has the same formula and the same value as given\nexpression.",
            "itemtype": "method",
            "name": "isEqualTo",
            "params": [
                {
                    "name": "other",
                    "description": "The expression to check equality against",
                    "type": "JSG.graph.expr.Expression"
                }
            ],
            "return": {
                "description": "<code>true</code> if this expression equals given one, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 115,
            "description": "A convenience method to check expression equality to either a passed expression or value. </br>\n<b>Note:</b> if the parameter is an expression this method has the same effect as calling\n{{#crossLink \"JSG.graph.expr.Expression/isEqualTo:method\"}}{{/crossLink}}. If it is a value\n<code>true</code> is only returned if this expression has no formula and its current value is\nequal to given value. <br>\nTo check only equality of values call\n{{#crossLink \"JSG.graph.expr.Expression/isValueEqualTo:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "isEqualToExpressionOrValue",
            "params": [
                {
                    "name": "other",
                    "description": "The expression or value to check equality against",
                    "type": "JSG.graph.expr.Expression|Object"
                }
            ],
            "return": {
                "description": "<code>true</code> if this expression equals passed expression or value, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 140,
            "description": "Returns <code>true</code> if this expression has the same value as the given value.\nNote that the current expression value might depend on an inner formula. </br>\nSubclasses might overwrite this function, default implementation simply comparey by <code>===<code>.",
            "itemtype": "method",
            "name": "isValueEqualTo",
            "params": [
                {
                    "name": "value",
                    "description": "The value object to check equality against",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<code>true</code> if this expression value equals given one, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 157,
            "description": "Returns the value computed by inner term ({{#crossLink \"JSG.graph.expr.Term\"}}{{/crossLink}}).\nIf term is undefined the current value is returned.",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "the current expression value",
                "type": "Object|Number|String"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 175,
            "description": "Returns the currently used formula.",
            "itemtype": "method",
            "name": "getFormula",
            "return": {
                "description": "the currently used formula or <code>undefined</code>",
                "type": "String"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 184,
            "description": "Returns the currently used term.",
            "itemtype": "method",
            "name": "getTerm",
            "return": {
                "description": "the currently used term or <code>undefined</code>",
                "type": "JSG.graph.expr.Term"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 193,
            "description": "Returns the currently used constraint.",
            "itemtype": "method",
            "name": "getConstraint",
            "return": {
                "description": "the currently used constraint",
                "type": "JSG.graph.expr.ExpressionConstraint"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 202,
            "description": "Returns <code>true</code> if this expression is locked. Locked means that neither its value nor\nits formula or term can be changed.",
            "itemtype": "method",
            "name": "isLocked",
            "return": {
                "description": "<code>true</code> if this expression is locked, <code>false</code> otherwise"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 212,
            "description": "Specify <code>true</code> to lock this expression or <code>false</code> to unlock it. Lock means\nthat neither the expression value nor its formula or term can be changed.",
            "itemtype": "method",
            "name": "setLocked",
            "params": [
                {
                    "name": "doIt",
                    "description": "<code>true</code> to lock expression, <code>false</code> to unlock it",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "<code>true</code> if this expression was changed, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 227,
            "description": "Returns <code>true</code> if this expression has a defined formula.",
            "itemtype": "method",
            "name": "hasFormula",
            "return": {
                "description": "<code>true</code> if this expression has a formula, <code>false</code> otherwise"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 236,
            "description": "Returns <code>true</code> if this expression has a defined term.",
            "itemtype": "method",
            "name": "hasTerm",
            "return": {
                "description": "<code>true</code> if this expression has a term, <code>false</code> otherwise"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 245,
            "description": "Sets the constraint to use for this expression.",
            "itemtype": "method",
            "name": "setConstraint",
            "params": [
                {
                    "name": "constraint",
                    "description": "The new constraint to use",
                    "type": "JSG.graph.expr.ExpressionConstraint"
                }
            ],
            "return": {
                "description": "<code>true</code> if this expression was changed, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 261,
            "description": "Sets the new expression value. </br>\n<b>Note:</b> this will not affect a defined formula or term. That means if a term is defined this\nexpression can still return a different value than it was set here.",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "The new value to use",
                    "type": "Object|Number|String"
                }
            ],
            "return": {
                "description": "<code>true</code> if this expression was changed, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 279,
            "description": "Sets the new expression formula. </br>\n<b>Note:</b> this will not affect a defined term. Call <code>evaluate</code> to\nautomatically change term correspondingly.\nSee {{#crossLink \"JSG.graph.expr.Expression/evaluate:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "setFormula",
            "params": [
                {
                    "name": "formula",
                    "description": "The new formula to use.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<code>true</code> if this expression was changed, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 297,
            "description": "Sets the new expression term. </br>\n<b>Note:</b> this will not affect a defined formula.",
            "itemtype": "method",
            "name": "setTerm",
            "params": [
                {
                    "name": "term",
                    "description": "The new term to use",
                    "type": "JSG.graph.expr.Term"
                }
            ],
            "return": {
                "description": "<code>true</code> if this expression was changed, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 320,
            "description": "Sets this expression to given one. After calling this method both expressions are equal in the\nsense of {{#crossLink \"JSG.graph.expr.Expression/isEqualTo:method\"}}{{/crossLink}}.</br>\n<b>Note:</b> this will change this expression, no matter if it is locked or not!",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "expression",
                    "description": "The new expression",
                    "type": "JSG.graph.expr.Expression"
                }
            ],
            "return": {
                "description": "<code>true</code> if this expression was changed, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 338,
            "description": "Sets expression value, formula and or term directly.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "value",
                    "description": "The new value to use",
                    "type": "Object|Number|String"
                },
                {
                    "name": "formula",
                    "description": "The new formula to use",
                    "type": "String"
                },
                {
                    "name": "term",
                    "description": "The new term to use",
                    "type": "JSG.graph.expr.Term"
                }
            ],
            "return": {
                "description": "<code>true</code> if this expression was changed, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 355,
            "description": "Convenience method. If passed value is an expression calling this function has same effect as\ncalling {{#crossLink \"JSG.graph.expr.Expression/setTo:method\"}}{{/crossLink}} otherwise it\nsimply sets given value as new value and clears term and formula.",
            "itemtype": "method",
            "name": "setExpressionOrValue",
            "params": [
                {
                    "name": "value",
                    "description": "The new value or <code>Expression</code> to set.",
                    "type": "JSG.graph.expr.Expression|Object"
                }
            ],
            "return": {
                "description": "<code>true</code> if this expression was changed, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 373,
            "description": "Invalidates the term. This can be used, if references within a formula changed to recreate the term and its\nreferences",
            "itemtype": "method",
            "name": "invalidateTerm",
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 383,
            "description": "Evaluates the expression formula and creates and sets inner {{#crossLink \"JSG.graph.expr.Term\"}}{{/crossLink}}.\nThe optional passed item is used to resolve specified references within formula.",
            "itemtype": "method",
            "name": "evaluate",
            "params": [
                {
                    "name": "item",
                    "description": "Used to resolve references.",
                    "type": "JSG.graph.model.GraphItem",
                    "optional": true
                }
            ],
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 421,
            "description": "Resolves parent references within inner formula string.</br>\nThe passed GraphItem is used to resolve its parent and the optional <code>doRemove</code>\nflag can be used to clear the complete formula.",
            "itemtype": "method",
            "name": "resolveParentReference",
            "params": [
                {
                    "name": "item",
                    "description": "Used to resolve parent reference.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "doRemove",
                    "description": "Specify <code>true</code> to remove inner formula completely.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 441,
            "description": "Returns a string representation of this expression.",
            "itemtype": "method",
            "name": "toString",
            "params": [
                {
                    "name": "forItem",
                    "description": "Used to resolve references.",
                    "type": "JSG.graph.model.GraphItem",
                    "optional": true
                }
            ],
            "return": {
                "description": "String representation of this expression",
                "type": "String"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 461,
            "description": "Only used during loading...",
            "itemtype": "method",
            "name": "_setTerm",
            "params": [
                {
                    "name": "term",
                    "description": "The term to set.",
                    "type": "JSG.graph.expr.Term"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 476,
            "description": "Saves this Expression to XML.<br/>\nTo customize saving subclasses should overwrite the various <code>_write</code> methods.",
            "itemtype": "method",
            "name": "saveXML",
            "params": [
                {
                    "name": "name",
                    "description": "Name of created xml tag.",
                    "type": "String"
                },
                {
                    "name": "writer",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 512,
            "description": "Saves the formula of this Expression to XML in an encoded format.</br>\nAn optional <code>formula</code> string could be passed. This is useful whenever an adjusted\nformula should be written without changing inner formula.",
            "itemtype": "method",
            "name": "_writeFormulaAttribute",
            "params": [
                {
                    "name": "writer",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                },
                {
                    "name": "formula",
                    "description": "An optional formula String to be written instead. If not given intern one is used.",
                    "type": "String",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 526,
            "description": "Saves the term of this Expression to XML in an encoded format.",
            "itemtype": "method",
            "name": "_writeTermAttribute",
            "params": [
                {
                    "name": "writer",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 536,
            "description": "Saves the value of this Expression to XML.",
            "itemtype": "method",
            "name": "_writeValueAttribute",
            "params": [
                {
                    "name": "writer",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 551,
            "description": "Asked registered constraint to save itself by calling its <code>saveXML</code> method.<br/>\nNote: this method is only called if {{#crossLink \"JSG.graph.expr.ExpressionConstraint/doSave:method\"}}{{/crossLink}}\nreturns <code>true</code>.",
            "itemtype": "method",
            "name": "_writeConstraint",
            "params": [
                {
                    "name": "tag",
                    "description": "The tag name under which the constraint should be saved.",
                    "type": "String"
                },
                {
                    "name": "writer",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 567,
            "description": "Reads an expression from given XML Node.<br/>\nTo customize reading subclasses should overwrite the various <code>_read</code> methods.",
            "itemtype": "method",
            "name": "readXML",
            "params": [
                {
                    "name": "node",
                    "description": "Node to read from.",
                    "type": "Node"
                }
            ],
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 587,
            "description": "Reads and decodes an expression formula from given XML Node.",
            "itemtype": "method",
            "name": "_readFormulaAttribute",
            "params": [
                {
                    "name": "node",
                    "description": "Node to read from.",
                    "type": "Node"
                }
            ],
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 607,
            "description": "Reads the expression value from XML node.",
            "itemtype": "method",
            "name": "_readValueAttribute",
            "params": [
                {
                    "name": "node",
                    "description": "An XML node to read from.",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "The loaded expression value.",
                "type": "Boolean|Number|String"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Expression.js",
            "line": 637,
            "description": "Creates and reads constraint from given XML node.",
            "itemtype": "method",
            "name": "_readConstraint",
            "params": [
                {
                    "name": "node",
                    "description": "An XML node to read from.",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "The created and loaded expression constraint instance or <code>undefined</code>.",
                "type": "ExpressionConstraint"
            },
            "class": "JSG.graph.expr.Expression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\ExpressionConstraint.js",
            "line": 31,
            "description": "An optional default value to use if an expression value cannot be transformed to a type defined by this constraint.<br/>\nSee {{#crossLink \"JSG.graph.expr.ExpressionConstraint/getValue:method\"}}{{/crossLink}} too.",
            "itemtype": "property",
            "name": "defValue",
            "type": "{Boolean|Number|String}",
            "class": "JSG.graph.expr.ExpressionConstraint",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\ExpressionConstraint.js",
            "line": 39,
            "description": "Marks this constraint as a default constraint. This property is set to <code>true</code> by default.<br/>\nIt can be and is used to  implement application dependent behavior, e.g. a default constraint might not be \nsaved, see {{#crossLink \"JSG.graph.expr.ExpressionConstraint/doSave:method\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "isDefault",
            "type": "{Boolean}",
            "class": "JSG.graph.expr.ExpressionConstraint",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\ExpressionConstraint.js",
            "line": 53,
            "description": "Returns the complete class String of this <code>ExpressionConstraint</code> instance. The class string is the name\nof the <code>ExpressionConstraint</code> instance including its complete path, e.g. the class string of this general \n<code>ExpressionConstraint</code> is <code>JSG.graph.expr.ExpressionConstraint</code>.<br/>",
            "itemtype": "method",
            "name": "getClassString",
            "return": {
                "description": "The complete class string of this <code>ExpressionConstraint</code> instance.",
                "type": "String"
            },
            "class": "JSG.graph.expr.ExpressionConstraint",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\ExpressionConstraint.js",
            "line": 64,
            "description": "Called before this constraint is requested to save itself.<br/>\nReturns <code>true</code> to trigger save or <code>false</code> to cancel it. Subclasses may overwrite. Default \nimplementation simply checks if this constraint is marked as default, see\n{{#crossLink \"JSG.graph.expr.ExpressionConstraint/isDefault:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "doSave",
            "params": [
                {
                    "name": "expr",
                    "description": "The expression to which this constraint is registered to.",
                    "type": "JSG.graph.expr.Expression"
                }
            ],
            "return": {
                "description": "<code>true</code> if this constraint should be saved, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.ExpressionConstraint",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\ExpressionConstraint.js",
            "line": 77,
            "description": "Saves this ExpressionConstraint to XML.<br/>",
            "itemtype": "method",
            "name": "saveXML",
            "params": [
                {
                    "name": "writer",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "class": "JSG.graph.expr.ExpressionConstraint",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\ExpressionConstraint.js",
            "line": 96,
            "description": "Tries to determine the type of given value.",
            "itemtype": "method",
            "name": "_typeOf",
            "params": [
                {
                    "name": "value",
                    "description": "The value to get the type of.",
                    "type": "Boolean|Number|String"
                }
            ],
            "return": {
                "description": "A lowercase key for the type of given value.",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.expr.ExpressionConstraint",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\ExpressionConstraint.js",
            "line": 112,
            "description": "Reads this ExpressionConstraint from given XML Node.<br/>",
            "itemtype": "method",
            "name": "readXML",
            "params": [
                {
                    "name": "node",
                    "description": "Node to read from.",
                    "type": "Node"
                }
            ],
            "class": "JSG.graph.expr.ExpressionConstraint",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\ExpressionConstraint.js",
            "line": 128,
            "description": "Converts given value string to specified type.",
            "itemtype": "method",
            "name": "_convert",
            "params": [
                {
                    "name": "value",
                    "description": "The value string to convert.",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "A key to specify the type to convert to.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The converted value.",
                "type": "Boolean|Number|String"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.expr.ExpressionConstraint",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\ExpressionConstraint.js",
            "line": 145,
            "description": "Creates a copy of this <code>ExpressionConstraint</code>.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "copied expression constraint",
                "type": "JSG.graph.expr.ExpressionConstraint"
            },
            "class": "JSG.graph.expr.ExpressionConstraint",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\ExpressionConstraint.js",
            "line": 156,
            "description": "Checks if passed value is valid in the sense of this constraint. Returns <code>true</code> if it\nis, <code>false</code> otherwise. This method gets called when an expression value is set directly.<br/>\nSubclasses can overwrite to implement custom behavior. Default implementation simply validates against <code>String</code>\n<code>Number</code> and primitive boolean values.",
            "itemtype": "method",
            "name": "isValid",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<code>true</code> if passed value is valid against this constraint, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.ExpressionConstraint",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\ExpressionConstraint.js",
            "line": 170,
            "description": "Returns and transforms given value if required. This method gets called when an expression value is requested.<br/>\nSubclasses can overwrite to implement custom behavior. Default implementation checks if passed value represents a \n<code>Number</code> or <code>String</code> and simply returns it in this case. Otherwise it tries to transform to \n<code>Number</code>. If transformation is not possible the defined default value is returned. Note that the default\nvalue is optional and therefore <code>undefined</code> could be returned.",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "value",
                    "description": "The value to transform",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The transformed value or <code>undefined</code>.",
                "type": "Number|String|Object"
            },
            "class": "JSG.graph.expr.ExpressionConstraint",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\ExpressionProxy.js",
            "line": 21,
            "description": "Returns wrapped expression.",
            "itemtype": "method",
            "name": "getExpression",
            "return": {
                "description": "The wrapped expression.",
                "type": "JSG.graph.expr.Expression"
            },
            "class": "JSG.graph.expr.ExpressionProxy",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\FormulaParser.js",
            "line": 55,
            "description": "Pushes parsing index forward until a non white space character is read. After calling this\nthe global <code>ch</code> variable contains current character and <code>index</code> points\nto the next one.",
            "itemtype": "method",
            "name": "skipWhiteSpace",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.expr.FormulaParser",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\FormulaParser.js",
            "line": 69,
            "description": "Throws an exception with given message for an error at specified index.",
            "itemtype": "method",
            "name": "throwException",
            "params": [
                {
                    "name": "msg",
                    "description": "The error message.",
                    "type": "String"
                },
                {
                    "name": "atIndex",
                    "description": "The parsing index at which the error happened.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.expr.FormulaParser",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\FormulaParser.js",
            "line": 423,
            "description": "Checks if given character is a valid identifier character. \nNote: parsing index is NOT increased.",
            "itemtype": "method",
            "name": "isValidIdentifier",
            "params": [
                {
                    "name": "ch",
                    "description": "A character to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<code>true</code> if given character represent a valid identifier part, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.expr.FormulaParser",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\FormulaParser.js",
            "line": 450,
            "description": "Checks if given string represents a binary operator. \nNote: parsing index is NOT increased.",
            "itemtype": "method",
            "name": "isBinaryOperatorStr",
            "params": [
                {
                    "name": "str",
                    "description": "A string which might represent a binary operator.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<code>true</code> if given string is a binary operator, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.expr.FormulaParser",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\FormulaParser.js",
            "line": 462,
            "description": "Checks if given characters represent a binary operator. \nNote: parsing index is NOT increased.",
            "itemtype": "method",
            "name": "isOperator",
            "params": [
                {
                    "name": "c1",
                    "description": "A character which might represent a binary operator.",
                    "type": "Number"
                },
                {
                    "name": "c2",
                    "description": "An optional second character which might is part of a binary operator.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "<code>true</code> if given characters represent a binary operator, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.expr.FormulaParser",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\FormulaParser.js",
            "line": 479,
            "description": "Checks if given character represents a unary operator. \nNote: parsing index is NOT increased.",
            "itemtype": "method",
            "name": "isUnaryOperator",
            "params": [
                {
                    "name": "c",
                    "description": "A character which might represent a unary operator.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<code>true</code> if given operator is unary, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.expr.FormulaParser",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\FormulaParser.js",
            "line": 492,
            "description": "Returns the precedence, i.e. a kind of priority, for given string which must represent a \nbinary operator.\nNote: parsing index is NOT increased.",
            "itemtype": "method",
            "name": "precedenceOfBinary",
            "params": [
                {
                    "name": "The",
                    "description": "operator to get the precedence for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The precedence of given operator or 0.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.expr.FormulaParser",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\FormulaParser.js",
            "line": 516,
            "description": "Compiles given formula string into its corresponding <code>Term</code> object.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "formula",
                    "description": "formula string to parse",
                    "type": "String"
                },
                {
                    "name": "graph",
                    "description": "An optional graph model to resolve item references",
                    "type": "JSG.graph.model.Graph",
                    "optional": true
                },
                {
                    "name": "item",
                    "description": "An optional item model, used as default item",
                    "type": "JSG.graph.model.GraphItem",
                    "optional": true
                }
            ],
            "return": {
                "description": "A new Term instance which represents given formula.",
                "type": "JSG.graph.expr.Term"
            },
            "class": "JSG.graph.expr.FormulaParser",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\FormulaParser.js",
            "line": 533,
            "description": "Returns the computed result from given node.<br/>\nNote: this method is for testing purpose only!",
            "itemtype": "method",
            "name": "resultOf",
            "params": [
                {
                    "name": "root",
                    "description": "A parser node object to start computation at.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The computed result.",
                "type": "Object"
            },
            "class": "JSG.graph.expr.FormulaParser",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\MapExpression.js",
            "line": 28,
            "description": "Checks if internal used map contains any objects.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "<code>true</code> if map does contain at least one object, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.MapExpression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\MapExpression.js",
            "line": 38,
            "description": "Checks if internal map contains an element for specified key.",
            "itemtype": "method",
            "name": "hasElement",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<code>true</code> if map contains an element for specified key, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.MapExpression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\MapExpression.js",
            "line": 49,
            "description": "Adds given element under specified key to the inner map of this MapExpression.\nAny previously added element for same key is replaced.",
            "itemtype": "method",
            "name": "putElement",
            "params": [
                {
                    "name": "key",
                    "description": "The key to add the element for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The previously stored element or <code>undefined</code>.",
                "type": "Object"
            },
            "class": "JSG.graph.expr.MapExpression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\MapExpression.js",
            "line": 61,
            "description": "Returns the element for given key or <code>undefined</code> if none could be found.",
            "itemtype": "method",
            "name": "getElement",
            "params": [
                {
                    "name": "key",
                    "description": "The key to get the corresponding element for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The element for given key or <code>undefined</code>.",
                "type": "Object"
            },
            "class": "JSG.graph.expr.MapExpression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\MapExpression.js",
            "line": 72,
            "description": "Removes the element for given key.",
            "itemtype": "method",
            "name": "removeElement",
            "params": [
                {
                    "name": "key",
                    "description": "The key which references the element to remove.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The removed element or <code>undefined</code>.",
                "type": "Object"
            },
            "class": "JSG.graph.expr.MapExpression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\MapExpression.js",
            "line": 109,
            "description": "Iterates over all values stored in inner {{#crossLink \"JSG.commons.Map\"}}{{/crossLink}}. If provided function \nreturns <code>true</code> iteration is stopped.<br/>",
            "itemtype": "method",
            "name": "iterate",
            "params": [
                {
                    "name": "func",
                    "description": "Function to be executed for each object in the map. Should return <code>true</code> to stop iteration.",
                    "type": "Function"
                }
            ],
            "class": "JSG.graph.expr.MapExpression",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 21,
            "description": "Type flag for a number operand",
            "itemtype": "property",
            "name": "NUMBER",
            "type": "Number",
            "static": 1,
            "class": "JSG.graph.expr.Operand",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 29,
            "description": "Type flag for a string operand",
            "itemtype": "property",
            "name": "STRING",
            "type": "Number",
            "static": 1,
            "class": "JSG.graph.expr.Operand",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 37,
            "description": "Type flag for a reference operand",
            "itemtype": "property",
            "name": "REFERENCE",
            "type": "Number",
            "static": 1,
            "class": "JSG.graph.expr.Operand",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 46,
            "description": "Constructor method to create an <code>Operand</code> object from given string. The string could\nrepresent a reference, a number or simply a string.",
            "itemtype": "method",
            "name": "fromString",
            "params": [
                {
                    "name": "str",
                    "description": "The string to create an operand from.",
                    "type": "String"
                },
                {
                    "name": "graph",
                    "description": "An optional graph model used to resolve item references.",
                    "type": "JSG.graph.model.Graph",
                    "optional": true
                },
                {
                    "name": "item",
                    "description": "An optional item model to take as the default item references.",
                    "type": "JSG.graph.model.GraphItem",
                    "optional": true
                }
            ],
            "return": {
                "description": "a new operand object or <code>undefined</code>",
                "type": "JSG.graph.expr.Operand"
            },
            "static": 1,
            "class": "JSG.graph.expr.Operand",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 70,
            "description": "Creates a copy of this <code>Operand</code>.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "copied operand",
                "type": "JSG.graph.expr.Operand"
            },
            "class": "JSG.graph.expr.Operand",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 84,
            "description": "Checks if this operand is equal to given one, i.e. has same type and value.",
            "itemtype": "method",
            "name": "isEqualTo",
            "params": [
                {
                    "name": "operand",
                    "description": "The operand to check against.",
                    "type": "JSG.graph.expr.Operand"
                }
            ],
            "return": {
                "description": "<code>true</code> if both operand have same type and value, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.Operand",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 95,
            "description": "Sets value and type of this operand to the ones of given operand.",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "operand",
                    "description": "The operand to take value and type from.",
                    "type": "JSG.graph.expr.Operand"
                }
            ],
            "class": "JSG.graph.expr.Operand",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 105,
            "description": "Sets value and type of this operand.</br>\nThe type should be one of the predefined operand types.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "value",
                    "description": "The new operand value.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The new operand type.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.expr.Operand",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 118,
            "description": "Returns <code>true</code> since an operand is always an operand.</br>\nThis method is only useful for the {{#crossLink \"JSG.graph.expr.FormularParser\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "isOperand",
            "return": {
                "description": "always <code>true</code>",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.Operand",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 129,
            "description": "Returns the value of this operand.",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "the operand value",
                "type": "Object"
            },
            "class": "JSG.graph.expr.Operand",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 139,
            "description": "Returns a string representation of this operands value.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "JSG.graph.expr.Operand",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 162,
            "description": "Encoding string to use throughout loading and saving.",
            "itemtype": "property",
            "name": "ENCODING",
            "type": "String",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.expr.StringConstant",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 173,
            "description": "Predefined regular expression to use for encoding string value.",
            "itemtype": "property",
            "name": "ENCODE_REGEX",
            "type": "String",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.expr.StringConstant",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 183,
            "description": "Predefined regular expression to use for decoding string value.",
            "itemtype": "property",
            "name": "DECODE_REGEX",
            "type": "String",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.expr.StringConstant",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 193,
            "description": "Checks if given value represents {{#crossLink \"JSG.graph.expr.StringConstant\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "isStringConstant",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<code>true</code> if given value represent a <code>StringConstant</code> otherwise <code>false</code>",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.graph.expr.StringConstant",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 208,
            "description": "Encodes given StringConstant value.",
            "itemtype": "method",
            "name": "encode",
            "params": [
                {
                    "name": "value",
                    "description": "The value to encode.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The encoded string value.",
                "type": "String"
            },
            "static": 1,
            "class": "JSG.graph.expr.StringConstant",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 221,
            "description": "Decodes given StringConstant value",
            "itemtype": "method",
            "name": "decode",
            "params": [
                {
                    "name": "value",
                    "description": "The value to decode.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The decoded string value.",
                "type": "String"
            },
            "static": 1,
            "class": "JSG.graph.expr.StringConstant",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 234,
            "description": "Creates a copy of this {{#crossLink \"JSG.graph.expr.StringConstant\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "A copy of this <code>StringConstant</code>.",
                "type": "JSG.graph.expr.StringConstant"
            },
            "class": "JSG.graph.expr.StringConstant",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 244,
            "description": "Sets this constant value to the value of passe operand which must be an instance of {{#crossLink \"JSG.graph.expr.StringConstant\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "operand",
                    "description": "The <code>StringConstant</code> to use.",
                    "type": "JSG.graph.expr.StringConstant"
                }
            ],
            "class": "JSG.graph.expr.StringConstant",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 257,
            "description": "Sets this constant value to the passed value which must be an instance of <code>String</code>",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "value",
                    "description": "The new string value.",
                    "type": "String"
                }
            ],
            "class": "JSG.graph.expr.StringConstant",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operand.js",
            "line": 269,
            "description": "Returns a string representation of this {{#crossLink \"JSG.graph.expr.StringConstant\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "JSG.graph.expr.StringConstant",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operator.js",
            "line": 24,
            "description": "Returns <code>false</code> since an operator is never an operand.</br>\nThis method is only useful for the {{#crossLink \"JSG.graph.expr.FormularParser\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "isOperand",
            "return": {
                "description": "always <code>false</code>",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.Operator",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operator.js",
            "line": 59,
            "description": "Checks if given string is a valid string representation of a  known operator.",
            "itemtype": "method",
            "name": "isOperator",
            "params": [
                {
                    "name": "str",
                    "description": "A operator string representation.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<code>true</code> if given string represents a known operator, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.Operators",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Operator.js",
            "line": 69,
            "description": "Creates a new {{#crossLink \"JSG.graph.expr.Operator\"}}{{/crossLink}} instance from its\ncorresponding string represention.",
            "itemtype": "method",
            "name": "fromString",
            "params": [
                {
                    "name": "str",
                    "description": "A valid operator string representation.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A new Operator instance.",
                "type": "JSG.graph.expr.Operator"
            },
            "class": "JSG.graph.expr.Operators",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\RangeConstraint.js",
            "line": 32,
            "description": "Creates a new <code>RangeConstraint</code> instance whose range is based on the properties of given object.",
            "itemtype": "method",
            "name": "fromPropertiesOf",
            "params": [
                {
                    "name": "obj",
                    "description": "The object whose own properties define the range.",
                    "type": "Object"
                },
                {
                    "name": "defValue",
                    "description": "An optional default value to use.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The created <code>RangeConstraint</code> instance.",
                "type": "JSG.graph.expr.RangeConstraint"
            },
            "class": "JSG.graph.expr.RangeConstraint",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Reference.js",
            "line": 30,
            "description": "A factory method to create a new Reference instance for a given property, item and graph model.</br>\nReturns <code>undefined</code> if either the property reference string is not valid or a suitable\nGraphItem could not be determined.",
            "example": [
                "\n\tvar reference = JSG.graph.expr.Reference.fromString(\"width\", undefined, anyGraphItem);"
            ],
            "itemtype": "method",
            "name": "fromString",
            "params": [
                {
                    "name": "str",
                    "description": "A String which references an item property.",
                    "type": "String"
                },
                {
                    "name": "graph",
                    "description": "An optional Graph model used to resolve item id within property string.",
                    "type": "JSG.graph.model.Graph",
                    "optional": true
                },
                {
                    "name": "item",
                    "description": "An optional GraphItem model which is used as default property owner.",
                    "type": "JSG.graph.model.GraphItem",
                    "optional": true
                }
            ],
            "return": {
                "description": "A new Reference or <code>undefined</code>.",
                "type": "JSG.graph.expr.Reference"
            },
            "static": 1,
            "class": "JSG.graph.expr.Reference",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Reference.js",
            "line": 98,
            "description": "Constructor method which creates a new Reference instance for given item and property specified by\ngiven propertyId. <code>undefined</code> is returned if given item has no property of given id.",
            "itemtype": "method",
            "name": "getReference",
            "params": [
                {
                    "name": "forItem",
                    "description": "The GraphItem model to create a Reference for.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "propertyId",
                    "description": "A String representing an item property, like <code>WIDTH</code>, <code>HEIGHT</code>...",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A new Reference instance or <code>undefined</code>.",
                "type": "JSG.graph.expr.Reference"
            },
            "static": 1,
            "class": "JSG.graph.expr.Reference",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Reference.js",
            "line": 157,
            "description": "Checks if this Reference operand is resolved, i.e. its inner GraphItem is set.<br/>\n<b>Note:</b> the return value of methods like {{#crossLink \"JSG.graph.expr.Reference/getValue:method\"}}{{/crossLink}}\nand {{#crossLink \"JSG.graph.expr.Reference/getPropertyString:method\"}}{{/crossLink}} depends on\nresolve state. Refer to corresponding methods documentation for more information.",
            "itemtype": "method",
            "name": "isResolved",
            "return": {
                "description": "<code>true</code> if Reference is resolved, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.Reference",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Reference.js",
            "line": 170,
            "description": "Creates a copy of this Reference instance.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "A copy of this Reference instance.",
                "type": "JSG.graph.expr.Reference"
            },
            "class": "JSG.graph.expr.Reference",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Reference.js",
            "line": 182,
            "description": "Returns the value of referenced property. </br>\nIf this Reference is not resolved the raw string which describes this reference operand is returned.\nNote: if the property is a Reference too its reference property value is returned.",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "The value of referenced property or the raw reference description.",
                "type": "Object|String"
            },
            "class": "JSG.graph.expr.Reference",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Reference.js",
            "line": 201,
            "description": "Returns a string representation of this Reference.</br>\nIf this Reference is not resolved the raw string which describes this reference operand is returned.",
            "itemtype": "method",
            "name": "toString",
            "params": [
                {
                    "name": "forItem",
                    "description": "An optional GraphItem model used to resolve parent references.",
                    "type": "GraphItem",
                    "optional": true
                }
            ],
            "return": {
                "description": "A string description of this reference or the raw reference description if this\nReference instance is not resolved.",
                "type": "String"
            },
            "class": "JSG.graph.expr.Reference",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Reference.js",
            "line": 229,
            "description": "Returns a string representation of referenced property object. As default this simply returns the\nproperty id. Subclasses may overwrite.<br/>\nNote: if this Reference instance is not resolved, the raw property reference string is returned.\nE.g. from a raw reference description like <code>Item.2!width</code> only <code>width</code> is\nreturned in case of an unresolved reference.",
            "itemtype": "method",
            "name": "getPropertyString",
            "return": {
                "description": "The property string representation.",
                "type": "String"
            },
            "class": "JSG.graph.expr.Reference",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 43,
            "description": "A factory method which creates simple Term with just one number Operand.",
            "itemtype": "method",
            "name": "fromNumber",
            "params": [
                {
                    "name": "nr",
                    "description": "A number to use as the operand.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A new Term instance.",
                "type": "JSG.graph.expr.Term"
            },
            "static": 1,
            "class": "JSG.graph.expr.Term",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 55,
            "description": "A factory method which creates a simple Term with just one string Operand",
            "itemtype": "method",
            "name": "fromString",
            "params": [
                {
                    "name": "str",
                    "description": "A string to use as the sole operand.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A new Term instance.",
                "type": "JSG.graph.expr.Term"
            },
            "static": 1,
            "class": "JSG.graph.expr.Term",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 67,
            "description": "A factory method which creates a simple Term with just one reference Operand.",
            "itemtype": "method",
            "name": "fromReference",
            "params": [
                {
                    "name": "reference",
                    "description": "A Reference to use as the sole operand.",
                    "type": "JSG.graph.expr.Reference"
                }
            ],
            "return": {
                "description": "A new Term instance.",
                "type": "JSG.graph.expr.Term"
            },
            "static": 1,
            "class": "JSG.graph.expr.Term",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 80,
            "description": "Creates a new <code>Term</code> instance. This method is part of our copy-pattern, in which\nthe copy is initially created by <code>newInstance</code>.",
            "itemtype": "method",
            "name": "newInstance",
            "return": {
                "description": "A new term instance",
                "type": "JSG.graph.expr.Term"
            },
            "class": "JSG.graph.expr.Term",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 91,
            "description": "Creates a copy of this <code>Term</code>.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "The copied term.",
                "type": "JSG.graph.expr.Term"
            },
            "class": "JSG.graph.expr.Term",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 104,
            "description": "Checks if this term is equal to given one, i.e. its left and right terms are equal as well as its operand.",
            "itemtype": "method",
            "name": "isEqualTo",
            "params": [
                {
                    "name": "term",
                    "description": "The term to check against.",
                    "type": "JSG.graph.expr.Term"
                }
            ],
            "return": {
                "description": "<code>true</code> if both terms have are equal, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.Term",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 121,
            "description": "Checks if this term has a simple cycle.<br/>\nWe call it a simple cycle if this term references itself either directly or indirectly. I.e. \na reference within given term is followed until the same term is reached again. Note: this will\nnot detect any additional \"in-between\" cycles.<br/>\nThe optional reference object must provide <code>id</code> (Number) and <code>property</code> (String) properties. \nWhere the <code>id</code> specifies the referenced GraphItem id and the <code>property</code> its property to use.\nThis can be used as a starting reference. If not given the first term reference found is used.",
            "itemtype": "method",
            "name": "hasCycle",
            "params": [
                {
                    "name": "startref",
                    "description": "An optional object which describes a reference to start from.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "<code>true</code> if term has a cycle, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "Under review! Use with care! This method is subject to change!!",
            "class": "JSG.graph.expr.Term",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 145,
            "description": "Use for cycle detection. Called via traversal of this term. Decides if a cycle was detected and stops \ntraversal if so.",
            "itemtype": "method",
            "name": "_cycleCheck",
            "params": [
                {
                    "name": "term",
                    "description": "The current term to check.",
                    "type": "JSG.graph.expr.Term"
                }
            ],
            "return": {
                "description": "<code>true</code> if traversal should go on, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.expr.Term",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 172,
            "description": "Traverses this term and calls given function in specified scope.<br/>\n<b>Note:</b> the current traversed Term is passed to given function. If traversal should go on function must return\n<code>true</code> or otherwise the traversal is stopped. The order of traversal is that first a possible \n{{#crossLink \"JSG.graph.expr.Reference\"}}{{/crossLink}} is checked followed, than the left term and than the right term.",
            "itemtype": "method",
            "name": "traverse",
            "params": [
                {
                    "name": "func",
                    "description": "The function to call on each traversed term.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The function scope to use when calling passed function. If not given the passed function \nitself is used as scope.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "<code>true</code> if traversal should go on, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.expr.Term",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 204,
            "description": "Traverses a referenced term.",
            "itemtype": "method",
            "name": "_followReference",
            "params": [
                {
                    "name": "ref",
                    "description": "The reference to follow.",
                    "type": "JSG.graph.expr.Reference"
                },
                {
                    "name": "func",
                    "description": "The function to call on each traversed term.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The function scope to use when calling passed function",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "<code>true</code> if traversal should go on, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.expr.Term",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 221,
            "description": "Sets this term to match the given one.",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "term",
                    "description": "The term to take the operand, left and right terms from.",
                    "type": "JSG.graph.expr.Term"
                }
            ],
            "class": "JSG.graph.expr.Term",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 239,
            "description": "Sets the left part of this term. </br>\nNote that this is only useful in case of binary terms.",
            "itemtype": "method",
            "name": "setLeft",
            "params": [
                {
                    "name": "term",
                    "description": "The term to use as left part.",
                    "type": "JSG.graph.expr.Term"
                }
            ],
            "class": "JSG.graph.expr.Term",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 249,
            "description": "Sets the right part of this term. </br>\nNote that this is only useful in case of binary terms.",
            "itemtype": "method",
            "name": "setRight",
            "params": [
                {
                    "name": "term",
                    "description": "The term to use as right part.",
                    "type": "JSG.graph.expr.Term"
                }
            ],
            "class": "JSG.graph.expr.Term",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 279,
            "description": "Returns direct access to this Terms operand.",
            "itemtype": "method",
            "name": "getOperand",
            "return": {
                "description": "The operand of this term.",
                "type": "JSG.graph.expr.Operand"
            },
            "class": "JSG.graph.expr.Term",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 289,
            "description": "Returns the calculated value or <code>undefined</code> if no value could be calculated.",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "The terms value or <code>undefined</code>.",
                "type": "Object"
            },
            "class": "JSG.graph.expr.Term",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 299,
            "description": "Returns a string representation of this term.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "A string representation of this term.",
                "type": "String"
            },
            "class": "JSG.graph.expr.Term",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\expr\\Term.js",
            "line": 309,
            "description": "Returns a string representation of this term.</br>\nThe difference to {{#crossLink \"JSG.graph.expr.Term/toString:method\"}}{{/crossLink}} is that\nthis method adds brackets around each (sub-)term.",
            "itemtype": "method",
            "name": "toStringWithBrackets",
            "return": {
                "description": "A string representation with added brackets around (sub-)terms.",
                "type": "String"
            },
            "class": "JSG.graph.expr.Term",
            "module": "JSG.graph.expr",
            "namespace": "JSG.graph.expr"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "line": 50,
            "description": "Called after a Feedback instance was created.</br>\nSubclasses may overwrite to perform custom initialization.",
            "itemtype": "method",
            "name": "init",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.feedback.Feedback",
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "line": 80,
            "description": "Translate Feedback coordinates from one GraphItem to another. Coordinates are always relative\nto its parent. The translation converts coordinates relative to one GraphItem to coordinates\nrelative to the other GraphItem",
            "itemtype": "method",
            "name": "_translate",
            "params": [
                {
                    "name": "fromItem",
                    "description": "Item to translate coordinates from.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "toItem",
                    "description": "Item to translate coordinates to.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.feedback.Feedback",
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "line": 110,
            "description": "Draw Feedback to the given graphics.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "graphics",
                    "description": "Graphics to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.feedback.Feedback",
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "line": 122,
            "description": "Get the associated model of the feedback.",
            "itemtype": "method",
            "name": "getItem",
            "return": {
                "description": "Item that is associated with feedback.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.graph.feedback.Feedback",
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "line": 132,
            "description": "Get the associated model of the feedback.",
            "itemtype": "method",
            "name": "getFeedbackItem",
            "return": {
                "description": "Item that is associated with feedback.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.graph.feedback.Feedback",
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "line": 142,
            "description": "Get the associated original model that the feedback. where the item was derived from. Be careful\nif you intend to change properties of the original model.",
            "itemtype": "method",
            "name": "getFeedbackItem",
            "return": {
                "description": "Item that is associated with feedback.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.graph.feedback.Feedback",
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "line": 153,
            "description": "Get the associated view of the feedback.",
            "itemtype": "method",
            "name": "getFeedbackView",
            "return": {
                "description": "View that is associated with feedback.",
                "type": "JSG.graph.model.GraphItemView"
            },
            "class": "JSG.graph.feedback.Feedback",
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "line": 163,
            "description": "Set the associated view for the feedback.",
            "itemtype": "method",
            "name": "setFeedbackView",
            "params": [
                {
                    "name": "View",
                    "description": "to associate with the feedback.",
                    "type": "JSG.graph.model.GraphItemView"
                }
            ],
            "class": "JSG.graph.feedback.Feedback",
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "line": 173,
            "description": "Get current angle of Feedback item.",
            "itemtype": "method",
            "name": "getAngle",
            "return": {
                "description": "Angle in radians.",
                "type": "Number"
            },
            "class": "JSG.graph.feedback.Feedback",
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "line": 183,
            "description": "Set angle of Feedback item.",
            "itemtype": "method",
            "name": "setAngle",
            "params": [
                {
                    "name": "Angle",
                    "description": "in radians.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.feedback.Feedback",
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "line": 193,
            "description": "Set the origin of the Feedback.",
            "itemtype": "method",
            "name": "setOriginTo",
            "params": [
                {
                    "name": "point",
                    "description": "Origin to set.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.feedback.Feedback",
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "line": 203,
            "description": "Get the origin of the Feedback.",
            "itemtype": "method",
            "name": "getOrigin",
            "return": {
                "description": "point Current Origin of Feedback.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.feedback.Feedback",
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "line": 214,
            "description": "Get the item atttribute List of the model of the Feedback.",
            "itemtype": "method",
            "name": "getItemAttributes",
            "return": {
                "description": "Item attributes of the model.",
                "type": "JSG.graph.attr.ItemAttributes"
            },
            "class": "JSG.graph.feedback.Feedback",
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "line": 224,
            "description": "Get the format of the feedback item.",
            "itemtype": "method",
            "name": "getFormat",
            "return": {
                "description": "Format attribute list.",
                "type": "JSG.mode.attr.FormatAttributes"
            },
            "class": "JSG.graph.feedback.Feedback",
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "line": 234,
            "description": "Checks to see, if item is moveable.",
            "itemtype": "method",
            "name": "isMoveable",
            "return": {
                "description": "True, if Feedback is moveable.",
                "type": "Boolean"
            },
            "class": "JSG.graph.feedback.Feedback",
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "line": 245,
            "description": "Returns the setting for move direction.<br/>\nSee {{#crossLink \\\"JSG.graph.attr.consts.Moveable\\\"}}{{/crossLink}} for predefined values.",
            "itemtype": "method",
            "name": "getMoveable",
            "return": {
                "description": "The move direction flag set to this feedback item.",
                "type": "Number"
            },
            "since": "1.6.0",
            "class": "JSG.graph.feedback.Feedback",
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "line": 256,
            "description": "Set moveable flag of feedback.",
            "itemtype": "method",
            "name": "setMoveable",
            "params": [
                {
                    "name": "movedir",
                    "description": "Flag to define move capabilities of item.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.feedback.Feedback",
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "line": 266,
            "description": "Checks to see, if item is rotatable.",
            "itemtype": "method",
            "name": "isRotatable",
            "return": {
                "description": "True, if Feedback is rotatable.",
                "type": "Boolean"
            },
            "class": "JSG.graph.feedback.Feedback",
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "line": 276,
            "description": "Rotates feedback around given pin.",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "Angle in radians.",
                    "type": "Number"
                },
                {
                    "name": "pin",
                    "description": "Pin to rotate around.",
                    "type": "JSG.graph.Pin"
                }
            ],
            "class": "JSG.graph.feedback.Feedback",
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\feedback\\Feedback.js",
            "line": 289,
            "description": "Get current bounding box of feedback item.",
            "itemtype": "method",
            "name": "getBoundingBox",
            "params": [
                {
                    "name": "reusebox",
                    "description": "Box, that can be used for return the value.",
                    "type": "JSG.geometry.BoundingBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "Current BoundingBox of item.",
                "type": "JSG.geometry.BoundingBox"
            },
            "class": "JSG.graph.feedback.Feedback",
            "module": "JSG.graph.feedback",
            "namespace": "JSG.graph.feedback"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js",
            "line": 64,
            "description": "Called whenever corresponding {{#crossLink \"JSG.graph.feedback.Feedback\"}}{{/crossLink}}s should\nbe updated.</br>\nSubclasses should overwrite, default implementation does nothing.",
            "itemtype": "method",
            "name": "updateFeedback",
            "params": [
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "offset",
                    "description": "The offset between start and current event. Usually the difference between\nstart and current location.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.interaction.AbstractInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js",
            "line": 77,
            "description": "Called whenever corresponding sub-{{#crossLink \"JSG.graph.feedback.Feedback\"}}{{/crossLink}}s should\nbe updated.</br>\nSubclasses should overwrite, default implementation does nothing.",
            "itemtype": "method",
            "name": "updateFeedback",
            "params": [
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "subfeedbacks",
                    "description": "A list of currently registered subfeedbacks.",
                    "type": "Array"
                }
            ],
            "class": "JSG.graph.interaction.AbstractInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js",
            "line": 90,
            "description": "Called during finishing this Interaction to create a Command for execution.",
            "itemtype": "method",
            "name": "createCommand",
            "params": [
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "offset",
                    "description": "The offset between start and current event. Usually the difference between start and current location.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                },
                {
                    "name": "selectedController",
                    "description": "The currently selected controller or <code>undefined</code>.",
                    "type": "JSG.graph.controller.GraphItemController",
                    "optional": true
                }
            ],
            "return": {
                "description": "A command to be executed or <code>undefined</code>",
                "type": "JSG.graph.command.Command"
            },
            "class": "JSG.graph.interaction.AbstractInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js",
            "line": 103,
            "description": "Returns all currently registered sub-feedbacks.<br/>\nSub-feedbacks are used to visualize changes of {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s which are \nnot explicitly updated by this interaction.",
            "itemtype": "method",
            "name": "getSubFeedbacks",
            "return": {
                "description": "A list of currently registered sub-feedbacks.",
                "type": "Array"
            },
            "since": "1.6.0",
            "class": "JSG.graph.interaction.AbstractInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js",
            "line": 148,
            "description": "Creates an additional feedback view.<br/>\nThis view will be registered as an interaction view to currently used controller viewer.\nThis method is intended to be overwritten by subclasses. Default implementation does nothing.",
            "itemtype": "method",
            "name": "createActionFeedback",
            "params": [
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "A view to use as additional feedback.",
                "type": "JSG.ui.View"
            },
            "class": "JSG.graph.interaction.AbstractInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js",
            "line": 161,
            "description": "Updates action feedback view.<br/>\nThis method is intended to be overwritten by subclasses. Default implementation does nothing.",
            "itemtype": "method",
            "name": "updateActionFeedback",
            "params": [
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "A view to use as additional feedback.",
                "type": "JSG.ui.View"
            },
            "class": "JSG.graph.interaction.AbstractInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js",
            "line": 172,
            "description": "Registers an action feedback for this interaction if none was set already. The creation is done by calling  \n{{#crossLink \"JSG.graph.interaction.AbstractInteraction/createActionFeedback:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "_setActionFeedback",
            "params": [
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "1.6.0",
            "class": "JSG.graph.interaction.AbstractInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js",
            "line": 190,
            "description": "Registers a feedback for this interaction. If none is set \n{{#crossLink \"JSG.graph.interaction.AbstractInteraction/_createAndAddSelectionFeedback:method\"}}{{/crossLink}} will\nbe called.",
            "itemtype": "method",
            "name": "_setFeedback",
            "params": [
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.AbstractInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js",
            "line": 210,
            "description": "Creates a new feedback for this interaction and add it to the given viewer.",
            "itemtype": "method",
            "name": "_createAndAddSelectionFeedback",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to create the feedback for.",
                    "type": "JSG.graph.controller.GraphItemController"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.AbstractInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js",
            "line": 294,
            "description": "Creates a new feedback for given controller.",
            "itemtype": "method",
            "name": "_createSelectionFeedback",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to create the feedback for.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The new feedback to use.",
                "type": "JSG.graph.feedback.Feedback"
            },
            "class": "JSG.graph.interaction.AbstractInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js",
            "line": 306,
            "description": "Creates and registers sub-feedbacks to given feedback.</br>\nThis method can be overridden by subclasses to create custom sub-feedbacks!",
            "itemtype": "method",
            "name": "_createSubFeedbacks",
            "params": [
                {
                    "name": "controller",
                    "description": "The corresponding model controller.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "feedback",
                    "description": "The feedback to create the sub-feedbacks for.",
                    "type": "JSG.graph.feedback.Feedback"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.AbstractInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js",
            "line": 403,
            "description": "Overwritten from base Interaction class. Added additional offset parameter which might is useful for subclasses.</br>\nThis implementation simply triggers creation of corresponding {{#crossLink \"JSG.graph.command.Command\"}}{{/crossLink}}s and\nexecutes them via registered InteractionHandler. </br>\nSee {{#crossLink \"JSG.graph.interaction.AbstractInteraction/createCommand:method\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "willFinish",
            "params": [
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "offset",
                    "description": "The offset between start and end event. Usually the difference between\nstart and end location.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.interaction.AbstractInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js",
            "line": 434,
            "description": "This function is called after all {{#crossLink \"JSG.graph.command.Command\"}}{{/crossLink}}s are\nexecuted. See {{#crossLink \"JSG.graph.interaction.AbstractInteraction/willFinish:method\"}}{{/crossLink}}.</br>\nSubclass can overwrite, default implementation does nothing.",
            "itemtype": "method",
            "name": "executed",
            "params": [
                {
                    "name": "command",
                    "description": "The executed command. Note: this could be a {{#crossLink \"JSG.graph.command.CompoundCommand\"}}{{/crossLink}}.",
                    "type": "JSG.graph.command.Command"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.AbstractInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js",
            "line": 447,
            "description": "Creates a single Command from the list of passed Commands. If the list contains more than one\ncommand a {{#crossLink \"JSG.graph.command.CompoundCommand\"}}{{/crossLink}} is returned.",
            "itemtype": "method",
            "name": "_createCommand",
            "params": [
                {
                    "name": "cmds",
                    "description": "A list of Commands.",
                    "type": "Array"
                },
                {
                    "name": "reverseUndo",
                    "description": "Optional flag to specify if a possible created CompoundCommand should\nexecute undo in reverse order.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The command that should be executed.",
                "type": "Command | CompoundCommand"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.AbstractInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js",
            "line": 469,
            "description": "Returns the bounding rectangle of current selection. Used for snap feature.",
            "itemtype": "method",
            "name": "getSnapRect",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "reuserect",
                    "description": "A rectangle instance to reuse.",
                    "type": "JSG.geometry.Rectangle",
                    "optional": true
                }
            ],
            "return": {
                "description": "The bounding rectangle of current selection.",
                "type": "JSG.geometry.Rectangle"
            },
            "deprecated": true,
            "deprecationMessage": "Subject to be removed!! Please use {{#crossLink \"JSG.graph.interaction.SnapHelper\"}}{{/crossLink}} instead.",
            "class": "JSG.graph.interaction.AbstractInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js",
            "line": 486,
            "description": "Determines the offset from <code>currentLocation</code> to nearest grid cell or to another controller (snap).\nThe offset can be used to move a feedback along the grid or to align (snap) it to a controller.",
            "itemtype": "method",
            "name": "getSnapAndGridOffset",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "box",
                    "description": "The current selection bounds. See {{#crossLink \"JSG.graph.interaction.AbstractInteraction/getSnapRect:method\"}}{{/crossLink}}.",
                    "type": "JSG.geometry.Rectangle"
                },
                {
                    "name": "reusepoint",
                    "description": "A point instance to reuse.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The offset to snap and grid.",
                "type": "JSG.geometry.Point"
            },
            "deprecated": true,
            "deprecationMessage": "Subject to be removed!! Please use {{#crossLink \"JSG.graph.interaction.SnapHelper\"}}{{/crossLink}} instead.",
            "class": "JSG.graph.interaction.AbstractInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js",
            "line": 526,
            "description": "Returns a list of {{#crossLink \"JSG.graph.controller.GraphItemController\"}}{{/crossLink}}s which are inside a\ncertain {{#crossLink \"JSG/findRadius:property\"}}{{/crossLink}} to given bounds. These controllers can then be used to \nsupport snap feature.<br/> \nIf a controller will be selected can be influenced by an optional condition function. If passed the function \ngets the current visited controller and the bounds as parameter. If look up should stop, i.e. the current controller \nis suitable, the function should return <code>true</code>. Otherwise the search goes on. Additionally the \n{{#crossLink \"JSG.graph.interaction.SnapType\"}}{{/crossLink}} of a controller influences its selection.",
            "itemtype": "method",
            "name": "getControllerForSnap",
            "params": [
                {
                    "name": "box",
                    "description": "The current selection bounds. See {{#crossLink \"JSG.graph.interaction.AbstractInteraction/getSnapRect:method\"}}{{/crossLink}}.",
                    "type": "JSG.geometry.Rectangle"
                },
                {
                    "name": "conditionFunc",
                    "description": "A function to influence controller selection.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The controller to use for snap or <code>undefined</code>.",
                "type": "JSG.graph.controller.GraphItemController"
            },
            "deprecated": true,
            "deprecationMessage": "Subject to be removed!! Please use {{#crossLink \"JSG.graph.interaction.SnapHelper\"}}{{/crossLink}} instead.",
            "class": "JSG.graph.interaction.AbstractInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\AbstractInteraction.js",
            "line": 613,
            "description": "Aligns given points to current snap controller.",
            "itemtype": "method",
            "name": "alignToSnapController",
            "params": [
                {
                    "name": "tlNew",
                    "description": "The top-left snap point to align.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "brNew",
                    "description": "The bottom-right snap point to align.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "tlNewGrid",
                    "description": "The top-left grid point to align.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "brNewGrid",
                    "description": "The bottom-right grid point to align.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Subject to be removed!! Please use {{#crossLink \"JSG.graph.interaction.SnapHelper\"}}{{/crossLink}} instead.",
            "class": "JSG.graph.interaction.AbstractInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ActionHandle.js",
            "line": 32,
            "description": "Classifies a handle of type link, used e.g. to activate a link execution.",
            "itemtype": "property",
            "name": "LINK",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.interaction.TYPE",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ActionHandle.js",
            "line": 40,
            "description": "Classifies a handle of type edit, used e.g. in {{#crossLink \"JSG.graph.interaction.EditTextActivator\"}}{{/crossLink}}\nto activate text editing.",
            "itemtype": "property",
            "name": "EDIT",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.interaction.TYPE",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ActionHandle.js",
            "line": 52,
            "description": "Resets this handle. That means the the type is set to <code>undefined</code> and the cursor to \n{{#crossLink \"JSG.ui.Cursor.Style/AUTO:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "reset",
            "class": "JSG.graph.interaction.TYPE",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ActionHandle.js",
            "line": 63,
            "description": "Returns the handle type.",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "The current handle type or <code>undefined</code> if no type is set.",
                "type": "String"
            },
            "class": "JSG.graph.interaction.TYPE",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ActionHandle.js",
            "line": 72,
            "description": "Sets the handle type. For predefined type constants please refer to subclasses, e.g. \n{{#crossLink \"JSG.graph.view.selection.SelectionHandle\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setType",
            "params": [
                {
                    "name": "type",
                    "description": "The new handle type.",
                    "type": "String"
                }
            ],
            "class": "JSG.graph.interaction.TYPE",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ActionHandle.js",
            "line": 83,
            "description": "Returns the current cursor style.",
            "itemtype": "method",
            "name": "getCursor",
            "return": {
                "description": "The current cursor style or <code>undefined</code> if not set.",
                "type": "String"
            },
            "class": "JSG.graph.interaction.TYPE",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ActionHandle.js",
            "line": 93,
            "description": "Sets a new cursor style. For predefined style constants please refer to {{#crossLink \"JSG.ui.Cursor.Style\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setCursor",
            "params": [
                {
                    "name": "cursor",
                    "description": "The new cursor style.",
                    "type": "String"
                }
            ],
            "class": "JSG.graph.interaction.TYPE",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CommandButtonActivator.js",
            "line": 25,
            "description": "The unique key under which this activator is registered to {{#crossLink \"JSG.graph.interaction.GraphInteraction\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "KEY",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.interaction.CommandButtonActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CommandButtonActivator.js",
            "line": 40,
            "description": "Implemented to be notified about mouse double click events.</br>",
            "itemtype": "method",
            "name": "onMouseDoubleClick",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.CommandButtonActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CommandButtonActivator.js",
            "line": 57,
            "description": "Implemented to be notified about mouse down events.</br>",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.CommandButtonActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CommandButtonActivator.js",
            "line": 83,
            "description": "Implemented to be notified about mouse up events.</br>",
            "itemtype": "method",
            "name": "onMouseUp",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.CommandButtonActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeActivator.js",
            "line": 23,
            "description": "The unique key under which this activator is registered to {{#crossLink \"JSG.graph.interaction.GraphInteraction\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "KEY",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.interaction.CreateEdgeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeActivator.js",
            "line": 50,
            "description": "Called on selection notification.",
            "itemtype": "method",
            "name": "onNotification",
            "params": [
                {
                    "name": "notification",
                    "description": "The selection notification.",
                    "type": "JSG.graph.notifications.Notification"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateEdgeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeActivator.js",
            "line": 65,
            "description": "Clears port layer, i.e. the layer with id {{#crossLink \"JSG.graph.view.LayerId/PORTS:property\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "_removePortsHighlights",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if any ports were removed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateEdgeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeActivator.js",
            "line": 83,
            "description": "Implemented to be notified about mouse down events.</br>",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.CreateEdgeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeActivator.js",
            "line": 109,
            "description": "Returns the single active port highlight or <code>undefined</code> if more than one port is highlighted or none is\nactive. The highlights are created by calling {{#crossLink \"JSG.graph.interaction.InteractionUtils/getPortsFor:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "_getActiveHighlight",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The active port highlight or <code>undefined</code>",
                "type": "JSG.graph.view.PositionFeedbackView"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateEdgeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeActivator.js",
            "line": 127,
            "description": "Creates an returns the edge interaction to activate.",
            "itemtype": "method",
            "name": "_createEdgeInteraction",
            "return": {
                "description": "An new instance of CreateEdgeInteraction.",
                "type": "JSG.graph.interaction.CreateEdgeInteraction"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateEdgeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeActivator.js",
            "line": 146,
            "description": "Implemented to be notified about mouse move events.</br>",
            "itemtype": "method",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.CreateEdgeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeActivator.js",
            "line": 177,
            "description": "Returns the views which represents highlighted ports.",
            "itemtype": "method",
            "name": "_getPortsToHighlight",
            "params": [
                {
                    "name": "interaction",
                    "description": "The InteractionDispatcher of this activator.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                },
                {
                    "name": "event",
                    "description": "The current event which triggered this method call.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "A list of port Views.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateEdgeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeInteraction.js",
            "line": 89,
            "description": "Attaches a simple port dummy object to the edge feedback.<br/>\nThe port dummy object only implements a <code>getParent</code> and a <code>getConnectionPoint</code> function.",
            "itemtype": "method",
            "name": "_attachSourcePort",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeInteraction.js",
            "line": 132,
            "description": "Returns the translated port location of given port info object. The resulting port location is relative to the Graph.",
            "itemtype": "method",
            "name": "_getPortLocation",
            "params": [
                {
                    "name": "portInfo",
                    "description": "The port info object which provides a port location.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The translated port location.",
                "type": "JSG.geometry.Point"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeInteraction.js",
            "line": 146,
            "description": "Aligns given location to the grid if required.",
            "itemtype": "method",
            "name": "_alignedLocation",
            "params": [
                {
                    "name": "location",
                    "description": "The location to align.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "event",
                    "description": "The current event. Used to decide if location should be aligned.",
                    "type": "JSG.ui.events.Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeInteraction.js",
            "line": 183,
            "description": "Triggers a new port highlighting and setting of port feedbacks.",
            "itemtype": "method",
            "name": "setPortFeedback",
            "params": [
                {
                    "name": "event",
                    "description": "The current event. Its <code>doRepaint</code> flag is set to <code>true</code>.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.CreateEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeInteraction.js",
            "line": 195,
            "description": "Highlights the ports of a {{#crossLink \"JSG.graph.model.ModelController\"}}{{/crossLink}} which is located at current \nevent location. If a controller is found and if it provides port highlights, then these highlights will be added\nto the ports layer {{#crossLink \"JSG.graph.view.LayerId/PORTS:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "highlightPortsUnderMouse",
            "params": [
                {
                    "name": "event",
                    "description": "The current event. Its <code>doRepaint</code> flag is set to <code>true</code>.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.CreateEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeInteraction.js",
            "line": 254,
            "description": "Checks if the connection to create has at least a minimum length. If no minimum is specified a default value of 50 is taken.",
            "itemtype": "method",
            "name": "hasExtend",
            "params": [
                {
                    "name": "minExtend",
                    "description": "The minimum to check for.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<code>true</code> if connection length is greater the given minimum or <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.CreateEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeInteraction.js",
            "line": 337,
            "description": "Attaches a simple port dummy object to the edge feedback.<br/>\nThe port dummy object only implements a <code>getParent</code> and a <code>getConnectionPoint</code> function.",
            "itemtype": "method",
            "name": "_attachTargetPort",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeInteraction.js",
            "line": 369,
            "description": "Creates a simple port info object based on current <code>_portFeedback</code>.<br/>\nThe port info object holds information about location, port and node.<br/>\nNote: the port within the port info object is either an already existing one or it is newly created. If it was created the\nport info has an additional <code>isNew</code> variable.",
            "itemtype": "method",
            "name": "_createPortInfo",
            "return": {
                "description": "A port info object which access to location port and node.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateEdgeInteraction.js",
            "line": 418,
            "description": "Called after execution of corresponding interaction command.",
            "itemtype": "method",
            "name": "_createItem",
            "params": [
                {
                    "name": "item",
                    "description": "The created item.",
                    "type": "JSG.graph.model.Edge"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendActivator.js",
            "line": 25,
            "description": "The base unit for a friend view. By default it is set to 200.",
            "itemtype": "property",
            "name": "FRIEND_UNIT",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.interaction.CreateFriendActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendActivator.js",
            "line": 34,
            "description": "The unique key under which this activator is registered to {{#crossLink \"JSG.graph.interaction.GraphInteraction\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "KEY",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.interaction.CreateFriendActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendActivator.js",
            "line": 68,
            "description": "Called on selection and zoom notification.",
            "itemtype": "method",
            "name": "onNotification",
            "params": [
                {
                    "name": "notification",
                    "description": "The selection or zoom notification.",
                    "type": "JSG.graph.notifications.Notification"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateFriendActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendActivator.js",
            "line": 84,
            "description": "Called to update the friends layer.",
            "itemtype": "method",
            "name": "_updateFriendViews",
            "params": [
                {
                    "name": "viewer",
                    "description": "The controller viewer on which this activator works.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this\nactivator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher",
                    "optional": true
                }
            ],
            "return": {
                "description": "Return <code>true</code> to trigger a repaint if required or <code>false</code> if not.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateFriendActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendActivator.js",
            "line": 102,
            "description": "Clears the friends views layer, i.e. the layer with id {{#crossLink \"JSG.graph.view.LayerId/FRIENDS:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "_removeFriendViews",
            "params": [
                {
                    "name": "viewer",
                    "description": "The controller viewer on which this activator works.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if any views were removed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateFriendActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendActivator.js",
            "line": 116,
            "description": "Implemented to be notified about key down events.</br>",
            "itemtype": "method",
            "name": "onKeyDown",
            "params": [
                {
                    "name": "event",
                    "description": "The current key event.",
                    "type": "JSG.ui.events.KeyEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.CreateFriendActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendActivator.js",
            "line": 127,
            "description": "Implemented to be notified about mouse down events.</br>",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.CreateFriendActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendActivator.js",
            "line": 156,
            "description": "Returns the NamedImage object of selected friend or <code>undefined</code>. The friend to select is determined by\ngiven location.<br/>\nSubclasses may overwrite to implement custom behavior.",
            "itemtype": "method",
            "name": "_getSelectedFriendAt",
            "params": [
                {
                    "name": "location",
                    "description": "The location, relative to Graph, to look for a friend view.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "viewer",
                    "description": "The controller viewer on which this activator works.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "An instance of NamedImage or <code>undefined</code>.",
                "type": "JSG.commons.NamedImage"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateFriendActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendActivator.js",
            "line": 180,
            "description": "Creates the friend interaction or <code>undefined</code>.<br/>\nSubclasses my overwrite this method to implement custom behavior.",
            "itemtype": "method",
            "name": "_createFriendInteraction",
            "params": [
                {
                    "name": "nameImage",
                    "description": "Provides information about the friend to create.",
                    "type": "JSG.commons.NamedImage"
                },
                {
                    "name": "item",
                    "description": "The graph item to create the friend interaction for.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "A new interaction instance or <code>undefined</code>.",
                "type": "JSG.graph.interaction.CreateFriendInteraction"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateFriendActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendActivator.js",
            "line": 198,
            "description": "Implemented to be notified about mouse move events.</br>",
            "itemtype": "method",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.CreateFriendActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendActivator.js",
            "line": 224,
            "description": "Implemented to be notified about mouse up events.</br>",
            "itemtype": "method",
            "name": "onMouseUp",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.CreateFriendActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendActivator.js",
            "line": 237,
            "description": "Adds friends views of given item to the friends layer {{#crossLink \"JSG.graph.view.LayerId/FRIENDS:property\"}}{{/crossLink}}.<br/>\nThis method can be overwritten by subclasses to implement custom behavior.",
            "itemtype": "method",
            "name": "_addFriendViews",
            "params": [
                {
                    "name": "item",
                    "description": "The graph item to add the friends views for.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "<code>true</code> if any views were added, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateFriendActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendInteraction.js",
            "line": 57,
            "description": "Creates a simple port info object to specify location, port and node.<br/>\nNote: the port within the port info object is either an already existing one or newly created. If it was created the\nport info has an additional <code>isNew</code> variable.",
            "itemtype": "method",
            "name": "_createPortInfo",
            "params": [
                {
                    "name": "node",
                    "description": "The node to create a port for.",
                    "type": "JSG.graph.model.Node"
                },
                {
                    "name": "x",
                    "description": "The x location of the port.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y location of the port.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A port info object which access to location port and node.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateFriendInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendInteraction.js",
            "line": 152,
            "description": "Creates a new connection based on internal <code>_source</code> and <code>_target</code> port info objects. This connection \nis used to display a corresponding feedback.",
            "itemtype": "method",
            "name": "createConnection",
            "return": {
                "description": "A new connection to use for feedback.",
                "type": "JSG.graph.model.LineConnection"
            },
            "class": "JSG.graph.interaction.CreateFriendInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendInteraction.js",
            "line": 174,
            "description": "Creates a simple dummy port object based on given port info. The port dummy object only implements a\n<code>getParent</code> and a <code>getConnectionPoint</code> function. Therefore it can be used as source or \ntarget port within a connection as defined by {{#crossLink \"JSG.graph.interaction.CreateFriendInteraction/createConnection:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "createPortDummy",
            "params": [
                {
                    "name": "portinfo",
                    "description": "A port info object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A simple port dummy.",
                "type": "Object"
            },
            "class": "JSG.graph.interaction.CreateFriendInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendInteraction.js",
            "line": 198,
            "description": "Creates a connection feedback.",
            "itemtype": "method",
            "name": "createConnectionFeedback",
            "params": [
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The connection feedback.",
                "type": "JSG.graph.feedback.Feedback"
            },
            "class": "JSG.graph.interaction.CreateFriendInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendInteraction.js",
            "line": 358,
            "description": "Adds a new {{#crossLink \"JSG.graph.command.AddPortCommand\"}}{{/crossLink}} to given CompoundCommand. If not only\nthe given target node requires a new port, but the source node too, than a second AddPortCommand is added for the\nsource port.",
            "itemtype": "method",
            "name": "_addPortCommands",
            "params": [
                {
                    "name": "cmd",
                    "description": "The command to add to.",
                    "type": "JSG.graph.command.CompoundCommand"
                },
                {
                    "name": "trgtnode",
                    "description": "The target node to add the port to.",
                    "type": "JSG.graph.model.Node"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateFriendInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendInteraction.js",
            "line": 378,
            "description": "Adds a new {{#crossLink \"JSG.graph.command.AddItemCommand\"}}{{/crossLink}} to given CompoundCommand.",
            "itemtype": "method",
            "name": "_addConnectionCommand",
            "params": [
                {
                    "name": "cmd",
                    "description": "The command to add to.",
                    "type": "JSG.graph.command.CompoundCommand"
                },
                {
                    "name": "defParent",
                    "description": "The default parent of newly added connection.",
                    "type": "JSG.graph.model.Node"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateFriendInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendInteraction.js",
            "line": 392,
            "description": "Initializes new connection.",
            "itemtype": "method",
            "name": "_initNewFriendConnection",
            "params": [
                {
                    "name": "newConnection",
                    "description": "The new friend connection to initialize.",
                    "type": "JSG.graph.model.Edge"
                },
                {
                    "name": "defParent",
                    "description": "The default parent of new connection.",
                    "type": "JSG.graph.model.Node"
                },
                {
                    "name": "fbConnection",
                    "description": "The connection used for feedback on which the new one is based.",
                    "type": "JSG.graph.model.Edge"
                }
            ],
            "return": {
                "description": "The actual parent node of new connection.",
                "type": "JSG.graph.model.Node"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateFriendInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateFriendInteraction.js",
            "line": 409,
            "description": "Adds new {{#crossLink \"JSG.graph.command.AttachCommand\"}}{{/crossLink}}s to given CompoundCommand if required, i.e.\nif inner <code>_source</code> and/or <code>_target</code> port info objects are defined.",
            "itemtype": "method",
            "name": "_addAttachCommands",
            "params": [
                {
                    "name": "cmd",
                    "description": "The command to add to.",
                    "type": "JSG.graph.command.CompoundCommand"
                },
                {
                    "name": "newConnection",
                    "description": "The new friend connection to attach.",
                    "type": "JSG.graph.model.Edge"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateFriendInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateItemInteraction.js",
            "line": 91,
            "description": "Creates a feedback for given GraphItem to use during interaction.",
            "itemtype": "method",
            "name": "createFeedback",
            "params": [
                {
                    "name": "forItem",
                    "description": "The item to create a feedback for.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "A view to use as feedback.",
                "type": "JSG.ui.View"
            },
            "class": "JSG.graph.interaction.CreateItemInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateItemInteraction.js",
            "line": 109,
            "description": "Initializes given feedback view.",
            "itemtype": "method",
            "name": "initializeFeedback",
            "params": [
                {
                    "name": "fbView",
                    "description": "The feedbak view to initialize.",
                    "type": "JSG.ui.View"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                }
            ],
            "class": "JSG.graph.interaction.CreateItemInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateItemInteraction.js",
            "line": 151,
            "description": "Highlights a possible target controller. If a suitable target controller is found the highlight is added to the\n{{#crossLink \"JSG.graph.view.LayerId/TARGETCONTAINER:property\"}}{{/crossLink}} layer. Please refer to\n{{#crossLink \"JSG.graph.interaction.InteractionUtils/highlightTargetController:method\"}}{{/crossLink}} for additional \ninformation.",
            "itemtype": "method",
            "name": "name",
            "params": [
                {
                    "name": "event",
                    "description": "The current event which provides the location to look for a suitable controller.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateItemInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateItemInteraction.js",
            "line": 173,
            "description": "Called during the look up of a suitable target controller. <br/>\nPlease refer to {{#crossLink \"JSG.graph.interaction.CreateItemInteraction/_highlightTargetController:method\"}}{{/crossLink}} \nfor additional information.",
            "itemtype": "method",
            "name": "_findParentControllerAt",
            "params": [
                {
                    "name": "location",
                    "description": "The location to look at.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "A possible controller or <code>undefined</code> if none could be found.",
                "type": "JSG.graph.controller.ModelController"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateItemInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateItemInteraction.js",
            "line": 246,
            "description": "Initializes given item before it is added.</br>\nSubclasses may overwrite.",
            "itemtype": "method",
            "name": "_initNewItem",
            "params": [
                {
                    "name": "newItem",
                    "description": "The item to initialize.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "rootParent",
                    "description": "The root parent, i.e. usually the Graph.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "fbItem",
                    "description": "The feedback item to use for initialization.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "The parent to add the newItem to or given rootParent.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.graph.interaction.CreateItemInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateItemInteraction.js",
            "line": 280,
            "description": "Initializes the {{#crossLink \"JSG.graph.Pin\"}}{{/crossLink}} of given GraphItem.<br/>\nBy default only its local pin is set to the center of items BoundingBox. Subclasses may overwrite.",
            "itemtype": "method",
            "name": "_initPinOf",
            "params": [
                {
                    "name": "newItem",
                    "description": "The item to initialize the Pin of.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateItemInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateOrthoEdgeInteraction.js",
            "line": 43,
            "description": "Sets the mode to use during creation of orthogonal line. <br/>\n<b>Note:</b> should be set before any event is passed to this interaction! Use one of the \npredefined creation modes.",
            "itemtype": "method",
            "name": "useCreationMode",
            "params": [
                {
                    "name": "One",
                    "description": "of predefined modes.",
                    "type": "CreateOrthoEdgeInteraction.CREATION_MODE"
                }
            ],
            "class": "JSG.graph.interaction.CreateOrthoEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateOrthoEdgeInteraction.js",
            "line": 59,
            "description": "Returns <code>true</code> if current creation mode is <code>CREATION_MODE.DRAG</code>, <code>false</code> otherwise.",
            "itemtype": "method",
            "name": "_useDragCreationMode",
            "return": {
                "description": "<code>true</code> if current creation mode is <code>CREATION_MODE.DRAG</code>, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateOrthoEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateOrthoEdgeInteraction.js",
            "line": 100,
            "description": "Initializes the {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}} used for creation.<br/>\nSubclasses might overwrite this method but should call it to perform proper initialization.",
            "itemtype": "method",
            "name": "initEdge",
            "params": [
                {
                    "name": "ortholine",
                    "description": "The shape to initialize.",
                    "type": "JSG.graph.model.shapes.OrthoLineShape"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                }
            ],
            "class": "JSG.graph.interaction.CreateOrthoEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateOrthoEdgeInteraction.js",
            "line": 136,
            "description": "Checks if current <code>_portFeedback</code> hits a possible target port.",
            "itemtype": "method",
            "name": "hitTargetPort",
            "params": [
                {
                    "name": "param_name",
                    "description": "param_description.",
                    "type": "Type"
                }
            ],
            "return": {
                "description": "<code>true</code> if a possible target port is hit, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.CreateOrthoEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateOrthoEdgeInteraction.js",
            "line": 264,
            "description": "Creates a coordinate proxy to wrap given coordinate at specified location. I.e. the created CoordinateProxy should\nbe used as a replacement for given coordinate and its <code>toPoint</code> method will return the specified location.\nThis is used during creation to attach a target or source to inner {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "_createCoordinateProxy",
            "params": [
                {
                    "name": "coord",
                    "description": "The coordinate to wrap by CoordinateProxy.",
                    "type": "JSG.graph.Coordinate"
                },
                {
                    "name": "location",
                    "description": "The coordinate location for the CoordinateProxy.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The created CoordinateProxy",
                "type": "JSG.graph.CoordinateProxy"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreateOrthoEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateOrthoEdgeInteraction.js",
            "line": 439,
            "description": "Constant to specify automatic behavior.",
            "itemtype": "property",
            "name": "DRAG",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.interaction.CreateOrthoEdgeInteraction.CREATION_MODE",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateOrthoEdgeInteraction.js",
            "line": 447,
            "description": "Constant to specify manual behavior, i.e. a point is added by each mouse click.",
            "itemtype": "property",
            "name": "CLICK",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.interaction.CreateOrthoEdgeInteraction.CREATION_MODE",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreateOrthoEdgeInteraction.js",
            "line": 455,
            "description": "Start editing with a single click.",
            "itemtype": "property",
            "name": "INITIALCLICK",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.interaction.CreateOrthoEdgeInteraction.CREATION_MODE",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreatePolyLineInteraction.js",
            "line": 100,
            "description": "Adds a new point to the PolygonShape.",
            "itemtype": "method",
            "name": "_addNewPoint",
            "params": [
                {
                    "name": "toShape",
                    "description": "The PolygonShape to add a point to.",
                    "type": "JSG.graph.model.shapes.PolygonShape"
                },
                {
                    "name": "event",
                    "description": "The current event which provides the location of the point to add.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreatePolyLineInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreatePolyLineInteraction.js",
            "line": 121,
            "description": "Checks if given points specify same location.",
            "itemtype": "method",
            "name": "_atSameLocation",
            "params": [
                {
                    "name": "p1",
                    "description": "First location to check.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "p2",
                    "description": "Second location to check.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "threshold",
                    "description": "An accuracy threshold. If not given a threshold of 250 is used as default.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "<code>true</code> if both points refer to same location within specified threshold, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.CreatePolyLineInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreatePolyLineInteraction.js",
            "line": 304,
            "description": "Returns the BoundingBox which covers all points of given shape.",
            "itemtype": "method",
            "name": "getNewBoundingBox",
            "params": [
                {
                    "name": "shape",
                    "description": "The shape which determines the returned BoundingBox.",
                    "type": "JSG.graph.model.shapes.PolygonShape"
                },
                {
                    "name": "reusebbox",
                    "description": "A BoundingBox to reuse. If not given a new BoundingBox instance is created.",
                    "type": "JSG.geometry.BoundingBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "A BoundingBox which covers all points of given shape. If provided, this is the reusebbox instance.",
                "type": "JSG.geometry.BoundingBox"
            },
            "class": "JSG.graph.interaction.CreatePolyLineInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\CreatePolyLineInteraction.js",
            "line": 316,
            "description": "Translates all points of given shape.<br/>\nFor each point a corresponding coordinate will be created with a formula depending on the size of the shapes BoundingBox.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "shape",
                    "description": "The shape to translate.",
                    "type": "JSG.graph.model.shapes.PolygonShape"
                },
                {
                    "name": "origin",
                    "description": "The origin to translate the shape points to.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "size",
                    "description": "A BoundingBox size used to determine the factor of each point.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.interaction.CreatePolyLineInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DefaultKeyHandler.js",
            "line": 23,
            "description": "Called by InteractionDispatcher on a key up event.",
            "itemtype": "method",
            "name": "onKeyUp",
            "params": [
                {
                    "name": "event",
                    "description": "The current key event.",
                    "type": "JSG.ui.events.KeyEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator belongs.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.DefaultKeyHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DefaultKeyHandler.js",
            "line": 35,
            "description": "Called by {{#crossLink \"JSG.graph.interaction.DefaultKeyHandler/onKeyDown:method\"}}{{/crossLink}} to handle tab key\nevents.",
            "itemtype": "method",
            "name": "_handleTab",
            "params": [
                {
                    "name": "event",
                    "description": "The current key event.",
                    "type": "JSG.ui.events.KeyEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator belongs.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "1.6.0",
            "class": "JSG.graph.interaction.DefaultKeyHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DefaultKeyHandler.js",
            "line": 93,
            "description": "Called by InteractionDispatcher on a key down event.",
            "itemtype": "method",
            "name": "onKeyDown",
            "params": [
                {
                    "name": "event",
                    "description": "The current key event.",
                    "type": "JSG.ui.events.KeyEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator belongs.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.DefaultKeyHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Delegate.js",
            "line": 21,
            "description": "Called when an interaction is activated.<br/>",
            "itemtype": "method",
            "name": "activate",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction which uses this delegate.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Delegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Delegate.js",
            "line": 31,
            "description": "Called when an interaction is deactivated.<br/>",
            "itemtype": "method",
            "name": "deactivate",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction which uses this delegate.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Delegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Delegate.js",
            "line": 40,
            "description": "Creates a view to use as feedback for calling interaction.<br/>\n<b>Note:</b> the calling interaction should store a reference to the returned feedback view and must provide a\n<code>getFeedback</code> method to access it again.",
            "itemtype": "method",
            "name": "createFeedback",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction which uses this delegate.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "event",
                    "description": "The current event which triggered the feedback update.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "A view to be used as feedback for calling interaction.",
                "type": "JSG.ui.View"
            },
            "class": "JSG.graph.interaction.Delegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Delegate.js",
            "line": 53,
            "description": "Called to update the interaction feedback by applying passed data.<br/>\nNote: the content of the data object depends on the Interaction which calls this method. E.g. a\n{{#crossLink \"JSG.graph.interaction.MoveInteraction\"}}{{/crossLink}} calls this method with the new feedback location.",
            "itemtype": "method",
            "name": "updateFeedback",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction which uses this delegate.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "data",
                    "description": "The data to use for updating the feedback, depends on calling Interaction.",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "The current event which triggered the feedback update.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Delegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Delegate.js",
            "line": 66,
            "description": "Creates a command for the interaction to perform.<br/>",
            "itemtype": "method",
            "name": "createCommand",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction which uses this delegate.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "event",
                    "description": "The current event which triggered the feedback update.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Delegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropActivator.js",
            "line": 23,
            "description": "Provides the target editor, i.e. the GraphEditor to perform the drop to.<br/>\nSubclasses should overwrite! Default implementation simply returns <code>undefined</code>.",
            "itemtype": "method",
            "name": "getTargetEditor",
            "return": {
                "description": "The GraphEditor to use as drop target.",
                "type": "JSG.ui.GraphEditor"
            },
            "class": "JSG.graph.interaction.DragDropActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropActivator.js",
            "line": 42,
            "description": "Implemented to be notified about mouse down.",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator belongs.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.DragDropActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropActivator.js",
            "line": 68,
            "description": "Implemented to be notified about mouse up.",
            "itemtype": "method",
            "name": "onMouseUp",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator belongs.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.DragDropActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropActivator.js",
            "line": 82,
            "description": "Implemented to be notified about mouse drag.",
            "itemtype": "method",
            "name": "onMouseDrag",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator belongs.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.DragDropActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropActivator.js",
            "line": 104,
            "description": "Creates the DragDropInteraction to activate.<br/>\nSubclasses can overwrite to return a custom DragDropInteraction.",
            "itemtype": "method",
            "name": "createInteraction",
            "params": [
                {
                    "name": "sourceViewer",
                    "description": "The ControllerViewer where the drag started.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "targetViewer",
                    "description": "The ControllerViewer where the drop should be performed.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The DragDropInteraction to activate.",
                "type": "JSG.graph.interaction.DragDropInteraction"
            },
            "class": "JSG.graph.interaction.DragDropActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 30,
            "description": "Called by corresponding {{#crossLink \"JSG.graph.interaction.DragDropActivator\"}}{{/crossLink}} to register the dragged\nGraphItem",
            "itemtype": "method",
            "name": "setDraggedItem",
            "params": [
                {
                    "name": "draggedItem",
                    "description": "The GraphItem to drag.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "class": "JSG.graph.interaction.DragDropInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 42,
            "description": "Sets a new drop delegate to inner <code>DropInteraction</code>",
            "itemtype": "method",
            "name": "setDropDelegate",
            "params": [
                {
                    "name": "delegate",
                    "description": "The new drop delegate to use.",
                    "type": "JSG.graph.interaction.DropDelegate"
                }
            ],
            "class": "JSG.graph.interaction.DragDropInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 52,
            "description": "Registers the GraphEditor to perform the drop to.",
            "itemtype": "method",
            "name": "registerTargetEditor",
            "params": [
                {
                    "name": "The",
                    "description": "GraphEditor to use as drop target.",
                    "type": "JSG.ui.GraphEditor"
                }
            ],
            "class": "JSG.graph.interaction.DragDropInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 62,
            "description": "Updates the start and current locations to inner {{#crossLink \"JSG.graph.interaction.DragDropInteraction.Drag\"}}{{/crossLink}}\nand {{#crossLink \"JSG.graph.interaction.DragDropInteraction.Drop\"}}{{/crossLink}} interactions.",
            "itemtype": "method",
            "name": "_updatePositions",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.DragDropInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 99,
            "description": "Activates an optional text editor on a mouse up event.<br/>\nSubclasses may overwrite. Default implementation does nothing.",
            "itemtype": "method",
            "name": "activateTextEditor",
            "class": "JSG.graph.interaction.DragDropInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 108,
            "description": "Called to finish this interaction.",
            "itemtype": "method",
            "name": "finished",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.DragDropInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 143,
            "description": "Creates the DropItemCommand.",
            "itemtype": "method",
            "name": "createDropCommand",
            "params": [
                {
                    "name": "item",
                    "description": "The GraphItem to drop.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "targetController",
                    "description": "A possible container controller to drop into.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "targetEditor",
                    "description": "The GraphEditor to use as drop target.",
                    "type": "JSG.ui.GraphEditor"
                }
            ],
            "return": {
                "description": "The DropItemCommand to use for perfoming the drop or <code>undefined</code>.",
                "type": "JSG.graph.command.DropItemCommand"
            },
            "class": "JSG.graph.interaction.DragDropInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 182,
            "description": "Returns the feedback view to use.",
            "itemtype": "method",
            "name": "getFeedback",
            "return": {
                "description": "The feedback view to use or <code>undefined</code>",
                "type": "JSG.ui.View"
            },
            "class": "JSG.graph.interaction.DragDropInteraction.DnD",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 191,
            "description": "Creates a feedback view. The kind of feedback is defined by the type of given GraphItem. Note that this can result\nin several feedbacks if the type requires several GraphItems.\nSee {{#crossLink \"JSG.graph.interaction.DragDropInteraction.DnD/createFeedbackViewFor:method\"}}{{/crossLink}} to\ncreate a feedback for a single GraphItem.",
            "itemtype": "method",
            "name": "createFeedback",
            "params": [
                {
                    "name": "draggedItem",
                    "description": "The GraphItem to create a feedback for.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "The feedback view to use or <code>undefined</code>",
                "type": "JSG.ui.View"
            },
            "class": "JSG.graph.interaction.DragDropInteraction.DnD",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 219,
            "description": "Creates a feedback view for a single given GraphItem.",
            "itemtype": "method",
            "name": "createFeedback",
            "params": [
                {
                    "name": "item",
                    "description": "The GraphItem to create a feedback for.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer to use for feedback creation.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The feedback view to use or <code>undefined</code>",
                "type": "JSG.ui.View"
            },
            "class": "JSG.graph.interaction.DragDropInteraction.DnD",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 239,
            "description": "Clears all feedback and highlight layers.",
            "itemtype": "method",
            "name": "clearFeedbacksAndHighlights",
            "class": "JSG.graph.interaction.DragDropInteraction.DnD",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 263,
            "description": "Returns the position of given event relative to given canvas.",
            "itemtype": "method",
            "name": "getPosition",
            "params": [
                {
                    "name": "event",
                    "description": "The current event which provides location.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "cs",
                    "description": "The CoordinateSystem to use for translating event location.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                },
                {
                    "name": "canvas",
                    "description": "The HTML5 canvas element.",
                    "type": "Canvas"
                },
                {
                    "name": "drag",
                    "description": "Flag to indicate, whether the function is called from the drag or drop operation",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The event position relative to given canvas.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.interaction.DragDropInteraction.DnD",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 319,
            "description": "Called to finish this interaction.",
            "itemtype": "method",
            "name": "finished",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer for this interaction.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.DragDropInteraction.DnD",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 385,
            "description": "Returns the registered target editor or <code>undefined</code>.",
            "itemtype": "method",
            "name": "getTarget",
            "return": {
                "description": "The GraphEditor to use as drop target or <code>undefined</code>.",
                "type": "JSG.ui.GraphEditor"
            },
            "class": "JSG.graph.interaction.DragDropInteraction.Drop",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 394,
            "description": "Registers the editor to use as drop target.",
            "itemtype": "method",
            "name": "setTarget",
            "params": [
                {
                    "name": "editor",
                    "description": "The GraphEditor to use as drop target.",
                    "type": "JSG.ui.GraphEditor"
                }
            ],
            "class": "JSG.graph.interaction.DragDropInteraction.Drop",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 406,
            "description": "Returns the target viewer registered to this interaction.",
            "itemtype": "method",
            "name": "getViewer",
            "return": {
                "description": "The ControllerViewer to use for this interaction.",
                "type": "JSG.ui.viewer.ControllerViewer"
            },
            "class": "JSG.graph.interaction.DragDropInteraction.Drop",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 419,
            "description": "Sets the drop delegate for this interaction.</br>",
            "itemtype": "method",
            "name": "setDelegate",
            "params": [
                {
                    "name": "delegate",
                    "description": "A delegate object to customize interaction.",
                    "type": "JSG.graph.interaction.DropDelegate"
                }
            ],
            "class": "JSG.graph.interaction.DragDropInteraction.Drop",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DragDropInteraction.js",
            "line": 446,
            "description": "Performs the drop.",
            "itemtype": "method",
            "name": "drop",
            "params": [
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                }
            ],
            "return": {
                "description": "<code>true</code> if drop was done, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.DragDropInteraction.Drop",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DropDelegate.js",
            "line": 19,
            "description": "Gets the registered <code>SnapHelper</code> object which is used to support snap alignment.",
            "itemtype": "method",
            "name": "getSnapHelper",
            "return": {
                "description": "The currently used <code>SnapHelper</code>.",
                "type": "JSG.graph.interaction.SnapHelper"
            },
            "class": "JSG.graph.interaction.DropDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DropDelegate.js",
            "line": 29,
            "description": "Registers a new <code>SnapHelper</code> object to support snap alignment.",
            "itemtype": "method",
            "name": "setSnapHelper",
            "params": [
                {
                    "name": "snaphelper",
                    "description": "The <code>SnapHelper</code> to use.",
                    "type": "JSG.graph.interaction.SnapHelper"
                }
            ],
            "class": "JSG.graph.interaction.DropDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DropDelegate.js",
            "line": 65,
            "description": "Called by {{#crossLink \"JSG.graph.interaction.Delegate/updateFeedback:method\"}}{{/crossLink}} to align the feedback\naccording to the current grid settings",
            "itemtype": "method",
            "name": "alignToGrid",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction which uses this delegate.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by interaction.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.DropDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DropDelegate.js",
            "line": 84,
            "description": "Called by {{#crossLink \"JSG.graph.interaction.Delegate/updateFeedback:method\"}}{{/crossLink}} to add snap-lines to\nthe graph view and aligns given feedback to visible snap-lines.<br/>\nNote: this uses the registered {{#crossLink \"JSG.graph.interaction.SnapHelper\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "alignToSnapLines",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction which uses this delegate.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by interaction.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.DropDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DropDelegate.js",
            "line": 108,
            "description": "Called by {{#crossLink \"JSG.graph.interaction.DropDelegate/alignToSnapLines:method\"}}{{/crossLink}} to check if snap\nalignment should be done. Snap align is only performed if {{#crossLink \"JSG.graph.interaction.SnapHelper/doSnap:method\"}}{{/crossLink}}\nreturns <code>true</code> and if the dragged feedback is visible within current displayed graph region.<br/>",
            "itemtype": "method",
            "name": "doSnap",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction which uses this delegate.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by interaction.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if snap alignment should be done, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.DropDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DropDelegate.js",
            "line": 134,
            "description": "Highlights a possible drop target controller or possible insert position. This may adds visual feedbacks to the\n{{#crossLink \"JSG.graph.view.LayerId/LAYOUTMARKER:property\"}}{{/crossLink}} or {{#crossLink \"JSG.graph.view.LayerId/TARGETCONTAINER:property\"}}{{/crossLink}}\nlayers of current {{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}}.<br/>",
            "itemtype": "method",
            "name": "highlightDropTarget",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction which uses this delegate.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by interaction.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.DropDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DropDelegate.js",
            "line": 159,
            "description": "Tries to find a suited drop target controller.<br/>\nTo find a valid controller a condition function is used which should be returned by\n{{#crossLink \"JSG.graph.interaction.DropDelegate/getFindCondition:method\"}}{{/crossLink}}. Note: the given feedback\nis added as a <code>feedback</code> property to the condition function object so it is available within the condition\ntoo.",
            "itemtype": "method",
            "name": "findTargetController",
            "params": [
                {
                    "name": "feedback",
                    "description": "The currently used feedback view.",
                    "type": "JSG.ui.View"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by interaction.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "A valid controller or <code>undefined</code>",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.graph.interaction.DropDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DropDelegate.js",
            "line": 184,
            "description": "Returns a condition function used to find a suited drop target controller.<br/>\nThe returned function is called with currently visited {{#crossLink \"JSG.graph.controller.ModelController\"}}{{/crossLink}}\nand the function object itself gets an additional <code>feedback</code> property added. The condition function should\nreturn <code>true</code> if passed controller is valid or otherwise <code>false</code>.",
            "itemtype": "method",
            "name": "findTargetController",
            "return": {
                "description": "A condition function which is used to find a valid controller.",
                "type": "Function"
            },
            "class": "JSG.graph.interaction.DropDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DropDelegate.js",
            "line": 196,
            "description": "Default find condition function as returned by {{#crossLink \"JSG.graph.interaction.DropDelegate/getFindCondition:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "_findCondition",
            "params": [
                {
                    "name": "controller",
                    "description": "The current controller to check.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "return": {
                "description": "<code>true</code> if given controller is suited as a drop target, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.DropDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DropDelegate.js",
            "line": 214,
            "description": "Highlights the bounds of given controller.<br/>",
            "itemtype": "method",
            "name": "highlightTargetController",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to highlight.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "feedback",
                    "description": "The currently used feedback view.",
                    "type": "JSG.ui.View"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by interaction.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if given controller was highlighted, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.DropDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\DropDelegate.js",
            "line": 244,
            "description": "Checks if given controller is a possible drop target controller.",
            "itemtype": "method",
            "name": "_validateTarget",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to validate.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "position",
                    "description": "The event location.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by this interaction.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "A possible drop target controller or <code>undefined</code>",
                "type": "JSG.graph.controller.ModelController"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.DropDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditBezierShapeInteraction.js",
            "line": 34,
            "description": "Sets the control points &quot;before&quot; each line point",
            "itemtype": "method",
            "name": "setCpToPointList",
            "params": [
                {
                    "name": "cpToList",
                    "description": "The new control points to use.",
                    "type": "JSG.geometry.PointList"
                }
            ],
            "class": "JSG.graph.interaction.EditBezierShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditBezierShapeInteraction.js",
            "line": 49,
            "description": "Sets the control points &quot;after&quot; each line point",
            "itemtype": "method",
            "name": "setCpFromPointList",
            "params": [
                {
                    "name": "cpFromList",
                    "description": "The new control points to use.",
                    "type": "JSG.geometry.PointList"
                }
            ],
            "class": "JSG.graph.interaction.EditBezierShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditBezierShapeInteraction.js",
            "line": 64,
            "description": "Returns the control point &quot;after&quot; the {{#crossLink \"JSG.graph.view.EditShapeView.Marker\"}}{{/crossLink}} \nat given location.",
            "itemtype": "method",
            "name": "getCpFromMarkerAt",
            "params": [
                {
                    "name": "location",
                    "description": "The marker location.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The control point or <code>undefined</code> if none could be found.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.interaction.EditBezierShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditBezierShapeInteraction.js",
            "line": 81,
            "description": "Returns the control point &quot;before&quot; the {{#crossLink \"JSG.graph.view.EditShapeView.Marker\"}}{{/crossLink}} \nat given location.",
            "itemtype": "method",
            "name": "getCpToMarkerAt",
            "params": [
                {
                    "name": "location",
                    "description": "The marker location.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The control point or <code>undefined</code> if none could be found.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.interaction.EditBezierShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditBezierShapeInteraction.js",
            "line": 227,
            "description": "Changes the control points before and after given marker to be more angular to current line.",
            "itemtype": "method",
            "name": "changeMarkerToEdge",
            "params": [
                {
                    "name": "marker",
                    "description": "The marker which specifies the control points to use.",
                    "type": "JSG.graph.view.EditShapeView.Marker"
                }
            ],
            "return": {
                "description": "<code>true</code> if control points where changed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.EditBezierShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditBezierShapeInteraction.js",
            "line": 274,
            "description": "Changes the control points before and after given marker to be more round to current line.",
            "itemtype": "method",
            "name": "changeMarkerToCurve",
            "params": [
                {
                    "name": "marker",
                    "description": "The marker which specifies the control points to use.",
                    "type": "JSG.graph.view.EditShapeView.Marker"
                }
            ],
            "return": {
                "description": "<code>true</code> if control points where changed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.EditBezierShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditLineShapeInteraction.js",
            "line": 21,
            "description": "Overwritten to return a special edit view for lines.",
            "itemtype": "method",
            "name": "createEditShapeView",
            "params": [
                {
                    "name": "coordinatesystem",
                    "description": "The CoordinateSystem use for measurement calculations.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ],
            "return": {
                "description": "The new edit view.",
                "type": "JSG.graph.view.EditLineShapeView"
            },
            "class": "JSG.graph.interaction.EditLineShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditLineShapeInteraction.js",
            "line": 33,
            "description": "Overwritten to take {{#crossLink \"JSG.graph.model.shapes.OrthoLineShape\"}}{{/crossLink}} into account.",
            "itemtype": "method",
            "name": "_createSwitchShapeCommandIfNecessary",
            "params": [
                {
                    "name": "item",
                    "description": "The GraphItem to check the shape of.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "shapeType",
                    "description": "The shape type as returned by {{#crossLink \"JSG.graph.model.shapes.Shape/getType:method\"}}{{/crossLink}}.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The command to change item shape or <code>undefined</code>",
                "type": "JSG.graph.command.Command"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.EditLineShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditLineShapeInteraction.js",
            "line": 53,
            "description": "Overwritten to return a special command to set the points of {{#crossLink \"JSG.graph.model.shapes.LineShape\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "_createEditShapeCommand",
            "params": [
                {
                    "name": "item",
                    "description": "The GraphItem to set the points of.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "points",
                    "description": "An array of points to set.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The command to set item points.",
                "type": "JSG.graph.command.Command"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.EditLineShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditShapeInteraction.js",
            "line": 56,
            "description": "Creates a listener to use for getting notified about any shape changes.<br/>\nSubclasses may overwrite to create a custom listener.",
            "itemtype": "method",
            "name": "createShapeListener",
            "return": {
                "description": "A listener object.",
                "type": "Object"
            },
            "class": "JSG.graph.interaction.EditShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditShapeInteraction.js",
            "line": 67,
            "description": "Creates a new {{#crossLink \"JSG.graph.view.EditShapeView\"}}{{/crossLink}} to use.<br/>\nSubclasses can overwrite to create a custom view.",
            "itemtype": "method",
            "name": "createEditShapeView",
            "params": [
                {
                    "name": "coordinatesystem",
                    "description": "The CoordinateSystem use for measurement calculations.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ],
            "return": {
                "description": "The new edit view.",
                "type": "JSG.graph.view.EditShapeView"
            },
            "class": "JSG.graph.interaction.EditShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditShapeInteraction.js",
            "line": 78,
            "description": "Initialize the {{#crossLink \"JSG.graph.view.EditShapeView\"}}{{/crossLink}} to use.<br/>\nSubclasses can overwrite to perform custom initialization.",
            "itemtype": "method",
            "name": "initEditView",
            "params": [
                {
                    "name": "editview",
                    "description": "The view to initialize.",
                    "type": "JSG.graph.view.EditShapeView"
                }
            ],
            "class": "JSG.graph.interaction.EditShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditShapeInteraction.js",
            "line": 121,
            "description": "Updates the points managed by corresponding {{#crossLink \"JSG.graph.view.EditShapeView\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setPointList",
            "params": [
                {
                    "name": "pointlist",
                    "description": "The new points to use.",
                    "type": "JSG.geometry.PointList"
                }
            ],
            "class": "JSG.graph.interaction.EditShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditShapeInteraction.js",
            "line": 136,
            "description": "Translates given origin and angle to the top {{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "translateOriginAndAngle",
            "params": [
                {
                    "name": "origin",
                    "description": "The origin to translate.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "angle",
                    "description": "The angle to translate in radiant.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The translated angle in radiant.",
                "type": "Number"
            },
            "class": "JSG.graph.interaction.EditShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditShapeInteraction.js",
            "line": 155,
            "description": "Returns the Marker for specified location or <code>undefined</code> if no marker could be found.",
            "itemtype": "method",
            "name": "getMarkerAt",
            "params": [
                {
                    "name": "location",
                    "description": "The marker location.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The Marker or <code>undefined</code>.",
                "type": "JSG.graph.view.EditShapeView.Marker"
            },
            "class": "JSG.graph.interaction.EditShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditShapeInteraction.js",
            "line": 199,
            "description": "Sets the currently active marker.",
            "itemtype": "method",
            "name": "setCurrentMarker",
            "params": [
                {
                    "name": "event",
                    "description": "The current event which specifies the marker location.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.EditShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditShapeInteraction.js",
            "line": 243,
            "description": "Deletes given marker from used {{#crossLink \"JSG.graph.view.EditShapeView\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "deleteMarker",
            "params": [
                {
                    "name": "marker",
                    "description": "The marker to delete.",
                    "type": "JSG.graph.view.EditShapeView.Marker"
                }
            ],
            "return": {
                "description": "<code>true</code> if marker was deleted, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.EditShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditShapeInteraction.js",
            "line": 260,
            "description": "Called to mark the {{#crossLink \"JSG.graph.model.shapes.Shape\"}}{{/crossLink}} as closed or open.",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "doIt",
                    "description": "Specify <code>true</code> to mark the Shape as closed.",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.graph.interaction.EditShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditShapeInteraction.js",
            "line": 272,
            "description": "Creates and performs necessary commands to change the {{#crossLink \"JSG.graph.model.shapes.Shape\"}}{{/crossLink}} points.",
            "itemtype": "method",
            "name": "_performChange",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.EditShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditShapeInteraction.js",
            "line": 293,
            "description": "Creates a custom CompoundCommand for this interaction.<br/> \nThe returned command will prevent the new selection setting after command is executed because shape editing should \nnot stop.",
            "itemtype": "method",
            "name": "_createCustomCompoundCommand",
            "return": {
                "description": "An adjusted CompoundCommand",
                "type": "JSG.graph.command.CompoundCommand"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.EditShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditShapeInteraction.js",
            "line": 324,
            "description": "Checks if the {{#crossLink \"JSG.graph.model.shapes.Shape\"}}{{/crossLink}} of given GraphItem must be changed. \nIn case it should the corresponding command will be returned or otherwise <code>undefined</code>",
            "itemtype": "method",
            "name": "_createSwitchShapeCommandIfNecessary",
            "params": [
                {
                    "name": "item",
                    "description": "The GraphItem to check the shape of.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "shapeType",
                    "description": "The shape type as returned by {{#crossLink \"JSG.graph.model.shapes.Shape/getType:method\"}}{{/crossLink}}.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The command to change item shape or <code>undefined</code>",
                "type": "JSG.graph.command.Command"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.EditShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditShapeInteraction.js",
            "line": 349,
            "description": "Creates the command for setting specified {{#crossLink \"JSG.geometry.Point\"}}{{/crossLink}}s to given item.<br/>\nSubclasses can overwrite to return a custom command.",
            "itemtype": "method",
            "name": "_createEditShapeCommand",
            "params": [
                {
                    "name": "item",
                    "description": "The GraphItem to set the points of.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "points",
                    "description": "An array of points to set.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The command to set item points.",
                "type": "JSG.graph.command.Command"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.EditShapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextActivator.js",
            "line": 21,
            "description": "The unique key under which this activator is registered to {{#crossLink \"JSG.graph.interaction.GraphInteraction\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "KEY",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.interaction.EditTextActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextActivator.js",
            "line": 35,
            "description": "Implemented to simply return <code>false</code> in order to let the InteractionDispatcher perform its default handling.",
            "itemtype": "method",
            "name": "onResizeCanvas",
            "params": [
                {
                    "name": "width",
                    "description": "The new canvas width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The new canvas height.",
                    "type": "Number"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "return": {
                "description": "<code>true</code> if Interaction handles resize, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.EditTextActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextActivator.js",
            "line": 50,
            "description": "Implemented to be notified about mouse down events.</br>",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.EditTextActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextActivator.js",
            "line": 67,
            "description": "Implemented to be notified about mouse double click events.</br>",
            "itemtype": "method",
            "name": "onMouseDoubleClick",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.EditTextActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextActivator.js",
            "line": 87,
            "description": "Controller look up condition used on mouse double click.",
            "itemtype": "method",
            "name": "_dblclickCondition",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer to check.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if given controller is suitable for double click handling, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.EditTextActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextActivator.js",
            "line": 103,
            "description": "Implemented to be notified about key down events.</br>",
            "itemtype": "method",
            "name": "onMouseDoubleClick",
            "params": [
                {
                    "name": "event",
                    "description": "The current key event.",
                    "type": "JSG.ui.events.KeyEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.EditTextActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextActivator.js",
            "line": 124,
            "description": "Returns the controller for a {{#crossLink \"JSG.graph.model.TextNode\"}}{{/crossLink}} at specified position. If no \nTextNode exists at given location, one will be created and its controller will be returned. Note: only the passed in \ncontroller and its direct child controllers are traversed.",
            "itemtype": "method",
            "name": "_getTextNodeController",
            "params": [
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                },
                {
                    "name": "controller",
                    "description": "The controller to start look up at.",
                    "type": "JSG.graph.controller.GraphItemController"
                },
                {
                    "name": "evloc",
                    "description": "The event location to look for a TextNode.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The controller for a TextNode at specified position or <code>undefined</code>.",
                "type": "JSG.graph.controller.NodeController"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.EditTextActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextActivator.js",
            "line": 154,
            "description": "Performs an {{#crossLink \"JSG.graph.command.AddLabelCommand\"}}{{/crossLink}} to directly add a default label to\ngiven GraphItem.",
            "itemtype": "method",
            "name": "_addLabel",
            "params": [
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                },
                {
                    "name": "item",
                    "description": "The GraphItem to add a label to.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.EditTextActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextActivator.js",
            "line": 167,
            "description": "Activates and starts the text edit interaction.<br/>",
            "itemtype": "method",
            "name": "_startEditTextInteraction",
            "params": [
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                },
                {
                    "name": "controller",
                    "description": "The controller to start the edit interaction for.",
                    "type": "JSG.graph.controller.GraphItemController"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.EditTextActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextActivator.js",
            "line": 187,
            "description": "Checks if given controller is editable or not.<br/>",
            "itemtype": "method",
            "name": "_isEditable",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to check.",
                    "type": "JSG.graph.controller.GraphItemController"
                }
            ],
            "return": {
                "description": "<code>true</code> if given controller is editable, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.EditTextActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 46,
            "description": "Activate the interaction. Here we register Notifications. The text editor is created\nexplicitly in the method startEdit.",
            "itemtype": "method",
            "name": "activate",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 60,
            "description": "Deactivate the text editor. The contenteditable div is destroyed, the toolbar removed and\nNotifications unregistered. The focus is set back to the canvas.",
            "itemtype": "method",
            "name": "deactivate",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 99,
            "description": "Handles notifications. Here we react to scrolling and zooming by closing the editor.",
            "itemtype": "method",
            "name": "onNotification",
            "params": [
                {
                    "name": "notification",
                    "description": "Notification info.",
                    "type": "JSG.graph.notifications.Notification"
                }
            ],
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 150,
            "description": "Checks whether a point lies inside the controller.",
            "itemtype": "method",
            "name": "isInside",
            "params": [
                {
                    "name": "controller",
                    "description": "Controller of edited textnode.",
                    "type": "JSG.graph.controller.GraphItemController"
                },
                {
                    "name": "location",
                    "description": "Location to check.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "True, if location is inside textnode.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 176,
            "description": "Sets the controller of the editing TextNode.",
            "itemtype": "method",
            "name": "setController",
            "params": [
                {
                    "name": "controller",
                    "description": "Controller of edited textnode.",
                    "type": "JSG.graph.controller.GraphItemController"
                }
            ],
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 186,
            "description": "Starts editing a TextNode. A contenteditable div is created and all event listeners are initialized. The DIV is placed accordingly and scrolled into view.",
            "itemtype": "method",
            "name": "startEdit",
            "params": [
                {
                    "name": "controller",
                    "description": "Controller of edited textnode.",
                    "type": "JSG.graph.controller.GraphItemController"
                },
                {
                    "name": "event",
                    "description": "Event that initiated the interaction.",
                    "type": "JSG.ui.event.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 371,
            "description": "Handles the paste event. Here we wait until the paste really occured and try to clean the resulting HTML.",
            "itemtype": "method",
            "name": "handlePaste",
            "params": [
                {
                    "name": "e",
                    "description": "Event info.",
                    "type": "HTML DOM Event"
                }
            ],
            "return": {
                "description": "Always true.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 391,
            "description": "Handles the KeyPress event. Here we check if a formatting has been applied, while no text has\nbeen selected. If so, the formatting is applied to the incoming char.",
            "itemtype": "method",
            "name": "handleKeyPress",
            "params": [
                {
                    "name": "ev",
                    "description": "Event info.",
                    "type": "HTML DOM Event"
                }
            ],
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 455,
            "description": "Handles key up event triggered by native HTML <code>textarea</code> element which is used to\nedit texts.",
            "itemtype": "method",
            "name": "handleKeyUp",
            "params": [
                {
                    "name": "ev",
                    "description": "Native keyboard event triggered by inner used <code>textarea</code>.",
                    "type": "KeyboardEvent"
                },
                {
                    "name": "textarea",
                    "description": "Native textarea HTML DOM element.",
                    "type": "Textarea"
                }
            ],
            "return": {
                "description": "Event return",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 478,
            "description": "Handles key down event triggered by native HTML <code>textarea</code> element which is used to\nedit texts.",
            "itemtype": "method",
            "name": "handleKeyDown",
            "params": [
                {
                    "name": "ev",
                    "description": "Native keyboard event..",
                    "type": "KeyboardEvent"
                }
            ],
            "return": {
                "description": "Event return",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 512,
            "description": "Handles text change event triggered by native HTML element which is used to\nedit texts.",
            "itemtype": "method",
            "name": "handleChange",
            "params": [
                {
                    "name": "ev",
                    "description": "Native change event triggered by inner used <code>textarea</code>.",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "Event return",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 524,
            "description": "Handles focus event triggered by native HTML element which is used to\nedit texts.",
            "itemtype": "method",
            "name": "handleBlur",
            "params": [
                {
                    "name": "ev",
                    "description": "Native focus event triggered by inner used <code>textarea</code>.",
                    "type": "FocusEvent"
                }
            ],
            "return": {
                "description": "Event return",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 548,
            "description": "Stores the text prior to text editing. This text is used for the undo command.",
            "itemtype": "method",
            "name": "storeUndoText",
            "params": [
                {
                    "name": "item",
                    "description": "Node to retrieve text from.",
                    "type": "JSG.graph.model.TextNode"
                }
            ],
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 558,
            "description": "Gets the text from the TextNode for editing.",
            "itemtype": "method",
            "name": "getEditText",
            "params": [
                {
                    "name": "item",
                    "description": "Node to retrieve text from.",
                    "type": "JSG.graph.model.TextNode"
                }
            ],
            "return": {
                "description": "Text content of TextNode.",
                "type": "String"
            },
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 569,
            "description": "Update the position of the DIV based on the content of the DIV and the text position relative to the parent node.",
            "itemtype": "method",
            "name": "updateTextArea",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "scroll",
                    "description": "False, if the TextNode shall not be scrolled into view.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 664,
            "description": "Handles resizing of the canvas.",
            "itemtype": "method",
            "name": "onResizeCanvas",
            "params": [
                {
                    "name": "width",
                    "description": "New width of canvas.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "New height of canvas.",
                    "type": "Number"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "Always returns true.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 680,
            "description": "Tries to scroll the TextNode and the DIV into the visible area of the Graph.",
            "itemtype": "method",
            "name": "assureVisibility",
            "params": [
                {
                    "name": "width",
                    "description": "New width of canvas.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "New height of canvas.",
                    "type": "Number"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 694,
            "description": "Retrieves the current cursor position within the DIV and scroll the cursor into view, if necessary.",
            "itemtype": "method",
            "name": "scrollToCursor",
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 749,
            "description": "Scrolls the Graph to show the given Rectangle.",
            "itemtype": "method",
            "name": "showRect",
            "params": [
                {
                    "name": "rect",
                    "description": "Rectangle to show.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 884,
            "description": "Checks HTML content for invalid tags or styles and replaces any invalid HTML data.",
            "itemtype": "method",
            "name": "clean",
            "params": [
                {
                    "name": "node",
                    "description": "Node to retrieve HTML from.",
                    "type": "DOM Node"
                }
            ],
            "return": {
                "description": "return_description",
                "type": "Return_type"
            },
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 1092,
            "description": "Returns the current text selection start and end position.",
            "itemtype": "method",
            "name": "saveSelection",
            "return": {
                "description": "Object with start and end index as properties.",
                "type": "Object"
            },
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 1137,
            "description": "Restores the selection based on the given start and end index of the selection.",
            "itemtype": "method",
            "name": "restoreSelection",
            "params": [
                {
                    "name": "savedSel",
                    "description": "Object with a start and end property containing the selection start index and end index.",
                    "type": "Object"
                }
            ],
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 1642,
            "description": "Adds a toolbar above the contenteditable DIV.",
            "itemtype": "method",
            "name": "addToolbar",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\EditTextInteraction.js",
            "line": 1728,
            "description": "Updates the toolbar status based on the current cursor position.",
            "itemtype": "method",
            "name": "updateToolbar",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.EditTextInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\GraphInteraction.js",
            "line": 49,
            "description": "Resets this interaction, i.e. clears any temporarily stored information.",
            "itemtype": "method",
            "name": "_reset",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.GraphInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\GraphInteraction.js",
            "line": 62,
            "description": "Registers all used activators to this GraphInteraction.<br/>\nNote: this method is called during instantiation of a new GraphInteraction instance. Subclasses might overwrite to\nadd custom activators.",
            "itemtype": "method",
            "name": "registerActivators",
            "class": "JSG.graph.interaction.GraphInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\GraphInteraction.js",
            "line": 86,
            "description": "Sets the default handler to use for handling key events.<br/>\nThe key handler should implement the <code>onKeyDown</code> and <code>onKeyUp</code> methods.\nSee {{#crossLink \"JSG.graph.interaction.DefaultKeyHandler\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setDefaultKeyHandler",
            "params": [
                {
                    "name": "keyHandler",
                    "description": "The new key handler to use.",
                    "type": "Object"
                }
            ],
            "class": "JSG.graph.interaction.GraphInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\GraphInteraction.js",
            "line": 128,
            "description": "Checks if a condition function is specified and if not uses the default interaction condition. \nThan calls the corresponding <code>findControllerAt</code> method of given viewer.",
            "itemtype": "method",
            "name": "_findControllerAt",
            "params": [
                {
                    "name": "location",
                    "description": "The location to look at.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "flags",
                    "description": "Depending on the flag, the search algorithm behaves different.",
                    "type": "JSG.graph.controller.FindFlags"
                },
                {
                    "name": "condition",
                    "description": "An optional condition function. Should return <code>true</code> if passed controller is accepted, <code>false</code> otherwise",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "viewer",
                    "description": "The controller viewer on which the interaction happened.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "A suitable model controller or <code>undefined</code> if none\ncould be found.",
                "type": "NumberJSG.graph.controller.ModelController"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.GraphInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\GraphInteraction.js",
            "line": 150,
            "description": "Sets the new active handle.",
            "itemtype": "method",
            "name": "setActiveHandle",
            "params": [
                {
                    "name": "handle",
                    "description": "The new active handle.",
                    "type": "JSG.graph.interaction.ActionHandle"
                }
            ],
            "class": "JSG.graph.interaction.GraphInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\GraphInteraction.js",
            "line": 171,
            "description": "Handles a right button mouse click.",
            "itemtype": "method",
            "name": "handleRightClick",
            "params": [
                {
                    "name": "event",
                    "description": "The triggering mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The controller viewer on which the interaction happened.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.GraphInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\GraphInteraction.js",
            "line": 200,
            "description": "Condition function to find a suitable controller on right click.",
            "itemtype": "method",
            "name": "_rightClickCondition",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to apply condition on.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "location",
                    "description": "The location to look at.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "<code>true</code> if passed controller matches condition function, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.GraphInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\GraphInteraction.js",
            "line": 213,
            "description": "Checks if given controller can be selected on right click. If so it will be selected, otherwise its parent is checked.\nThe finally selected controller will be returned. If no controller could be selected <code>undefined</code> is \nreturned.",
            "itemtype": "method",
            "name": "_selectOnRightClick",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to check.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "viewer",
                    "description": "The controller viewer on which the interaction happened.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The selected controller or <code>undefined</code> if none could be\nselected.",
                "type": "JSG.graph.controller.ModelController"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.GraphInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\GraphInteraction.js",
            "line": 339,
            "description": "Called to handle mouse wheel in interaction. Here we change the zoom factor.",
            "itemtype": "method",
            "name": "onMouseWheel",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "since": "1.6.0",
            "class": "JSG.graph.interaction.GraphInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\GraphInteraction.js",
            "line": 356,
            "description": "Internal method to track cursor update.",
            "itemtype": "method",
            "name": "_updateCursor",
            "params": [
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.GraphInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\GraphInteraction.js",
            "line": 459,
            "description": "Sorts the given activators list before they are notified about about current event. The passed string specifies the \nfunction which was triggered by current event.<br/>\nTo customize the activators order a subclass can overwrite either this method or one of the corresponding \n<code>_compareXXX</code> methods.",
            "itemtype": "method",
            "name": "sortActivatorsForFunc",
            "params": [
                {
                    "name": "funcstr",
                    "description": "A string specifying the function which was triggered by current event.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The passed activators list for convenience.",
                "type": "Array"
            },
            "class": "JSG.graph.interaction.GraphInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\GraphInteraction.js",
            "line": 484,
            "description": "Called during sorting of activators. Subclasses can overwrite.",
            "itemtype": "method",
            "name": "_compareOnMouseDown",
            "params": [
                {
                    "name": "act1",
                    "description": "InteractionActivator to use for comparison.",
                    "type": "JSG.graph.interaction.InteractionActivator"
                },
                {
                    "name": "act2",
                    "description": "InteractionActivator to use for comparison.",
                    "type": "JSG.graph.interaction.InteractionActivator"
                }
            ],
            "return": {
                "description": "Return <code>1</code> if <code>act1</code> should be behind <code>act2</code>, <code>-1</code> if \n<code>act1</code> should be before <code>act2</code> or <code>0</code> if order is not important.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.GraphInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\GraphInteraction.js",
            "line": 501,
            "description": "Called during sorting of activators. Subclasses can overwrite.",
            "itemtype": "method",
            "name": "_compareOnMouseMove",
            "params": [
                {
                    "name": "act1",
                    "description": "InteractionActivator to use for comparison.",
                    "type": "JSG.graph.interaction.InteractionActivator"
                },
                {
                    "name": "act2",
                    "description": "InteractionActivator to use for comparison.",
                    "type": "JSG.graph.interaction.InteractionActivator"
                }
            ],
            "return": {
                "description": "Return <code>1</code> if <code>act1</code> should be behind <code>act2</code>, <code>-1</code> if \n<code>act1</code> should be before <code>act2</code> or <code>0</code> if order is not important.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.GraphInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\GraphInteraction.js",
            "line": 518,
            "description": "Called during sorting of activators. Subclasses can overwrite.",
            "itemtype": "method",
            "name": "_compareOnMouseUp",
            "params": [
                {
                    "name": "act1",
                    "description": "InteractionActivator to use for comparison.",
                    "type": "JSG.graph.interaction.InteractionActivator"
                },
                {
                    "name": "act2",
                    "description": "InteractionActivator to use for comparison.",
                    "type": "JSG.graph.interaction.InteractionActivator"
                }
            ],
            "return": {
                "description": "Return <code>1</code> if <code>act1</code> should be behind <code>act2</code>, <code>-1</code> if \n<code>act1</code> should be before <code>act2</code> or <code>0</code> if order is not important.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.GraphInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\GraphInteraction.js",
            "line": 535,
            "description": "Called during sorting of activators. Subclasses can overwrite.",
            "itemtype": "method",
            "name": "_compareOnKeyDown",
            "params": [
                {
                    "name": "act1",
                    "description": "InteractionActivator to use for comparison.",
                    "type": "JSG.graph.interaction.InteractionActivator"
                },
                {
                    "name": "act2",
                    "description": "InteractionActivator to use for comparison.",
                    "type": "JSG.graph.interaction.InteractionActivator"
                }
            ],
            "return": {
                "description": "Return <code>1</code> if <code>act1</code> should be behind <code>act2</code>, <code>-1</code> if \n<code>act1</code> should be before <code>act2</code> or <code>0</code> if order is not important.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.GraphInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\GraphInteraction.js",
            "line": 552,
            "description": "Called during sorting of activators. Subclasses can overwrite.",
            "itemtype": "method",
            "name": "_compareOnMouseDoubleClick",
            "params": [
                {
                    "name": "act1",
                    "description": "InteractionActivator to use for comparison.",
                    "type": "JSG.graph.interaction.InteractionActivator"
                },
                {
                    "name": "act2",
                    "description": "InteractionActivator to use for comparison.",
                    "type": "JSG.graph.interaction.InteractionActivator"
                }
            ],
            "return": {
                "description": "Return <code>1</code> if <code>act1</code> should be behind <code>act2</code>, <code>-1</code> if \n<code>act1</code> should be before <code>act2</code> or <code>0</code> if order is not important.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.GraphInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Highlighter.js",
            "line": 27,
            "description": "Returns the default <code>Highlighter</code> implementation.<br/>\nSubclasses can simply replace this method to globally register a customized <code>Highlighter</code>.",
            "itemtype": "method",
            "name": "getDefault",
            "return": {
                "description": "The global default <code>Highlighter</code> to use.",
                "type": "JSG.graph.interaction.Highlighter"
            },
            "static": 1,
            "class": "JSG.graph.interaction.Highlighter",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Highlighter.js",
            "line": 43,
            "description": "An object which defines the default format and text format attributes to use for controller highlight.\nThis object defines following properties:\n<ul>\n<li><code>format</code> - A {{#crossLink \"JSG.graph.attr.FormatAttributes\"}}{{/crossLink}} list to define the fill and border format</li>\n<li><code>textformat</code> - A {{#crossLink \"JSG.graph.attr.TextFormatAttributes\"}}{{/crossLink}} list to define text format</li>\n<li><code>text</code> - The text to display</li>\n</ul>",
            "itemtype": "property",
            "name": "OPTIONS",
            "type": "{Object}",
            "static": 1,
            "class": "JSG.graph.interaction.Highlighter",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Highlighter.js",
            "line": 74,
            "description": "An object which defines the default values to use for position marker highlight.\nThis object defines following properties:\n<ul>\n<li><code>bgcolor</code> - A color {String} to use as background color for a position marker view.</li>\n<li><code>fgcolor</code> - A color {String} to use as foreground color for a position marker view.</li>\n</ul>",
            "itemtype": "property",
            "name": "MARKER_OPTIONS",
            "type": "{Object}",
            "static": 1,
            "class": "JSG.graph.interaction.Highlighter",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Highlighter.js",
            "line": 94,
            "description": "Convenience method to create and add a highlight for given controller. The highlight is created by calling\n{{#crossLink \"JSG.graph.interaction.Highlighter/createHighlight:method\"}}{{/crossLink}} and is added to the\n{{#crossLink \"JSG.graph.view.LayerId/TARGETCONTAINER:property\"}}{{/crossLink}} layer. An optional options object\ncan be passed. If not given the {{#crossLink \"JSG.graph.interaction.Highlighter/OPTIONS:property\"}}{{/crossLink}}\nobject will be used.",
            "itemtype": "method",
            "name": "highlightController",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to highlight.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by calling interaction.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "options",
                    "description": "An optional options object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "JSG.graph.interaction.Highlighter",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Highlighter.js",
            "line": 112,
            "description": "Creates a Feedback instance to highlight the bounds of given controller. The feedback can be used to mark a controller \nas possible drop or move target. To customize the feedback an optional options object can be passed. If not given the \n{{#crossLink \"JSG.graph.interaction.Highlighter/OPTIONS:property\"}}{{/crossLink}} object will be used.",
            "itemtype": "method",
            "name": "createHighlight",
            "params": [
                {
                    "name": "controller",
                    "description": "The target model controller.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "options",
                    "description": "An optional options object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "@return  A Feedback instance to use as highlight.",
                "type": "JSG.graph.feedback.Feedback"
            },
            "class": "JSG.graph.interaction.Highlighter",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Highlighter.js",
            "line": 141,
            "description": "Convenience method to create and add a position highlight for given target controller and insert index. The highlight\nis created by calling {{#crossLink \"JSG.graph.interaction.Highlighter/createPositionHighlight:method\"}}{{/crossLink}}\nand is added to the {{#crossLink \"JSG.graph.view.LayerId/LAYOUTMARKER:property\"}}{{/crossLink}} layer. An optional \nmarker options object can be passed. If not given the {{#crossLink \"JSG.graph.interaction.Highlighter/MARKER_OPTIONS:property\"}}{{/crossLink}}\nobject will be used.",
            "itemtype": "method",
            "name": "highlightPosition",
            "params": [
                {
                    "name": "controller",
                    "description": "The target controller.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "index",
                    "description": "The layout index object. For more information refer to {{#crossLink \"JSG.graph.layout.LayoutManager\"}}{{/crossLink}}.",
                    "type": "Object"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by calling interaction.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "options",
                    "description": "An optional marker options object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "JSG.graph.interaction.Highlighter",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Highlighter.js",
            "line": 160,
            "description": "Adds position marker to the {{#crossLink \"JSG.graph.view.LayerId/LAYOUTMARKER:property\"}}{{/crossLink}} layer. This\nmarker signals a target drop position within given controller. An optional marker options object can be passed. If \nnot given the {{#crossLink \"JSG.graph.interaction.Highlighter/MARKER_OPTIONS:property\"}}{{/crossLink}} object will be used.",
            "itemtype": "method",
            "name": "createPositionHighlight",
            "params": [
                {
                    "name": "index",
                    "description": "The layout index object. For more information refer to {{#crossLink \"JSG.graph.layout.LayoutManager\"}}{{/crossLink}}.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "An optional marker options object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A view to use as position marker highlight.",
                "type": "JSG.ui.View"
            },
            "class": "JSG.graph.interaction.Highlighter",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Highlighter.js",
            "line": 196,
            "description": "Called by {{#crossLink \"JSG.graph.interaction.Highlighter/createPositionHighlight:method\"}}{{/crossLink}} to create\na simple marker view. An optional options object can be passed to customize the marker view. If not given the \n{{#crossLink \"JSG.graph.interaction.Highlighter/MARKER_OPTIONS:property\"}}{{/crossLink}} object will be used.",
            "itemtype": "method",
            "name": "createPositionMarker",
            "params": [
                {
                    "name": "pos",
                    "description": "The marker x or y position.",
                    "type": "Number"
                },
                {
                    "name": "rect",
                    "description": "The marker bounds.",
                    "type": "JSG.geometry.Rectangle"
                },
                {
                    "name": "horizontal",
                    "description": "A flag which specifies if a horizontal or vertical marker should be created.",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "An optional marker options object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A view to use as marker highlight.",
                "type": "JSG.ui.View"
            },
            "class": "JSG.graph.interaction.Highlighter",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 51,
            "description": "The location at which this Interaction has started.",
            "itemtype": "property",
            "name": "startLocation",
            "type": "{JSG.geometry.Point}",
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 57,
            "description": "The current location of this Interaction.",
            "itemtype": "property",
            "name": "currentLocation",
            "type": "{JSG.geometry.Point}",
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 63,
            "description": "Convenient property to save a last location of interest.",
            "itemtype": "property",
            "name": "lastLocation",
            "type": "{JSG.geometry.Point}",
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 69,
            "description": "The InteractionHandler which activated this Interaction. Can be <code>undefined</code>.",
            "itemtype": "property",
            "name": "interactionHandler",
            "type": "{JSG.graph.interaction.InteractionHandler}",
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 75,
            "description": "An optional delegate object.",
            "itemtype": "property",
            "name": "_delegate",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 85,
            "description": "Returns the InteractionHandler which has activated this Interaction.",
            "itemtype": "method",
            "name": "getInteractionHandler",
            "return": {
                "description": "The currently used InteractionHandler or <code>undefined</code>.",
                "type": "JSG.graph.interaction.InteractionHandler"
            },
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 94,
            "description": "Used by InteractionHandler upon activation to register itself.",
            "itemtype": "method",
            "name": "setInteractionHandler",
            "params": [
                {
                    "name": "interactionHandler",
                    "description": "The InteractionHandler which activates this interaction.",
                    "type": "JSG.graph.interaction.InteractionHandler"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 103,
            "description": "Sets the optional delegate for this interaction.</br>\nA delegate will be notified and consulted during the interaction. With a delegate its is possible\nto influence the behavior of an interaction. The delegate is optional meaning that if none is\nprovided the default interaction behavior is performed. The methods a delegate must or should\nimplement is different for most interactions. Therefore refer to the various interaction\nsubclasses to get information about its delegate support.",
            "itemtype": "method",
            "name": "setDelegate",
            "params": [
                {
                    "name": "delegate",
                    "description": "A delegate object to get customize interaction.",
                    "type": "Object"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 117,
            "description": "Calls given function on an optional registered delegate object.</br>\nThis method takes a variable amount of parameters, depending on the function to call. However,\nthe first passed parameter must be the name of the function to call on delegate object.",
            "itemtype": "method",
            "name": "_notifyDelegate",
            "params": [
                {
                    "name": "args",
                    "description": "Arguments to pass to the function. First argument must be the name of the function to call on delegate object.",
                    "multiple": true
                }
            ],
            "return": {
                "description": "The value returned by called function. Maybe <code>undefined</code>.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 137,
            "description": "Returns the ControllerViewer used by registered InteractionHandler. This function is simply a\nshortcut for <code>getInteractionHandler().getViewer()</code>.",
            "itemtype": "method",
            "name": "getViewer",
            "return": {
                "description": "The ControllerViewer or <code>undefined</code>.",
                "type": "JSG.ui.viewer.ControllerViewer"
            },
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 148,
            "description": "Called by {{#crossLink \"JSG.graph.interaction.InteractionHandler\"}}{{/crossLink}} to activate this interaction.\nSubclasses can override, default implementation does nothing.",
            "itemtype": "method",
            "name": "activate",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 166,
            "description": "Called by {{#crossLink \"JSG.graph.interaction.InteractionHandler\"}}{{/crossLink}} to deactivate this interaction.\nSubclasses can override, default implementation does nothing.",
            "itemtype": "method",
            "name": "deactivate",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 192,
            "description": "Framework internal method. Should usually not be overwritten by custom subclasses.",
            "itemtype": "method",
            "name": "isScrollBarEvent",
            "return": {
                "description": "<code>true</code> if event is handled by a scrollbar, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "Don't use! Currently under review and subject to change!!",
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 205,
            "description": "Called or should be called on normal Interaction termination.</br>\nThis function is split into <code>willFinish</code> and <code>didFinish</code>. So it is rarely\nrequired to overwrite <code>finishInteraction</code>. Instead <code>willFinish</code> should\nbe overwritten.",
            "itemtype": "method",
            "name": "finishInteraction",
            "params": [
                {
                    "name": "event",
                    "description": "The current event or <code>undefined</code>.",
                    "type": "JSG.ui.events.Event",
                    "optional": true
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 220,
            "description": "Called during finishing this Interaction.</br>\nSubclasses should overwrite to perform normal finish tasks. Default implementation does nothing.",
            "itemtype": "method",
            "name": "willFinish",
            "params": [
                {
                    "name": "event",
                    "description": "The current event or <code>undefined</code>.",
                    "type": "JSG.ui.events.Event",
                    "optional": true
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 230,
            "description": "Called after this Interaction terminated normally or not normally.</br>\nDefault implementation simply deactivates this Interaction by setting the default Interaction of\ninner InteractionHandler to active.</br>\nSubclasses may overwrite but should call this method.",
            "itemtype": "method",
            "name": "didFinish",
            "params": [
                {
                    "name": "event",
                    "description": "The current event or <code>undefined</code>.",
                    "type": "JSG.ui.events.Event",
                    "optional": true
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 246,
            "description": "Called or should be called on not normal Interaction termination.</br>\nDefault implementation simply calls <code>didFinish</code>, so subclasses may overwrite.",
            "itemtype": "method",
            "name": "cancelInteraction",
            "params": [
                {
                    "name": "event",
                    "description": "The current event or <code>undefined</code>.",
                    "type": "JSG.ui.events.Event",
                    "optional": true
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 258,
            "description": "Called to check if an interaction shall be cancelled upon given event.</br>\nThis method is called by {{#crossLink \"JSG.graph.interaction.InteractionHandler\"}}{{/crossLink}} on event processing \nto interrupt this interaction before it processes specified event.<br/>  \nDefault implementation simply checks for {{#crossLink \"JSG.ui.events.KeyType.ESC:property\"}}{{/crossLink}} being pressed.\nSubclasses may overwrite but should call this method to support cancel on ESC.",
            "itemtype": "method",
            "name": "doCancelInteraction",
            "params": [
                {
                    "name": "event",
                    "description": "The current event or <code>undefined</code>.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "True, to cancel interaction, false to continue.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 275,
            "description": "A condition function used for looking up {{#crossLink \"JSG.graph.controller.ModelController\"}}{{/crossLink}}.</br>\nSubclasses should overwrite, default implementation simply returns <code>true</code>.",
            "itemtype": "method",
            "name": "condition",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to check.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "return": {
                "description": "<code>true</code> if given controller fulfills this condition, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 288,
            "description": "Called when the canvas size has changed. If an interaction does not handle this, it should return\n<code>false</code> so that the InteractionHandler performs the default action.",
            "itemtype": "method",
            "name": "onResizeCanvas",
            "params": [
                {
                    "name": "width",
                    "description": "The new canvas width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The new canvas height.",
                    "type": "Number"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if Interaction handles resize, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 302,
            "description": "Called to handle mouse down in interaction specifically.</br>\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 313,
            "description": "Called to handle mouse double click in interaction specifically.</br>\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "onMouseDoubleClick",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 324,
            "description": "Called to handle mouse move in interaction specifically.</br>\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 335,
            "description": "Called to handle mouse move in interaction specifically.</br>\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 346,
            "description": "Called to handle mouse up in interaction specifically.</br>\nDefault implementation finishes the interaction.",
            "itemtype": "method",
            "name": "onMouseUp",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 358,
            "description": "Called to handle mouse exit in interaction specifically.</br>\nDefault implementation cancels the interaction.",
            "itemtype": "method",
            "name": "onMouseExit",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 370,
            "description": "Called to handle mouse wheel in interaction specifically.</br>\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "onMouseWheel",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 382,
            "description": "Called to handle drag enter in interaction specifically.</br>\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "onDragEnter",
            "params": [
                {
                    "name": "event",
                    "description": "The corresponding drag event.",
                    "type": "JSG.ui.events.DragEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 392,
            "description": "Called to handle drag exit in interaction specifically.</br>\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "onDragExit",
            "params": [
                {
                    "name": "event",
                    "description": "The corresponding drag event.",
                    "type": "JSG.ui.events.DragEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 402,
            "description": "Called to handle drag leave in interaction specifically.</br>\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "onDragLeave",
            "params": [
                {
                    "name": "event",
                    "description": "The corresponding drag event.",
                    "type": "JSG.ui.events.DragEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 412,
            "description": "Called to handle drag over in interaction specifically.</br>\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "onDragOver",
            "params": [
                {
                    "name": "event",
                    "description": "The corresponding drag event.",
                    "type": "JSG.ui.events.DragEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 422,
            "description": "Called to handle drop in interaction specifically.</br>\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "onDrop",
            "params": [
                {
                    "name": "event",
                    "description": "The corresponding drag event.",
                    "type": "JSG.ui.events.DragEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 433,
            "description": "Called to handle rotation start in interaction specifically.</br>\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "onRotateStart",
            "params": [
                {
                    "name": "event",
                    "description": "The current gesture event.",
                    "type": "JSG.ui.events.GestureEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 444,
            "description": "Called to handle rotation progress in interaction specifically.</br>\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "onRotate",
            "params": [
                {
                    "name": "event",
                    "description": "The current gesture event.",
                    "type": "JSG.ui.events.GestureEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 455,
            "description": "Called to handle rotation finish in interaction specifically.</br>\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "onRotateEnd",
            "params": [
                {
                    "name": "event",
                    "description": "The current gesture event.",
                    "type": "JSG.ui.events.GestureEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 466,
            "description": "Called to handle pinch start in interaction specifically.</br>\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "onPinchStart",
            "params": [
                {
                    "name": "event",
                    "description": "The current gesture event.",
                    "type": "JSG.ui.events.GestureEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 477,
            "description": "Called to handle pinch progress in interaction specifically.</br>\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "onPinch",
            "params": [
                {
                    "name": "event",
                    "description": "The current gesture event.",
                    "type": "JSG.ui.events.GestureEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 488,
            "description": "Called to handle pinch finish in interaction specifically.</br>\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "onPinchFinish",
            "params": [
                {
                    "name": "event",
                    "description": "The current gesture event.",
                    "type": "JSG.ui.events.GestureEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 499,
            "description": "Called to handle pan start in interaction specifically.</br>\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "onPanStart",
            "params": [
                {
                    "name": "event",
                    "description": "The current gesture event.",
                    "type": "JSG.ui.events.GestureEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 510,
            "description": "Called to handle pan action in interaction specifically.</br>\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "onPan",
            "params": [
                {
                    "name": "event",
                    "description": "The current gesture event.",
                    "type": "JSG.ui.events.GestureEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 521,
            "description": "Called to handle pan end in interaction specifically.</br>\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "onPanEnd",
            "params": [
                {
                    "name": "event",
                    "description": "The current gesture event.",
                    "type": "JSG.ui.events.GestureEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 535,
            "description": "Called to handle key down action in interaction specifically.</br>\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "onKeyDown",
            "params": [
                {
                    "name": "event",
                    "description": "The current key event.",
                    "type": "JSG.ui.events.KeyEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 546,
            "description": "Called to handle key up action in interaction specifically.</br>\nDefault implementation does nothing.",
            "itemtype": "method",
            "name": "onKeyUp",
            "params": [
                {
                    "name": "event",
                    "description": "The current key event.",
                    "type": "JSG.ui.events.KeyEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 571,
            "description": "Sets the location, where the interaction takes place. This information is set by the InteractionHandler\nand can be used by the interaction for processing it.",
            "itemtype": "method",
            "name": "setCurrentLocation",
            "params": [
                {
                    "name": "point",
                    "description": "Mouse coordinate.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 582,
            "description": "Gets the location, where the interaction takes place. This information is set by the InteractionHandler\nand can be used by the interaction for processing it.",
            "itemtype": "method",
            "name": "getCurrentLocation",
            "return": {
                "description": "point Mouse coordinate.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 593,
            "description": "Sets the location, where the interaction initially started. This information is set by the InteractionHandler\nand can be used by the interaction for processing it.",
            "itemtype": "method",
            "name": "setStartLocation",
            "params": [
                {
                    "name": "point",
                    "description": "Mouse coordinate.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 604,
            "description": "Gets the location, where the interaction initially started. This information is set by the InteractionHandler\nand can be used by the interaction for processing it.",
            "itemtype": "method",
            "name": "getStartLocation",
            "params": [
                {
                    "name": "point",
                    "description": "Mouse coordinate.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 615,
            "description": "Sets the location of previous interaction coordinate. This information is set by the InteractionHandler\nand can be used by the interaction for processing it.",
            "itemtype": "method",
            "name": "setLastLocation",
            "params": [
                {
                    "name": "point",
                    "description": "Mouse coordinate.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 626,
            "description": "Gets the location of previous interaction coordinate. This information is set by the InteractionHandler\nand can be used by the interaction for processing it.",
            "itemtype": "method",
            "name": "getLastLocation",
            "params": [
                {
                    "name": "point",
                    "description": "Mouse coordinate.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 637,
            "description": "Gets the current cursor setting.",
            "itemtype": "method",
            "name": "getCursor",
            "return": {
                "description": "Cursor name",
                "type": "String"
            },
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 648,
            "description": "Set a new cursor.",
            "itemtype": "method",
            "name": "setCursor",
            "params": [
                {
                    "name": "cursor",
                    "description": "New cursor name.",
                    "type": "String"
                }
            ],
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 658,
            "description": "Called to retrieve a controller at the given location. If a condition is provided, the function will\nbe called before the location is checked. This way e.g. you can check for visibility or other status flags.",
            "itemtype": "method",
            "name": "getControllerAtLocation",
            "params": [
                {
                    "name": "location",
                    "description": "Coordinates to check",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "conditionFunc",
                    "description": "If specified, it will be called first before location is checked.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a contoller, if the item is at the location and the option condition evaluates to true.",
                "type": "JSG.graph.controller.GraphItemController"
            },
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 693,
            "description": "Checks if align to grid should be done.<br/>\nThe default implementation simply checks the current {{#crossLink \"JSG.graph.model.settings.GraphSettings\"}}{{/crossLink}}\nand the passed event object.",
            "itemtype": "method",
            "name": "doAlignToGrid",
            "params": [
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The current ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if align to grid should be performed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "since": "1.6.0",
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 711,
            "description": "Aligns given point to graph grid.<br/>\nNote: this method calls {{#crossLink \"JSG.graph.interaction.Interaction/doAlignToGrid:method\"}}{{/crossLink}} to \ndecide if align to grid should be done.",
            "itemtype": "method",
            "name": "alignPtToGrid",
            "params": [
                {
                    "name": "point",
                    "description": "Point to align.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "event",
                    "description": "The current event or <code>undefined</code>.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The current ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if point should be aligned, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "since": "1.6.0",
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 747,
            "description": "Aligns the bounding rectangle of given bounding-box to current graph grid. the offset required to align the bounding-box\nis returned.<br/>\nNote: this method calls {{#crossLink \"JSG.graph.interaction.Interaction/doAlignToGrid:method\"}}{{/crossLink}} to \ndecide if align to grid should be done.",
            "itemtype": "method",
            "name": "alignBBoxToGrid",
            "params": [
                {
                    "name": "bbox",
                    "description": "The bounding-box to align.",
                    "type": "JSG.geometry.BoundingBox"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The current ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse for returned offset point. If not provided a new one will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The align offset.",
                "type": "JSG.geometry.Point"
            },
            "since": "1.6.0",
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 770,
            "description": "Aligns given rectangle to current graph grid. The offset required to align the rectangle is returned.<br/>\nNote: this method calls {{#crossLink \"JSG.graph.interaction.Interaction/doAlignToGrid:method\"}}{{/crossLink}} to \ndecide if align to grid should be done.",
            "itemtype": "method",
            "name": "alignRectToGrid",
            "params": [
                {
                    "name": "rect",
                    "description": "The rectangle to align.",
                    "type": "JSG.geometry.Rectangle"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The current ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse for returned offset point. If not provided a new one will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The align offset.",
                "type": "JSG.geometry.Point"
            },
            "since": "1.6.0",
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\Interaction.js",
            "line": 803,
            "description": "Align the given point to the snap settings of the graph.",
            "itemtype": "method",
            "name": "alignToGrid",
            "params": [
                {
                    "name": "point",
                    "description": "Point to align.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "viewer",
                    "description": "Current viewer to use for retrieving the snap setting.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "altKey",
                    "description": "Flag to indicate, if snap shall be applied or not. True, if yes, otherwise point remains unchanged.",
                    "type": "Boolean"
                },
                {
                    "name": "reusepoint",
                    "description": "Optional point to reuse.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "Aligned point.",
                "type": "JSG.geometry.Point"
            },
            "deprecated": true,
            "deprecationMessage": "Use either {{#crossLink \"JSG.graph.interaction.AbstractInteraction/alignPtToGrid:method\"}}{{/crossLink}},\n{{#crossLink \"JSG.graph.interaction.AbstractInteraction/alignBBoxToGrid:method\"}}{{/crossLink}} or\n{{#crossLink \"JSG.graph.interaction.AbstractInteraction/alignRectToGrid:method\"}}{{/crossLink}}.",
            "class": "JSG.graph.interaction.Interaction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionActivator.js",
            "line": 32,
            "description": "Activates given Interaction.<br/>\nTo give subclasses the opportunity to easily activate a custom interaction it is recommended to create the interaction\nto be activated by calling {{#crossLink \"JSG.graph.interaction.InteractionActivator/createInteraction:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "activateInteraction",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction to activate.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "oldInteraction",
                    "description": "The current interaction, e.g. the InteractionDispatcher.",
                    "type": "JSG.graph.interaction.Interaction"
                }
            ],
            "return": {
                "description": "The activated interaction as convenience.",
                "type": "JSG.graph.interaction.Interaction"
            },
            "class": "JSG.graph.interaction.InteractionActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionActivator.js",
            "line": 52,
            "description": "Creates the interaction object to activate.<br/>\nThis method is intended to be overwritten by subclasses. Default implementation simply returns <code>undefined</code>.\nSee {{#crossLink \"JSG.graph.interaction.InteractionActivator/activateInteraction:method\"}}{{/crossLink}} too. <br/>\nNote: the default method takes no parameter but subclasses are allowed to do so in order to create an interaction \ndepending on passed data.",
            "itemtype": "method",
            "name": "createInteraction",
            "return": {
                "description": "The interaction to activate.",
                "type": "JSG.graph.interaction.Interaction"
            },
            "since": "1.6.0",
            "class": "JSG.graph.interaction.InteractionActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionActivator.js",
            "line": 66,
            "description": "Called by InteractionDispatcher on activation.</br>\n<b>Note:</b> subclasses can overwrite this method to perform special initialization tasks, but \nshould call this superclass method.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "viewer",
                    "description": "The controller viewer on which the interaction happens.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.InteractionActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionActivator.js",
            "line": 77,
            "description": "Called by InteractionDispatcher on deactivation.</br>\n<b>Note:</b> subclasses can overwrite this method to perform special tasks, but \nshould call this superclass method.",
            "itemtype": "method",
            "name": "dispose",
            "params": [
                {
                    "name": "viewer",
                    "description": "The controller viewer on which the interaction happens.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.InteractionActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionActivator.js",
            "line": 90,
            "description": "Returns the unique key of this InteractionActivator.</br>\nThis method is intended to be overwritten by subclasses. Default implementation simply returns\nan empty String.",
            "itemtype": "method",
            "name": "getKey",
            "return": {
                "description": "A unique key string for this InteractionActivator.",
                "type": "String"
            },
            "class": "JSG.graph.interaction.InteractionActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionDispatcher.js",
            "line": 40,
            "description": "Called by {{#crossLink \"JSG.ui.viewer.ControllerViewer\"}}{{/crossLink}} if this interaction is registered as a \ndefault interaction.<br/>\nSubclasses can overwrite this method. Default implementation does nothing.",
            "itemtype": "method",
            "name": "initAsDefault",
            "params": [
                {
                    "name": "viewer",
                    "description": "The viewer which called this method.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.InteractionDispatcher",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionDispatcher.js",
            "line": 50,
            "description": "Called by {{#crossLink \"JSG.ui.viewer.ControllerViewer\"}}{{/crossLink}} if this interaction is deregistered as a \ndefault interaction.<br/>\nSubclasses can overwrite this method. Default implementation does nothing.",
            "itemtype": "method",
            "name": "initAsDefault",
            "params": [
                {
                    "name": "viewer",
                    "description": "The viewer which called this method.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.InteractionDispatcher",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionDispatcher.js",
            "line": 80,
            "description": "Returns a list of {{#crossLink \"JSG.graph.interaction.InteractionActivator\"}}{{/crossLink}}s \nwhich implement specified function.",
            "itemtype": "method",
            "name": "getActivatorsForFunc",
            "params": [
                {
                    "name": "funcstr",
                    "description": "The function name an InteractionActivator should implement.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A list of InteractionActivators which implement given function.",
                "type": "Array"
            },
            "class": "JSG.graph.interaction.InteractionDispatcher",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionDispatcher.js",
            "line": 99,
            "description": "Registers specified InteractionActivator for given key.</br>\nNote: this will replace any InteractionActivator which was registered for same key before.",
            "itemtype": "method",
            "name": "addActivator",
            "params": [
                {
                    "name": "key",
                    "description": "The key to register InteractionActivator for.",
                    "type": "String"
                },
                {
                    "name": "activator",
                    "description": "The InteractionActivator to register.",
                    "type": "JSG.graph.interaction.InteractionActivator"
                }
            ],
            "class": "JSG.graph.interaction.InteractionDispatcher",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionDispatcher.js",
            "line": 110,
            "description": "Returns the InteractionActivator which is registered for given key.",
            "itemtype": "method",
            "name": "getActivator",
            "params": [
                {
                    "name": "key",
                    "description": "The key which references a registered InteractionActivator.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The registered InteractionActivator or <code>undefined</code>.",
                "type": "JSG.graph.interaction.InteractionActivator"
            },
            "class": "JSG.graph.interaction.InteractionDispatcher",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionDispatcher.js",
            "line": 120,
            "description": "Returns an <code>Array</code> of all registered InteractionActivators.",
            "itemtype": "method",
            "name": "getAllActivators",
            "return": {
                "description": "A list of all currently registered InteractionActivators.",
                "type": "Array"
            },
            "class": "JSG.graph.interaction.InteractionDispatcher",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionDispatcher.js",
            "line": 129,
            "description": "Removes the InteractionActivator which is registered for given key.",
            "itemtype": "method",
            "name": "removeActivator",
            "params": [
                {
                    "name": "key",
                    "description": "The key which references the InteractionActivator to remove.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The removed InteractionActivator or <code>undefined</code>.",
                "type": "JSG.graph.interaction.InteractionActivator"
            },
            "class": "JSG.graph.interaction.InteractionDispatcher",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionDispatcher.js",
            "line": 143,
            "description": "Removes all currently registered InteractionActivators.",
            "itemtype": "method",
            "name": "removeAllActivators",
            "class": "JSG.graph.interaction.InteractionDispatcher",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionDispatcher.js",
            "line": 158,
            "description": "Default condition function which is used to find an affected controller.</br>\nThis method is intended to be overwritten by subclasses. Default implementation simply returns\n<code>true</code>.",
            "itemtype": "method",
            "name": "condition",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to apply condition on.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "return": {
                "description": "<code>true</code> if passed controller matches condition function, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.InteractionDispatcher",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionDispatcher.js",
            "line": 172,
            "description": "Returns the controller for given location.</br>\nNote: the search for a controller is only done once or as often as the result is undefined. On \nsubsequent method calls the cached search result is returned. To perform a new search caller\nshould provide a condition function.</br>\nThis method is intended to be overwritten by subclasses. Default implementation simply returns\n<code>undefined</code>.",
            "itemtype": "method",
            "name": "getControllerAt",
            "params": [
                {
                    "name": "location",
                    "description": "The location to search controller at.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "flags",
                    "description": "An optional flag mask to use for controller searching. If specified and\ndifferent from <code>JSG.graph.controller.FindFlags.AUTOMATIC</code> a new search is performed.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "condition",
                    "description": "An optional condition function to use for controller searching. If specified\na new search is performed.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The mode controller at given location or \n<code>undefined</code> if none could be found.",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.graph.interaction.InteractionDispatcher",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionDispatcher.js",
            "line": 193,
            "description": "Returns the currently active handle or <code>undefined</code> if no handle is active.</br>\nThis method is intended to be overwritten by subclasses. Default implementation simply returns\n<code>undefined</code>.",
            "itemtype": "method",
            "name": "getActiveHandle",
            "return": {
                "description": "The currently active handle or <code>undefined</code> if no handle is active.",
                "type": "JSG.graph.interaction.ActionHandle"
            },
            "class": "JSG.graph.interaction.InteractionDispatcher",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 36,
            "description": "Registers given GraphicSystem to this InteractionHandler. This method is called by GraphicSystem\non framework setup.",
            "itemtype": "method",
            "name": "registerGraphicSystem",
            "params": [
                {
                    "name": "gfxsys",
                    "description": "The GraphicSystem to register.",
                    "type": "JSG.ui.graphics.GraphicSystem"
                }
            ],
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 46,
            "description": "Unregisters a former added GraphicSystem.",
            "itemtype": "method",
            "name": "unregisterGraphicSystem",
            "params": [
                {
                    "name": "gfxsys",
                    "description": "The GraphicSystem to register.",
                    "type": "JSG.ui.graphics.GraphicSystem"
                }
            ],
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 56,
            "description": "Convenience method to get the default Interaction of a registered {{#crossLink \"JSG.ui.viewer.ControllerViewer\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getDefaultInteraction",
            "return": {
                "description": "The default Interaction.",
                "type": "JSG.graph.interaction.Interaction"
            },
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 66,
            "description": "Sets the active Interaction to given one.",
            "itemtype": "method",
            "name": "setActiveInteraction",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction to become active.",
                    "type": "JSG.graph.interaction.Interaction"
                }
            ],
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 84,
            "description": "Gets the currently active Interaction. If no Interaction was set active, the default Interaction\nof registered ControllerViewer is returned.",
            "itemtype": "method",
            "name": "getActiveInteraction",
            "return": {
                "description": "The currently active interaction.",
                "type": "JSG.graph.interaction.Interaction"
            },
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 98,
            "description": "Calls <code>cancelInteraction</code> on currently active interaction.</br>",
            "itemtype": "method",
            "name": "cancelActiveInteraction",
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 110,
            "description": "Disposes this InteractionHandler.<br/>\nThis will deactivate current active interaction and remove any active scroll timer.",
            "itemtype": "method",
            "name": "dispose",
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 123,
            "description": "Notifies the current active interaction about canvas resize.",
            "itemtype": "method",
            "name": "handleResizeCanvas",
            "params": [
                {
                    "name": "width",
                    "description": "The new canvas width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The new canvas height.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 136,
            "description": "Handles given gesture event, i.e. translates its location and passes the event to currently active Interaction.",
            "itemtype": "method",
            "name": "handleGestureEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The current gesture event.",
                    "type": "JSG.ui.events.GestureEvent"
                }
            ],
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 203,
            "description": "Handles given mouse event, i.e. translates it location and passes the event to currently active Interaction.",
            "itemtype": "method",
            "name": "handleMouseEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                }
            ],
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 284,
            "description": "Called in {{#crossLink \"JSG.graph.interaction.InteractionHandler/handleMouseEvent:method\"}}{{/crossLink}}\nto check if current active interaction should be canceled.<br/>\nSubclasses might overwrite to implement custom behaviour. Default implementation simply checks\nif event is marked as consumed.",
            "itemtype": "method",
            "name": "doCancelActiveInteraction",
            "params": [
                {
                    "name": "interaction",
                    "description": "The active interaction.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                }
            ],
            "return": {
                "description": "<code>true</code> to cancel interaction, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 307,
            "description": "Called in {{#crossLink \"JSG.graph.interaction.InteractionHandler/handleMouseEvent:method\"}}{{/crossLink}}\nif a mouse down event occurred with right button pressed.<br/>\nSubclasses might overwrite to implement custom behaviour. Default implementation simply pass this\nevent to current active interaction if it has a <code>handleRightClick(event, viewer)</code> function.",
            "itemtype": "method",
            "name": "handleRightClick",
            "params": [
                {
                    "name": "event",
                    "description": "The mouse down event which is currently handled.",
                    "type": "JSG.ui.events.MouseEvent"
                }
            ],
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 323,
            "description": "Performs an automatically scroll when mouse leaves canvas region on drag.<br/>\nSee {{#crossLink \"JSG.graph.interaction.InteractionHandler/removeTimer:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "scrollTimerFunction",
            "params": [
                {
                    "name": "interactionHandler",
                    "description": "The calling InteractionHandler.",
                    "type": "JSG.graph.interaction.InteractionHandler"
                }
            ],
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 373,
            "description": "Removes an eventually started scroll timer.<br/>\nSee {{#crossLink \"JSG.graph.interaction.InteractionHandler/scrollTimerFunction:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "removeTimer",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                }
            ],
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 386,
            "description": "Handles given mouse drag event, i.e. translates it location and passes the event to currently active Interaction.",
            "itemtype": "method",
            "name": "handleDragEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                }
            ],
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 415,
            "description": "Handles given key event, i.e. translates it location and passes the event to currently active Interaction.",
            "itemtype": "method",
            "name": "handleKeyEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The current key event.",
                    "type": "JSG.ui.events.KeyEvent"
                }
            ],
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 443,
            "description": "Returns the current cursor style.<br/>\nSee {{#crossLink \"JSG.ui.Cursor.Style\"}}{{/crossLink}} for predefined style constants.",
            "itemtype": "method",
            "name": "getCursor",
            "return": {
                "description": "The current cursor style.",
                "type": "String"
            },
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 453,
            "description": "Sets a new cursor style.<br/>\nSee {{#crossLink \"JSG.ui.Cursor.Style\"}}{{/crossLink}} for predefined style constants.",
            "itemtype": "method",
            "name": "setCursor",
            "params": [
                {
                    "name": "cursor",
                    "description": "A cursor style name.",
                    "type": "String"
                }
            ],
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 467,
            "description": "Triggers a paint request to the internally used {{#crossLink \"JSG.ui.graphics.GraphicSystem\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "repaint",
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 477,
            "description": "Executes given Command and calls <code>completionfunc</code> if specified. The executed command\nand the viewer are passed as arguments to the completion function.<br/>",
            "itemtype": "method",
            "name": "execute",
            "params": [
                {
                    "name": "cmd",
                    "description": "The command to execute.",
                    "type": "JSG.graph.command.Command"
                },
                {
                    "name": "completionfunc",
                    "description": "An optional function to call after execution.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 501,
            "description": "Calls <code>undo</code> of the next available command from the command stack.<br/>\nTriggers a repaint afterwards.",
            "itemtype": "method",
            "name": "undo",
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 527,
            "description": "Checks if a undo is possible, i.e. an undo command is available.",
            "itemtype": "method",
            "name": "isUndoAvailable",
            "return": {
                "description": "<code>true</code> if an undo command is available, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 536,
            "description": "Calls <code>redo</code> of the next available command from the command stack.<br/>\nTriggers a repaint afterwards.",
            "itemtype": "method",
            "name": "redo",
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 560,
            "description": "Checks if a redo is possible, i.e. a redo command is available.",
            "itemtype": "method",
            "name": "isRedoAvailable",
            "return": {
                "description": "<code>true</code> if a redo command is available, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 570,
            "description": "Copies current selection.<br>\nSee {{#crossLink \"JSG.graph.interaction.InteractionHandler/paste:method\"}}{{/crossLink}} and\n{{#crossLink \"JSG.graph.interaction.InteractionHandler/isPasteAvailable:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "copySelection",
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 581,
            "description": "Copies the format of current selection.<br>\nSee {{#crossLink \"JSG.graph.interaction.InteractionHandler/pasteFormat:method\"}}{{/crossLink}} and\n{{#crossLink \"JSG.graph.interaction.InteractionHandler/isPasteFormatAvailable:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "copySelectionFormat",
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 595,
            "description": "Copies current selection and creates and executes required {{#crossLink \"JSG.graph.command.DeleteItemCommand\"}}{{/crossLink}}s.<br/>\nSee {{#crossLink \"JSG.graph.interaction.InteractionHandler/paste:method\"}}{{/crossLink}} and\n{{#crossLink \"JSG.graph.interaction.InteractionHandler/isPasteAvailable:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "cutSelection",
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 622,
            "description": "Creates and executes required {{#crossLink \"JSG.graph.command.PasteItemsCommand\"}}{{/crossLink}}.<br/>\nIf no {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s were copied before, i.e. a paste is not available, \ncalling this method has no effect.<br>\nSee {{#crossLink \"JSG.graph.interaction.InteractionHandler/copySelection:method\"}}{{/crossLink}} and\n{{#crossLink \"JSG.graph.interaction.InteractionHandler/isPasteAvailable:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "paste",
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 641,
            "description": "Checks if a paste of formerly copied {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s is available.<br/>\nSee {{#crossLink \"JSG.graph.interaction.InteractionHandler/copySelection:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "isPasteAvailable",
            "return": {
                "description": "<code>true</code> if paste is available, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 652,
            "description": "Creates and executes required {{#crossLink \"JSG.graph.command.FormatItemCommand\"}}{{/crossLink}}s or \n{{#crossLink \"JSG.graph.command.TextFormatItemCommand\"}}{{/crossLink}}s to paste copied formats to\ncurrent selection.<br/>\nIf no formats were copied before, i.e. a paste is not available, calling this method has no effect.<br>\nSee {{#crossLink \"JSG.graph.interaction.InteractionHandler/copySelectionFormat:method\"}}{{/crossLink}} and\n{{#crossLink \"JSG.graph.interaction.InteractionHandler/isPasteFormatAvailable:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "pasteFormat",
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 682,
            "description": "Checks if a paste format is available, i.e. if one was copied to internal clipboard.<br/>\nSee {{#crossLink \"JSG.graph.interaction.InteractionHandler/copySelectionFormat:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "isPasteFormatAvailable",
            "return": {
                "description": "<code>true</code> if a format is available, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 694,
            "description": "Creates and executes required {{#crossLink \"JSG.graph.command.DeleteItemCommand\"}}{{/crossLink}}s to delete\ncurrent selection.<br/>",
            "itemtype": "method",
            "name": "groupSelection",
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 728,
            "description": "Creates and executes required {{#crossLink \"JSG.graph.command.GroupItemsCommand\"}}{{/crossLink}}s to group\ncurrent selection.<br/>",
            "itemtype": "method",
            "name": "groupSelection",
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 743,
            "description": "Creates and executes required {{#crossLink \"JSG.graph.command.UnGroupItemsCommand\"}}{{/crossLink}}s to ungroup\ncurrent selection.<br/>",
            "itemtype": "method",
            "name": "ungroupSelection",
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 760,
            "description": "Creates and executes required {{#crossLink \"JSG.graph.command.ChangeItemOrderCommand\"}}{{/crossLink}}s to change the\ndrawing order of current selection.<br/>\nSee {{#crossLink \"JSG.graph.command.ChangeItemOrder\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "changeDrawingOrderSelection",
            "params": [
                {
                    "name": "changeOrderFlag",
                    "description": "One of the predefined ChangeItemOrder definitions.",
                    "type": "JSG.graph.command.ChangeItemOrder"
                }
            ],
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 785,
            "description": "Activates an {{#crossLink \"JSG.graph.interaction.EditShapeInteraction\"}}{{/crossLink}} instance for current selection. \nNote: this will work for single selection only.",
            "itemtype": "method",
            "name": "editSelection",
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 818,
            "description": "Creates and executes a {{#crossLink \"JSG.graph.command.AlignItemsCommand\"}}{{/crossLink}} for the current active\nselection using the specified align flag.<br/>\nSee {{#crossLink \"JSG.graph.command.Alignment\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "alignSelection",
            "params": [
                {
                    "name": "alignFlag",
                    "description": "One of the predefined Alignment definitions.",
                    "type": "JSG.graph.command.Alignment"
                }
            ],
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 831,
            "description": "Creates and executes a {{#crossLink \"JSG.graph.command.SizeItemsCommand\"}}{{/crossLink}} for the current active\nselection using the specified flag.<br/>\nSee {{#crossLink \"JSG.graph.command.SizeItems\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "sizeSelection",
            "params": [
                {
                    "name": "sizeFlag",
                    "description": "One of the predefined SizeItems definitions.",
                    "type": "JSG.graph.command.SizeItems"
                }
            ],
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 845,
            "description": "Changes format attributes of current selection. The attributes to change and the new values\n(or {{#crossLink \"JSG.graph.expr.Expression\"}}{{/crossLink}}s) are defined by name-value pairs\nwithin given map.",
            "itemtype": "method",
            "name": "applyFormatMap",
            "params": [
                {
                    "name": "map",
                    "description": "A map with name-value pairs.",
                    "type": "JSG.commons.Map"
                }
            ],
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 856,
            "description": "Changes text format attributes of current selection. The attributes to change and the new values\n(or {{#crossLink \"JSG.graph.expr.Expression\"}}{{/crossLink}}s) are defined by name-value pairs\nwithin given map.",
            "itemtype": "method",
            "name": "applyTextFormatMap",
            "params": [
                {
                    "name": "map",
                    "description": "A map with name-value pairs.",
                    "type": "JSG.commons.Map"
                }
            ],
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 867,
            "description": "Checks if given attributes can be applied to the {{#crossLink \"JSG.graph.attr.AttributeList\"}}{{/crossLink}} specified \nby <code>listpath</code>. The attributes to apply are defined by name-value pairs within given map. The provided \nattribute names must all belong to the same AttributeList which is referenced by the <code>listpath</code> parameter.",
            "itemtype": "method",
            "name": "canApplyAttributes",
            "params": [
                {
                    "name": "map",
                    "description": "A map with name-value pairs.",
                    "type": "JSG.commons.Map"
                },
                {
                    "name": "listpath",
                    "description": "A complete path to an AttributeList whose attributes should be changed.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<code>true</code> if values can be applied, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 886,
            "description": "Changes several attributes of current selection. The attributes to change and the new values\n(or {{#crossLink \"JSG.graph.expr.Expression\"}}{{/crossLink}}s) are defined by name-value pairs\nwithin given map. The provided attribute names must all belong to the same\n{{#crossLink \"JSG.graph.attr.AttributeList\"}}{{/crossLink}} which is referenced by the\n<code>listpath</code> parameter.",
            "itemtype": "method",
            "name": "applyMapToSelection",
            "params": [
                {
                    "name": "map",
                    "description": "A map with name-value pairs.",
                    "type": "JSG.commons.Map"
                },
                {
                    "name": "listpath",
                    "description": "A complete path to an AttributeList whose attributes should be changed.",
                    "type": "String"
                }
            ],
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionHandler.js",
            "line": 924,
            "description": "Executes a link expression registered to the {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} of given controller.\nIf no link was registered to the GraphItem, calling this method has no effect.<br/>\nSee {{#crossLink \"JSG.graph.model.GraphItem/getLink:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "executeLink",
            "params": [
                {
                    "name": "controller",
                    "description": "The model controller of the GraphItem to execute the link of.",
                    "type": "JSG.graph.controller.GraphItemController"
                }
            ],
            "class": "JSG.graph.interaction.InteractionHandler",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionUtils.js",
            "line": 17,
            "description": "Adds {{#crossLink \"JSG.graph.view.SnapFeedbackView\"}}{{/crossLink}}s to the \n{{#crossLink \"JSG.graph.view.LayerId/SNAPLINES:property\"}}{{/crossLink}} layer.",
            "itemtype": "method",
            "name": "highlightSnapItemofController",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction which provides possible snap controllers.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "box",
                    "description": "The current selection bounds.",
                    "type": "JSG.geometry.Rectangle"
                },
                {
                    "name": "snap",
                    "description": "Deprecated, currently not used.",
                    "type": "Boolean"
                }
            ],
            "static": 1,
            "class": "JSG.graph.interaction.InteractionUtils",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionUtils.js",
            "line": 220,
            "description": "Returns a ModelController which provides ports to highlight. To create a list of port views for \na special controller use {{#crossLink \"JSG.graph.interaction.InteractionUtils.getPortsFor:method\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "getPortsController",
            "params": [
                {
                    "name": "event",
                    "description": "The event which determines returned controller.",
                    "type": "JSG.graph.model.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The viewer used to display current graph model.",
                    "type": "JSG.ui.viewer.GraphViewer"
                }
            ],
            "return": {
                "description": "A ModelController or <code>undefined</code> if none could be found.",
                "type": "JSG.graph.model.ModelController"
            },
            "static": 1,
            "class": "JSG.graph.interaction.InteractionUtils",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionUtils.js",
            "line": 244,
            "description": "Checks if the given event occurred in one of the controllers children. If this is the case the corresponding child \ncontroller is returned. If it is not the case the given controller itself is returned.",
            "itemtype": "method",
            "name": "_checkForChildControllerAt",
            "params": [
                {
                    "name": "controller",
                    "description": "A ModelController to check the children of.",
                    "type": "JSG.graph.model.ModelController"
                },
                {
                    "name": "event",
                    "description": "The event which determines returned controller.",
                    "type": "JSG.graph.model.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The viewer used to display current graph model.",
                    "type": "JSG.ui.viewer.GraphViewer"
                }
            ],
            "return": {
                "description": "Either passed in controller or one of its children.",
                "type": "JSG.graph.model.ModelController"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.InteractionUtils",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionUtils.js",
            "line": 281,
            "description": "Returns a list of Views which represents all possible ports a given controller can have.</br>",
            "itemtype": "method",
            "name": "getPortsFor",
            "params": [
                {
                    "name": "controller",
                    "description": "The model controller to highlight ports of.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "interaction",
                    "description": "The interaction who calls this method.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "snap",
                    "description": "Flag which indicates if a port location should be created for each shape coordinate.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "A list of port Views.",
                "type": "Array"
            },
            "static": 1,
            "class": "JSG.graph.interaction.InteractionUtils",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionUtils.js",
            "line": 334,
            "description": "Convenience method to create a view at specified location for the given port item. The returned view is based on a \nPositionFeedbackView and can be used as a port highlight.",
            "itemtype": "method",
            "name": "_createPortView",
            "params": [
                {
                    "name": "item",
                    "description": "The GraphItem which represents the port.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "location",
                    "description": "The location for the view.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "A view which can be used as port highlight.",
                "type": "JSG.graph.view.PositionFeedbackView"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.InteractionUtils",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionUtils.js",
            "line": 351,
            "description": "Highlights the bounds of given controller. This is used to mark a node as possible drop container.",
            "itemtype": "method",
            "name": "highlightTargetController",
            "params": [
                {
                    "name": "viewer",
                    "description": "The viewer used to display current graph model.",
                    "type": "JSG.ui.viewer.GraphViewer"
                },
                {
                    "name": "controller",
                    "description": "The target model controller.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "Please use {{#crossLink \"JSG.graph.interaction.Highlighter/highlightController:method\"}}{{/crossLink}} instead.",
            "class": "JSG.graph.interaction.InteractionUtils",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\InteractionUtils.js",
            "line": 384,
            "description": "Adds position marker to the {{#crossLink \"JSG.graph.view.LayerId/LAYOUTMARKER:property\"}}{{/crossLink}} layer. This\nmarker signals a target drop position within given controller.",
            "itemtype": "method",
            "name": "highlightControllerLayoutPosition",
            "params": [
                {
                    "name": "index",
                    "description": "The layout index object. For more information refer to {{#crossLink \"JSG.graph.layout.LayoutManager\"}}{{/crossLink}}.",
                    "type": "Object"
                },
                {
                    "name": "viewer",
                    "description": "The viewer used to display current graph model.",
                    "type": "JSG.ui.viewer.GraphViewer"
                },
                {
                    "name": "controller",
                    "description": "The target model controller.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "Please use {{#crossLink \"JSG.graph.interaction.Highlighter/highlightPosition:method\"}}{{/crossLink}} instead.",
            "class": "JSG.graph.interaction.InteractionUtils",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\LinkActivator.js",
            "line": 22,
            "description": "The unique key under which this activator is registered to {{#crossLink \"JSG.graph.interaction.GraphInteraction\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "KEY",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.interaction.LinkActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\LinkActivator.js",
            "line": 40,
            "description": "To handle KeyEvents. Currently simply pass to <code>onMouseMove</code>.",
            "itemtype": "method",
            "name": "onKeyDown",
            "params": [
                {
                    "name": "event",
                    "description": "Current key event.",
                    "type": "JSG.ui.events.KeyEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by {{#crossLink \"JSG.graph.interaction.InteractionHandler\"}}{{/crossLink}}.\nt * @param {JSG.graph.interaction.InteractionDispatcher} dispatcher The InteractionDispatcher which notified this activator.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.LinkActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\LinkActivator.js",
            "line": 52,
            "description": "Implemented to be notified about mouse move events.</br>\nIf the event occurred over a suitable controller the mouse cursor is updated to reflect that\na link might be executed.",
            "itemtype": "method",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "event",
                    "description": "The mouse move event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by {{#crossLink \"JSG.graph.interaction.InteractionHandler\"}}{{/crossLink}}.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher which notified this activator.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.LinkActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\LinkActivator.js",
            "line": 83,
            "description": "Gets the controller at specified location or <code>undefined</code> if none could be found.",
            "itemtype": "method",
            "name": "_getControllerAt",
            "params": [
                {
                    "name": "location",
                    "description": "The location, relative to Graph coordinate system, to start look up at.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher which notified this activator.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "return": {
                "description": "The controller at specified location or <code>undefined</code>.",
                "type": "JSG.graph.controller.GraphItemController"
            },
            "class": "JSG.graph.interaction.LinkActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\LinkActivator.js",
            "line": 112,
            "description": "Implemented to be notified about mouse up events.</br>\nMight triggers the execution of a link.",
            "itemtype": "method",
            "name": "onMouseUp",
            "params": [
                {
                    "name": "event",
                    "description": "The mouse up event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by {{#crossLink \"JSG.graph.interaction.InteractionHandler\"}}{{/crossLink}}.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher which notified this activator.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.LinkActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\LinkActivator.js",
            "line": 138,
            "description": "Checks if given Event triggers a link execution.",
            "itemtype": "method",
            "name": "isExecuteEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The Event object to check.",
                    "type": "JSG.ui.events.Event"
                }
            ],
            "return": {
                "description": "<code>true</code> if an execution should be performed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.LinkActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\LinkHandle.js",
            "line": 41,
            "description": "Signals the execution of a link.",
            "itemtype": "property",
            "name": "LINK",
            "type": "{String}",
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.graph.interaction.ActionHandle.TYPE/LINK:property\"}}{{/crossLink}} instead.",
            "class": "JSG.graph.interaction.TYPE",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\LinkHandle.js",
            "line": 50,
            "description": "Signals an edit link.",
            "itemtype": "property",
            "name": "EDIT",
            "type": "{String}",
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.graph.interaction.ActionHandle.TYPE/EDIT:property\"}}{{/crossLink}} instead.",
            "class": "JSG.graph.interaction.TYPE",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\LinkHandle.js",
            "line": 68,
            "description": "Returns the controller which is registered to this handle or <code>undefined</code> if none was set.",
            "itemtype": "method",
            "name": "getController",
            "return": {
                "description": "The controller registered to this handle or <code>undefined</code>.",
                "type": "JSG.graph.controller.GraphItemController"
            },
            "class": "JSG.graph.interaction.TYPE",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeActivator.js",
            "line": 23,
            "description": "Threshold which is used to activate {{#crossLink \"JSG.graph.interaction.MarqueeInteraction\"}}{{/crossLink}} when\nhandling {{#crossLink \"JSG.graph.interaction.MarqueeActivator/onMouseDrag:method\"}}{{/crossLink}}. Note: value \nshould be equal or greater to {{#crossLink \"JSG.graph.interaction.MoveActivator/THRESHOLD:property\"}}{{/crossLink}}.\nOtherwise <code>MarqueeInteraction</code> might be activated before {{#crossLink \"JSG.graph.interaction.MoveInteraction\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "THRESHOLD",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.interaction.MarqueeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeActivator.js",
            "line": 35,
            "description": "The unique key under which this activator is registered to {{#crossLink \"JSG.graph.interaction.GraphInteraction\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "KEY",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.interaction.MarqueeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeActivator.js",
            "line": 55,
            "description": "Implemented to be notified about mouse down events.</br>",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.MarqueeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeActivator.js",
            "line": 82,
            "description": "Checks if given event results in a new selection.",
            "itemtype": "method",
            "name": "_isNewSelection",
            "params": [
                {
                    "name": "controller",
                    "description": "The currently selected controller.",
                    "type": "JSG.graph.controller.ModelController",
                    "optional": true
                },
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if event selected a new controller, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.MarqueeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeActivator.js",
            "line": 110,
            "description": "Sets the controller to select.",
            "itemtype": "method",
            "name": "_setSelection",
            "params": [
                {
                    "name": "newSelection",
                    "description": "The newly selected controller.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.MarqueeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeActivator.js",
            "line": 135,
            "description": "Implemented to be notified about mouse drag events.</br>",
            "itemtype": "method",
            "name": "onMouseDrag",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.MarqueeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeActivator.js",
            "line": 165,
            "description": "Deselects all currently selected controllers and selects given one. Does nothing if given controller\nis selected already. <br/>\nNote: {{#crossLink \"JSG.graph.interaction.SelectionChecker\"}}{{/crossLink}} is used to verify and possibly change the\ncontroller to set.",
            "itemtype": "method",
            "name": "_setSingleSelection",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to select.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "viewer",
                    "description": "The controller viewer on which the interaction happened.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.MarqueeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeActivator.js",
            "line": 281,
            "description": "Adds given controller to already selected controllers.<br/>\nNote: {{#crossLink \"JSG.graph.interaction.SelectionChecker\"}}{{/crossLink}} is used to verify and possibly change the\ncontroller to add.",
            "itemtype": "method",
            "name": "_setMultiSelection",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to add.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "viewer",
                    "description": "The controller viewer on which the interaction happened.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.MarqueeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeActivator.js",
            "line": 312,
            "description": "Checks if the hierarchy of given controller has a selected parent. The optional second parameter \ndefines the controller which is not selected yet but will be.",
            "itemtype": "method",
            "name": "_hasSelectedParent",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to check.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "newSelected",
                    "description": "A controller which is about to be selected.",
                    "type": "JSG.graph.controller.ModelController",
                    "optional": true
                }
            ],
            "return": {
                "description": "<code>true</code> if given controller has a parent which is marked as selected,\n<code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.MarqueeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeActivator.js",
            "line": 329,
            "description": "Implemented to be notified about mouse up events.</br>",
            "itemtype": "method",
            "name": "onMouseUp",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.MarqueeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeActivator.js",
            "line": 352,
            "description": "Returns a controller suited for given event. This called by {{#crossLink \"JSG.graph.interaction.MarqueeActivator/onMouseUp:method\"}}{{/crossLink}}\nto implement a click through feature.",
            "itemtype": "method",
            "name": "getController",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "return": {
                "description": "The next selected controller or <code>undefined</code>.",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.graph.interaction.MarqueeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeActivator.js",
            "line": 376,
            "description": "A condition function to use for finding a suitable controller in \n{{#crossLink \"JSG.graph.interaction.MarqueeActivator/getController:method\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "_condition",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to check.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "location",
                    "description": "The current location relative to controller parent.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "<code>true</code> if given controller is suitable, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.MarqueeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeActivator.js",
            "line": 389,
            "description": "Checks the parent of given controller and returns it if it should be selected. If the parent controller should not\nbe selected, the given controller is returned.",
            "itemtype": "method",
            "name": "_checkParent",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to check the parent of.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "return": {
                "description": "Either the parent or the given controller.",
                "type": "JSG.graph.controller.ModelController"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.MarqueeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeActivator.js",
            "line": 412,
            "description": "Tries to find the next controller to be selected.",
            "itemtype": "method",
            "name": "findController",
            "params": [
                {
                    "name": "location",
                    "description": "The location to look for a suitable controller.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The next selected controller or <code>undefined</code>.",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.graph.interaction.MarqueeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeInteraction.js",
            "line": 44,
            "description": "Creates, if necessary, and returns the view to use as interaction feedback.",
            "itemtype": "method",
            "name": "_getFeedbackRect",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The feedback view.",
                "type": "JSG.graph.view.MarqueeFeedbackView"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.MarqueeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MarqueeInteraction.js",
            "line": 67,
            "description": "Performs the actual selection of {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s. This will select all items \nwhich are completely within the bounds of current feedback view.",
            "itemtype": "method",
            "name": "_doSelect",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.MarqueeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveActivator.js",
            "line": 23,
            "description": "Threshold which is used to activate {{#crossLink \"JSG.graph.interaction.MoveInteraction\"}}{{/crossLink}} when\nhandling {{#crossLink \"JSG.graph.interaction.MarqueeActivator/onMouseDrag:method\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "THRESHOLD",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.interaction.MoveActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveActivator.js",
            "line": 33,
            "description": "The unique key under which this activator is registered to {{#crossLink \"JSG.graph.interaction.GraphInteraction\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "KEY",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.interaction.MoveActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveActivator.js",
            "line": 55,
            "description": "Implemented to be notified about key down events.</br>",
            "itemtype": "method",
            "name": "onKeyDown",
            "params": [
                {
                    "name": "event",
                    "description": "The current key event.",
                    "type": "JSG.ui.events.KeyEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.MoveActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveActivator.js",
            "line": 83,
            "description": "Implemented to be notified about mouse down events.</br>",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.MoveActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveActivator.js",
            "line": 108,
            "description": "Implemented to be notified about mouse drag events.</br>",
            "itemtype": "method",
            "name": "onMouseDrag",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.MoveActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveAlignHelper.js",
            "line": 22,
            "description": "Returns the default <code>MoveAlignHelper</code> implementation.<br/>\nSubclasses can simply replace this method to globally register a customized <code>MoveAlignHelper</code>.",
            "itemtype": "method",
            "name": "getDefault",
            "return": {
                "description": "The global default <code>MoveAlignHelper</code> to use.",
                "type": "JSG.graph.interaction.MoveAlignHelper"
            },
            "class": "JSG.graph.interaction.MoveAlignHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveAlignHelper.js",
            "line": 35,
            "description": "Checks if a horizontal or vertical align should be done.",
            "itemtype": "method",
            "name": "doAlignHV",
            "params": [
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The current used ControllerViewer.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if a horizontal or vertical align should be done, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.MoveAlignHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveAlignHelper.js",
            "line": 46,
            "description": "Aligns given new position either horizontally or vertically.<br/>\nNote: this calls {{#crossLink \"JSG.graph.interaction.MoveAlignHelper/doAlignHV:method\"}}{{/crossLink}} to check if\nthis kind of alignment should be done.",
            "itemtype": "method",
            "name": "alignToHV",
            "params": [
                {
                    "name": "newposition",
                    "description": "The position to align.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "startpos",
                    "description": "The start position to use as reference for alignment.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The current used ControllerViewer.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The aligned position point.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.interaction.MoveAlignHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveAlignHelper.js",
            "line": 73,
            "description": "Aligns given feedback.<br/>\nThe alignment takes the current moveable setting of the {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s into \naccount which are referenced by inner {{#crossLink \"JSG.graph.feedback.Feedback\"}}{{/crossLink}}s, i.e. available via\n{{#crossLink \"JSG.graph.feedback.FeedbackView/getFeedbacks:method\"}}{{/crossLink}}. The moveable setting can be get and\nset by using the {{#crossLink \"JSG.graph.attr.ItemAttributes\"}}{{/crossLink}} of a GraphItem.",
            "itemtype": "method",
            "name": "alignFeedback",
            "params": [
                {
                    "name": "feedback",
                    "description": "The feedback to align.",
                    "type": "JSG.graph.feedback.FeedbackView"
                },
                {
                    "name": "startpos",
                    "description": "The start position to use as reference for alignment.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The current used ControllerViewer.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.MoveAlignHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveAlignHelper.js",
            "line": 131,
            "description": "Returns the offset of given point to specified BoundingBox.",
            "itemtype": "method",
            "name": "_getOffsetToBBox",
            "params": [
                {
                    "name": "point",
                    "description": "The point to get the offset for.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "offset",
                    "description": "A point to take the offset values.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "<code>true</code> if a valid offset could be determined, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.MoveAlignHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 24,
            "description": "Returns the currently registered SnapHelper object to use for aligning move feedback to visible snap-lines.",
            "itemtype": "method",
            "name": "getSnapHelper",
            "return": {
                "description": "The currently used SnapHelper object.",
                "type": "JSG.graph.interaction.SnapHelper"
            },
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 34,
            "description": "Sets a new SnapHelper object to use for aligning move feedback to visible snap-lines.",
            "itemtype": "method",
            "name": "setSnapHelper",
            "params": [
                {
                    "name": "snaphelper",
                    "description": "The new SnapHelper to use.",
                    "type": "JSG.graph.interaction.SnapHelper"
                }
            ],
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 44,
            "description": "Returns the currently registered Highlighter object used to highlight suitable move targets.",
            "itemtype": "method",
            "name": "getHighlighter",
            "return": {
                "description": "Returns the currently used Highlighter helper object.",
                "type": "JSG.graph.interaction.Highlighter"
            },
            "deprecated": true,
            "deprecationMessage": "Don't use. Subject to change!!",
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 55,
            "description": "Sets a new Highlighter object to use for highlighting suitable move targets.",
            "itemtype": "method",
            "name": "setHighlighter",
            "params": [
                {
                    "name": "highlighter",
                    "description": "The new Highlighter object to use.",
                    "type": "JSG.graph.interaction.Highlighter"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Don't use. Subject to change!!",
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 66,
            "description": "Returns the currently registered MoveAlignHelper object used to align move feedback.",
            "itemtype": "method",
            "name": "getAlignHelper",
            "return": {
                "description": "The registered MoveAlignHelper object used to align move feedback.",
                "type": "JSG.graph.interaction.MoveAlignHelper"
            },
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 76,
            "description": "Sets a new MoveAlignHelper object to use for aligning move feedback.",
            "itemtype": "method",
            "name": "setAlignHelper",
            "params": [
                {
                    "name": "alignhelper",
                    "description": "The new MoveAlignHelper object to use.",
                    "type": "JSG.graph.interaction.MoveAlignHelper"
                }
            ],
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 86,
            "description": "Sets the snap flag to turn on or to turn off snap alignment.",
            "itemtype": "method",
            "name": "setDoSnap",
            "params": [
                {
                    "name": "doIt",
                    "description": "Set to <code>true</code> to turn on snap alignment.",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 95,
            "description": "Sets the highlight flag to turn on or to turn off highlighting of target controllers.",
            "itemtype": "method",
            "name": "setDoHighlightTarget",
            "params": [
                {
                    "name": "doIt",
                    "description": "Set to <code>true</code> to turn on highlighting of target controllers.",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 104,
            "description": "Checks if given event defines a copy-on-move event.<br/>\nCurrently a copy-on-move event occurred if the <code>CTRL</code> key, but not the <code>ALT</code>, is pressed\nsimultaneously with the event.",
            "itemtype": "method",
            "name": "isCopyOnMoveEvent",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction which uses this delegate.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "event",
                    "description": "The event to check.",
                    "type": "JSG.ui.events.Event"
                }
            ],
            "return": {
                "description": "<code>true</code> if given event defines a copy-on-move event, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 152,
            "description": "Called by {{#crossLink \"JSG.graph.interaction.Delegate/updateFeedback:method\"}}{{/crossLink}} to align the feedback\naccording to the current grid settings",
            "itemtype": "method",
            "name": "alignToGrid",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction which uses this delegate.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The used ControllerViewer.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 171,
            "description": "Called by {{#crossLink \"JSG.graph.interaction.Delegate/updateFeedback:method\"}}{{/crossLink}} to add snap-lines to\nthe graph view and aligns given feedback to visible snap-lines.<br/>\nNote: this uses the registered {{#crossLink \"JSG.graph.interaction.SnapHelper\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "alignToSnapLines",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction which uses this delegate.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by interaction.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 207,
            "description": "Called by {{#crossLink \"JSG.graph.interaction.MoveDelegate/alignToSnapLines:method\"}}{{/crossLink}} to check if snap\nalignment should be done. Snap align is only performed if internal snap property is set to <code>true</code> via\n{{#crossLink \"JSG.graph.interaction.MoveDelegate/setDoSnap:method\"}}{{/crossLink}} and if\n{{#crossLink \"JSG.graph.interaction.SnapHelper/doSnap:method\"}}{{/crossLink}} returns <code>true</code> as well.\nAdditionally this method checks if the moved feedback is visible within current displayed graph region.<br/>",
            "itemtype": "method",
            "name": "doSnap",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction which uses this delegate.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by interaction.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if snap alignment should be done, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 235,
            "description": "Called by {{#crossLink \"JSG.graph.interaction.Delegate/updateFeedback:method\"}}{{/crossLink}} to align feedback on\nmove.<br/>\nNote: this uses the registered {{#crossLink \"JSG.graph.interaction.MoveAlignHelper\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "alignFeedback",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction which uses this delegate.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by interaction.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 250,
            "description": "Highlights a possible move target controller or a possible insert position. This may adds visual feedbacks to the\n{{#crossLink \"JSG.graph.view.LayerId/LAYOUTMARKER:property\"}}{{/crossLink}} or {{#crossLink \"JSG.graph.view.LayerId/TARGETCONTAINER:property\"}}{{/crossLink}}\nlayers of current {{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}}.<br/>",
            "itemtype": "method",
            "name": "highlightTargetController",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction which uses this delegate.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by interaction.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 278,
            "description": "Tries to find a suited move target controller.<br/>\nTo find a valid controller a condition function is used which should be returned by\n{{#crossLink \"JSG.graph.interaction.MoveDelegate/getFindCondition:method\"}}{{/crossLink}}.<br/>\n<b>Note:</b> the condition function object gets following additional properties set before it is called:<br/>\n<code>copy</code> a flag to indicate if current move is a copy-on-move<br/>\n<code>fbbox</code> the current {{#crossLink \"JSG.geometry.BoundingBox\"}}{{/crossLink}} of corresponding feedback<br/>\n<code>feedback</code> the corresponding {{#crossLink \"JSG.graph.feedback.FeedbackView\"}}{{/crossLink}}<br/>\n<code>fallback</code> can be set by condition function to specify a fallback target controller. By default it is set\nto {{#crossLink \"JSG.graph.controller.GraphController\"}}{{/crossLink}}.<br/><br/>",
            "itemtype": "method",
            "name": "findTargetController",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction which uses this delegate.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by interaction.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "A valid controller or <code>undefined</code>.",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 320,
            "description": "Tries to find an insert index for given position.<br/>\nPlease refer to {{#crossLink \"JSG.layoutFactory/getLayoutIndex:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "findLayoutIndex",
            "params": [
                {
                    "name": "position",
                    "description": "The insert location.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "viewer",
                    "description": "The currently used ControllerViewer.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "controller",
                    "description": "The controller to insert to.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "highlight",
                    "description": "Specify <code>true</code> to highlight any possible insert position, <code>false</code> otherwise.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The insert index.",
                "type": "Number"
            },
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 341,
            "description": "Checks if inner feedbacks of given feedback view can be moved.",
            "itemtype": "method",
            "name": "_isFeedbackMoveable",
            "params": [
                {
                    "name": "feedback",
                    "description": "The feedback view to check.",
                    "type": "JSG.graph.feedback.FeedbackView"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The currently used ControllerViewer.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if all inner feedbacks of given feedback view can be moved, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 371,
            "description": "Checks if given item can be moved.",
            "itemtype": "method",
            "name": "_isItemMoveable",
            "params": [
                {
                    "name": "item",
                    "description": "The item to check.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The currently used ControllerViewer.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if given item is suited move target, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 387,
            "description": "Returns a condition function used to find a suited move target controller. The returned function is called with currently\nvisited {{#crossLink \"JSG.graph.controller.ModelController\"}}{{/crossLink}} as only parameter. It should return\n<code>true</code> if passed controller is a possible move target and <code>false</code> otherwise.<br/>\n<b>Note:</b> the returned function object itself gets following additional properties set before it is called:<br/>\n<code>copy</code> a flag to indicate if current move is a copy-on-move<br/>\n<code>feedback</code> the corresponding {{#crossLink \"JSG.graph.feedback.FeedbackView\"}}{{/crossLink}}<br/>\n<code>fallback</code> can be set by condition function to specify a fallback target controller. By default it is set\nto {{#crossLink \"JSG.graph.controller.GraphController\"}}{{/crossLink}}.<br/><br/>\nSee {{#crossLink \"JSG.graph.interaction.MoveDelegate/findTargetController:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "findTargetController",
            "return": {
                "description": "A condition function which is used to find a valid move target controller.",
                "type": "Function"
            },
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 404,
            "description": "Default find condition function as returned by {{#crossLink \"JSG.graph.interaction.MoveDelegate/getFindCondition:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "_targetCondition",
            "params": [
                {
                    "name": "controller",
                    "description": "The current controller to check.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "return": {
                "description": "<code>true</code> if given controller is suited as a move target, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 453,
            "description": "Checks if given item is suited move target.",
            "itemtype": "method",
            "name": "_isSuitedTarget",
            "params": [
                {
                    "name": "item",
                    "description": "The item to check.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "<code>true</code> if given item is suited move target, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 541,
            "description": "Checks if given item can be moved.",
            "itemtype": "method",
            "name": "_isMoveable",
            "params": [
                {
                    "name": "item",
                    "description": "The item to check.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "viewer",
                    "description": "The currently used ControllerViewer.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if given item can be moved, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 560,
            "description": "Checks if given item itself or one of its parent is in current selection and therefore moved by this interaction.",
            "itemtype": "method",
            "name": "_isMoved",
            "params": [
                {
                    "name": "item",
                    "description": "The item to check.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if given item is moved by this interaction, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 578,
            "description": "Creates a new copy-on-move command for given feedback view.",
            "itemtype": "method",
            "name": "createCopyOnMoveCmd",
            "params": [
                {
                    "name": "feedback",
                    "description": "The feedback to create the copy-on-move command for.",
                    "type": "JSG.graph.feedback.FeedbackView"
                },
                {
                    "name": "target",
                    "description": "The parent to copy to. Specify <code>undefined</code> if parent should not change.",
                    "type": "JSG.graph.model.GraphItem",
                    "optional": true
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by interaction.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "Command to perform the copy-on-move.",
                "type": "JSG.graph.command.Compound"
            },
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 594,
            "description": "Creates a new move command for given feedback which represents a moved {{#crossLink \"JSG.graph.model.LineConnection\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "createMoveEdgeCmd",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction which uses this delegate.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "feedback",
                    "description": "The edge feedback to create the move command for.",
                    "type": "JSG.graph.feedback.Feedback"
                },
                {
                    "name": "target",
                    "description": "The parent to move to. Specify <code>undefined</code> if parent should not change.",
                    "type": "JSG.graph.model.GraphItem",
                    "optional": true
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by interaction.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "Command to perform the move.",
                "type": "JSG.graph.command.Compound"
            },
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 627,
            "description": "Creates a new move command for given feedback.",
            "itemtype": "method",
            "name": "createMoveItemCmd",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction which uses this delegate.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "feedback",
                    "description": "The feedback to create the move command for.",
                    "type": "JSG.graph.feedback.Feedback"
                },
                {
                    "name": "target",
                    "description": "The parent to move to. Specify <code>undefined</code> if parent should not change.",
                    "type": "JSG.graph.model.GraphItem",
                    "optional": true
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by interaction.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "Command to perform the move.",
                "type": "JSG.graph.command.Compound"
            },
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveDelegate.js",
            "line": 675,
            "description": "Creates a new <code>Command</code> or <code>CompoundCommand</code> from the list of given commands.",
            "itemtype": "method",
            "name": "_createCommand",
            "params": [
                {
                    "name": "cmds",
                    "description": "A list of commands.",
                    "type": "Array"
                },
                {
                    "name": "reverseUndo",
                    "description": "Set to <code>true</code> to traverse Commands in reverse order during undo.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "JSG.graph.command.Compound|JSG.graph.command.CompoundCommand"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.MoveDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveInteraction.js",
            "line": 27,
            "description": "Threshold which defines when an interaction is recognized as a move.",
            "itemtype": "property",
            "name": "MOVE_THRESHOLD",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.interaction.MoveInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveInteraction.js",
            "line": 47,
            "description": "Sets the move delegate for this interaction.</br>",
            "itemtype": "method",
            "name": "setDelegate",
            "params": [
                {
                    "name": "delegate",
                    "description": "A delegate object to customize interaction.",
                    "type": "JSG.graph.interaction.MoveDelegate"
                }
            ],
            "class": "JSG.graph.interaction.MoveInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveInteraction.js",
            "line": 59,
            "description": "Returns the used feedback view.",
            "itemtype": "method",
            "name": "getFeedback",
            "return": {
                "description": "The feedback view used by this interaction or <code>undefined</code>.",
                "type": "JSG.graph.feedback.FeedbackView"
            },
            "class": "JSG.graph.interaction.MoveInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveInteraction.js",
            "line": 75,
            "description": "Called to create a move feedback view.<br/>\nNote: this method calls {{#crossLink \"JSG.graph.interaction.MoveDelegate/createFeedback:method\"}}{{/crossLink}}<br/>",
            "itemtype": "method",
            "name": "_createMoveFeedback",
            "params": [
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The used ControllerViewer.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The feedback view to visualize the move interaction.",
                "type": "JSG.graph.feedback.FeedbackView"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.MoveInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveInteraction.js",
            "line": 160,
            "description": "Called to update move feedback view.<br/>\nNote: this method calls following delegate methods:<br/>\n{{#crossLink \"JSG.graph.interaction.MoveDelegate/setDoSnap:method\"}}{{/crossLink}}<br/>\n{{#crossLink \"JSG.graph.interaction.MoveDelegate/setDoHighlightTarget:method\"}}{{/crossLink}}<br/>\n{{#crossLink \"JSG.graph.interaction.MoveDelegate/updateFeedback:method\"}}{{/crossLink}}<br/>",
            "itemtype": "method",
            "name": "_moveFeedback",
            "params": [
                {
                    "name": "position",
                    "description": "The location to move to.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The used ControllerViewer.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.MoveInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveInteraction.js",
            "line": 303,
            "description": "Called on finish to perform the move.<br/>\nNote: this method calls {{#crossLink \"JSG.graph.interaction.MoveDelegate/createCommand:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "_finishMove",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction which uses this delegate.",
                    "type": "JSG.graph.interaction.Interaction"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The used ControllerViewer.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.MoveInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\MoveInteraction.js",
            "line": 322,
            "description": "Checks if given event defines a copy-on-move event.<br/>\nNote: this method calls {{#crossLink \"JSG.graph.interaction.MoveDelegate/isCopyOnMoveEvent:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "isCopyOnMoveEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The event to check.",
                    "type": "JSG.ui.events.Event"
                }
            ],
            "return": {
                "description": "<code>true</code> if given event defines a copy-on-move event, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.MoveInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\PanInteraction.js",
            "line": 61,
            "description": "The unique key under which this activator is registered to {{#crossLink \"JSG.graph.interaction.GraphInteraction\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "KEY",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.interaction.PanInteraction.Activator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\PanInteraction.js",
            "line": 72,
            "description": "Implemented to be notified about pan start events.</br>\nThis will activate the corresponding {{#crossLink \"JSG.graph.interaction.PanInteraction\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "onPanStart",
            "params": [
                {
                    "name": "event",
                    "description": "The current gesture event.",
                    "type": "JSG.ui.events.GestureEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.PanInteraction.Activator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\PinchInteraction.js",
            "line": 55,
            "description": "The unique key under which this activator is registered to {{#crossLink \"JSG.graph.interaction.GraphInteraction\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "KEY",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.interaction.PinchInteraction.Activator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\PinchInteraction.js",
            "line": 68,
            "description": "Implemented to be notified about pinch start events.</br>\nThis will activate the corresponding {{#crossLink \"JSG.graph.interaction.PinchInteraction\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "onPinchStart",
            "params": [
                {
                    "name": "event",
                    "description": "The current gesture event.",
                    "type": "JSG.ui.events.GestureEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.PinchInteraction.Activator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ReshapeActivator.js",
            "line": 22,
            "description": "The unique key under which this activator is registered to {{#crossLink \"JSG.graph.interaction.GraphInteraction\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "KEY",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.interaction.ReshapeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ReshapeActivator.js",
            "line": 36,
            "description": "Implemented to be notified about mouse down events.</br>\nThis will activate the corresponding {{#crossLink \"JSG.graph.interaction.ReshapeInteraction\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.ReshapeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ReshapeInteraction.js",
            "line": 158,
            "description": "Creates the reshape command to execute.",
            "itemtype": "method",
            "name": "createCommand",
            "params": [
                {
                    "name": "offset",
                    "description": "The offset between start and current event. Usually the difference between start and current location.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "selectedController",
                    "description": "The currently selected controller.",
                    "type": "JSG.graph.controller.GraphItemController"
                }
            ],
            "return": {
                "description": "An instance of a ReshapeItemCommand to be executed or <code>undefined</code>.",
                "type": "JSG.graph.command.ReshapeItemCommand"
            },
            "class": "JSG.graph.interaction.ReshapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ReshapeInteraction.js",
            "line": 177,
            "description": "Determines the new value for the reshape coordinate as point.",
            "itemtype": "method",
            "name": "getReshapeValues",
            "params": [
                {
                    "name": "offset",
                    "description": "The offset between start and current event. Usually the difference between start and current location.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "item",
                    "description": "The current GraphItem to deteremine the reshape value for.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "The new reshape coordinate value as point or <code>undefined</code>.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.interaction.ReshapeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeActivator.js",
            "line": 21,
            "description": "The unique key under which this activator is registered to {{#crossLink \"JSG.graph.interaction.GraphInteraction\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "KEY",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.interaction.ResizeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeActivator.js",
            "line": 35,
            "description": "Implemented to be notified about mouse down events.</br>",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.ResizeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeActivator.js",
            "line": 57,
            "description": "Should create the resize interaction to activate or simply return <code>undefined</code> if resize is not possible.\nFor single selection this method calls the accompanying methods \n{{#crossLink \"JSG.graph.interaction.ResizeActivator/createNodeResizeInteraction:method\"}}{{/crossLink}} or\n{{#crossLink \"JSG.graph.interaction.ResizeActivator/createEdgeResizeInteraction:method\"}}{{/crossLink}} respectively.<br/>\nSubclasses might overwrite to implement custom behavior.",
            "itemtype": "method",
            "name": "createResizeInteraction",
            "params": [
                {
                    "name": "handle",
                    "description": "The active handle of type <code>RESIZE</code>.",
                    "type": "JSG.graph.interaction.ActionHandle"
                },
                {
                    "name": "viewer",
                    "description": "The controller viewer on which the interaction happens.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator belongs.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "return": {
                "description": "The resize interaction to activate or <code>undefined</code>.",
                "type": "JSG.graph.interaction.Interaction"
            },
            "class": "JSG.graph.interaction.ResizeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeActivator.js",
            "line": 82,
            "description": "Creates a resize interaction for a single {{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}} or returns \n<code>undefined</code> if resize is not possible.<br/>\nSubclasses might overwrite to implement custom behavior.",
            "itemtype": "method",
            "name": "createNodeResizeInteraction",
            "params": [
                {
                    "name": "selection",
                    "description": "The currently selected node controller.",
                    "type": "JSG.graph.controller.NodeController"
                },
                {
                    "name": "handle",
                    "description": "The active handle of type <code>RESIZE</code>.",
                    "type": "JSG.graph.interaction.ActionHandle"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator belongs.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "return": {
                "description": "The resize interaction to activate or <code>undefined</code>.",
                "type": "JSG.graph.interaction.Interaction"
            },
            "class": "JSG.graph.interaction.ResizeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeActivator.js",
            "line": 104,
            "description": "Creates a resize interaction for a single {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}} or returns \n<code>undefined</code> if resize is not possible.<br/>\nSubclasses might overwrite to implement custom behavior.",
            "itemtype": "method",
            "name": "createNodeResizeInteraction",
            "params": [
                {
                    "name": "selection",
                    "description": "The currently selected edge controller.",
                    "type": "JSG.graph.controller.ConnectionController"
                },
                {
                    "name": "handle",
                    "description": "The active handle of type <code>RESIZE</code>.",
                    "type": "JSG.graph.interaction.ActionHandle"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator belongs.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "return": {
                "description": "The resize interaction to activate or <code>undefined</code>.",
                "type": "JSG.graph.interaction.Interaction"
            },
            "class": "JSG.graph.interaction.ResizeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeActivator.js",
            "line": 131,
            "description": "Creates a special resize handle which additionally stores a given point index.<br/>\nThis handle is used for resizing an {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}} to distinguish which side is\ndragged.",
            "itemtype": "method",
            "name": "_createArrowHandle",
            "params": [
                {
                    "name": "pointIndex",
                    "description": "The edge point which was dragged. Usually the index of edge source or target point.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A new SelectionHandle instance.",
                "type": "JSG.graph.view.selection.SelectionHandle"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.ResizeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeActivator.js",
            "line": 148,
            "description": "Creates a new resize interaction for given edge. The kind of resize interaction depends on the shape of given edge.\nI.e. for an orthogonal edge shape a ResizeOrthoEdgeInteraction is created and a ResizeEdgeInteraction for all other\nshape kinds.",
            "itemtype": "method",
            "name": "_newEdgeResizeInteraction",
            "params": [
                {
                    "name": "edge",
                    "description": "The Edge to resize.",
                    "type": "JSG.graph.model.Edge"
                },
                {
                    "name": "handle",
                    "description": "The SelectionHandle to use for resize.",
                    "type": "JSG.graph.view.selection.SelectionHandle"
                }
            ],
            "return": {
                "description": "The ResizeInteraction\nto use for resizing given edge.",
                "type": "JSG.graph.interaction.ResizeOrthoEdgeInteraction|JSG.graph.interaction.ResizeEdgeInteraction"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.ResizeActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeEdgeInteraction.js",
            "line": 39,
            "description": "Checks if either start or end point of resized Edge is dragged.",
            "itemtype": "method",
            "name": "draggedSourceOrTarget",
            "return": {
                "description": "<code>true</code> if either start or end point is dragged, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.ResizeEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeEdgeInteraction.js",
            "line": 48,
            "description": "Checks if start point of resized Edge is dragged.",
            "itemtype": "method",
            "name": "draggedSourc",
            "return": {
                "description": "<code>true</code> if start point is dragged, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.ResizeEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeEdgeInteraction.js",
            "line": 57,
            "description": "Checks if end point of resized Edge is dragged.",
            "itemtype": "method",
            "name": "draggedTarget",
            "return": {
                "description": "<code>true</code> if end point is dragged, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.ResizeEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeEdgeInteraction.js",
            "line": 98,
            "description": "Adds visual feedbacks for any possible {{#crossLink \"JSG.graph.model.Port\"}}{{/crossLink}}s this \n{{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}} can attach to.<br/>\nThe visual feedbacks are added to the {{#crossLink \"JSG.graph.view.LayerId/PORTS:property\"}}{{/crossLink}} layer. If\nan attach is possible the corresponding port feedback view is returned.",
            "itemtype": "method",
            "name": "showPossiblePortAt",
            "params": [
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The feedback view of the port to which the edge might connect.",
                "type": "JSG.graph.view.PositionFeedbackView"
            },
            "class": "JSG.graph.interaction.ResizeEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeEdgeInteraction.js",
            "line": 127,
            "description": "Creates the command to resize selected {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}.</br>\nNote: this might create an attach or detach command instead. See\n{{#crossLink \"JSG.graph.interaction.ResizeEdgeInteraction/createAttachCommand:method\"}}{{/crossLink}} and \n{{#crossLink \"JSG.graph.interaction.ResizeEdgeInteraction/createDetachCommand:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "createCommand",
            "params": [
                {
                    "name": "offset",
                    "description": "The offset between start and current event. Usually the difference between start and current location.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "selectedController",
                    "description": "The currently selected connection controller.",
                    "type": "JSG.graph.controller.ConnectionController"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "A command to be executed or <code>undefined</code>",
                "type": "JSG.graph.command.Command"
            },
            "class": "JSG.graph.interaction.ResizeEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeEdgeInteraction.js",
            "line": 164,
            "description": "Creates a CompoundCommand to perform an attach for selected {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}.<br/>\nBesides the actual attach this involves a resize and a possible Port creation too.",
            "itemtype": "method",
            "name": "createAttachCommand",
            "params": [
                {
                    "name": "selectedController",
                    "description": "The currently selected connection controller.",
                    "type": "JSG.graph.controller.ConnectionController"
                },
                {
                    "name": "port",
                    "description": "The port to attach to.",
                    "type": "JSG.graph.model.Port"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                }
            ],
            "return": {
                "description": "The CompoundCommand to perform attach.",
                "type": "JSG.graph.command.CompoundCommand"
            },
            "class": "JSG.graph.interaction.ResizeEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeEdgeInteraction.js",
            "line": 224,
            "description": "Creates a CompoundCommand to perform a detach for selected {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}.<br/>\nBesides the detach this involves a resize too.",
            "itemtype": "method",
            "name": "createDetachCommand",
            "params": [
                {
                    "name": "selectedController",
                    "description": "The currently selected connection controller.",
                    "type": "JSG.graph.controller.ConnectionController"
                },
                {
                    "name": "port",
                    "description": "The port to detach from.",
                    "type": "JSG.graph.model.Port"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                }
            ],
            "return": {
                "description": "The CompoundCommand to perform detach.",
                "type": "JSG.graph.command.CompoundCommand"
            },
            "class": "JSG.graph.interaction.ResizeEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeEdgeInteraction.js",
            "line": 242,
            "description": "Creates a Command to perform the resize for selected {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}.<br/>\nFor Edges a resize means to set either its start or end point to a new location.",
            "itemtype": "method",
            "name": "createResizeCommand",
            "params": [
                {
                    "name": "selectedController",
                    "description": "The currently selected connection controller.",
                    "type": "JSG.graph.controller.ConnectionController"
                },
                {
                    "name": "location",
                    "description": "The new position for start or end point.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                }
            ],
            "return": {
                "description": "The resize command.",
                "type": "JSG.graph.command.SetLinePointAtCommand"
            },
            "class": "JSG.graph.interaction.ResizeEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeInteraction.js",
            "line": 176,
            "description": "Creates the resize command to execute.",
            "itemtype": "method",
            "name": "createCommand",
            "params": [
                {
                    "name": "offset",
                    "description": "The offset between start and current event. Usually the difference between start and current location.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "selectedController",
                    "description": "The currently selected controller.",
                    "type": "JSG.graph.controller.GraphItemController"
                }
            ],
            "return": {
                "description": "An instance of a ResizeItemCommand to be executed.",
                "type": "JSG.graph.command.ResizeItemCommand"
            },
            "class": "JSG.graph.interaction.ResizeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeInteraction.js",
            "line": 259,
            "description": "Updates this structure using actualized BoundingBox of current selection.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "selbbox",
                    "description": "The BoundingBox of current selection.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "class": "JSG.graph.interaction.FeedbackStructure",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeInteraction.js",
            "line": 310,
            "description": "Custom <code>snapToBBox</code> implementation called by <code>ResizeInteraction</code>.<br/>\nStores provided BoundingBox and resize handle index.<br/>\nSee {{#crossLink \"JSG.graph.interaction.SnapHelper/snapToBBox:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "snapToBBox",
            "params": [
                {
                    "name": "bbox",
                    "description": "The <code>BoundingBox</code> to align.",
                    "type": "JSG.geometry.BoundingBox"
                },
                {
                    "name": "index",
                    "description": "The index of the used resize handle.",
                    "type": "Number"
                },
                {
                    "name": "viewer",
                    "description": "The currently used ControllerViewer.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse for returned offset. If not provided a new one will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The align offset.",
                "type": "JSG.geometry.Point"
            },
            "since": "1.6.0",
            "class": "JSG.graph.interaction.ResizeSnapHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeInteraction.js",
            "line": 340,
            "description": "Filters given list of snap lines in case of an unrotated selection.",
            "itemtype": "method",
            "name": "_filter",
            "params": [
                {
                    "name": "lines",
                    "description": "The snap-lines to filter.",
                    "type": "Array"
                },
                {
                    "name": "rect",
                    "description": "The resized <code>Rectangle</code> to snap to.",
                    "type": "JSG.geometry.Rectangle"
                },
                {
                    "name": "viewer",
                    "description": "The currently used ControllerViewer.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The list of snap-lines which match filter.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "since": "1.6.0",
            "class": "JSG.graph.interaction.ResizeSnapHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeInteraction.js",
            "line": 371,
            "description": "Filters given list of snap lines in case of a rotated selection.",
            "itemtype": "method",
            "name": "_filterRotated",
            "params": [
                {
                    "name": "lines",
                    "description": "The snap-lines to filter.",
                    "type": "Array"
                },
                {
                    "name": "rect",
                    "description": "The resized <code>Rectangle</code> to snap to.",
                    "type": "JSG.geometry.Rectangle"
                },
                {
                    "name": "viewer",
                    "description": "The currently used ControllerViewer.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The list of snap-lines which match filter.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "since": "1.6.0",
            "class": "JSG.graph.interaction.ResizeSnapHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeInteraction.js",
            "line": 392,
            "description": "Returns the pivot of the snap-line to snap to. <code>undefined</code> is returned if no pivot could be determined.",
            "itemtype": "method",
            "name": "_getSnapPivot",
            "params": [
                {
                    "name": "rect",
                    "description": "The resized <code>Rectangle</code> to snap to.",
                    "type": "JSG.geometry.Rectangle"
                },
                {
                    "name": "index",
                    "description": "The index of the used resize handle.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The pivot of the snap-line to snap to or <code>undefined</code>.",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "since": "1.6.0",
            "class": "JSG.graph.interaction.ResizeSnapHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeLineNodeInteraction.js",
            "line": 35,
            "description": "Creates a new command which sets the points of selected {{#crossLink \"JSG.graph.model.LineNode\"}}{{/crossLink}}.</br>",
            "itemtype": "method",
            "name": "createCommand",
            "params": [
                {
                    "name": "offset",
                    "description": "The offset between start and current event. Usually the difference between start and current location.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "selectedController",
                    "description": "The currently selected controller.",
                    "type": "JSG.graph.controller.GraphItemController"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The SetShapePointsCommand to set the LineNode points.",
                "type": "JSG.graph.command.SetShapePointsCommand"
            },
            "class": "JSG.graph.interaction.ResizeLineNodeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeOrthoEdgeInteraction.js",
            "line": 68,
            "description": "Creates the internal delegate to perform a simple resize task without adding new points.<br/>\nNote: although no points are added a resize can remove points! This is the case e.g. if three or more points are on\nthe same line. In this case the <q>inner</q> points are removed.",
            "itemtype": "method",
            "name": "createResizeDelegate",
            "return": {
                "description": "The delegate to use to perform resize.",
                "type": "JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate"
            },
            "class": "JSG.graph.interaction.ResizeOrthoEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeOrthoEdgeInteraction.js",
            "line": 79,
            "description": "Creates the internal delegate to perform a resize task which adds new points to the edge.<br/>\nNote: these points are never added before the start-point or after the end-point.",
            "itemtype": "method",
            "name": "createAddPointsDelegate",
            "return": {
                "description": "The delegate to use to perform resize.",
                "type": "JSG.graph.interaction.ResizeOrthoEdgeInteraction.AddPointsDelegate"
            },
            "class": "JSG.graph.interaction.ResizeOrthoEdgeInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeOrthoEdgeInteraction.js",
            "line": 128,
            "description": "The snap threshold to specify when a dragged point <q>snaps</q> to its neighbor points. This means that afterwards\nthie points are on one line.",
            "itemtype": "property",
            "name": "SNAP_THRESHOLD",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.interaction.ResizeDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeOrthoEdgeInteraction.js",
            "line": 138,
            "description": "Initializes this delegate.",
            "itemtype": "method",
            "name": "initWith",
            "params": [
                {
                    "name": "feedback",
                    "description": "The feedback of corresponding edge.",
                    "type": "JSG.graph.feedback.Feedback"
                },
                {
                    "name": "index",
                    "description": "The index of dragged point.",
                    "type": "Number"
                },
                {
                    "name": "location",
                    "description": "The current event location.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.interaction.ResizeDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeOrthoEdgeInteraction.js",
            "line": 191,
            "description": "Updates the given edge feedback.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "feedback",
                    "description": "The feedback of corresponding edge.",
                    "type": "JSG.graph.feedback.Feedback"
                },
                {
                    "name": "location",
                    "description": "The current event location.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.interaction.ResizeDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeOrthoEdgeInteraction.js",
            "line": 259,
            "description": "Called if a port feedback is currently visible. This causes the feedback to visually attach to this port feedback.",
            "itemtype": "method",
            "name": "showedPortFeedback",
            "params": [
                {
                    "name": "portFeedback",
                    "description": "The feedback view of the port to which this edge might connect.",
                    "type": "JSG.graph.view.PositionFeedbackView"
                },
                {
                    "name": "feedback",
                    "description": "The feedback of corresponding edge.",
                    "type": "JSG.graph.feedback.Feedback"
                }
            ],
            "class": "JSG.graph.interaction.ResizeDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeOrthoEdgeInteraction.js",
            "line": 323,
            "description": "Called if a port feedback was removed. This causes the feedback to visually detach from port feedback.",
            "itemtype": "method",
            "name": "hidePortFeedback",
            "params": [
                {
                    "name": "feedback",
                    "description": "The feedback of corresponding edge.",
                    "type": "JSG.graph.feedback.Feedback"
                }
            ],
            "class": "JSG.graph.interaction.ResizeDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeOrthoEdgeInteraction.js",
            "line": 340,
            "description": "Detach the feedback edge from its source port.",
            "itemtype": "method",
            "name": "detachFromSourcePort",
            "params": [
                {
                    "name": "edge",
                    "description": "The feedback edge.",
                    "type": "JSG.graph.model.Edge"
                }
            ],
            "class": "JSG.graph.interaction.ResizeDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeOrthoEdgeInteraction.js",
            "line": 358,
            "description": "Detach the feedback edge from its target port.",
            "itemtype": "method",
            "name": "detachFromTargetPort",
            "params": [
                {
                    "name": "edge",
                    "description": "The feedback edge.",
                    "type": "JSG.graph.model.Edge"
                }
            ],
            "class": "JSG.graph.interaction.ResizeDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeOrthoEdgeInteraction.js",
            "line": 372,
            "description": "Convenience method to return a wrapped coordinate if given one is a CoordinateProxy.",
            "itemtype": "method",
            "name": "_getCoordinate",
            "params": [
                {
                    "name": "coord",
                    "description": "The CoordinateProxy to get the coordinate of or the coordinate itself.",
                    "type": "JSG.graph.Coordinate | JSG.graph.CoordinateProxy"
                }
            ],
            "return": {
                "description": "Either the given coordinate or the wrapped coordinate if given one is a CoordinateProxy.",
                "type": "JSG.graph.Coordinate"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.ResizeDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeOrthoEdgeInteraction.js",
            "line": 383,
            "description": "Removes a formerly added point at specified index of given edge. These points might be added by the underlying\n{{#crossLink \"JSG.graph.model.shapes.OrthoLineShapeLayouter\"}}{{/crossLink}} during the resize interaction, e.g.\nafter an attach.",
            "itemtype": "method",
            "name": "_removeAddedPointsAt",
            "params": [
                {
                    "name": "idx",
                    "description": "The index of the point to remove.",
                    "type": "Number"
                },
                {
                    "name": "edge",
                    "description": "The feedback edge.",
                    "type": "JSG.graph.model.Edge"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.ResizeDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeOrthoEdgeInteraction.js",
            "line": 407,
            "description": "Checks if a resize command can be created for given feedback.<br/>\nDefault implementation simply returns <code>true</code> to signal that the delegate can create a resize command.",
            "itemtype": "method",
            "name": "createCommand",
            "params": [
                {
                    "name": "feedback",
                    "description": "The feedback of corresponding edge.",
                    "type": "JSG.graph.feedback.Feedback"
                }
            ],
            "return": {
                "description": "<code>true</code> if this delegate creates a resize command, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.ResizeDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeOrthoEdgeInteraction.js",
            "line": 418,
            "description": "Creates the resize command.",
            "itemtype": "method",
            "name": "createCommandFrom",
            "params": [
                {
                    "name": "feedback",
                    "description": "The feedback of corresponding edge.",
                    "type": "JSG.graph.feedback.Feedback"
                },
                {
                    "name": "selectedController",
                    "description": "The currently selected connection controller.",
                    "type": "JSG.graph.controller.ConnectionController"
                },
                {
                    "name": "location",
                    "description": "The current event location.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "portFeedback",
                    "description": "The feedback view of the port to which this edge connect.",
                    "type": "JSG.graph.view.PositionFeedbackView"
                }
            ],
            "return": {
                "description": "The resize command or <code>undefined</code>.",
                "type": "JSG.graph.command.CompoundCommand"
            },
            "class": "JSG.graph.interaction.ResizeDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeOrthoEdgeInteraction.js",
            "line": 477,
            "description": "Creates a new {{#crossLink \"JSG.graph.command.SetLayoutAttributeCommand\"}}{{/crossLink}} to disable automatic\nlayout behavior for given line.",
            "itemtype": "method",
            "name": "_addDisableAutoLayoutCommand",
            "params": [
                {
                    "name": "cmd",
                    "description": "The CompoundCommand to add created command to.",
                    "type": "JSG.graph.command.CompoundCommand"
                },
                {
                    "name": "line",
                    "description": "The line to disable auto-layout for.",
                    "type": "JSG.graph.model.LineConnection"
                }
            ],
            "class": "JSG.graph.interaction.ResizeDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ResizeOrthoEdgeInteraction.js",
            "line": 493,
            "description": "Called by main interaction to deactivate this delegate before it is removed. Good place to perform any clean up tasks.",
            "itemtype": "method",
            "name": "deactivate",
            "class": "JSG.graph.interaction.ResizeDelegate",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\RotateActivator.js",
            "line": 21,
            "description": "The unique key under which this activator is registered to {{#crossLink \"JSG.graph.interaction.GraphInteraction\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "KEY",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.interaction.RotateActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\RotateActivator.js",
            "line": 35,
            "description": "Implemented to be notified about mouse down events.</br>",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.RotateActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\RotateActivator.js",
            "line": 52,
            "description": "Implemented to be notified about rotate start gesture events.</br>\nThis will activate the corresponding {{#crossLink \"JSG.graph.interaction.RotateInteraction\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "onRotateStart",
            "params": [
                {
                    "name": "event",
                    "description": "The current gesture event.",
                    "type": "JSG.ui.events.GestureEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.RotateActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\RotateActivator.js",
            "line": 67,
            "description": "Creates a new {{#crossLink \"JSG.graph.interaction.RotateInteraction\"}}{{/crossLink}} instance and activates it.",
            "itemtype": "method",
            "name": "_activate",
            "params": [
                {
                    "name": "event",
                    "description": "The current event which triggers interaction activation.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.RotateActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\RotateInteraction.js",
            "line": 24,
            "description": "The rotation step value in degrees.",
            "itemtype": "property",
            "name": "_ROTATION_STEP",
            "type": "{Number}",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.RotateInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\RotateInteraction.js",
            "line": 140,
            "description": "Creates a general rotate command for the GraphItem which is specified by given selected controller.<br/>\nSee {{#crossLink \"JSG.graph.interaction.RotateInteraction/_rotateConnectionCmd\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "_rotateItemCmd",
            "params": [
                {
                    "name": "selectedController",
                    "description": "The controller of the item to rotate.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "angle",
                    "description": "The rotation angle in radiant.",
                    "type": "Number"
                },
                {
                    "name": "pin",
                    "description": "The pin location to rotate around.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The rotation command to use.",
                "type": "JSG.graph.command.RotateItemCommand"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.RotateInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\RotateInteraction.js",
            "line": 157,
            "description": "Creates a rotate command for the connection which is specified by given selected controller.<br/>\nSee {{#crossLink \"JSG.graph.interaction.RotateInteraction/_rotateConnectionCmd\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "_rotateConnectionCmd",
            "params": [
                {
                    "name": "selectedController",
                    "description": "The controller of the item to rotate.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "angle",
                    "description": "The rotation angle in radiant.",
                    "type": "Number"
                },
                {
                    "name": "pin",
                    "description": "The pin location to rotate around.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The rotation command to use.",
                "type": "JSG.graph.command.RotateItemCommand"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.RotateInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\RotateInteraction.js",
            "line": 177,
            "description": "Translates the given pin location from Graph coordinate system to the coordinate system of given items parent.",
            "itemtype": "method",
            "name": "_translatePin",
            "params": [
                {
                    "name": "pin",
                    "description": "The pin location to translate.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "item",
                    "description": "The item to translate the pin to.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "The translated pin.",
                "type": "JSG.geometry.Point"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.RotateInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SelectionChecker.js",
            "line": 35,
            "description": "Checks if given controller represents a {{#crossLink \"JSG.graph.model.TextNode\"}}{{/crossLink}} and might returns \nits parent controller which should be selected first.",
            "itemtype": "method",
            "name": "_checkTextSelection",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to be selected.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "viewer",
                    "description": "The controller viewer on which the interaction happened.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The passed controller or a different one which should be selected instead.",
                "type": "JSG.graph.controller.ModelController"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.SelectionChecker",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SelectionChecker.js",
            "line": 63,
            "description": "Traverses the hierarchy of given controller up to its {{#crossLink \"JSG.graph.controller.GraphController\"}}{{/crossLink}}\nand returns the first {{#crossLink \"JSG.graph.controller.GroupController\"}}{{/crossLink}} which is found.\nIf no group is within the controller hierarchy <code>undefined</code> is returned.",
            "itemtype": "method",
            "name": "getGroup",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller check its hierarchy.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "return": {
                "description": "The first <code>GroupController</code> found within controller hierarchy\nor <code>undefined</code>.",
                "type": "JSG.graph.controller.GroupController"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.SelectionChecker",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SelectionChecker.js",
            "line": 81,
            "description": "Checks given controller if it has a group parent which might be selected first.",
            "itemtype": "method",
            "name": "_checkGroupSelection",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to be selected.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "viewer",
                    "description": "The controller viewer on which the interaction happened.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The passed controller or a {{#crossLink \"JSG.graph.controller.GroupController\"}}{{/crossLink}}\nto select.",
                "type": "JSG.graph.controller.ModelController"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.SelectionChecker",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SelectionChecker.js",
            "line": 106,
            "description": "Checks if given controller is a valid selection. If it is not another controller is returned which should be\nselected instead.",
            "itemtype": "method",
            "name": "checkSingle",
            "params": [
                {
                    "name": "selection",
                    "description": "The controller to be selected.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "viewer",
                    "description": "The currently active controller viewer.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "Either the passed controller if it is valid or another controller\nwhich should be selected instead.",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.graph.interaction.SelectionChecker",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SelectionChecker.js",
            "line": 120,
            "description": "Checks a list of controllers. The given list might be adjusted depending on the contained controllers.<br/>\nDefault implementation simply returns given list.",
            "itemtype": "method",
            "name": "checkMulti",
            "params": [
                {
                    "name": "selection",
                    "description": "A list of controllers to check.",
                    "type": "Array"
                },
                {
                    "name": "viewer",
                    "description": "The currently active controller viewer.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "A possible adjusted list of controllers to select.",
                "type": "Array"
            },
            "deprecated": true,
            "deprecationMessage": "Currently unused and therefore in review!",
            "class": "JSG.graph.interaction.SelectionChecker",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SelectionChecker.js",
            "line": 133,
            "description": "Traverses the hierarchy of given controller up to its {{#crossLink \"JSG.graph.controller.GraphController\"}}{{/crossLink}}\nand returns the first {{#crossLink \"JSG.graph.controller.GroupController\"}}{{/crossLink}} which is found.\nIf no group is within the controller hierarchy <code>undefined</code> is returned.",
            "itemtype": "method",
            "name": "getGroup",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller check its hierarchy.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "return": {
                "description": "The first <code>GroupController</code> found within controller hierarchy\nor <code>undefined</code>.",
                "type": "JSG.graph.controller.GroupController"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.SelectionChecker",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SelectionChecker.js",
            "line": 154,
            "description": "Returns the default <code>SelectionChecker</code> implementation used within various interactions. Currently only \n<code>Group</code> or <code>TextNode</code> selections are verified and possibly adjusted.<br/>\nCustom applications can simply replace this method to return a customized <code>SelectionChecker</code>.",
            "itemtype": "method",
            "name": "getDefault",
            "return": {
                "description": "The default <code>SelectionChecker</code> to use.",
                "type": "JSG.graph.interaction.SelectionChecker"
            },
            "static": 1,
            "class": "JSG.graph.interaction.SelectionChecker",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SnapHelper.js",
            "line": 41,
            "description": "Returns the default <code>SnapHelper</code> implementation.<br/>\nSubclasses can simply replace this method to globally register a customized <code>SnapHelper</code>.",
            "itemtype": "method",
            "name": "getDefault",
            "return": {
                "description": "The global default <code>SnapHelper</code> to use.",
                "type": "JSG.graph.interaction.SnapHelper"
            },
            "class": "JSG.graph.interaction.SnapHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SnapHelper.js",
            "line": 52,
            "description": "Checks if snap feature should be applied.",
            "itemtype": "method",
            "name": "doSnap",
            "params": [
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if snap feature is active, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.interaction.SnapHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SnapHelper.js",
            "line": 74,
            "description": "Determines the offset required to snap the bounding rectangle of given <code>BoundingBox</code> to any visible \nsnap-lines. The offset required to align the <code>BoundingBox</code> is returned.<br/>\nNote: the <code>fblines</code> parameter is optional and only used if given <code>BoundingBox</code> should align to \nan attached edge. Usually the list contains sub-feedbacks of type {{#crossLink \"JSG.graph.feedback.Feedback\"}}{{/crossLink}}.<br/>\nThis method will add any visible snap-line feedbacks, i.e. {{#crossLink \"JSG.graph.view.SnapFeedbackView\"}}{{/crossLink}},\nto corresponding snap-line layer.",
            "itemtype": "method",
            "name": "snapToBBox",
            "params": [
                {
                    "name": "bbox",
                    "description": "The <code>BoundingBox</code> to align.",
                    "type": "JSG.geometry.BoundingBox"
                },
                {
                    "name": "fblines",
                    "description": "Optional list of {{#crossLink \"JSG.graph.feedback.Feedback\"}}{{/crossLink}}s used for snap.",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "viewer",
                    "description": "The currently used ControllerViewer.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse for returned offset. If not provided a new one will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The align offset.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.interaction.SnapHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SnapHelper.js",
            "line": 95,
            "description": "Determines the offset required to snap given <code>Rectangle</code> to any visible snap-lines. The offset required to \nalign the <code>Rectangle</code> is returned.<br/>\nNote: the <code>fblines</code> parameter is optional and only used if given <code>BoundingBox</code> should align to \nan attached edge. Usually the list contains sub-feedbacks of type {{#crossLink \"JSG.graph.feedback.Feedback\"}}{{/crossLink}}.<br/>\nThis method will add any visible snap-line feedbacks, i.e. {{#crossLink \"JSG.graph.view.SnapFeedbackView\"}}{{/crossLink}},\nto corresponding snap-line layer.",
            "itemtype": "method",
            "name": "snapToRect",
            "params": [
                {
                    "name": "rect",
                    "description": "The <code>Rectangle</code> to align.",
                    "type": "JSG.geometry.Rectangle"
                },
                {
                    "name": "fblines",
                    "description": "Optional list of {{#crossLink \"JSG.graph.feedback.Feedback\"}}{{/crossLink}}s used for snap.",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "viewer",
                    "description": "The currently used ControllerViewer.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse for returned offset. If not provided a new one will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The align offset.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.interaction.SnapHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SnapHelper.js",
            "line": 172,
            "description": "Adds snap-line to given layer or extends an optional old-line. \nReturns <code>true</code> if snap-line was added, <code>false</code> otherwise.",
            "itemtype": "method",
            "name": "_addSnapLine",
            "params": [
                {
                    "name": "snapline",
                    "description": "The snap-line to add to given layer.",
                    "type": "JSG.graph.view.SnapFeedbackView"
                },
                {
                    "name": "oldline",
                    "description": "An optional old snap-line. If specified this line will be extended.",
                    "type": "JSG.graph.view.SnapFeedbackView",
                    "optional": true
                },
                {
                    "name": "layer",
                    "description": "The layer array to add the snap-line to.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "<code>true</code> if given snap-line was added, <code>false</code> if old snap-line was extended.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.SnapHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SnapHelper.js",
            "line": 200,
            "description": "Returns the offset in X direction to align given <code>Rectangle</code> to given snap-line.",
            "itemtype": "method",
            "name": "_getOffsetX",
            "params": [
                {
                    "name": "snapline",
                    "description": "The snap-line which specifies align.",
                    "type": "JSG.graph.view.SnapFeedbackView"
                },
                {
                    "name": "rect",
                    "description": "The <code>Rectangle</code> to align.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "return": {
                "description": "The align offset in X direction.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.SnapHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SnapHelper.js",
            "line": 216,
            "description": "Returns the X direction of given <code>Rectangle</code> which should be aligned.",
            "itemtype": "method",
            "name": "_getX",
            "params": [
                {
                    "name": "pivot",
                    "description": "The snap anchor which specifies X direction to align.",
                    "type": "String"
                },
                {
                    "name": "rect",
                    "description": "The <code>Rectangle</code> to align.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "return": {
                "description": "The X direction of given <code>Rectangle</code> to be aligned.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.SnapHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SnapHelper.js",
            "line": 234,
            "description": "Returns the offset in Y direction to align given <code>Rectangle</code> to given snap-line.",
            "itemtype": "method",
            "name": "_getOffsetY",
            "params": [
                {
                    "name": "snapline",
                    "description": "The snap-line which specifies align.",
                    "type": "JSG.graph.view.SnapFeedbackView"
                },
                {
                    "name": "rect",
                    "description": "The <code>Rectangle</code> to align.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "return": {
                "description": "The align offset in Y direction.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.SnapHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SnapHelper.js",
            "line": 250,
            "description": "Returns the Y direction of given <code>Rectangle</code> which should be aligned.",
            "itemtype": "method",
            "name": "_getY",
            "params": [
                {
                    "name": "pivot",
                    "description": "The snap anchor which specifies Y direction to align.",
                    "type": "String"
                },
                {
                    "name": "rect",
                    "description": "The <code>Rectangle</code> to align.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "return": {
                "description": "The Y direction of given <code>Rectangle</code> to be aligned.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.SnapHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SnapHelper.js",
            "line": 268,
            "description": "Returns a snap-line with minimum snap-distance for given list of sub-feedbacks. The original items of passed feedbacks \nmust be instances of {{#crossLink \"JSG.graph.model.LineConnection\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getSnapLineForLines",
            "params": [
                {
                    "name": "lines",
                    "description": "A list of {{#crossLink \"JSG.graph.feedback.Feedback\"}}{{/crossLink}}s used for snap.",
                    "type": "Array"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "A snap-line to align to or <code>undefined</code>.",
                "type": "JSG.graph.view.SnapFeedbackView"
            },
            "class": "JSG.graph.interaction.SnapHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SnapHelper.js",
            "line": 289,
            "description": "Returns the offset required to align the source and target point of given snap-line.",
            "itemtype": "method",
            "name": "alignToLine",
            "params": [
                {
                    "name": "line",
                    "description": "The snap line to align.",
                    "type": "JSG.graph.view.SnapFeedbackView"
                },
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse for returned offset. If not provided a new one will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The align offset.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.interaction.SnapHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SnapHelper.js",
            "line": 309,
            "description": "Returns an object which provides vertical and horizontal snap-line feedbacks, i.e. instances of \n{{#crossLink \"JSG.graph.view.SnapFeedbackView\"}}{{/crossLink}}, to which given rectangle should be aligned. That \nmeans the returned object has a <code>horizontal</code> and a <code>vertical</code> property each of type \n<code>Array</code>. To create a snap-line feedback \n{{#crossLink \"JSG.graph.interaction.SnapHelper/createSnapFeedback:method\"}}{{/crossLink}} is called.<br/>\nNote: to find a suitable controller to align to a find condition function is used which should be returned by\n{{#crossLink \"JSG.graph.interaction.SnapHelper/getSnapControllerCondition:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getSnapLinesForRect",
            "params": [
                {
                    "name": "rect",
                    "description": "The rectangle which should be aligned.",
                    "type": "JSG.geometry.Rectangle"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "An object with <code>Array</code> properties of snap-line feedbacks to align to.",
                "type": "Object"
            },
            "class": "JSG.graph.interaction.SnapHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SnapHelper.js",
            "line": 397,
            "description": "Returns a function which is used as a condition to select a suited controller for the snap feature. The returned function\nwill be called with a controller and a rectangle as parameters. It should return <code>true</code> if passed controller\nis suitable for snap and <code>false</code> otherwise.",
            "itemtype": "method",
            "name": "getSnapControllerCondition",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "A condition function to use for selecting a suitable snap controller.",
                "type": "Function"
            },
            "class": "JSG.graph.interaction.SnapHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SnapHelper.js",
            "line": 415,
            "description": "Creates a vertical snap-line feedback by calling \n{{#crossLink \"JSG.graph.interaction.SnapHelper/createSnapFeedback:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "_createVerSnapLine",
            "params": [
                {
                    "name": "x",
                    "description": "The location for the vertical snap-line.",
                    "type": "Number"
                },
                {
                    "name": "trgtrect",
                    "description": "The target rectangle from which the snap-line starts (or ends).",
                    "type": "JSG.geometry.Rectangle"
                },
                {
                    "name": "rect",
                    "description": "The rectangle at which the snap-line ends (or starts).",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "return": {
                "description": "A new vertical snap-line feedback or the given old snap-line.",
                "type": "JSG.graph.view.SelectionFeedbackView"
            },
            "access": "private",
            "tagname": "",
            "deprecated": true,
            "deprecationMessage": "Don't use yet. Subject to change.",
            "class": "JSG.graph.interaction.SnapHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SnapHelper.js",
            "line": 433,
            "description": "Creates a horizontal snap-line feedback by calling \n{{#crossLink \"JSG.graph.interaction.SnapHelper/createSnapFeedback:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "_createHorSnapLine",
            "params": [
                {
                    "name": "y",
                    "description": "The location for the horizontal snap-line.",
                    "type": "Number"
                },
                {
                    "name": "trgtrect",
                    "description": "The target rectangle from which the snap-line starts (or ends).",
                    "type": "JSG.geometry.Rectangle"
                },
                {
                    "name": "rect",
                    "description": "The rectangle at which the snap-line ends (or starts).",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "return": {
                "description": "A new horizontal snap-line feedback or the given old snap-line.",
                "type": "JSG.graph.view.SelectionFeedbackView"
            },
            "access": "private",
            "tagname": "",
            "deprecated": true,
            "deprecationMessage": "Don't use yet. Subject to change.",
            "class": "JSG.graph.interaction.SnapHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SnapHelper.js",
            "line": 451,
            "description": "Creates a new snap-line feedback with a default blue color and a line width of 50.",
            "itemtype": "method",
            "name": "createSnapFeedback",
            "params": [
                {
                    "name": "x1",
                    "description": "The x coordinate of line start point.",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "The y coordinate of line start point.",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "The x coordinate of line end point.",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "The y coordinate of line end point.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A new snap-line feedback.",
                "type": "JSG.graph.view.SelectionFeedbackView"
            },
            "class": "JSG.graph.interaction.SnapHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\SnapHelper.js",
            "line": 470,
            "description": "Returns a snap-line feedback to which given line feedback should be aligned. The snap-line feedback is created by \ncalling {{#crossLink \"JSG.graph.interaction.SnapHelper/createSnapFeedback:method\"}}{{/crossLink}}.<br/>",
            "itemtype": "method",
            "name": "getSnapLineForLine",
            "params": [
                {
                    "name": "line",
                    "description": "A feedback which represents the line to align.",
                    "type": "JSG.graph.feedback.Feedback"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "A snap-line feedback to align to.",
                "type": "JSG.graph.view.SelectionFeedbackView"
            },
            "class": "JSG.graph.interaction.SnapHelper",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\TooltipActivator.js",
            "line": 25,
            "description": "The unique key under which this activator is registered to {{#crossLink \"JSG.graph.interaction.GraphInteraction\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "KEY",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.interaction.TooltipActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\TooltipActivator.js",
            "line": 43,
            "description": "Implemented to be notified about mouse move events.</br>\nIf the event occurred over a suitable controller the mouse cursor is updated to reflect that\na link might be executed.",
            "itemtype": "method",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "event",
                    "description": "The mouse move event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by {{#crossLink \"JSG.graph.interaction.InteractionHandler\"}}{{/crossLink}}.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher which notified this activator.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.TooltipActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\TooltipActivator.js",
            "line": 133,
            "description": "Gets the controller at specified location or <code>undefined</code> if none could be found.",
            "itemtype": "method",
            "name": "_getControllerAt",
            "params": [
                {
                    "name": "location",
                    "description": "The location, relative to Graph coordinate system, to start look up at.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher which notified this activator.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "return": {
                "description": "The controller at specified location or <code>undefined</code>.",
                "type": "JSG.graph.controller.GraphItemController"
            },
            "class": "JSG.graph.interaction.TooltipActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\TooltipActivator.js",
            "line": 158,
            "description": "Implemented to be notified about mouse up events.</br>",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "event",
                    "description": "The mouse up event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by {{#crossLink \"JSG.graph.interaction.InteractionHandler\"}}{{/crossLink}}.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher which notified this activator.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.TooltipActivator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ViewInteraction.js",
            "line": 166,
            "description": "The unique key under which this activator is registered to {{#crossLink \"JSG.graph.interaction.GraphInteraction\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "KEY",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.interaction.ViewInteraction.Activator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ViewInteraction.js",
            "line": 180,
            "description": "Implemented to be notified about mouse down events.</br>",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.ViewInteraction.Activator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ViewInteraction.js",
            "line": 205,
            "description": "Implemented to be notified about mouse double click events.</br>",
            "itemtype": "method",
            "name": "onMouseDoubleClick",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.graph.interaction.ViewInteraction.Activator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ViewInteraction.js",
            "line": 221,
            "description": "Returns the controller at specified event location or <code>undefined</code> if no suitable controller could be found.",
            "itemtype": "method",
            "name": "_getController",
            "params": [
                {
                    "name": "event",
                    "description": "The current mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator is registered.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "return": {
                "description": "The controller which handles specified event or <code>undefined</code>",
                "type": "JSG.graph.controller.GraphItemController"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.ViewInteraction.Activator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ViewInteraction.js",
            "line": 239,
            "description": "Traverses controller hierarchy from Graph to given controller and returns, maybe a different, \ncontroller whose view handles given event at specified location.",
            "itemtype": "method",
            "name": "_getControllerHandlingEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The event to check.",
                    "type": "JSG.ui.events.MouseEvent"
                },
                {
                    "name": "location",
                    "description": "The location to check at, relative to given controller parent.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "controller",
                    "description": "The controller to check.",
                    "type": "JSG.graph.controller.GraphItemController"
                }
            ],
            "return": {
                "description": "The controller which handles specified event or <code>undefined</code>",
                "type": "JSG.graph.controller.GraphItemController"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.interaction.ViewInteraction.Activator",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\interaction\\ZoomInteraction.js",
            "line": 44,
            "description": "Created, if necessary, and returns the view to use as interaction feedback.",
            "itemtype": "method",
            "name": "_getFeedbackRect",
            "params": [
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "The feedback view.",
                "type": "JSG.graph.view.MarqueeFeedbackView"
            },
            "access": "private",
            "tagname": "",
            "since": "1.6.0",
            "class": "JSG.graph.interaction.ZoomInteraction",
            "module": "JSG.graph.interaction",
            "namespace": "JSG.graph.interaction"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\AttributeChangeEvent.js",
            "line": 35,
            "description": "Detail event id to signal that an {{#crossLink \"JSG.graph.attr.Attribute\"}}{{/crossLink}} was \nadded to an {{#crossLink \"JSG.graph.attr.AttributeList\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "ADD",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.model.events.AttributeChangeEvent",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\AttributeChangeEvent.js",
            "line": 44,
            "description": "Detail event id to signal that an {{#crossLink \"JSG.graph.attr.Attribute\"}}{{/crossLink}} was \nremoved from an {{#crossLink \"JSG.graph.attr.AttributeList\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "REMOVE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.model.events.AttributeChangeEvent",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\AttributeChangeEvent.js",
            "line": 54,
            "description": "Detail event id to signal that the value of an {{#crossLink \"JSG.graph.attr.Attribute\"}}{{/crossLink}} \nwas changed.",
            "itemtype": "property",
            "name": "CHANGE",
            "type": "{String}",
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "use {{#crossLink \"JSG.graph.model.events.AttributeChangeEvent/VALUE:property\"}}{{/crossLink}} instead.",
            "class": "JSG.graph.model.events.AttributeChangeEvent",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\AttributeChangeEvent.js",
            "line": 64,
            "description": "Detail event id to signal that the value of an {{#crossLink \"JSG.graph.attr.Attribute\"}}{{/crossLink}} \nwas changed.",
            "itemtype": "property",
            "name": "VALUE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.model.events.AttributeChangeEvent",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\AttributeChangeEvent.js",
            "line": 75,
            "description": "Detail event id to signal that several attributes of an {{#crossLink \"JSG.graph.attr.AttributeList\"}}{{/crossLink}} \nwere changed. The {{#crossLink \"JSG.graph.model.events.AttributeChangeEvent/getNewValue:method\"}}{{/crossLink}}\nreturns a {{#crossLink \"JSG.commons.Map\"}}{{/crossLink}} with attribute names and their new values.",
            "itemtype": "property",
            "name": "BULK",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.model.events.AttributeChangeEvent",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\AttributeChangeEvent.js",
            "line": 87,
            "description": "Checks if the {{#crossLink \"JSG.graph.attr.AttributeList\"}}{{/crossLink}} the modified attribute\nbelongs to has given name. If the modified attribute itself is an attribute-list then its name is checked.",
            "itemtype": "method",
            "name": "isCategory",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the attributes parent AttributeList.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<code>true</code> if the attribute parent has specified name, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.events.AttributeChangeEvent",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\AttributeChangeEvent.js",
            "line": 101,
            "description": "Checks if the name of modified attribute is equal to one of the provided names.",
            "itemtype": "method",
            "name": "hasAttribute",
            "params": [
                {
                    "name": "names",
                    "description": "A list of names to check the attribute name against.",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "<code>true</code> if at least on name matches the attribute name, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.events.AttributeChangeEvent",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\AttributeChangeEvent.js",
            "line": 124,
            "description": "Returns the modified attribute.",
            "itemtype": "method",
            "name": "getAttribute",
            "return": {
                "description": "The modified attribute.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.model.events.AttributeChangeEvent",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\AttributeChangeEvent.js",
            "line": 135,
            "description": "Returns the new value for changed attribute.",
            "itemtype": "method",
            "name": "getNewValue",
            "return": {
                "description": "The new value for changed attribute.",
                "type": "JSG.graph.expr.Expression"
            },
            "class": "JSG.graph.model.events.AttributeChangeEvent",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\AttributeChangeEvent.js",
            "line": 145,
            "description": "Returns the old attribute value.",
            "itemtype": "method",
            "name": "getOldValue",
            "return": {
                "description": "The old attribute value or <code>undefined</code>.",
                "type": "JSG.graph.expr.Expression"
            },
            "class": "JSG.graph.model.events.AttributeChangeEvent",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\AttributeListener.js",
            "line": 41,
            "description": "This method is called when an attribute will be changed.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "attributeWillChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.AttributeListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\AttributeListener.js",
            "line": 50,
            "description": "This method is called when a layout attribute will be changed.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "layoutAttributeWillChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.AttributeListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\AttributeListener.js",
            "line": 60,
            "description": "This method is called when an attribute has changed.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "attributeDidChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.AttributeListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\AttributeListener.js",
            "line": 69,
            "description": "This method is called when a layout attribute has changed.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "layoutAttributeDidChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.AttributeListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\EdgeListener.js",
            "line": 42,
            "description": "This method is called when an edge will be attached.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "edgeWillBeAttached",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.EdgeListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\EdgeListener.js",
            "line": 51,
            "description": "This method is called when an edge was attached.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "edgeWasAttached",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.EdgeListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\EdgeListener.js",
            "line": 61,
            "description": "This method is called when an edge will be detached.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "edgeWillBeDetached",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.EdgeListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\EdgeListener.js",
            "line": 70,
            "description": "This method is called when an edge was detached.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "edgeWasDetached",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.EdgeListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\Event.js",
            "line": 38,
            "description": "The unique event identifier to classify this event.",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "JSG.graph.model.events.Event",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\Event.js",
            "line": 44,
            "description": "Setting this flag to <code>false</code> will prohibit the model change. By default it is set to <code>true</code>.",
            "itemtype": "property",
            "name": "doIt",
            "type": "Boolean",
            "class": "JSG.graph.model.events.Event",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\Event.js",
            "line": 50,
            "description": "An optional event value. This value type depends on the event type and context in which it was send.",
            "itemtype": "property",
            "name": "[value]",
            "type": "Object",
            "class": "JSG.graph.model.events.Event",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\Event.js",
            "line": 59,
            "description": "A unique identifier to classify this event more exactly.</br>\nFor example: a general <code>JSG.graph.model.events.Event.ATTRIBUTE</code> event specifies\nthe changed attribute with this field.",
            "itemtype": "property",
            "name": "detailId",
            "type": "String",
            "class": "JSG.graph.model.events.Event",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\Event.js",
            "line": 77,
            "description": "Returns the event identifier.",
            "itemtype": "method",
            "name": "getId",
            "return": {
                "description": "The event identifier.",
                "type": "String"
            },
            "class": "JSG.graph.model.events.Event",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\Event.js",
            "line": 90,
            "description": "A general event identifier. Use this to retrieve all events.",
            "itemtype": "property",
            "name": "ALL",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.model.events.Event",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\Event.js",
            "line": 99,
            "description": "Event identifier for attribute changes.",
            "itemtype": "property",
            "name": "ATTRIBUTE",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.model.events.Event",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\Event.js",
            "line": 107,
            "description": "Event identifier for layout attribute changes.",
            "itemtype": "property",
            "name": "LAYOUTATTRIBUTES",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.model.events.Event",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\Event.js",
            "line": 115,
            "description": "Event identifier for format changes.",
            "itemtype": "property",
            "name": "FORMAT",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.model.events.Event",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\Event.js",
            "line": 123,
            "description": "Event identifier for page changes.",
            "itemtype": "property",
            "name": "PAGE",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.model.events.Event",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\Event.js",
            "line": 131,
            "description": "Event identifier for text format changes.",
            "itemtype": "property",
            "name": "TEXTFORMAT",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.model.events.Event",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\EventDispatcher.js",
            "line": 22,
            "description": "Checks if events are currently enabled, i.e. listeners are notified",
            "itemtype": "method",
            "name": "areEventsEnabled",
            "return": {
                "description": "<code>true</code> if events are enabled, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.events.EventDispatcher",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\EventDispatcher.js",
            "line": 31,
            "description": "Enables events, i.e. listeners are notified if a modification occurs.",
            "itemtype": "method",
            "name": "enableEvents",
            "class": "JSG.graph.model.events.EventDispatcher",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\EventDispatcher.js",
            "line": 39,
            "description": "Disables events, i.e. listeners are not notified if a modification occurs.",
            "itemtype": "method",
            "name": "disableEvents",
            "return": {
                "description": "The events enabled state, i.e. <code>true</code> if events were enabled before, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.events.EventDispatcher",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\EventDispatcher.js",
            "line": 51,
            "description": "Registers given listener to the specified event id.</br>\nFor predefined event identifiers look at {{#crossLink \"JSG.graph.model.events.Event\"}}{{/crossLink}}\nor the various other event classes.",
            "itemtype": "method",
            "name": "registerListener",
            "params": [
                {
                    "name": "eventid",
                    "description": "The unique event id to register the listener for.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The listener to notify if an event of specified type occurs.",
                    "type": "EventListener"
                }
            ],
            "class": "JSG.graph.model.events.EventDispatcher",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\EventDispatcher.js",
            "line": 65,
            "description": "Deregisters given listener from the list of listeners which will be notified when an event of\nspecified type occurs.</br>\nSee {{#crossLink \"JSG.graph.model.events.EventDispatcher/registerListener:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "unregisterListener",
            "params": [
                {
                    "name": "eventid",
                    "description": "The unique event id to deregister listener for.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The listener to remove.",
                    "type": "EventListener"
                }
            ],
            "class": "JSG.graph.model.events.EventDispatcher",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\EventDispatcher.js",
            "line": 86,
            "description": "Sends given event object as a pre event to all listeners which are registered to the given event.",
            "itemtype": "method",
            "name": "sendPreEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The event object to send as pre event.",
                    "type": "Event"
                }
            ],
            "class": "JSG.graph.model.events.EventDispatcher",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\EventDispatcher.js",
            "line": 105,
            "description": "Sends given event object as a post event to all listeners which are registered to the given event.",
            "itemtype": "method",
            "name": "sendPostEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The event object to send as post event.",
                    "type": "Event"
                }
            ],
            "class": "JSG.graph.model.events.EventDispatcher",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\EventListener.js",
            "line": 19,
            "description": "Called before a model change will happen.</br>\n<b>Note:</b> subclasses should overwrite. This implementation does nothing.",
            "itemtype": "method",
            "name": "handlePreEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.EventListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\EventListener.js",
            "line": 29,
            "description": "Called after a model change has happened.</br>\n<b>Note:</b> subclasses should overwrite. This implementation does nothing.",
            "itemtype": "method",
            "name": "handlePostEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.EventListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\FormatListener.js",
            "line": 42,
            "description": "This method is called when a format property will be changed.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "formatWillChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.FormatListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\FormatListener.js",
            "line": 51,
            "description": "This method is called when a text format property will be changed.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "textFormatWillChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.FormatListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\FormatListener.js",
            "line": 62,
            "description": "This method is called when a format property has changed.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "formatDidChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.FormatListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\FormatListener.js",
            "line": 71,
            "description": "This method is called when a text format property has changed.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "textFormatDidChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.FormatListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\GraphItemListener.js",
            "line": 55,
            "description": "This method is called when the item angle will change.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "angleWillChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.GraphItemListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\GraphItemListener.js",
            "line": 64,
            "description": "This method is called when the item angle has changed.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "angleDidChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.GraphItemListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\GraphItemListener.js",
            "line": 76,
            "description": "This method is called when the item bounding box will change.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "boundingBoxWillChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.GraphItemListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\GraphItemListener.js",
            "line": 85,
            "description": "This method is called when the item bounding box has changed.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "boundingBoxDidChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.GraphItemListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\GraphItemListener.js",
            "line": 96,
            "description": "This method is called when the item size will change.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "sizeWillChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.GraphItemListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\GraphItemListener.js",
            "line": 105,
            "description": "This method is called when the item size has changed.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "sizeDidChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.GraphItemListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\GraphItemListener.js",
            "line": 116,
            "description": "This method is called when the item pin will change.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "pinWillChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.GraphItemListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\GraphItemListener.js",
            "line": 125,
            "description": "This method is called when the item pin has changed.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "pinDidChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.GraphItemListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\GraphItemListener.js",
            "line": 138,
            "description": "This method is called when the item parent will change.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "parentWillChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.GraphItemListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\GraphItemListener.js",
            "line": 147,
            "description": "This method is called when the item parent has changed.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "parentDidChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.GraphItemListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\GraphItemListener.js",
            "line": 157,
            "description": "This method is called to signal that the path hierarchy of an item within a Graph has changed. \nUsually a call to this method is triggered by a parent change within an items path hierarchy.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "pathDidChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.GraphItemListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\GraphItemListener.js",
            "line": 169,
            "description": "This method is called when the item index will change.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "indexWillChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.GraphItemListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\GraphItemListener.js",
            "line": 178,
            "description": "This method is called when the item index has changed.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "indexDidChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.GraphItemListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\GraphItemListener.js",
            "line": 189,
            "description": "This method is called when the item will be added.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "itemWillBeAdded",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.GraphItemListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\GraphItemListener.js",
            "line": 198,
            "description": "This method is called when the item was added.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "itemWasAdded",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.GraphItemListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\GraphItemListener.js",
            "line": 209,
            "description": "This method is called when the item will be removed.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "itemWillBeRemoved",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.GraphItemListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\GraphItemListener.js",
            "line": 218,
            "description": "This method is called when the item was removed.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "itemWasRemoved",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.GraphItemListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\NodeEvent.js",
            "line": 30,
            "description": "Event detail identifier to signal port add.",
            "itemtype": "property",
            "name": "PORTADD",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.model.events.NodeEvent",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\NodeEvent.js",
            "line": 38,
            "description": "Event detail identifier to signal port remove.",
            "itemtype": "property",
            "name": "PORTREMOVE",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.model.events.NodeEvent",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\NodeEvent.js",
            "line": 46,
            "description": "Event detail identifier to signal removal of all ports.",
            "itemtype": "property",
            "name": "PORTREMOVEALL",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.model.events.NodeEvent",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\PageEvent.js",
            "line": 26,
            "description": "Returns the id of modified page property.",
            "itemtype": "method",
            "name": "getPageId",
            "return": {
                "description": "The id of modified page property.",
                "type": "String"
            },
            "class": "JSG.graph.model.events.PageEvent",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\PortListener.js",
            "line": 23,
            "description": "Event identifier to signal a port add.",
            "itemtype": "property",
            "name": "PORTADD",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.model.events.PortListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\PortListener.js",
            "line": 31,
            "description": "Event identifier to signal a port remove.",
            "itemtype": "property",
            "name": "PORTADD",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.model.events.PortListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\PortListener.js",
            "line": 59,
            "description": "This method is called when a port will be added to a node.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "portWillBeAdded",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.PortListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\PortListener.js",
            "line": 68,
            "description": "This method is called when a port was added to a node.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "portWasAdded",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.PortListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\PortListener.js",
            "line": 79,
            "description": "This method is called when a port will be removed from a node.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "portWillBeRemoved",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.PortListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\PortListener.js",
            "line": 88,
            "description": "This method is called when a port was removed from a node.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "portWasRemoved",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.PortListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\PortListener.js",
            "line": 100,
            "description": "This method is called when several ports will be removed from a node.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "portsWillBeRemovedBulk",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.PortListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\PortListener.js",
            "line": 109,
            "description": "This method is called when several ports were removed from a node.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "portsWereRemovedBulk",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.PortListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\ShapeListener.js",
            "line": 41,
            "description": "This method is called when the shape will change.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "shapeWillChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.GraphItemListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\ShapeListener.js",
            "line": 50,
            "description": "This method is called when the shape points will change.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "shapePointsWillChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.GraphItemListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\ShapeListener.js",
            "line": 60,
            "description": "This method is called when the shape has changed.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "shapeDidChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.GraphItemListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\events\\ShapeListener.js",
            "line": 69,
            "description": "This method is called when the shape points has changed.</br> \nEmpty implementation subclasses should overwrite.",
            "itemtype": "method",
            "name": "shapePointsDidChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.events.GraphItemListener",
            "module": "JSG.graph.model.events",
            "namespace": "JSG.graph.model.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\AbstractSettings.js",
            "line": 24,
            "description": "Registers given graph item to this AbstractSettings instance.",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "item",
                    "description": "The graph item to bound to this instance.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "class": "JSG.graph.model.settings.AbstractSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\AbstractSettings.js",
            "line": 33,
            "description": "Unregisters given graph item from this AbstractSettings instance.",
            "itemtype": "method",
            "name": "deregister",
            "params": [
                {
                    "name": "item",
                    "description": "The graph item to unbound from this instance.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "class": "JSG.graph.model.settings.AbstractSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\AbstractSettings.js",
            "line": 44,
            "description": "Sends given event as pre-event to all listeners which are registered to the id of specified event.\nIf given item is not defined calling this method has no effect.",
            "itemtype": "method",
            "name": "sendPreEventToItem",
            "params": [
                {
                    "name": "item",
                    "description": "The graph model to use for event notification.",
                    "type": "JSG.graph.model.GraphItem",
                    "optional": true
                }
            ],
            "return": {
                "description": "event The event to send.",
                "type": "JSG.graph.model.events.Event"
            },
            "class": "JSG.graph.model.settings.AbstractSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\AbstractSettings.js",
            "line": 57,
            "description": "Sends given event as post-event to all listeners which are registered to the id of specified event.\nIf given item is not defined calling this method has no effect.",
            "itemtype": "method",
            "name": "sendPostEventToItem",
            "params": [
                {
                    "name": "item",
                    "description": "The graph model to use for event notification.",
                    "type": "JSG.graph.model.GraphItem",
                    "optional": true
                }
            ],
            "return": {
                "description": "event The event to send.",
                "type": "JSG.graph.model.events.Event"
            },
            "class": "JSG.graph.model.settings.AbstractSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\CustomSetting.js",
            "line": 20,
            "description": "Returns a String which is used to create a new instance of this setting object.</br>\n<b>Note:</b> the provided String must be fully qualified, i.e. it should include all namespace \nobjects, and it should reference a parameterless method. E.g <code>JSG.graph.model.settings.CustomSetting</code>\nis a valid class String.",
            "itemtype": "method",
            "name": "getClassString",
            "return": {
                "description": "The string used to create an instance of this setting object.",
                "type": "String"
            },
            "class": "JSG.graph.model.settings.CustomSetting",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\CustomSetting.js",
            "line": 33,
            "description": "Called to register given GraphSettings to this object.</br>\nThis might be useful to send events to all GraphSettings listener. Note that in order to deregister a\nprevious GraphSettings instance <code>undefined</code> can be passed as parameter too.",
            "itemtype": "method",
            "name": "setGraphSettings",
            "params": [
                {
                    "name": "graphSettings",
                    "description": "The GraphSettings instance to register or <code>undefined</code>",
                    "type": "JSG.graph.model.settings.GraphSettings"
                }
            ],
            "class": "JSG.graph.model.settings.CustomSetting",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\CustomSetting.js",
            "line": 44,
            "description": "Called to store this CustomSetting.</br>\nHere the settings value should be either added to current XML tag by using \n<code>xmlwriter.writeAttributeString()</code> or, if it is a more complex setting value, store\nunder a new tag by calling <code>xmlwriter.writeStartElement()</code>",
            "itemtype": "method",
            "name": "saveXML",
            "params": [
                {
                    "name": "xmlwriter",
                    "description": "XMLWriter object to save to.",
                    "type": "XMLWriter"
                }
            ],
            "class": "JSG.graph.model.settings.CustomSetting",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\CustomSetting.js",
            "line": 58,
            "description": "Reads this CustomSettings from given XML Node.</br>",
            "itemtype": "method",
            "name": "readXML",
            "params": [
                {
                    "name": "xmlnode",
                    "description": "Node to read from.",
                    "type": "Node"
                }
            ],
            "class": "JSG.graph.model.settings.CustomSetting",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 65,
            "description": "Constant for default view mode.",
            "itemtype": "property",
            "name": "DEFAULT",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.model.settings.ViewMode",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 74,
            "description": "Constant for default ready-only mode.",
            "itemtype": "property",
            "name": "READ_ONLY",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.model.settings.ViewMode",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 89,
            "description": "Constant for grid visualization styles. Here the grid is displayed using vertical and horizontal lines.",
            "itemtype": "property",
            "name": "GRID",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.model.settings.ViewMode",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 98,
            "description": "Constant for grid visualization styles. Here the grid is displayed using small crosses.",
            "itemtype": "property",
            "name": "CROSSES",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.model.settings.ViewMode",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 107,
            "description": "Constant for grid visualization styles. Here the grid is displayed using dots.",
            "itemtype": "property",
            "name": "DOTS",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.model.settings.ViewMode",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 118,
            "description": "Specifies and adds default values for predefined settings.",
            "itemtype": "method",
            "name": "_addDefaultSettings",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 144,
            "description": "Creates a copy of this GraphSettings instance.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "A copy of this graph settings.",
                "type": "JSG.graph.model.settings.GraphSettings"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 156,
            "description": "Sets the values of this GraphSettings instance to given one.",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "settings",
                    "description": "The new settings.",
                    "type": "JSG.graph.model.settings.GraphSettings"
                }
            ],
            "return": {
                "description": "<code>true</code> if values were set, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 189,
            "description": "Returns the current page format.",
            "itemtype": "method",
            "name": "getPage",
            "return": {
                "description": "Current page format.",
                "type": "JSG.graph.model.settings.Page"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 199,
            "description": "Returns the current display mode.",
            "itemtype": "method",
            "name": "getDisplayMode",
            "return": {
                "description": "Current display mode.",
                "type": "JSG.ui.graphics.DisplayMode"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 208,
            "description": "Set the current display mode.",
            "itemtype": "method",
            "name": "setDisplayMode",
            "params": [
                {
                    "name": "mode",
                    "description": "New display mode.",
                    "type": "JSG.ui.graphics.DisplayMode"
                }
            ],
            "return": {
                "description": "<code>true</code> if new mode was set, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 220,
            "description": "Returns the current view mode.<br/>\nThis is either one of the predefined view mode constants as in {{#crossLink \"JSG.graph.model.settings.ViewMode\"}}{{/crossLink}}\nor a custom string.",
            "itemtype": "method",
            "name": "getViewMode",
            "return": {
                "description": "Current view mode setting.",
                "type": "String"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 231,
            "description": "Set the current view mode.<br/>\nThis either can be one of the predefined view mode constants as in {{#crossLink \"JSG.graph.model.settings.ViewMode\"}}{{/crossLink}}\nor a custom string to support custom view modes.",
            "itemtype": "method",
            "name": "setViewMode",
            "params": [
                {
                    "name": "mode",
                    "description": "New view mode.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<code>true</code> if new mode was set, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 244,
            "description": "Returns the grid style.",
            "itemtype": "method",
            "name": "getGridStyle",
            "return": {
                "description": "Returns current grid style.",
                "type": "JSG.graph.model.settings.GridStyle"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 254,
            "description": "Sets the grid style.",
            "itemtype": "method",
            "name": "setGridStyle",
            "params": [
                {
                    "name": "New",
                    "description": "grid style.",
                    "type": "JSG.graph.model.settings.GridStyle"
                }
            ],
            "return": {
                "description": "<code>true</code> if new value was set, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 265,
            "description": "Returns if the grid is visible or not.",
            "itemtype": "method",
            "name": "getGridVisible",
            "return": {
                "description": "<code>true</code> if grid is visible, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 275,
            "description": "Sets the grid visible flag.",
            "itemtype": "method",
            "name": "setGridVisible",
            "params": [
                {
                    "name": "doIt",
                    "description": "Specify <code>true</code> to draw a grid, <code>false<code> to hide it.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "<code>true</code> if new value was set, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 286,
            "description": "Returns if the page borders are visible or not.",
            "itemtype": "method",
            "name": "getPageBorderVisible",
            "return": {
                "description": "<code>true</code> if page border is visible, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "since": "1.6.0",
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 297,
            "description": "Sets the page borders visible flag.",
            "itemtype": "method",
            "name": "setPageBorderVisible",
            "params": [
                {
                    "name": "doIt",
                    "description": "Specify <code>true</code> to draw the page borders, <code>false<code> to hide them.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "<code>true</code> if new value was set, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "since": "1.6.0",
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 309,
            "description": "Returns if the port marker should be displayed for existing ports or not.",
            "itemtype": "method",
            "name": "getPortsVisible",
            "return": {
                "description": "<code>true</code> if port markers should be displayed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 318,
            "description": "Sets the ports visible flag. If set to <code>true</code> markers are shown for existing ports.",
            "itemtype": "method",
            "name": "setPortsVisible",
            "params": [
                {
                    "name": "doIt",
                    "description": "Specify <code>true</code> to display port markers, <code>false<code> to hide them.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "<code>true</code> if new value was set, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 329,
            "description": "Returns if the marker for available ports should be displayed or not.",
            "itemtype": "method",
            "name": "getAvailablePortsVisible",
            "return": {
                "description": "<code>true</code> if port markers should be displayed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 338,
            "description": "Sets the available ports visible flag. If set to <code>true</code> markers are shown.",
            "itemtype": "method",
            "name": "setAvailablePortsVisible",
            "params": [
                {
                    "name": "doIt",
                    "description": "Specify <code>true</code> to display port markers, <code>false<code> to hide them.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "<code>true</code> if new value was set, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 349,
            "description": "Returns if the name of the graph items should be displayed or not. If true, the name are displayed\nbelow the graphitem.",
            "itemtype": "method",
            "name": "getNamesVisible",
            "return": {
                "description": "<code>true</code> if port markers should be displayed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 359,
            "description": "Sets the names visible flag. If set to <code>true</code> graphitem names are shown.",
            "itemtype": "method",
            "name": "setNamesVisible",
            "params": [
                {
                    "name": "doIt",
                    "description": "Specify <code>true</code> to display name, <code>false<code> to hide them.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "<code>true</code> if new value was set, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 370,
            "description": "Returns if scale is visible or not.",
            "itemtype": "method",
            "name": "getScaleVisible",
            "return": {
                "description": "<code>true</code> if the scale should be displayed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 380,
            "description": "Sets the scale visible flag.",
            "itemtype": "method",
            "name": "setScaleVisible",
            "params": [
                {
                    "name": "doIt",
                    "description": "Specify <code>true</code> to display scales around the graph, <code>false<code> to hide them.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "<code>true</code> if new value was set, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 391,
            "description": "Returns if snap to grid should be applied or not.",
            "itemtype": "method",
            "name": "getSnapToGrid",
            "return": {
                "description": "<code>true</code> if items should snap to grid on move, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 400,
            "description": "Sets the snap to grid flag. If <code>true</code> is specified items will snap to grid on move,\nrotation and creation.",
            "itemtype": "method",
            "name": "setSnapToGrid",
            "params": [
                {
                    "name": "doIt",
                    "description": "Specify <code>true</code> to snap items to grid on move, rotation and creation, specify <code>false<code> otherwise.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "<code>true</code> if new value was set, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 412,
            "description": "Returns the currently used snap step. The value specifies how much an item will travel in x and \ny direction on (e.g.) move.",
            "itemtype": "method",
            "name": "getSnapStep",
            "return": {
                "description": "The snap step to use.",
                "type": "Number"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 422,
            "description": "Sets the snap step to use as a fix delta value for an item. The default value is 25mm.",
            "itemtype": "method",
            "name": "setSnapStep",
            "params": [
                {
                    "name": "step",
                    "description": "The snap step value to use.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<code>true</code> if new value was set, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 433,
            "description": "Returns if {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}s should snap to a port if either\nits source or target end is near a valid port.",
            "itemtype": "method",
            "name": "getSnapToPort",
            "return": {
                "description": "<code>true</code> if edges should snap to near ports, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 443,
            "description": "Sets the snap to port flag. If <code>true</code> is specified the source and target end of edges \nwill snap to near ports on creation and resize.",
            "itemtype": "method",
            "name": "setSnapToPort",
            "params": [
                {
                    "name": "doIt",
                    "description": "Specify <code>true</code> to let edges snap to near ports, <code>false<code> otherwise.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "<code>true</code> if new value was set, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 455,
            "description": "Returns <code>true</code> if an item should be aligned to a near placed shape on move.",
            "itemtype": "method",
            "name": "getSnapToShapes",
            "return": {
                "description": "<code>true</code> if an item should be aligned to a near placed shape, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 464,
            "description": "Sets the snap to shapes flag. If <code>true</code> is specified an item should be aligned to a near placed shape on move.",
            "itemtype": "method",
            "name": "setSnapToShapes",
            "params": [
                {
                    "name": "doIt",
                    "description": "Specify <code>true</code> to align item to a near placed shape, <code>false</code> otherwise.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "<code>true</code> if new value was set, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 475,
            "description": "Returns <code>true</code> if the Graph should  scroll, if the mouse is dragged outside the visible area.",
            "itemtype": "method",
            "name": "getAutoScroll",
            "return": {
                "description": "<code>true</code> if auto scrolling is enabled, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 484,
            "description": "Sets the AutoScroll flag. If <code>true</code> is specified the graph scrolls, if the mouse is dragged outside the visible area of the graph.",
            "itemtype": "method",
            "name": "setAutoScroll",
            "params": [
                {
                    "name": "doIt",
                    "description": "Specify <code>true</code> to enable auto scrolling, <code>false</code> otherwise.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "<code>true</code> if new value was set, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 495,
            "description": "Changes setting for given id. </br>\nNote: this method generates and fires a {{#crossLink \"JSG.graph.model.settings.GraphSettingsEvent\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "_changeSetting",
            "params": [
                {
                    "name": "id",
                    "description": "A unique id to reference the setting value to change.",
                    "type": "String"
                },
                {
                    "name": "newValue",
                    "description": "The new setting value.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<code>true</code> if new value was set, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 522,
            "description": "Creates a new GraphSettingsEvent with specified detailId and value.",
            "itemtype": "method",
            "name": "_createEvent",
            "params": [
                {
                    "name": "id",
                    "description": "The event detailId.",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "The event value.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The created event instance.",
                "type": "JSG.graph.model.settings.GraphSettingsEvent"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 536,
            "description": "Adds a new setting object to the settings list. </br>\nNote: this will overwrite any existing setting for the provided settingId.",
            "itemtype": "method",
            "name": "addSetting",
            "params": [
                {
                    "name": "settingId",
                    "description": "A unique id to reference provided value.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The setting object to add.",
                    "type": "Object"
                }
            ],
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 552,
            "description": "Returns the setting object for given id or <code>undefined</code> if none was added before.",
            "itemtype": "method",
            "name": "getSetting",
            "params": [
                {
                    "name": "settingId",
                    "description": "A unique id to reference setting value.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The matching setting object or <code>undefined</code>",
                "type": "Object"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 563,
            "description": "Removes the setting object for given id.",
            "itemtype": "method",
            "name": "removeSetting",
            "params": [
                {
                    "name": "settingId",
                    "description": "A unique id to reference provided value.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The removed setting object or <code>undefined</code>.",
                "type": "Object"
            },
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 580,
            "description": "Reads the GraphSettings from given XML Node.",
            "itemtype": "method",
            "name": "readXML",
            "params": [
                {
                    "name": "xmlnode",
                    "description": "Node to read from.",
                    "type": "Node"
                }
            ],
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\GraphSettings.js",
            "line": 650,
            "description": "Saves this GraphSettings to XML.",
            "itemtype": "method",
            "name": "saveXML",
            "params": [
                {
                    "name": "writer",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "class": "JSG.graph.model.settings.GraphSettings",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 96,
            "description": "Creates a copy of this Page instance.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a copy of this page.",
                "type": "JSG.graph.model.settings.Page"
            },
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 108,
            "description": "Sets the values of this Page instance to given one.",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "page",
                    "description": "The new page.",
                    "type": "JSG.graph.model.settings.Page"
                }
            ],
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 150,
            "description": "Get usable width. The usable width is the page width without the margins.",
            "itemtype": "method",
            "name": "getUsableWidth",
            "return": {
                "description": "Usable width.",
                "type": "Number"
            },
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 160,
            "description": "Get usable height. The usable height is the page width without the margins.",
            "itemtype": "method",
            "name": "getUsableHeight",
            "return": {
                "description": "Usable height.",
                "type": "Number"
            },
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 170,
            "description": "Get the currently used page width.",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "The currently used page width.",
                "type": "Number"
            },
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 179,
            "description": "Set the new page width.",
            "itemtype": "method",
            "name": "setWidth",
            "params": [
                {
                    "name": "The",
                    "description": "new page width.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 188,
            "description": "Get the currently used page height.",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "The currently used page height.",
                "type": "Number"
            },
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 197,
            "description": "Set the new page height.",
            "itemtype": "method",
            "name": "setHeight",
            "params": [
                {
                    "name": "The",
                    "description": "new page height.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 206,
            "description": "Get the currently used left page margin.",
            "itemtype": "method",
            "name": "getLeftMargin",
            "return": {
                "description": "The currently used left margin.",
                "type": "Number"
            },
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 215,
            "description": "Set the new left page margin.",
            "itemtype": "method",
            "name": "setLeftMargin",
            "params": [
                {
                    "name": "The",
                    "description": "new left margin.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 224,
            "description": "Get the currently used top page margin.",
            "itemtype": "method",
            "name": "getTopMargin",
            "return": {
                "description": "The currently used top margin.",
                "type": "Number"
            },
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 233,
            "description": "Set the new top page margin.",
            "itemtype": "method",
            "name": "setTopMargin",
            "params": [
                {
                    "name": "The",
                    "description": "new top margin.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 242,
            "description": "Get the currently used right page margin.",
            "itemtype": "method",
            "name": "getRightMargin",
            "return": {
                "description": "The currently used right margin.",
                "type": "Number"
            },
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 251,
            "description": "Set the new right page margin.",
            "itemtype": "method",
            "name": "setRightMargin",
            "params": [
                {
                    "name": "The",
                    "description": "new right margin.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 260,
            "description": "Get the currently used bottom page margin.",
            "itemtype": "method",
            "name": "getBottomMargin",
            "return": {
                "description": "The currently used bottom margin.",
                "type": "Number"
            },
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 269,
            "description": "Set the new bottom page margin.",
            "itemtype": "method",
            "name": "setBottomMargin",
            "params": [
                {
                    "name": "The",
                    "description": "new bottom margin.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 279,
            "description": "Get the currently used header page margin.",
            "itemtype": "method",
            "name": "getHeaderMargin",
            "return": {
                "description": "The currently used header margin.",
                "type": "Number"
            },
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 289,
            "description": "Set the new header page margin.",
            "itemtype": "method",
            "name": "setHeaderMargin",
            "params": [
                {
                    "name": "The",
                    "description": "new header margin.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 299,
            "description": "Get the currently used left header text.",
            "itemtype": "method",
            "name": "getHeaderLeft",
            "return": {
                "description": "The currently used left header text.",
                "type": "Number"
            },
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 309,
            "description": "Set the new left header.",
            "itemtype": "method",
            "name": "setHeaderLeft",
            "params": [
                {
                    "name": "The",
                    "description": "new left header.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 319,
            "description": "Get the currently used center header text.",
            "itemtype": "method",
            "name": "getHeaderCenter",
            "return": {
                "description": "The currently used center header text.",
                "type": "Number"
            },
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 329,
            "description": "Set the new center header.",
            "itemtype": "method",
            "name": "setHeaderCenter",
            "params": [
                {
                    "name": "The",
                    "description": "new center header.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 339,
            "description": "Get the currently used right header text.",
            "itemtype": "method",
            "name": "getHeaderRight",
            "return": {
                "description": "The currently used right header text.",
                "type": "Number"
            },
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 349,
            "description": "Set the new right header.",
            "itemtype": "method",
            "name": "setHeaderRight",
            "params": [
                {
                    "name": "The",
                    "description": "new right header.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 359,
            "description": "Get the currently used footer page margin.",
            "itemtype": "method",
            "name": "getFooterMargin",
            "return": {
                "description": "The currently used footer margin.",
                "type": "Number"
            },
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 368,
            "description": "Set the new footer page margin.",
            "itemtype": "method",
            "name": "setFooterMargin",
            "params": [
                {
                    "name": "The",
                    "description": "new footer margin.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 378,
            "description": "Get the currently used left footer text.",
            "itemtype": "method",
            "name": "getFooterLeft",
            "return": {
                "description": "The currently used left footer text.",
                "type": "Number"
            },
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 388,
            "description": "Set the new left footer.",
            "itemtype": "method",
            "name": "setFooterLeft",
            "params": [
                {
                    "name": "The",
                    "description": "new left footer.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 398,
            "description": "Get the currently used center footer text.",
            "itemtype": "method",
            "name": "getFooterCenter",
            "return": {
                "description": "The currently used center footer text.",
                "type": "Number"
            },
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 408,
            "description": "Set the new center footer.",
            "itemtype": "method",
            "name": "setFooterCenter",
            "params": [
                {
                    "name": "The",
                    "description": "new center footer.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 418,
            "description": "Get the currently used right footer text.",
            "itemtype": "method",
            "name": "getFooterRight",
            "return": {
                "description": "The currently used right footer text.",
                "type": "Number"
            },
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 428,
            "description": "Set the new right footer.",
            "itemtype": "method",
            "name": "setFooterRight",
            "params": [
                {
                    "name": "The",
                    "description": "new right footer.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 438,
            "description": "Get the currently scale to page setting.",
            "itemtype": "method",
            "name": "getScaleToPageType",
            "return": {
                "description": "The currently used scale to page setting.",
                "type": "JSG.graph.model.settings.ScaleToPageType"
            },
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 448,
            "description": "Set the new scale to page setting.",
            "itemtype": "method",
            "name": "setScaleToPageType",
            "params": [
                {
                    "name": "The",
                    "description": "new scale to page setting.",
                    "type": "JSG.graph.model.settings.ScaleToPageType"
                }
            ],
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 458,
            "description": "Get the currently scale to page count setting. This count defines the amount of pages to use for printing.",
            "itemtype": "method",
            "name": "getScaleToPageCount",
            "return": {
                "description": "The currently used scale to page count.",
                "type": "Number"
            },
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 468,
            "description": "Set the new scale to page count.This count defines the amount of pages to use for printing.",
            "itemtype": "method",
            "name": "setScaleToPageCount",
            "params": [
                {
                    "name": "The",
                    "description": "new scale to page count.",
                    "type": "JSG.graph.model.settings.ScaleToPageCount"
                }
            ],
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 477,
            "description": "Returns the currently used page format.",
            "itemtype": "method",
            "name": "getFormat",
            "return": {
                "description": "one of the predefined page format ids.",
                "type": "JSG.graph.model.settings.PageSize"
            },
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 486,
            "description": "Sets the new page format.",
            "itemtype": "method",
            "name": "setFormat",
            "params": [
                {
                    "name": "format",
                    "description": "One of the predefined page format ids.",
                    "type": "JSG.graph.model.settings.PageSize"
                }
            ],
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 566,
            "description": "Get the currently used page orientation.",
            "itemtype": "method",
            "name": "getOrientation",
            "return": {
                "description": "One of the predefined orientation ids.",
                "type": "JSG.graph.model.settings.PageOrientation"
            },
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 576,
            "description": "Set the new page orientation.",
            "itemtype": "method",
            "name": "setOrientation",
            "params": [
                {
                    "name": "orientation",
                    "description": "The new page orientation.",
                    "type": "JSG.graph.model.settings.PageOrientation"
                }
            ],
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 664,
            "description": "Get vertical gap between pages in 1/100th mm",
            "itemtype": "method",
            "name": "getVerticalGap",
            "return": {
                "description": "Vertical gap.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 675,
            "description": "Get horizontal gap between pages in 1/100th mm",
            "itemtype": "method",
            "name": "getHorizontalGap",
            "return": {
                "description": "Horizontal gap.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\settings\\Page.js",
            "line": 687,
            "description": "Sets the value of specified property.</br>\nNote: calling this method will raise an event with specified id as event detailId.<br/>",
            "itemtype": "method",
            "name": "_setProperty",
            "params": [
                {
                    "name": "id",
                    "description": "The event detailId.",
                    "type": "String|Number"
                },
                {
                    "name": "field",
                    "description": "The name of the property to set.",
                    "type": "String"
                },
                {
                    "name": "oldvalue",
                    "description": "The old property value.",
                    "type": "Object"
                },
                {
                    "name": "newvalue",
                    "description": "The new property value.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.settings.Page",
            "module": "JSG.graph.model.settings",
            "namespace": "JSG.graph.model.settings"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\BBoxShape.js",
            "line": 29,
            "description": "Type string for bounding-box shape.",
            "itemtype": "property",
            "name": "TYPE",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.model.shapes.BBoxShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\BezierShape.js",
            "line": 32,
            "description": "Type string for a bezier shape.",
            "itemtype": "property",
            "name": "TYPE",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.model.shapes.BezierShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\BezierShape.js",
            "line": 57,
            "description": "Set the coordinates, that define the control points before the bezier points. The number\nof the coordinates must be equal to the number of bezier points.",
            "itemtype": "method",
            "name": "setCpFromCoordinates",
            "params": [
                {
                    "name": "coordinates",
                    "description": "New coordinates.",
                    "type": "JSG.graph.Coordinate[]"
                }
            ],
            "class": "JSG.graph.model.shapes.BezierShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\BezierShape.js",
            "line": 83,
            "description": "Set the coordinates, that define the control points after the bezier points. The number\nof the coordinates must be equal to the number of bezier points.",
            "itemtype": "method",
            "name": "setCpToCoordinates",
            "params": [
                {
                    "name": "coordinates",
                    "description": "New coordinates.",
                    "type": "JSG.graph.Coordinate[]"
                }
            ],
            "class": "JSG.graph.model.shapes.BezierShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\BezierShape.js",
            "line": 142,
            "description": "Get access to the coordinates array, that define the control points before the bezier points.",
            "itemtype": "method",
            "name": "getCpFromCoordinates",
            "return": {
                "description": "coordinates Coordinates array.",
                "type": "JSG.graph.Coordinate[]"
            },
            "class": "JSG.graph.model.shapes.BezierShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\BezierShape.js",
            "line": 152,
            "description": "Get access to the coordinates array, that define the control points after the bezier points.",
            "itemtype": "method",
            "name": "getCpToCoordinates",
            "return": {
                "description": "coordinates Coordinates array.",
                "type": "JSG.graph.Coordinate[]"
            },
            "class": "JSG.graph.model.shapes.BezierShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\BezierShape.js",
            "line": 162,
            "description": "Append a new control point that defines the bezier curve after the corresponding bezier point.",
            "itemtype": "method",
            "name": "addCpFromCoordinate",
            "params": [
                {
                    "name": "coordinate",
                    "description": "New coordinate.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "class": "JSG.graph.model.shapes.BezierShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\BezierShape.js",
            "line": 176,
            "description": "Append a new control point that defines the bezier curve before the corresponding bezier point.",
            "itemtype": "method",
            "name": "addCpFromCoordinate",
            "params": [
                {
                    "name": "coordinate",
                    "description": "New coordinate.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "class": "JSG.graph.model.shapes.BezierShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\BezierShape.js",
            "line": 205,
            "description": "Get access to the array of calculated control points before the bezier points.",
            "itemtype": "method",
            "name": "getCpFromPoints",
            "params": [
                {
                    "name": "points",
                    "description": "Optional point array, containing the bezier points. These\nare used to calculate automatically the control points of the bezier curve, if they were not provided and\nhave not been calculated before.",
                    "type": "JSG.geometry.Points[]",
                    "optional": true
                }
            ],
            "return": {
                "description": "Point array with the control points before the bezier points.",
                "type": "JSG.geometry.Points[]"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.shapes.BezierShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\BezierShape.js",
            "line": 227,
            "description": "Get access to the array of calculated control points behind the bezier points.",
            "itemtype": "method",
            "name": "getCpToPoints",
            "params": [
                {
                    "name": "points",
                    "description": "Optional point array, containing the bezier points. These\nare used to calculate automatically the control points of the bezier curve, if they were not provided and\nhave not been calculated before.",
                    "type": "JSG.geometry.Points[]",
                    "optional": true
                }
            ],
            "return": {
                "description": "Point array with the control points behind the bezier points.",
                "type": "JSG.geometry.Points[]"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.shapes.BezierShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\BezierShape.js",
            "line": 249,
            "description": "Calculate the control points of the bezier curve based on the give bezier point array and assigns them\nto the coordinate arrays.",
            "itemtype": "method",
            "name": "getBezierPoints",
            "params": [
                {
                    "name": "points",
                    "description": "Bezier points to use.",
                    "type": "JSG.geometry.Point[]"
                }
            ],
            "class": "JSG.graph.model.shapes.BezierShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\BezierShape.js",
            "line": 342,
            "description": "Calculates a polyline point list resembling the layout of the bezier curve.",
            "itemtype": "method",
            "name": "getPolygonPointList",
            "return": {
                "description": "Calculated point list.",
                "type": "JSG.geometry.Points[]"
            },
            "class": "JSG.graph.model.shapes.BezierShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\EllipseShape.js",
            "line": 37,
            "description": "Type string for an ellipse shape.",
            "itemtype": "property",
            "name": "TYPE",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.model.shapes.EllipseShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\EllipseShape.js",
            "line": 54,
            "description": "Intentionally does nothing as ellipse must have exactly 4 coordinates.",
            "itemtype": "method",
            "name": "addCoordinate",
            "params": [
                {
                    "name": "coordinate",
                    "description": "New coordinate.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "class": "JSG.graph.model.shapes.EllipseShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\EllipseShape.js",
            "line": 63,
            "description": "Intentionally does nothing as ellipse must have exactly 4 coordinates.",
            "itemtype": "method",
            "name": "insertCoordinatesAt",
            "params": [
                {
                    "name": "index",
                    "description": "Index of coordinate to insert before.",
                    "type": "Number"
                },
                {
                    "name": "coordinate",
                    "description": "New coordinate.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "class": "JSG.graph.model.shapes.EllipseShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\EllipseShape.js",
            "line": 73,
            "description": "Intentionally does nothing as ellipse must have exactly 4 coordinates.",
            "itemtype": "method",
            "name": "removeCoordinateAt",
            "params": [
                {
                    "name": "index",
                    "description": "Index of coordinate to remove.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.shapes.EllipseShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\EllipseShape.js",
            "line": 82,
            "description": "Set ellipse coordinates.",
            "itemtype": "method",
            "name": "setCoordinates",
            "params": [
                {
                    "name": "coordinates",
                    "description": "New coordinates of the ellipse. The array must contain exactly 4 coordinates.",
                    "type": "JSG.graph.Coordinate[]"
                }
            ],
            "class": "JSG.graph.model.shapes.EllipseShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\LineShape.js",
            "line": 34,
            "description": "Type string for a line shape.",
            "itemtype": "property",
            "name": "TYPE",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.model.shapes.LineShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\LineShape.js",
            "line": 109,
            "description": "Returns the start coordinate of the underlying coordinates.</br>\n<b>Note:</b> it is not recommended to change coordinates directly.",
            "itemtype": "method",
            "name": "getStartCoordinate",
            "return": {
                "description": "Direct access to the start coordinate.",
                "type": "JSG.graph.Coordinate"
            },
            "class": "JSG.graph.model.shapes.LineShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\LineShape.js",
            "line": 120,
            "description": "Returns the last coordinate of the underlying coordinates.</br>\n<b>Note:</b> it is not recommended to change coordinates directly.",
            "itemtype": "method",
            "name": "getEndCoordinate",
            "return": {
                "description": "Direct access to the end coordinate.",
                "type": "JSG.graph.Coordinate"
            },
            "class": "JSG.graph.model.shapes.LineShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\LineShape.js",
            "line": 132,
            "description": "Sets the first coordinate of the underlying shape coordinates to the given coordinate. Note: this\nwill replace the underlying coordinate with the given one.</br>\nThis method notifies registered graph item about shape change.",
            "itemtype": "method",
            "name": "setStartCoordinateTo",
            "params": [
                {
                    "name": "coordinate",
                    "description": "The coordinate to set the start coordinate to.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "class": "JSG.graph.model.shapes.LineShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\LineShape.js",
            "line": 146,
            "description": "Sets the last coordinate of the underlying shape coordinates to the given coordinate. Note: this\nwill replace the underlying coordinate with the given one.</br>\nThis method notifies registered graph item about shape change.",
            "itemtype": "method",
            "name": "setEndCoordinateTo",
            "params": [
                {
                    "name": "coordinate",
                    "description": "The coordinate to set the end coordinate to.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "class": "JSG.graph.model.shapes.LineShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\LineShape.js",
            "line": 182,
            "description": "Sets the first coordinate of the underlying shape coordinates to the given expressions.</br>\nThis method notifies registered graph item about shape change.",
            "itemtype": "method",
            "name": "setStartCoordinate",
            "params": [
                {
                    "name": "xExpr",
                    "description": "The new horizontal coordinate parameter.",
                    "type": "JSG.graph.expr.Expression"
                },
                {
                    "name": "yExpr",
                    "description": "The new vertical coordinate parameter.",
                    "type": "JSG.graph.expr.Expression"
                }
            ],
            "class": "JSG.graph.model.shapes.LineShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\LineShape.js",
            "line": 196,
            "description": "Sets the last coordinate of the underlying shape to the given expressions.</br>\nThis method notifies registered graph item about shape change.",
            "itemtype": "method",
            "name": "setEndCoordinate",
            "params": [
                {
                    "name": "xExpr",
                    "description": "The new horizontal coordinate parameter.",
                    "type": "JSG.graph.expr.Expression"
                },
                {
                    "name": "yExpr",
                    "description": "The new vertical coordinate parameter.",
                    "type": "JSG.graph.expr.Expression"
                }
            ],
            "class": "JSG.graph.model.shapes.LineShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\LineShape.js",
            "line": 223,
            "description": "Checks if given point touches the line and returns the zero based line segment index.\n-1 is returned if the point is not on the line. Note: a line segment is defined by two points. A\nline has at least one segment, namely the segment defined by start and end point. If the point\ntouches this segment 0 is returned. If the line has (e.g.) three points, i.e. two segments, and\nthe point touches the segment defined by point 1 and end point, 1 is returned.",
            "itemtype": "method",
            "name": "getLineSegmentAtPoint",
            "params": [
                {
                    "name": "point",
                    "description": "The point to test.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "threshold",
                    "description": "The maximum point distance to the line.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The line segment index or -1 if the point does not touch the line.",
                "type": "Number"
            },
            "class": "JSG.graph.model.shapes.LineShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\LineShape.js",
            "line": 262,
            "description": "Calculates line points in such a way that no resulting line segment intersects any attached node.\nThat means that using these points for drawing, the line will not be drawn on top of attached node.</br>\nBy definition points of not attached lines are all visible.</br>\nSee {{#crossLink \"JSG.graph.model.shapes.LineShape/getLineSegmentAtPoint:method\"}}{{/crossLink}}\nfor a definition of line segment.",
            "itemtype": "method",
            "name": "getVisiblePoints",
            "return": {
                "description": "An array of visible line points.",
                "type": "Array"
            },
            "class": "JSG.graph.model.shapes.LineShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\LineShape.js",
            "line": 558,
            "itemtype": "method",
            "name": "clearBridges",
            "deprecated": true,
            "deprecationMessage": "DON'T USE!! SUBJECT TO CHANGE!",
            "class": "JSG.graph.model.shapes.LineShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\LineShape.js",
            "line": 565,
            "itemtype": "method",
            "name": "addBridgePoint",
            "params": [
                {
                    "name": "point",
                    "description": "The point to add a possible bridge at.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "DON'T USE!! SUBJECT TO CHANGE!",
            "class": "JSG.graph.model.shapes.LineShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShape.js",
            "line": 38,
            "description": "Type string for an orthogonal line shape.",
            "itemtype": "property",
            "name": "TYPE",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.model.shapes.OrthoLineShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShape.js",
            "line": 76,
            "description": "Layout inner coordinates.</br>\n<b>Note:</b> usually it should never be required to call this method explicitly. To use layout\nset the layout attribute of the corresponding item.</br>\nSee </br>\n{{#crossLink \"JSG.graph.attr.EdgeLayoutAttributes\"}}{{/crossLink}}</br>\n{{#crossLink \"JSG.graph.model.shapes.OrthoLineShapeLayouter\"}}{{/crossLink}} </br>\n{{#crossLink \"JSG.graph.attr.consts.LineBehavior\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "layout",
            "class": "JSG.graph.model.shapes.OrthoLineShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShape.js",
            "line": 189,
            "description": "Partly layouts line shape from given port. Useful when attaching lines with a manual layout behavior.</br>\nPartly means that at most 5 coordinates starting from given port (inclusively) will be arranged.",
            "itemtype": "method",
            "name": "layoutFrom",
            "params": [
                {
                    "name": "port",
                    "description": "The port to start layout at.",
                    "type": "JSG.graph.model.Port"
                }
            ],
            "class": "JSG.graph.model.shapes.OrthoLineShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShape.js",
            "line": 211,
            "description": "Does the actual placement of the coordinate at specified index.</br>\nThis method also tries to preserve the orthogonality of this shape by adjusting the neighbor\ncoordinates too. I.e. the new location in a certain direction can only be set if the corresponding\nneighbor coordinate can be moved too.</br>",
            "itemtype": "method",
            "name": "_setCoordinateAtToPoint",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the coordinate to change.",
                    "type": "Number"
                },
                {
                    "name": "point",
                    "description": "The point which specifies the new coordinate location.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.shapes.OrthoLineShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShape.js",
            "line": 328,
            "description": "Tries to determine the orthogonal start direction, i.e. the direction to go from start coordinate.",
            "itemtype": "method",
            "name": "_getOrthogonalStartDirection",
            "params": [
                {
                    "name": "coordinates",
                    "description": "The coordinates this line shape is made of.",
                    "type": "Array"
                },
                {
                    "name": "reusepoint",
                    "description": "A Point instance to reuse. This instance will contain the determined direction vector.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The direction vector. Same instance as given reusepoint.",
                "type": "JSG.geometry.Point"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.shapes.OrthoLineShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShape.js",
            "line": 406,
            "description": "Returns the orthogonal direction vector for given Port.</br>\nNote: the last parameter is used for center ports. I.e to determine the direction vector\nif given port is a center port a line is constructed from given first coordinate to specified last\ncoordinate.",
            "itemtype": "method",
            "name": "getOrthoDirectionFromPort",
            "params": [
                {
                    "name": "port",
                    "description": "The port to determine the direction vector for.",
                    "type": "JSG.graph.model.Port"
                },
                {
                    "name": "first",
                    "description": "The coordinate index which represents given port .",
                    "type": "Number"
                },
                {
                    "name": "last",
                    "description": "The index of the coordinate to use for direction vector calculation if given port is a center port.",
                    "type": "Number"
                },
                {
                    "name": "reusepoint",
                    "description": "A Point instance to reuse. This instance will contain the determined direction vector.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The direction vector. Same instance as given reusepoint.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.model.shapes.OrthoLineShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShape.js",
            "line": 422,
            "description": "Returns the orthogonal direction vector specified by given line points.",
            "itemtype": "method",
            "name": "getOrthoDirectionFromLine",
            "params": [
                {
                    "name": "p0",
                    "description": "First line point.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "p1",
                    "description": "Last line point.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "reusepoint",
                    "description": "A Point instance to reuse. This instance will contain the determined direction vector.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The direction vector. Same instance as given reusepoint.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.model.shapes.OrthoLineShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShapeLayouter.js",
            "line": 37,
            "description": "Lays out the coordinates of the corresponding <code>OrthoLineShape</code>.",
            "itemtype": "method",
            "name": "layout",
            "params": [
                {
                    "name": "behaviortype",
                    "description": "One of the predefined behavior flags to influence the layout.\nIf not specified, <code>AUTO</code> is used by default.",
                    "type": "JSG.graph.attr.consts.LineBehavior",
                    "optional": true
                }
            ],
            "class": "JSG.graph.model.shapes.OrthoLineShapeLayouter",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShapeLayouter.js",
            "line": 117,
            "description": "Routes this line starting at source coordinate in direction of given vector.",
            "itemtype": "method",
            "name": "_routeFromSource",
            "params": [
                {
                    "name": "srcpt",
                    "description": "The start point to route from.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "srcdir",
                    "description": "Orthogonal direction vector for source coordinate.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.shapes.OrthoLineShapeLayouter",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShapeLayouter.js",
            "line": 165,
            "description": "Checks if the line, given by <code>p0</code> and <code>p1</code>, points in the same direction as specified <code>direction</code>.",
            "itemtype": "method",
            "name": "pointsInDirection",
            "params": [
                {
                    "name": "p0",
                    "description": "First line point.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "p1",
                    "description": "Second line point.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "<code>true</code> if given direction and line direction are same, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.shapes.OrthoLineShapeLayouter",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShapeLayouter.js",
            "line": 181,
            "description": "Adjust given point in given direction to specified point.</br>\nThat means that only the component of given point is set to the corresponding component of given\nsecond point if the direction component is not 0.",
            "itemtype": "method",
            "name": "biasPoint",
            "params": [
                {
                    "name": "point",
                    "description": "The point to bias.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "toPoint",
                    "description": "The point to take the component value from.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "inDirection",
                    "description": "The direction vector which specifies the point component to set.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.model.shapes.OrthoLineShapeLayouter",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShapeLayouter.js",
            "line": 201,
            "description": "Tries to determine the orthogonal direction vector at given Port or for given coordinates if\nport is undefined.",
            "itemtype": "method",
            "name": "_getOrthoDirectionFrom",
            "params": [
                {
                    "name": "port",
                    "description": "The port to determine the direction vector for.",
                    "type": "JSG.graph.model.Port"
                },
                {
                    "name": "coordinates",
                    "description": "The coordinates to use to determine direction vector.",
                    "type": "Array"
                },
                {
                    "name": "first",
                    "description": "The coordinate index which represents given port .",
                    "type": "Number"
                },
                {
                    "name": "last",
                    "description": "The index of the coordinate to use if direction vector must be determined by a line.",
                    "type": "Number"
                },
                {
                    "name": "behaviortype",
                    "description": "One of the predefined behavior flags to influence direction vector.",
                    "type": "JSG.graph.attr.consts.LineBehavior",
                    "optional": true
                },
                {
                    "name": "reusepoint",
                    "description": "A Point instance to reuse. This instance will contain the determined direction vector.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The direction vector. Same instance as given reusepoint.",
                "type": "JSG.geometry.Point"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.shapes.OrthoLineShapeLayouter",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShapeLayouter.js",
            "line": 253,
            "description": "Returns the orthogonal direction vector for given Port.</br>\nNote: the last parameter is used for center ports. I.e to determine the direction vector\nif given port is a center port a line is constructed from given first coordinate to specified last\ncoordinate.",
            "itemtype": "method",
            "name": "getOrthoDirectionFromPort",
            "params": [
                {
                    "name": "port",
                    "description": "The port to determine the direction vector for.",
                    "type": "JSG.graph.model.Port"
                },
                {
                    "name": "first",
                    "description": "The coordinate index which represents given port .",
                    "type": "Number"
                },
                {
                    "name": "last",
                    "description": "The index of the coordinate to use if direction vector must be determined by a line.",
                    "type": "Number"
                },
                {
                    "name": "behaviortype",
                    "description": "One of the predefined behavior flags to influence direction vector.",
                    "type": "JSG.graph.attr.consts.LineBehavior",
                    "optional": true
                },
                {
                    "name": "reusepoint",
                    "description": "A Point instance to reuse. This instance will contain the determined direction vector.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The direction vector. Same instance as given reusepoint.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.model.shapes.OrthoLineShapeLayouter",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShapeLayouter.js",
            "line": 374,
            "description": "Returns the orthogonal direction vector for specified line at given point.</br>",
            "itemtype": "method",
            "name": "_getOrthoDirectionFromPoint",
            "params": [
                {
                    "name": "x",
                    "description": "The x point component.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y point component.",
                    "type": "Number"
                },
                {
                    "name": "p0",
                    "description": "First line point.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "p1",
                    "description": "Last line point.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The direction vector or <code>undefined</code> if none could be determined.",
                "type": "JSG.geometry.Point"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.shapes.OrthoLineShapeLayouter",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShapeLayouter.js",
            "line": 391,
            "description": "Determines the orthogonal direction vector for given coordinates based on first line segment found which has a length.</br>\nNote: returned direction vector applies to start coordinate. Furthermore note that the returned \nvector gets an additional <code>valid</code> field which specifies if the returned vector is valid\nor not, i.e. could not be used as direction vector.",
            "itemtype": "method",
            "name": "_getOrthoDirectionFromLineSegment",
            "params": [
                {
                    "name": "coordinates",
                    "description": "The coordinates to determine direction vector for.",
                    "type": "Array"
                },
                {
                    "name": "forward",
                    "description": "Specify <code>true</code> to traverse line segments from start or <code>false</code> to traverse from back.",
                    "type": "Boolean"
                },
                {
                    "name": "reusepoint",
                    "description": "A Point instance to reuse. This instance will contain the determined direction vector.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The direction vector. Same instance as given reusepoint.",
                "type": "JSG.geometry.Point"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.shapes.OrthoLineShapeLayouter",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShapeLayouter.js",
            "line": 441,
            "description": "Returns the orthogonal direction vector based on the line specified by given points.",
            "itemtype": "method",
            "name": "getOrthoDirectionFromLine",
            "params": [
                {
                    "name": "p0",
                    "description": "First line point.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "p1",
                    "description": "Last line point.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "reusepoint",
                    "description": "A Point instance to reuse. This instance will contain the determined direction vector.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The direction vector. Same instance as given reusepoint.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.model.shapes.OrthoLineShapeLayouter",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShapeLayouter.js",
            "line": 454,
            "description": "Returns an orthogonal direction vector based on given angle.</br>\nThe direction vector is set clockwise where an angle of 0 leads to a direction vector of (1, 0).",
            "itemtype": "method",
            "name": "getOrthoDirectionByAngle",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle in radians to determine the direction vector for.",
                    "type": "Number"
                },
                {
                    "name": "reusepoint",
                    "description": "A Point instance to reuse. This instance will contain the determined direction vector.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The direction vector. Same instance as given reusepoint.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.model.shapes.OrthoLineShapeLayouter",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShapeLayouter.js",
            "line": 489,
            "description": "Partly layouts line shape from given port. Useful when attaching lines with a manual layout behavior.</br>\nPartly means that at most 5 coordinates starting from given port (inclusively) will be arranged.",
            "itemtype": "method",
            "name": "layoutFrom",
            "params": [
                {
                    "name": "port",
                    "description": "The port to start layout at.",
                    "type": "JSG.graph.model.Port"
                }
            ],
            "class": "JSG.graph.model.shapes.OrthoLineShapeLayouter",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShapeLayouter.js",
            "line": 562,
            "description": "The actual auto layout for orthogonal lines.",
            "itemtype": "method",
            "name": "_routeLine",
            "params": [
                {
                    "name": "srcdir",
                    "description": "Orthogonal direction vector for source point.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "trgtdir",
                    "description": "Orthogonal direction vector for target point.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.shapes.OrthoLineShapeLayouter",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\OrthoLineShapeLayouter.js",
            "line": 698,
            "description": "Ensures that the given array of coordinates has the specified length.",
            "itemtype": "method",
            "name": "_requires",
            "params": [
                {
                    "name": "nr",
                    "description": "The number of coordinates to keep or add to given coordinates array.",
                    "type": "Number"
                },
                {
                    "name": "coordinates",
                    "description": "The coordinates array to work on.",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.shapes.OrthoLineShapeLayouter",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\PathShape.js",
            "line": 28,
            "description": "Type string for path shape.",
            "itemtype": "property",
            "name": "TYPE",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.model.shapes.PathShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\PathShape.js",
            "line": 37,
            "description": "Checks if given command string is supported.",
            "itemtype": "method",
            "name": "isValidCmd",
            "params": [
                {
                    "name": "cmd",
                    "description": "The command string to check.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<code>true</code> if command is supported, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.graph.model.shapes.PathShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\PathShape.js",
            "line": 90,
            "description": "Adds given coordinate to the list of coordinates which build up this shape.</br>\nNote: this overwrites the corresponding method of {{#crossLink \"JSG.graph.model.shapes.Shape\"}}{{/crossLink}} in order\nto add an additional path-command parameter.<br/>\nPlease refer to {{#crossLink \"JSG.graph.model.shapes.PathShape/addMoveTo:method\"}}{{/crossLink}},\n{{#crossLink \"JSG.graph.model.shapes.PathShape/addLineTo:method\"}}{{/crossLink}},\n{{#crossLink \"JSG.graph.model.shapes.PathShape/addCubicBezier:method\"}}{{/crossLink}} and\n{{#crossLink \"JSG.graph.model.shapes.PathShape/addQuadraticBezier:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "addCoordinate",
            "params": [
                {
                    "name": "coordinate",
                    "description": "The coordinate to add.",
                    "type": "JSG.graph.Coordinate"
                },
                {
                    "name": "cmd",
                    "description": "The path-command string.",
                    "type": "String"
                }
            ],
            "class": "JSG.graph.model.shapes.PathShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\PathShape.js",
            "line": 107,
            "description": "Adds a close command. This will close current sub-path by drawing a straight line from last added coordinate to the\nlast added move-to coordinate.",
            "itemtype": "method",
            "name": "addClose",
            "class": "JSG.graph.model.shapes.PathShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\PathShape.js",
            "line": 119,
            "description": "Adds given coordinate as a move to command.",
            "itemtype": "method",
            "name": "addMoveTo",
            "params": [
                {
                    "name": "coord",
                    "description": "The coordinate to add.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "class": "JSG.graph.model.shapes.PathShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\PathShape.js",
            "line": 128,
            "description": "Adds given coordinate as a line to command.",
            "itemtype": "method",
            "name": "addLineTo",
            "params": [
                {
                    "name": "coord",
                    "description": "The coordinate to add.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "class": "JSG.graph.model.shapes.PathShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\PathShape.js",
            "line": 137,
            "description": "Adds given coordinates as a cubic bezier command.",
            "itemtype": "method",
            "name": "addCubicBezier",
            "params": [
                {
                    "name": "control1coord",
                    "description": "The coordinate of first bezier control point.",
                    "type": "JSG.graph.Coordinate"
                },
                {
                    "name": "control2coord",
                    "description": "The coordinate of second bezier control point.",
                    "type": "JSG.graph.Coordinate"
                },
                {
                    "name": "coord",
                    "description": "The coordinate of the bezier curve end point.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "class": "JSG.graph.model.shapes.PathShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\PathShape.js",
            "line": 150,
            "description": "Adds given coordinates as a quadratic bezier command.",
            "itemtype": "method",
            "name": "addQuadraticBezier",
            "params": [
                {
                    "name": "controlcoord",
                    "description": "The coordinate of bezier control point.",
                    "type": "JSG.graph.Coordinate"
                },
                {
                    "name": "coord",
                    "description": "The coordinate of the bezier curve end point.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "class": "JSG.graph.model.shapes.PathShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\PathShape.js",
            "line": 267,
            "description": "Returns a suitable converter function for given coordinate command id. If none could be found <code>undefined</code> \nis returned.<br/>\nThe returned function must be called with following parameters (in that order):\n<ul>\n<li>coordindex - The current index in shapes coordinates list.</li>\n<li>coordinates - The shapes coordinates list.</li>\n<li>list - The point list to add points to.</li>\n<li>listindex - The current index in given point-list.</li>\n</ul>\nAs a result the function returns the new current index in provided point-list.",
            "itemtype": "method",
            "name": "addToList",
            "params": [
                {
                    "name": "cmdid",
                    "description": "The command id to get the converter function for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The converter function to use or <code>undefined</code>.",
                "type": "Function"
            },
            "class": "JSG.graph.model.shapes.PathShape.Points",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\PolygonShape.js",
            "line": 21,
            "description": "Type string for polygon shape.",
            "itemtype": "property",
            "name": "TYPE",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.model.shapes.PolygonShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\RectangleShape.js",
            "line": 26,
            "description": "Type string for rectangle shape.",
            "itemtype": "property",
            "name": "TYPE",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.model.shapes.RectangleShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\RectangleShape.js",
            "line": 43,
            "description": "Intentionally does nothing as rectangle must have exactly 4 coordinates.",
            "itemtype": "method",
            "name": "addCoordinate",
            "params": [
                {
                    "name": "coordinate",
                    "description": "New coordinate.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "class": "JSG.graph.model.shapes.RectangleShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\RectangleShape.js",
            "line": 53,
            "description": "Intentionally does nothing as rectangle must have exactly 4 coordinates.",
            "itemtype": "method",
            "name": "insertCoordinatesAt",
            "params": [
                {
                    "name": "index",
                    "description": "Index of coordinate to insert before.",
                    "type": "Number"
                },
                {
                    "name": "coordinate",
                    "description": "New coordinate.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "class": "JSG.graph.model.shapes.RectangleShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\RectangleShape.js",
            "line": 64,
            "description": "Intentionally does nothing as rectangle must have exactly 4 coordinates.",
            "itemtype": "method",
            "name": "removeCoordinateAt",
            "params": [
                {
                    "name": "index",
                    "description": "Index of coordinate to remove.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.shapes.RectangleShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\RectangleShape.js",
            "line": 74,
            "description": "Set rectangle coordinates.",
            "itemtype": "method",
            "name": "setCoordinates",
            "params": [
                {
                    "name": "coordinates",
                    "description": "New coordinates of the rectangle. The array must contain exactly 4 coordinates.",
                    "type": "JSG.graph.Coordinate[]"
                }
            ],
            "class": "JSG.graph.model.shapes.RectangleShape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 45,
            "description": "The default, generic shape type.",
            "itemtype": "property",
            "name": "TYPE",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 54,
            "description": "Returns the type of this shape. </br>\nSubclasses should overwrite to return a unique type identifier.",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "The type identifier of this shape.",
                "type": "String"
            },
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 65,
            "description": "Saves this shape to XML.",
            "itemtype": "method",
            "name": "saveXML",
            "params": [
                {
                    "name": "name",
                    "description": "Name of created xml tag.",
                    "type": "String"
                },
                {
                    "name": "file",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 81,
            "description": "Saves the content of this shape to XML.</br>\nSubclasses should overwrite, default implementation does nothing.",
            "itemtype": "method",
            "name": "saveXMLContent",
            "params": [
                {
                    "name": "node",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 91,
            "description": "Reads a shape from an XML Node.</br>\nIntend to be overwritten but subclasses should call this super method.",
            "itemtype": "method",
            "name": "readXML",
            "params": [
                {
                    "name": "node",
                    "description": "DOM node to read from.",
                    "type": "Node"
                }
            ],
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 101,
            "description": "Subject to be removed!!",
            "itemtype": "method",
            "name": "_newExpression",
            "deprecated": true,
            "deprecationMessage": "Simply use <code>new JSG.graph.expr.NumberExpression(value, formula, term)</code> instead",
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 111,
            "description": "Creates a new shape instance. </br>\nThis method is part of our copy-pattern, in which the copy is initially created by\n<code>newInstance</code>. Therefore subclasses should overwrite.",
            "itemtype": "method",
            "name": "newInstance",
            "return": {
                "description": "A new shape instance.",
                "type": "JSG.graph.model.shapes.Shape"
            },
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 123,
            "description": "Creates a copy of this shape.</br>\n<b>Note:</b> since coordinates are <code>Expression</code>s it might be useful to call <code>evaluate()</code>\non returned copy before first usage.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "A copy of this shape.",
                "type": "JSG.graph.model.shapes.Shape"
            },
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 137,
            "description": "Initialize this shape.</br>\nThis method is called by graph item on registration via {{#crossLink \"JSG.graph.model.GraphItem/setShapeTo:method\"}}{{/crossLink}}.\nSubclassses should overwrite to perform initilization stuff. Default implementation does nothing.",
            "itemtype": "method",
            "name": "init",
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 147,
            "description": "Disabled shapes <code>CHANGED</code> notification.",
            "itemtype": "method",
            "name": "disableNotification",
            "deprecated": true,
            "deprecationMessage": "This method is currently under review!",
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 156,
            "description": "Enables shapes <code>CHANGED</code> notification.",
            "itemtype": "method",
            "name": "enableNotification",
            "deprecated": true,
            "deprecationMessage": "This method is currently under review!",
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 166,
            "description": "Disables execution of shapes <code>refresh</code> function.",
            "itemtype": "method",
            "name": "disableRefresh",
            "return": {
                "description": "Old refresh state, i.e. <code>true</code> if refresh was enabled before,\n<code>false</code> otherwise.",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "This method is currently under review!",
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 179,
            "description": "Enables execution of shapes <code>refresh</code> function.",
            "itemtype": "method",
            "name": "enableRefresh",
            "params": [
                {
                    "name": "execute",
                    "description": "If set to <code>true</code> the refresh function is called immediately.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "deprecated": true,
            "deprecationMessage": "This method is currently under review!",
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 193,
            "description": "Registers given graph item to this shape.",
            "itemtype": "method",
            "name": "setItem",
            "params": [
                {
                    "name": "item",
                    "description": "The graph item to register to this shape.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 203,
            "description": "Checks if given point is within the area defined by the shape coordinates. To influence the\nbehavior use one of the predefined <code>FindFlags</code> as optional parameter.</br>\nSee {{#crossLink \"JSG.graph.controller.FindFlags\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "containsPoint",
            "params": [
                {
                    "name": "point",
                    "description": "The point to check.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "findFlag",
                    "description": "One of the predefined find flags.",
                    "type": "JSG.graph.controller.FindFlags",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns <code>true</code> if passed point is within this shape, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 248,
            "description": "Checks if this shape has any <code>Coordinate</code>s added.",
            "itemtype": "method",
            "name": "hasCoordinates",
            "return": {
                "description": "Returns </code>true</code> if shape has coordinates, <code>false</code>otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 258,
            "description": "Gives direct access to the underlying coordinates array.</br>\n<b>Note:</b> it is not recommended to change the coordinates array directly! Better use the\nprovided methods instead.",
            "itemtype": "method",
            "name": "getCoordinates",
            "return": {
                "description": "Returns the coordinates of this shape.",
                "type": "Array"
            },
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 270,
            "description": "Returns the number of coordinates this shape currently has.",
            "itemtype": "method",
            "name": "getCoordinatesCount",
            "return": {
                "description": "The number of currently added coordinates.",
                "type": "Number"
            },
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 280,
            "description": "Returns direct access the coordinate at specified index. If the index is out of array range\n<code>undefined</code> is returned. </br>\nNote: this method does not notify registered item about coordinate change! If notification is\nrequired better use\n{{#crossLink \"JSG.graph.model.shapes.Shape/setCoordinateAt:method\"}}{{/crossLink}} or\n{{#crossLink \"JSG.graph.model.shapes.Shape/setCoordinateTo:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getCoordinateAt",
            "params": [
                {
                    "name": "index",
                    "description": "The array index of the coordinate to get.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The coordinate at given index or <code>undefined</code> if index is invalid.",
                "type": "JSG.graph.Coordinate"
            },
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 296,
            "description": "Keeps the number of coordinates specified by given count parameter.</br>\nAfter calling this method the length of the underlying coordinates array is equal to count. Note\nthat any additional or superfluous coordinates are pushed to or taken from the end of coordinates array.",
            "itemtype": "method",
            "name": "keepCoordinates",
            "params": [
                {
                    "name": "count",
                    "description": "The number of coordinates to keep.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 313,
            "description": "Adds given coordinate to this shape.</br>\nThis method notifies registered graph item about shape <code>CHANGED</code>.",
            "itemtype": "method",
            "name": "addCoordinate",
            "params": [
                {
                    "name": "coordinate",
                    "description": "The coordinate to add.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 330,
            "description": "Inserts given coordinates at specified index.</br>\nThe coordinates to insert can be given as an array or as a simple list.",
            "example": [
                "\n    var newCoords = [coord1, coord2];\n    shape.insertCoordinatesAt(1, newCoords); //this is equal to shape.insertCoordinatesAt(1, coord1, coord2);\n\nThis method notifies registered graph item about shape <code>CHANGED</code>."
            ],
            "itemtype": "method",
            "name": "insertCoordinatesAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index to insert at.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 353,
            "description": "Removes the coordinate at given index. This method returns the removed coordinate or\n<code>undefined</code> if index is out of range.</br>\nThis method notifies registered graph item about shape <code>CHANGED</code>.",
            "itemtype": "method",
            "name": "removeCoordinateAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index to remove coordinate at.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The removed coordinate or <code>undefined</code>.",
                "type": "JSG.graph.Coordinate"
            },
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 373,
            "description": "Removes the number of coordinates specified by count starting at given index.</br>\nThis method notifies registered graph item about shape <code>CHANGED</code>.",
            "itemtype": "method",
            "name": "removeCoordinatesAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index to start removing coordinates at.",
                    "type": "Number"
                },
                {
                    "name": "count",
                    "description": "The number of coordinates to remove.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 390,
            "description": "Sets x and y expressions of the coordinate at specified index.</br>\nThis method notifies registered graph item about shape <code>CHANGED</code>.",
            "itemtype": "method",
            "name": "setCoordinateAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the coordinate to change.",
                    "type": "Number"
                },
                {
                    "name": "xExpression",
                    "description": "The expression to use for the x coordinate.",
                    "type": "JSG.graph.expr.Expression"
                },
                {
                    "name": "yExpression",
                    "description": "The expression to use for the y coordinate.",
                    "type": "JSG.graph.expr.Expression"
                }
            ],
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 415,
            "description": "Changes the coordinate at specified index to match the given coordinate.</br>\nNote: the given coordinate is only used to define the new x and y expression and does not replace\nthe shapes coordinate.</br>\nThis method notifies registered graph item about shape <code>CHANGED</code>.",
            "itemtype": "method",
            "name": "setCoordinateAtTo",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the coordinate to change.",
                    "type": "Number"
                },
                {
                    "name": "coordinate",
                    "description": "The coordinate to use for setting.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 429,
            "description": "Sets x and y values of the coordinate at specified index to the given point values.</br>\nThis method notifies registered graph item about shape change.",
            "itemtype": "method",
            "name": "setCoordinateAtToPoint",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the coordinate to change.",
                    "type": "Number"
                },
                {
                    "name": "point",
                    "description": "The point to use to set x, y expressions.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 444,
            "description": "Replaces the inner coordinates of this shape by the given ones.</br>\nThis method notifies registered graph item about shape <code>CHANGED</code>.",
            "itemtype": "method",
            "name": "setCoordinates",
            "params": [
                {
                    "name": "coordinates",
                    "description": "An array of coordinates which defines this shape.",
                    "type": "Array"
                }
            ],
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 470,
            "description": "Returns an array of {{#crossLink \"JSG.geometry.Point\"}}{{/crossLink}}s.</br>\nThe points are defined by the internal coordinates.\nUse {{#crossLink \"JSG.graph.model.shapes.Shape/getCoordinates:method\"}}{{/crossLink}} to access\nthe coordinates directly.",
            "itemtype": "method",
            "name": "getPoints",
            "return": {
                "description": "An array of shape points.",
                "type": "Array"
            },
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 483,
            "description": "Returns a {{#crossLink \"JSG.geometry.PointList\"}}{{/crossLink}} which describes this shape.</br>",
            "itemtype": "method",
            "name": "getPointList",
            "return": {
                "description": "The shapes points as a list.",
                "type": "JSG.geometry.PointList"
            },
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 497,
            "description": "Refreshes the shapes {{#crossLink \"JSG.geometry.PointList\"}}{{/crossLink}}.</br>\nThe points are calculated by calling {{#crossLink \"JSG.graph.Coordinate/toPoint:method\"}}{{/crossLink}}\non each shape coordinate.",
            "itemtype": "method",
            "name": "_fillPointList",
            "params": [
                {
                    "name": "list",
                    "description": "The point list to fill.",
                    "type": "JSG.geometry.PointList"
                },
                {
                    "name": "coordinates",
                    "description": "The shapes coordinates.",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 519,
            "description": "Returns the valid {{#crossLink \"JSG.graph.model.Port\"}}{{/crossLink}} locations this shape can have.\nEach location is given as an instance of {{#crossLink \"JSG.geometry.Point\"}}{{/crossLink}}.</br>",
            "itemtype": "method",
            "name": "getValidPortLocations",
            "params": [
                {
                    "name": "closed",
                    "description": "Flag which indicates if this shape is closed or not.",
                    "type": "Boolean"
                },
                {
                    "name": "snap",
                    "description": "Flag which indicates if a port location should be created for each shape coordinate.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "An array of valid port location points.",
                "type": "Array"
            },
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 616,
            "description": "Returns a {{#crossLink \"JSG.graph.model.Port\"}}{{/crossLink}} location at given point or\n<code>undefined</code> if no port can be created at given point.",
            "itemtype": "method",
            "name": "getValidPortLocation",
            "params": [
                {
                    "name": "point",
                    "description": "The location to validate port creation at.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "pointGrid",
                    "description": "A nearby grid point.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "closed",
                    "description": "Flag which indicates if this shape is closed or not.",
                    "type": "Boolean"
                },
                {
                    "name": "snap",
                    "description": "Flag which indicates if the port location should snap to given grid point.",
                    "type": "Boolean"
                },
                {
                    "name": "tolerance",
                    "description": "The maximum distance a possible port location might have to given point or grid point.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The valid port point or <code>undefined</code>.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 855,
            "description": "Evaluates this shape, i.e. all of its coordinates.",
            "itemtype": "method",
            "name": "evaluate",
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\Shape.js",
            "line": 884,
            "description": "Resolves parent references of all inner coordinates.</br>\nThe optional <code>doRemove</code> flag can be used to clear the complete formula of each coordinate.",
            "itemtype": "method",
            "name": "resolveParentReference",
            "params": [
                {
                    "name": "doRemove",
                    "description": "Specify <code>true</code> to completely remove formula of inner coordinates.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "JSG.graph.model.shapes.Shape",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\ShapeFactory.js",
            "line": 37,
            "description": "Creates a new <code>Shape</code> instance based on given type string.",
            "itemtype": "method",
            "name": "createShapeFromString",
            "params": [
                {
                    "name": "typeStr",
                    "description": "A valid shape type string. See {{#crossLink \"JSG.graph.model.shapes.Shape/getType:method\"}}{{/crossLink}}.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a new shape instance or <code>undefined</code> if given type string is not valid.",
                "type": "JSG.graph.model.shapes.Shape"
            },
            "class": "JSG.graph.model.shapes.ShapeFactory",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\shapes\\ShapeFactory.js",
            "line": 48,
            "description": "Registers given construction function to this factory for specified shape type. Any previously registered \nconstructor function for the same type will be replaced.<br/>\nThe constructor function is called with <code>new</code> and no parameter in\n{{#crossLink \"JSG.graph.model.shapes.ShapeFactory/createShapeFromString:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "addShapeConstructor",
            "params": [
                {
                    "name": "type",
                    "description": "The shape type to register given constructor function for.",
                    "type": "String"
                },
                {
                    "name": "constrfunc",
                    "description": "The constructor function to register.",
                    "type": "Function"
                }
            ],
            "class": "JSG.graph.model.shapes.ShapeFactory",
            "module": "JSG.graph.model.shapes",
            "namespace": "JSG.graph.model.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\AttributedTextNode.js",
            "line": 56,
            "description": "Direct access to underlying AttributeExpression.",
            "itemtype": "method",
            "name": "getAttributeExpression",
            "return": {
                "description": "The AttributeExpression currently used to reference\nthe Attribute which provides the node text.",
                "type": "JSG.graph.expr.AttributeExpression"
            },
            "class": "JSG.graph.model.AttributedTextNode",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\AttributedTextNode.js",
            "line": 74,
            "description": "Returns the Attribute referenced by given Term.",
            "itemtype": "method",
            "name": "_getReferencedAttribute",
            "params": [
                {
                    "name": "term",
                    "description": "The Term which references underlying Attribute.",
                    "type": "JSG.graph.expr.Term"
                }
            ],
            "return": {
                "description": "The referenced Attribute or <code>undefined</code>",
                "type": "JSG.graph.attr.Attribute"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.AttributedTextNode",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\AttributedTextNode.js",
            "line": 92,
            "description": "Returns the Attribute referenced by this text.",
            "itemtype": "method",
            "name": "getReferencedAttribute",
            "return": {
                "description": "The referenced Attribute or <code>undefined</code>",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.model.AttributedTextNode",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\AttributedTextNode.js",
            "line": 104,
            "description": "Changes referenced attribute.</br>",
            "itemtype": "method",
            "name": "setAttributeExpression",
            "params": [
                {
                    "name": "attributeExpression",
                    "description": "The new referenced attribute.",
                    "type": "JSG.graph.expr.AttributeExpression"
                }
            ],
            "class": "JSG.graph.model.AttributedTextNode",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\AttributedTextNode.js",
            "line": 114,
            "description": "Assign new text or text expression to referenced attribute.",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "text",
                    "description": "New text or text expression.",
                    "type": "JSG.graph.expr.Expression|String"
                }
            ],
            "class": "JSG.graph.model.AttributedTextNode",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Condition.js",
            "line": 39,
            "description": "Creates a copy of this condition instance.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "param_name",
                    "description": "param_description.",
                    "type": "Type"
                }
            ],
            "return": {
                "description": "A new condition object based on this instance.",
                "type": "JSG.graph.model.Condition"
            },
            "class": "JSG.graph.model.Condition",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Condition.js",
            "line": 54,
            "description": "Applies the internal state of given condition to this instance.",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "cond",
                    "description": "The condition object to apply.",
                    "type": "JSG.graph.model.Condition"
                }
            ],
            "class": "JSG.graph.model.Condition",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Condition.js",
            "line": 70,
            "description": "Adds a custom data object to this condition.</br>\nThe data object is a plain javascript object which defines String-String pairs, i.e. the first string is an object\nproperty and the second string its corresponding value. Please refer to {{#crossLink \"JSG.graph.model.Condition/addData:method\"}}{{/crossLink}},\n{{#crossLink \"JSG.graph.model.Condition/getData:method\"}}{{/crossLink}} and {{#crossLink \"JSG.graph.model.Condition/isDataEqualTo:method\"}}{{/crossLink}}\nas well.",
            "itemtype": "method",
            "name": "setDataTo",
            "params": [
                {
                    "name": "data",
                    "description": "A custom data object.",
                    "type": "Object"
                }
            ],
            "class": "JSG.graph.model.Condition",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Condition.js",
            "line": 92,
            "description": "Checks if given data object is equal to internal data object.</br>\nThe data object is a plain javascript object which defines String-String pairs, i.e. the first string is an object\nproperty and the second string its corresponding value. Please refer to {{#crossLink \"JSG.graph.model.Condition/addData:method\"}}{{/crossLink}},\n{{#crossLink \"JSG.graph.model.Condition/getData:method\"}}{{/crossLink}} and {{#crossLink \"JSG.graph.model.Condition/setDataTo:method\"}}{{/crossLink}}\nas well.",
            "itemtype": "method",
            "name": "isDataEqualTo",
            "params": [
                {
                    "name": "data",
                    "description": "A custom data object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<code>true</code> if given data object is equal to internal one, <code>false</code> otherwise"
            },
            "class": "JSG.graph.model.Condition",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Condition.js",
            "line": 119,
            "description": "Adds a custom string value for given key. <br/>\nThis will replace any previously added value for the same key. Note: each added data is saved\nand restored.",
            "example": [
                "\n     myCondition.addData(\"mydata\",\"important\");\n     var data = mycondition.getData(\"mydata\"); //returns \"important\""
            ],
            "itemtype": "method",
            "name": "addData",
            "params": [
                {
                    "name": "key",
                    "description": "The key to store value for.",
                    "type": "String"
                },
                {
                    "name": "val",
                    "description": "The value string to store.",
                    "type": "String"
                }
            ],
            "class": "JSG.graph.model.Condition",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Condition.js",
            "line": 138,
            "description": "Returns the custom string value for given key or <code>undefined</code> if none could be found.",
            "itemtype": "method",
            "name": "getData",
            "params": [
                {
                    "name": "key",
                    "description": "The key for the data value to return.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The custom data value of <code>undefined</code>.",
                "type": "String"
            },
            "class": "JSG.graph.model.Condition",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Condition.js",
            "line": 151,
            "description": "Returns the path of the {{#crossLink \"JSG.graph.attr.AttributeList\"}}{{/crossLink}} to which the\nreferenced target {{#crossLink \"JSG.graph.attr.Attribute\"}}{{/crossLink}} belongs or <code>undefined</code>.",
            "itemtype": "method",
            "name": "getAttributeListPath",
            "return": {
                "description": "The path to the AttributeList to which the referenced attribute belongs or\n<code>undefined</code>.",
                "type": "String"
            },
            "class": "JSG.graph.model.Condition",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Condition.js",
            "line": 163,
            "description": "Returns the name of the referenced target {{#crossLink \"JSG.graph.attr.Attribute\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getAttributeName",
            "return": {
                "description": "The name of the referenced Attribute.",
                "type": "String"
            },
            "class": "JSG.graph.model.Condition",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Condition.js",
            "line": 174,
            "description": "Checks if the condition of inner expression evaluates to <code>true</code>.<br/>\nIf inner expression is not based on a condition term, this method simply return the\nexpression value transformed to a boolean.",
            "itemtype": "method",
            "name": "isTrue",
            "return": {
                "description": "<code>true</code> if inner expression evaluates to true, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.Condition",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Condition.js",
            "line": 193,
            "description": "Save the Condition to an xml stream.",
            "itemtype": "method",
            "name": "saveXML",
            "params": [
                {
                    "name": "name",
                    "description": "Tag name to use.",
                    "type": "String"
                },
                {
                    "name": "writer",
                    "description": "XML Writer instance.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "class": "JSG.graph.model.Condition",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Condition.js",
            "line": 222,
            "description": "Read the Condition from a DOM Node.",
            "itemtype": "method",
            "name": "readXML",
            "params": [
                {
                    "name": "node",
                    "description": "DOM Node to read from.",
                    "type": "Node"
                }
            ],
            "class": "JSG.graph.model.Condition",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ConditionManager.js",
            "line": 36,
            "description": "Checks if any conditions are registered to this ConditionManager.",
            "itemtype": "method",
            "name": "hasConditions",
            "return": {
                "description": "<code>true</code> if at least one condition is registered to this ConditionManager,\n</code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.ConditionManager",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ConditionManager.js",
            "line": 46,
            "description": "Returns the amount of conditions which are registered to this ConditionManager.",
            "itemtype": "method",
            "name": "getConditionsCount",
            "return": {
                "description": "The number of conditions registered to this ConditionMananger.",
                "type": "Number"
            },
            "class": "JSG.graph.model.ConditionManager",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ConditionManager.js",
            "line": 55,
            "description": "Returns an Array of all conditions currently registered to this ConditionManager.<br/>\nNote: changing the returned array or one of its conditions has no effect. To perform these kinds\nof tasks use the corresponding methods provided by ConditionManager.",
            "itemtype": "method",
            "name": "getConditions",
            "return": {
                "description": "An Array of conditions currently registered to this ConditionManager.",
                "type": "Array"
            },
            "class": "JSG.graph.model.ConditionManager",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ConditionManager.js",
            "line": 70,
            "description": "Iterates over all conditions currently registered to this ConditionManager and calls specified function.<br/>\nNote: changing the passed condition within callback function has no effect. To perform these kinds\nof tasks use the corresponding methods provided by ConditionManager.",
            "itemtype": "method",
            "name": "getConditions",
            "params": [
                {
                    "name": "func",
                    "description": "The function to call for each condition.",
                    "type": "Function"
                }
            ],
            "class": "JSG.graph.model.ConditionManager",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ConditionManager.js",
            "line": 84,
            "description": "Helper function to get condition at specified index.<br/>\nFor internal usage only!!",
            "itemtype": "method",
            "name": "_condAtIndex",
            "params": [
                {
                    "name": "idx",
                    "description": "The condition index.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The condition at specified index.",
                "type": "JSG.graph.model.Condition"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.ConditionManager",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ConditionManager.js",
            "line": 100,
            "description": "Returns the current state of given condition, i.e. a copy of the corresponding inner condition\nwhich is currently used to represent given condition.<br/>\nThis method is useful to store a condition state before actual updating it.",
            "itemtype": "method",
            "name": "getCurrentState",
            "params": [
                {
                    "name": "condition",
                    "description": "The condition to get the inner, private representation for.",
                    "type": "JSG.graph.model.Condition"
                }
            ],
            "return": {
                "description": "A copy of inner condition which represents given condition or <code>undefined</code>.",
                "type": "JSG.graph.model.Condition"
            },
            "class": "JSG.graph.model.ConditionManager",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ConditionManager.js",
            "line": 114,
            "description": "Adds given condition to this ConditionManager.<br/>\nNote: the passed condition is actually not added directly. Instead an inner representation of it\nis created.",
            "itemtype": "method",
            "name": "addCondition",
            "params": [
                {
                    "name": "cond",
                    "description": "The condition to add.",
                    "type": "JSG.graph.model.Condition"
                },
                {
                    "name": "index",
                    "description": "The index to insert condition at.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "JSG.graph.model.ConditionManager",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ConditionManager.js",
            "line": 154,
            "description": "Creates a new internal condition entry object.",
            "itemtype": "method",
            "name": "_createEntry",
            "params": [
                {
                    "name": "condition",
                    "description": "A condition to create an entry for.",
                    "type": "JSG.graph.model.Condition"
                }
            ],
            "return": {
                "description": "A new entry object with <code>cond</code> and <code>copy</code> fields.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.ConditionManager",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ConditionManager.js",
            "line": 204,
            "description": "Removes given condition from this ConditionManager.",
            "itemtype": "method",
            "name": "removeCondition",
            "params": [
                {
                    "name": "cond",
                    "description": "The condition to remove.",
                    "type": "JSG.graph.model.Condition"
                }
            ],
            "class": "JSG.graph.model.ConditionManager",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ConditionManager.js",
            "line": 233,
            "description": "Updates given conditions which are registered to this ConditionManager.<br/>\nNote: if no condition is specified then all currently registered conditions are updated. To update\none or more conditions either pass an array containing these conditions or list them as parameters.",
            "example": [
                "\n\tcm.update(); //updates all registered conditions\n\tcm.update(cond); //updates given condition\n\tcm.update(cond1, cond2, cond3); //updates given conditions\n\tcm.update([cond1, cond2, cond3]); //updates given list of conditions"
            ],
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "conds",
                    "description": "The conditions to update.",
                    "type": "JSG.graph.model.Condition",
                    "optional": true,
                    "multiple": true
                }
            ],
            "class": "JSG.graph.model.ConditionManager",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ConditionManager.js",
            "line": 360,
            "description": "Saves the Conditions to an xml stream.",
            "itemtype": "method",
            "name": "saveXML",
            "params": [
                {
                    "name": "name",
                    "description": "Tag name to use.",
                    "type": "String"
                },
                {
                    "name": "writer",
                    "description": "XML Writer instance.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "class": "JSG.graph.model.ConditionManager",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ConditionManager.js",
            "line": 379,
            "description": "Reads the Conditions from a DOM Node.",
            "itemtype": "method",
            "name": "readXML",
            "params": [
                {
                    "name": "node",
                    "description": "DOM Node to read from.",
                    "type": "Node"
                }
            ],
            "class": "JSG.graph.model.ConditionManager",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Connection.js",
            "line": 18,
            "description": "The source {{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}} of this connection.",
            "itemtype": "property",
            "name": "sourceNode",
            "type": "{JSG.graph.model.Node}",
            "class": "JSG.graph.model.Connection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Connection.js",
            "line": 25,
            "description": "The target {{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}} of this connection.",
            "itemtype": "property",
            "name": "targetNode",
            "type": "{JSG.graph.model.Node}",
            "class": "JSG.graph.model.Connection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Connection.js",
            "line": 39,
            "description": "Checks if this connection has a target node.",
            "itemtype": "method",
            "name": "hasTargetNode",
            "return": {
                "description": "Returns <code>true</code> if this connection has a target node, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.Connection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Connection.js",
            "line": 49,
            "description": "Checks if this connection has a source node.",
            "itemtype": "method",
            "name": "hasSourceNode",
            "return": {
                "description": "Returns <code>true</code> if this connection has a source node, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.Connection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Connection.js",
            "line": 59,
            "description": "Returns an array of {{#crossLink \"JSG.geometry.Point\"}}{{/crossLink}}s this connection consists of.</br>\nNote: this method is intended to be overwritten by subclasses, default implementation simply returns\nan empty array.",
            "itemtype": "method",
            "name": "getPoints",
            "return": {
                "description": "An array of points which build up this connection.",
                "type": "Array"
            },
            "class": "JSG.graph.model.Connection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ConnectionRestorer.js",
            "line": 21,
            "description": "An array of edges to update",
            "itemtype": "property",
            "name": "edges",
            "type": "Array",
            "class": "JSG.graph.model.ConnectionRestorer",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ConnectionRestorer.js",
            "line": 29,
            "description": "An array of expressions to check for update.",
            "itemtype": "property",
            "name": "expression",
            "type": "Array",
            "class": "JSG.graph.model.ConnectionRestorer",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ConnectionRestorer.js",
            "line": 38,
            "description": "Adds a relation between specified old id and given new id.</br>\nSee {{#crossLink \"JSG.graph.model.ConnectionRestorer/updateIds:method\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "addId",
            "params": [
                {
                    "name": "oldId",
                    "description": "The old id to be replaced by newId",
                    "type": "String"
                },
                {
                    "name": "newId",
                    "description": "The new id as replacement for oldId",
                    "type": "String"
                }
            ],
            "class": "JSG.graph.model.ConnectionRestorer",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ConnectionRestorer.js",
            "line": 50,
            "description": "Replaces the occurrence of all added old ids within registered edges and expressions with its\ncorresponding new id.",
            "itemtype": "method",
            "name": "updateIds",
            "params": [
                {
                    "name": "graph",
                    "description": "The graph model required to access model objects by id.",
                    "type": "JSG.graph.model.Graph"
                }
            ],
            "class": "JSG.graph.model.ConnectionRestorer",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ContentNode.js",
            "line": 103,
            "description": "Returns the GraphItem model which manages the node content.",
            "itemtype": "method",
            "name": "getContentPane",
            "return": {
                "description": "The content model.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.graph.model.ContentNode",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ContentNode.js",
            "line": 112,
            "description": "Sets the GraphItem model to use for managing node content.",
            "itemtype": "method",
            "name": "setContentPane",
            "params": [
                {
                    "name": "cp",
                    "description": "The content model to use.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "class": "JSG.graph.model.ContentNode",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ContentNode.js",
            "line": 169,
            "description": "Define the scrollbar mode for the horizontal Scrollbar.",
            "itemtype": "method",
            "name": "setHorizontalScrollbarMode",
            "params": [
                {
                    "name": "mode",
                    "description": "New mode to use.",
                    "type": "JSG.ui.scrollview.ScrollBar.Mode"
                }
            ],
            "since": "1.6.0",
            "class": "JSG.graph.model.ContentNode",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ContentNode.js",
            "line": 180,
            "description": "Get the scrollbar mode of the horizontal Scrollbar.",
            "itemtype": "method",
            "name": "getHorizontalScrollbarMode",
            "return": {
                "description": "Current scrollbar mode.",
                "type": "JSG.ui.scrollview.ScrollBar.Mode"
            },
            "since": "1.6.0",
            "class": "JSG.graph.model.ContentNode",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ContentNode.js",
            "line": 191,
            "description": "Define the scrollbar mode for the vertical Scrollbar.",
            "itemtype": "method",
            "name": "setVerticalScrollbarMode",
            "params": [
                {
                    "name": "mode",
                    "description": "New mode to use.",
                    "type": "JSG.ui.scrollview.ScrollBar.Mode"
                }
            ],
            "since": "1.6.0",
            "class": "JSG.graph.model.ContentNode",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\ContentNode.js",
            "line": 202,
            "description": "Get the scrollbar mode of the vertical Scrollbar.",
            "itemtype": "method",
            "name": "getVerticalScrollbarMode",
            "return": {
                "description": "Current scrollbar mode.",
                "type": "JSG.ui.scrollview.ScrollBar.Mode"
            },
            "since": "1.6.0",
            "class": "JSG.graph.model.ContentNode",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Edge.js",
            "line": 23,
            "description": "The connected source port or <code>undefined</code> if edge is not attached to a source.",
            "itemtype": "property",
            "name": "sourcePort",
            "type": "{JSG.graph.model.Port}",
            "class": "JSG.graph.model.Edge",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Edge.js",
            "line": 30,
            "description": "The connected target port or <code>undefined</code> if edge is not attached to a target.",
            "itemtype": "property",
            "name": "targetPort",
            "type": "{JSG.graph.model.Port}",
            "class": "JSG.graph.model.Edge",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Edge.js",
            "line": 37,
            "description": "Id of connected source port or <code>undefined</code> if edge is not attached to a source.",
            "itemtype": "property",
            "name": "sourcePortId",
            "type": "{String}",
            "class": "JSG.graph.model.Edge",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Edge.js",
            "line": 44,
            "description": "Id of connected target port or <code>undefined</code> if edge is not attached to a target.",
            "itemtype": "property",
            "name": "targetPortId",
            "type": "{String}",
            "class": "JSG.graph.model.Edge",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Edge.js",
            "line": 114,
            "description": "Restores the target and source port ids of this edge. This method is usually called after a\ncopy and paste action to correctly attach copied edge to its copied node and ports.</br>\nSee {{#crossLink \"JSG.graph.model.ConnectionRestorer\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "_restoreConnections",
            "params": [
                {
                    "name": "graph",
                    "description": "The graph model required to access port models by id.",
                    "type": "JSG.graph.model.Graph"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.Edge",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Edge.js",
            "line": 144,
            "description": "Returns the connected source port or <code>undefined</code> if this edge is not attached to a source.",
            "itemtype": "method",
            "name": "getSourcePort",
            "return": {
                "description": "the connected source port or <code>undefined</code>",
                "type": "JSG.graph.model.Port"
            },
            "class": "JSG.graph.model.Edge",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Edge.js",
            "line": 154,
            "description": "Returns <code>true</code> if this edge has an attached source port, <code>false</code> otherwise. <br/>\n<b>Note:</b> attach means that either the sourcePortId or the sourcePort itself is defined (or both).\nThat is because during loading of an edge's sourcePortId could have been set whereas the actual\nsource port is not connected yet and therefore the edge sourcePort field is undefined.",
            "itemtype": "method",
            "name": "hasSourceAttached",
            "return": {
                "description": "<code>true</code> if this edge has an attached source, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.Edge",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Edge.js",
            "line": 167,
            "description": "Returns the connected target port or <code>undefined</code> if this edge is not attached to a target.",
            "itemtype": "method",
            "name": "getTargetPort",
            "return": {
                "description": "the connected target port or <code>undefined</code>",
                "type": "JSG.graph.model.Port"
            },
            "class": "JSG.graph.model.Edge",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Edge.js",
            "line": 177,
            "description": "Returns <code>true</code> if this edge has an attached target port, <code>false</code> otherwise. <br/>\n<b>Note:</b> attach means that either the targetPortId or the targetPort itself is defined (or both).\nThat is because during loading an edge's targetPortId could have been set whereas the actual\ntarget port is not connected yet and therefore the edge targetPort field is undefined.",
            "itemtype": "method",
            "name": "hasSourceAttached",
            "return": {
                "description": "<code>true</code> if this edge has an attached target, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.Edge",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Edge.js",
            "line": 190,
            "description": "Connects this edge to the given source port.</br>\nRefer to {{#crossLink \"JSG.graph.model.Edge/detachPort:method\"}}{{/crossLink}} to see how to detach from a port.",
            "itemtype": "method",
            "name": "setSourcePort",
            "params": [
                {
                    "name": "port",
                    "description": "The source port to attach this edge to.",
                    "type": "JSG.graph.model.Port"
                }
            ],
            "class": "JSG.graph.model.Edge",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Edge.js",
            "line": 218,
            "description": "Connects this edge to the given target port.</br>\nRefer to {{#crossLink \"JSG.graph.model.Edge/detachPort:method\"}}{{/crossLink}} to see how to detach from a port.",
            "itemtype": "method",
            "name": "setTargetPort",
            "params": [
                {
                    "name": "port",
                    "description": "The target port to attach this edge to.",
                    "type": "JSG.graph.model.Port"
                }
            ],
            "class": "JSG.graph.model.Edge",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Edge.js",
            "line": 245,
            "description": "Creates an attach or detach event depending on specified port parameter. If it is undefined a\ndetach event will be generated, otherwise an attach event.",
            "itemtype": "method",
            "name": "_createAttachOrDetachEvent",
            "params": [
                {
                    "name": "port",
                    "description": "",
                    "type": "JSG.graph.model.Port"
                },
                {
                    "name": "oldport",
                    "description": "",
                    "type": "JSG.graph.model.Port"
                }
            ],
            "return": {
                "description": "",
                "type": "JSG.graph.model.events.Event"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.Edge",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Edge.js",
            "line": 260,
            "description": "Register this edge to specified port.",
            "itemtype": "method",
            "name": "_registerPort",
            "params": [
                {
                    "name": "port",
                    "description": "The new port to register at.",
                    "type": "JSG.graph.model.Port"
                },
                {
                    "name": "oldport",
                    "description": "The port to remove from.",
                    "type": "JSG.graph.model.Port"
                },
                {
                    "name": "node",
                    "description": "The edge source or target node field name.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.Edge",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Edge.js",
            "line": 281,
            "description": "Creates a new coordinate to use as a replacement for specified old coordinate. If a port is given\nthe new coordinate will be a {{#crossLink \"JSG.graph.CoordinateProxy\"}}{{/crossLink}}, which\ntakes care of converting the port location to the edge parent coordinate system. If the port is\nundefined the returned coordinate simply points to the location specified by passed old coordinate.",
            "itemtype": "method",
            "name": "_createCoordinateFromPort",
            "params": [
                {
                    "name": "port",
                    "description": "The attached port. If not defined the returned coordinate point to same location as provided oldcoordinate.",
                    "type": "JSG.graph.model.Port",
                    "optional": true
                },
                {
                    "name": "oldcoordinate",
                    "description": "The old coordinate which will be replaced by the created one.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "return": {
                "description": "A new coordinate to replace the old coordinate with.",
                "type": "JSG.graph.Coordinate|JSG.graph.CoordinateProxy"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.Edge",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Edge.js",
            "line": 422,
            "description": "Disconnects this edge from specified port. The port should either be the source or target port\nof this edge, otherwise calling this method has no effect.",
            "itemtype": "method",
            "name": "detachPort",
            "params": [
                {
                    "name": "port",
                    "description": "The port to detach this edge from.",
                    "type": "JSG.graph.model.Port"
                }
            ],
            "class": "JSG.graph.model.Edge",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "line": 52,
            "description": "ID definitions used within event handling. Each id is of type <code>String</code> and used as\nthe detailId field of {{#crossLink \"JSG.graph.model.events.Event\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "AttributeID",
            "type": "Object",
            "static": 1,
            "class": "JSG.graph.model.Graph",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "line": 61,
            "itemtype": "property",
            "name": "REFRESH",
            "type": "String",
            "static": 1,
            "class": "JSG.graph.model.Graph",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "line": 88,
            "description": "Returns, if graph has changed.",
            "itemtype": "method",
            "name": "isChanged",
            "return": {
                "description": "True, if Graph has changed, otherwise false.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.Graph",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "line": 98,
            "description": "Marks graph as changed.",
            "itemtype": "method",
            "name": "setChanged",
            "params": [
                {
                    "name": "True,",
                    "description": "if Graph has changed, otherwise false.",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.graph.model.Graph",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "line": 115,
            "description": "Marks this graph as dirty, i.e its contained models should refresh.",
            "itemtype": "method",
            "name": "markDirty",
            "class": "JSG.graph.model.Graph",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "line": 124,
            "description": "Checks, if document is dirty due to a change.",
            "itemtype": "method",
            "name": "isDirty",
            "return": {
                "description": "True, if dirty, otherwise false.",
                "type": "Boolean"
            },
            "since": "1.6.0",
            "class": "JSG.graph.model.Graph",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "line": 167,
            "description": "Returns the layer for given tag.</br>\nIf no layer is known for given name, a new one will be created and registered.",
            "itemtype": "method",
            "name": "getLayer",
            "params": [
                {
                    "name": "name",
                    "description": "A unique layer name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The layer registered for given name.",
                "type": "JSG.graph.model.Layer"
            },
            "class": "JSG.graph.model.Graph",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "line": 184,
            "description": "Checks, if a layer exists.</br>",
            "itemtype": "method",
            "name": "hasLayer",
            "params": [
                {
                    "name": "name",
                    "description": "A unique layer name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True, if layer exists, otherwise false.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.Graph",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "line": 277,
            "description": "Returns a new unique id to use for items within this Graph. </br>\nNote: the returned id is only unique within the scope of this graph.",
            "itemtype": "method",
            "name": "newUniqueId",
            "return": {
                "description": "A new id number.",
                "type": "Number"
            },
            "class": "JSG.graph.model.Graph",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "line": 293,
            "description": "Convenience method to find an arbitrary port by its id.</br>\nThis will run through all {{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}}s within this\ngraph.",
            "itemtype": "method",
            "name": "getPortById",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the port to look for.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The corresponding port or <code>undefined</code> if none could be found.",
                "type": "JSG.graph.model.Port"
            },
            "class": "JSG.graph.model.Graph",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "line": 343,
            "description": "Calculates the BoundingBox of all subitems, i.e. the resulting BoundingBox encloses all subitems.",
            "itemtype": "method",
            "name": "getSubItemsBoundingBox",
            "params": [
                {
                    "name": "reusebbox",
                    "description": "The BoundingBox to reuse for calculation. If none is provided a new one will be created.",
                    "type": "JSG.geometry.BoundingBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "A BoundingBox which covers all subitems.",
                "type": "JSG.geometry.BoundingBox"
            },
            "class": "JSG.graph.model.Graph",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "line": 377,
            "description": "Updates the graph extent, i.e. updates the {{#crossLink \"JSG.geometry.BoundingBox\"}}{{/crossLink}}\nof this graph to cover all items and all required pages.",
            "itemtype": "method",
            "name": "updateExtent",
            "class": "JSG.graph.model.Graph",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "line": 446,
            "description": "Returns the surrounding rectangle, which is used by contained GraphItems",
            "itemtype": "method",
            "name": "getUsedRect",
            "params": [
                {
                    "name": "resuserect",
                    "description": "An optional rectangle to reuse.",
                    "type": "JSG.geometry.Rectangle",
                    "optional": true
                }
            ],
            "return": {
                "description": "Used rect.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.graph.model.Graph",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "line": 463,
            "description": "Returns the page rectangle at specified location.",
            "itemtype": "method",
            "name": "getPageRectForLocation",
            "params": [
                {
                    "name": "point",
                    "description": "The location to create page rectangle for.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "resuserect",
                    "description": "Rectangle to use.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "return": {
                "description": "Page rectangle coordinates",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.graph.model.Graph",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "line": 486,
            "description": "Returns the graph identifier.",
            "itemtype": "method",
            "name": "getGraphId",
            "return": {
                "description": "The graph identifier",
                "type": "Number"
            },
            "class": "JSG.graph.model.Graph",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "line": 495,
            "description": "Sets the graph id.</br>\n<b>Note:</b> use with care. Usually it is not required to set or change the graph id manually.",
            "itemtype": "method",
            "name": "setGraphId",
            "params": [
                {
                    "name": "id",
                    "description": "The new graph id.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.Graph",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "line": 510,
            "description": "Get amount of used vertical pages.",
            "itemtype": "method",
            "name": "getVerticalPages",
            "return": {
                "description": "Used vertical pages.",
                "type": "Number"
            },
            "class": "JSG.graph.model.Graph",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "line": 520,
            "description": "Get amount of vertical pages for print output.",
            "itemtype": "method",
            "name": "getVerticalPrintPages",
            "return": {
                "description": "Vertical print pages.",
                "type": "Number"
            },
            "class": "JSG.graph.model.Graph",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "line": 547,
            "description": "Get amount of used horizontal pages.",
            "itemtype": "method",
            "name": "getHorizontalPages",
            "return": {
                "description": "Used horizontal pages.",
                "type": "Number"
            },
            "class": "JSG.graph.model.Graph",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Graph.js",
            "line": 557,
            "description": "Get amount of horizontal pages for print output.",
            "itemtype": "method",
            "name": "getHorizontalPrintPages",
            "return": {
                "description": "Horizontal print pages.",
                "type": "Number"
            },
            "class": "JSG.graph.model.Graph",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 74,
            "description": "Overwritten from {{#crossLink \"JSG.graph.model.Model\"}}{{/crossLink}} and extended with a <code>deep</code> parameter.</br>\n<b>Note:</b> {{#crossLink \"JSG.graph.model.GraphItem/layout:method\"}}{{/crossLink}} on returned copy and after adding it to graph.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "deep",
                    "description": "Set to <code>true</code> to copy inner structure too, which is the default.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "ids",
                    "description": "Set to <code>true</code> if the model id should be copied too. If false item will have an undefined id.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "A copy of this graph item.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 90,
            "description": "Actually performs the copy.",
            "itemtype": "method",
            "name": "_copy",
            "params": [
                {
                    "name": "copiednodes",
                    "description": "List of inner nodes used to restore connections.",
                    "type": "Array"
                },
                {
                    "name": "deep",
                    "description": "Flag to indicate if inner structure should be copied too.",
                    "type": "Boolean"
                },
                {
                    "name": "ids",
                    "description": "Flag to indicate whether the model id should be copied too. If false item will have an undefined id.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "A copy of this graph item.",
                "type": "JSG.graph.model.GraphItem"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 168,
            "description": "Sets formats, attributes and shape of this item to provided copy object.",
            "itemtype": "method",
            "name": "_copyPropertiesAndShape",
            "params": [
                {
                    "name": "copy",
                    "description": "The copied item.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 201,
            "description": "Copies inner structure.",
            "itemtype": "method",
            "name": "_copyStructure",
            "params": [
                {
                    "name": "copy",
                    "description": "The copied item.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "copiednodes",
                    "description": "List of inner nodes used to restore connections.",
                    "type": "Array"
                },
                {
                    "name": "copiededges",
                    "description": "List of inner copied edges to restore.",
                    "type": "Array"
                },
                {
                    "name": "deep",
                    "description": "Flag to indicate if inner structure should be copied.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 251,
            "description": "Creates a path for this graph item. </br>\nAn optional parent parameter can be given to specify the start point of created path.\nBy default the {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}} is taken.</br>\nThis method returns <code>undefined</code> if it is called on GraphItems which are not yet added\nto a Graph.",
            "itemtype": "method",
            "name": "createPath",
            "params": [
                {
                    "name": "fromParent",
                    "description": "The parent from which the path should be created.",
                    "type": "JSG.graph.model.GraphItem",
                    "optional": true
                }
            ],
            "return": {
                "description": "The Path of this GraphItem or <code>undefined</code> if it is not\nadded yet.",
                "type": "JSG.graph.model.Path"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 278,
            "description": "Returns the reshape {{#crossLink \"JSG.graph.properties.Properties\"}}{{/crossLink}} currently used by this item.",
            "itemtype": "method",
            "name": "getReshapeProperties",
            "return": {
                "description": "The reshape properties.",
                "type": "JSG.graph.properties.Properties"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 287,
            "description": "Sets new reshape properties to use. Note that given properties are copied before they are added!",
            "itemtype": "method",
            "name": "setReshapeProperties",
            "params": [
                {
                    "name": "The",
                    "description": "new reshape properties to use.",
                    "type": "JSG.graph.properties.Properties"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 301,
            "description": "Checks if this GraphItem has any reshape coordinates defined.",
            "itemtype": "method",
            "name": "hasReshapeCoordinates",
            "return": {
                "description": "<code>true</code> if this GraphItem has reshape coordinates, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 311,
            "description": "Returns direct access to inner used {{#crossLink \"JSG.graph.ReshapeCoordinate\"}}{{/crossLink}}s.",
            "itemtype": "method",
            "name": "getReshapeCoordinates",
            "return": {
                "description": "The list of inner reshape coordinates",
                "type": "Array"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 320,
            "description": "Returns the {{#crossLink \"JSG.graph.ReshapeCoordinate\"}}{{/crossLink}} at specified index or\n<code>undefined</code> if index is out of range.",
            "itemtype": "method",
            "name": "getReshapeCoordinateAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the reshape coordinate to get.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The reshape coordinate at given index or <code>undefined</code>.",
                "type": "JSG.graph.ReshapeCoordinate"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 331,
            "description": "Sets the new reshape coordinates to use. Note that the coordinates are copied before they are added.</br>\nSee {{#crossLink \"JSG.graph.ReshapeCoordinate\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setReshapeCoordinates",
            "params": [
                {
                    "name": "A",
                    "description": "list of new reshape coordinates.",
                    "type": "Array"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 347,
            "description": "Sets the {{#crossLink \"JSG.graph.ReshapeCoordinate\"}}{{/crossLink}} at specified index to given\n{{#crossLink \"JSG.geometry.Point\"}}{{/crossLink}} or x, y values. If index it of range calling\nthis method has no effect.</br>\n<b>Note:</b> this method should either be called with a point as second parameter or with x\nand y values are second and third parameters!",
            "itemtype": "method",
            "name": "setReshapeCoordinateAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the reshape coordinate to set.",
                    "type": "Number"
                },
                {
                    "name": "point",
                    "description": "A point to set coordinates x and y values.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                },
                {
                    "name": "x",
                    "description": "The coordinates x value.",
                    "type": "Number|JSG.graph.expr.Expression",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "The coordinates y value.",
                    "type": "Number|JSG.graph.expr.Expression",
                    "optional": true
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 387,
            "description": "Returns the pin of this graph item.",
            "itemtype": "method",
            "name": "getPin",
            "return": {
                "description": "The items pin.",
                "type": "JSG.graph.Pin"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 397,
            "description": "Returns the link expression of this graph item.</br>\nA link can be any arbitrary text or expression. If a model with a link is selected its get\nexecuted via {{#crossLink \"JSG.graph.interaction.InteractionHandler/executeLink:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getLink",
            "return": {
                "description": "The expression link.",
                "type": "JSG.graph.expr.StringExpression"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 413,
            "description": "Sets the link of this item.</br>\nA link can be any arbitrary text or expression. If a model with a link is selected its get\nexecuted via {{#crossLink \"JSG.graph.interaction.InteractionHandler/executeLink:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setLink",
            "params": [
                {
                    "name": "link",
                    "description": "The new link value.",
                    "type": "JSG.graph.expr.StringExpression|Object"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 425,
            "description": "Returns the tooltip expression of this graph item.</br>\nA tooltip can be any arbitrary text or expression. .",
            "itemtype": "method",
            "name": "getTooltip",
            "return": {
                "description": "The tooltip expression.",
                "type": "JSG.graph.expr.StringExpression"
            },
            "since": "1.6.0",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 437,
            "description": "Sets the tooltip of this item.</br>\nA tooltip can be any arbitrary text or expression.",
            "itemtype": "method",
            "name": "setTooltip",
            "params": [
                {
                    "name": "tooltip",
                    "description": "The new tooltip value.",
                    "type": "JSG.graph.expr.StringExpression|String"
                }
            ],
            "since": "1.6.0",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 449,
            "description": "Convenience method to get value of the clip children attribute.",
            "itemtype": "method",
            "name": "isClipChildren",
            "return": {
                "description": "<code>true</code> if children should be clipped, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 458,
            "description": "Convenience method to get value of the closed attribute.",
            "itemtype": "method",
            "name": "isClosed",
            "return": {
                "description": "<code>true</code> if shape should be closed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 467,
            "description": "Convenience method to get value of the collapsable attribute.",
            "itemtype": "method",
            "name": "isCollapsable",
            "return": {
                "description": "<code>true</code> if item is collapsable, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 476,
            "description": "Convenience method to get value of the isCollapsed attribute.",
            "itemtype": "method",
            "name": "isCollapsed",
            "return": {
                "description": "<code>true</code> if item is collapsed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 485,
            "description": "Checks if any item parent is currently collapsed.",
            "itemtype": "method",
            "name": "isAnyParentCollapsed",
            "return": {
                "description": "<code>true</code> if item has a collapsed parent, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 501,
            "description": "Convenience method to get value of the container attribute.",
            "itemtype": "method",
            "name": "isContainer",
            "return": {
                "description": "<code>true</code> if item is a container, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 510,
            "description": "Convenience method to get value of the deleteable attribute.",
            "itemtype": "method",
            "name": "isDeleteable",
            "return": {
                "description": "<code>true</code> if item is deleteable, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 519,
            "description": "Convenience method to get value of the moveable attribute.",
            "itemtype": "method",
            "name": "isMoveable",
            "return": {
                "description": "<code>true</code> if item is moveable, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 528,
            "description": "Convenience method to get value of the selectable attribute.</br>\nNote: this method takes the current layer settings into account.</br>\nSee {{#crossLink \"JSG.graph.model.Layer\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "isSelectable",
            "return": {
                "description": "<code>true</code> if item is selectable, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 556,
            "description": "Convenience method to get value of the selectParentFirst attribute.",
            "itemtype": "method",
            "name": "isSelectParentFirst",
            "return": {
                "description": "<code>true</code> if item's selection mode is {{#crossLink \"JSG.graph.attr.ItemAttributes.SelectionMode/SELECTPARENT:property\"}}{{/crossLink}}, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 565,
            "description": "Convenience method to get value of the sizeable attribute.",
            "itemtype": "method",
            "name": "isSizeable",
            "return": {
                "description": "<code>true</code> if item can be resized, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 574,
            "description": "Convenience method to get value of the visible attribute.</br>\nNote: this method takes the current layer settings into account.</br>\nSee {{#crossLink \"JSG.graph.model.Layer\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "<code>true</code> if item is visible, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 614,
            "description": "Convenience method to get value of the rotatable attribute.",
            "itemtype": "method",
            "name": "isRotatable",
            "return": {
                "description": "<code>true</code> if item is rotatable, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 628,
            "description": "Returns the model Attribute for the specified name or <code>undefined</code> if none could be found.</br>\nNote: this method just looks for direct children of inner model AttributeList. To reference a deeper\nnested Attribute use <code>getAttributeAtPath</code>.",
            "itemtype": "method",
            "name": "getAttribute",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the Attribute to get.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The referenced Attribute or <code>undefined</code>",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 641,
            "description": "Returns the ItemAttributes of this graph item.</br>\n<b>Note:</b> to trigger an event when setting new attribute values it is required to pass this\nGraphItem as additional parameter. Please refer to {{#crossLink \"JSG.graph.attr.ItemAttributes\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getItemAttributes",
            "return": {
                "description": "The graph item's attributes.",
                "type": "JSG.graph.attr.ItemAttributes"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 652,
            "description": "Convenience method to directly receive an ItemAttributes by its name.",
            "itemtype": "method",
            "name": "getItemAttribute",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the attribute to get.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The corresponding Attribute object or <code>undefined</code>\nif none exists.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 663,
            "description": "Convenience method to directly set an ItemAttributes value.</br>\n<b>Note:</b> this method will trigger an event.",
            "itemtype": "method",
            "name": "setItemAttribute",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the attribute to set the value of.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value or Expression for this Attribute.\nreturn {Boolean} <code>true</code> if Attribute value was set, <code>false</code> otherwise.",
                    "type": "JSG.graph.expr.Expression | Object"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 676,
            "description": "Returns the layout attributes of this graph item.",
            "itemtype": "method",
            "name": "getLayoutAttributes",
            "return": {
                "description": "The graph item's layout attributes.",
                "type": "JSG.graph.attr.LayoutAttributes"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 686,
            "description": "Replaces the currently used layout attributes with given one.",
            "itemtype": "method",
            "name": "setLayoutAttributes",
            "params": [
                {
                    "name": "layoutattr",
                    "description": "The new layout attributes to use.",
                    "type": "JSG.graph.attr.LayoutAttributes"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 704,
            "description": "Returns a custom reference. A custom reference can be provided to identify custom expressions in formulas.",
            "itemtype": "method",
            "name": "getCustomReference",
            "return": {
                "description": "A valid reference.",
                "type": "JSG.graph.expr.Reference"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 714,
            "description": "Returns a list of graph items which are defined as friends to this item.</br>\nCalling this method has the same effect as calling <code>JSG.graphItemFactory.getFriends(this);</code>\nSo the actual friends definition is defined within JSG.graphItemFactory.</br>\nSee {{#crossLink \"JSG.graph.model.GraphItemFactory\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "getFriends",
            "return": {
                "description": "A list of graph items representing current friends.",
                "type": "Array"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 731,
            "description": "Sets the item's pin to given coordinate.</br>\nCalling this method will actually move this item. The new pin location defined by given coordinate\nwill be interpreted as relative to items parent.",
            "itemtype": "method",
            "name": "setPinCoordinateTo",
            "params": [
                {
                    "name": "coordinate",
                    "description": "The new pin location.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 742,
            "description": "Sets the item's pin to given point.</br>\nCalling this method will actually move this item. The new pin location defined by given point\nwill be interpreted as relative to items parent.",
            "itemtype": "method",
            "name": "setPinCoordinateTo",
            "params": [
                {
                    "name": "point",
                    "description": "The new pin location.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 753,
            "description": "Sets the item's pin to given x, y values.</br>\nCalling this method will actually move this item. The new pin location defined by given x and y\nvalues will be interpreted as relative to items parent.",
            "itemtype": "method",
            "name": "setPinCoordinateTo",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate of new pin location.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate of new pin location.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 766,
            "description": "Returns the current pin location as point.</br>\nSee {{#crossLink \"JSG.graph.model.GraphItem/getOrigin:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "getPinPoint",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse, if not supplied a new point will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The pin location.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 778,
            "description": "Returns the origin of this graph item relative to its parent.</br>\nThe origin is determined by the item's total pin, i.e. the pin and its local pin.</br>\nSee {{#crossLink \"JSG.graph.Pin\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "getOrigin",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse, if not supplied a new point will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The items origin.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 793,
            "description": "Sets the origin of this graph item relative to its parent.",
            "itemtype": "method",
            "name": "setOriginTo",
            "params": [
                {
                    "name": "point",
                    "description": "The new origin location.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 802,
            "description": "Sets the origin of this graph item relative to its parent.",
            "itemtype": "method",
            "name": "setOrigin",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate of new origin location.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate of new origin location.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 817,
            "description": "Translates this items pin about specified delta.</br>\n<b>Note:</b> this will remove any previously pin formula.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "dX",
                    "description": "The delta x.",
                    "type": "Number"
                },
                {
                    "name": "dY",
                    "description": "The delta y.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 830,
            "description": "Returns the current angle expression.",
            "itemtype": "method",
            "name": "getAngle",
            "return": {
                "description": "The angle expression.",
                "type": "JSG.graph.expr.NumberExpression"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 839,
            "description": "Sets this items angle to given value or expression.",
            "itemtype": "method",
            "name": "setAngle",
            "params": [
                {
                    "name": "angle",
                    "description": "The new angle.",
                    "type": "JSG.graph.expr.NumberExpression | Number"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 858,
            "description": "Returns the current bounding box relative to items pin.</br>\nThe bounding box covers all points defined by items shape.",
            "itemtype": "method",
            "name": "getBoundingBox",
            "params": [
                {
                    "name": "reusebbox",
                    "description": "An optional bounding box to reuse, if not supplied a new one will be created.",
                    "type": "JSG.geometry.BoundingBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "The items bounding box.",
                "type": "JSG.geometry.BoundingBox"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 872,
            "description": "Returns the total bounding Rectangle of this item. </br>\nThe total bounding Rectangle encloses all points of this item translated BoundingBox joined with\nthe total bounding Rectangle of all of its sub items. An optional target item to use for\ntranslating the BoundingBox can be specified. If not given, this item is set as target.",
            "itemtype": "method",
            "name": "getTotalBoundingRect",
            "params": [
                {
                    "name": "target",
                    "description": "An optional target item to translate the BoundingBox to.",
                    "type": "JSG.graph.model.GraphItem",
                    "optional": true
                },
                {
                    "name": "reuserect",
                    "description": "An optional Rectangle to reuse, if not supplied a new one will be created.",
                    "type": "JSG.geometry.Rectangle",
                    "optional": true
                }
            ],
            "return": {
                "description": "The total bounding rectangle of this item.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 903,
            "description": "Returns the current center point of this GraphItem. </br>\nThe returned point is the center of the items corresponding\n{{#crossLink \"JSG.geometry.BoundingBox\"}}{{/crossLink}} and is given relative to items pin.",
            "itemtype": "method",
            "name": "getCenter",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "An optional Point to reuse, if not supplied a new one will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The center point of this item.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 915,
            "description": "Sets the center of this GraphItem to the specified location.</br>\n<b>Note:</b> this actually moves item pin, so that the items center is at given location.",
            "itemtype": "method",
            "name": "setCenterTo",
            "params": [
                {
                    "name": "point",
                    "description": "The new center point.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 925,
            "description": "Sets the center of this GraphItem to the specified location.</br>\n<b>Note:</b> this actually moves item pin, so that the items center is at given location.",
            "itemtype": "method",
            "name": "setCenter",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate of new center location.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate of new center location.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 941,
            "description": "Sets the bounding box to given box.</br>\n<b>Note:</b> this could change item's pin, so after calling this method the item's origin may has changed.",
            "itemtype": "method",
            "name": "setBoundingBoxTo",
            "params": [
                {
                    "name": "newbbox",
                    "description": "The new bounding box.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 984,
            "description": "Returns the current item size.</br>\n<b>Note:</b> this method takes the current collapsed state into account. So if the item is\ncollapsed a copy of inner size with adjusted values is returned. If the item is not collapsed this\nmethod provides direct access to underlying size object. The <code>raw</code> flag can be used to\nget the underlying size object, regardless of current state. Default for this is <code>false</code>",
            "itemtype": "method",
            "name": "getSize",
            "params": [
                {
                    "name": "raw",
                    "description": "Specify <code>true</code> to get direct access to underlying size object, <code>false</code> to take inner state into account.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The item size.",
                "type": "JSG.graph.Size"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1019,
            "description": "Returns current size as point.</br>\nSee {{#crossLink \"JSG.graph.model.GraphItem/getSize:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "getSizeAsPoint",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse, if not supplied a new point will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current size as point.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1042,
            "description": "Returns the current width expression.",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "The width expression.",
                "type": "JSG.graph.expr.NumberExpression"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1058,
            "description": "Returns the current height expression.",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "The height expression.",
                "type": "JSG.graph.expr.NumberExpression"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1075,
            "description": "Returns the minimum size (in 1/100mm) to use for this GraphItem. That means the neither the\nwidth nor the height of this GraphItem is less than the returned minimum size.<br/>\nSubclasses can override this method to allow different minimum sizes.\nNote: negative values will be ignored, i.e. no minimum size.",
            "itemtype": "method",
            "name": "getMinSize",
            "return": {
                "description": "The minimum size for this GraphItem.",
                "type": "Number"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1088,
            "description": "Sets the item size.",
            "itemtype": "method",
            "name": "setSizeTo",
            "params": [
                {
                    "name": "size",
                    "description": "The new item size.",
                    "type": "JSG.graph.Size"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1097,
            "description": "Sets the item size to given point values.",
            "itemtype": "method",
            "name": "setSizeToPoint",
            "params": [
                {
                    "name": "point",
                    "description": "A point which defines the new size.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1106,
            "description": "Sets the item size to the given width and height expressions or value.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "wExpr",
                    "description": "The new width expression or the new width value.",
                    "type": "JSG.graph.expr.NumberExpression | Number"
                },
                {
                    "name": "hExpr",
                    "description": "The new height expression or the new height value.",
                    "type": "JSG.graph.expr.NumberExpression | Number"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1156,
            "description": "Sets the item width to given expressions or value.",
            "itemtype": "method",
            "name": "setWidth",
            "params": [
                {
                    "name": "wExpr",
                    "description": "The new width expression or the new width value.",
                    "type": "JSG.graph.expr.NumberExpression | Number"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1165,
            "description": "Sets the item height to given expressions or value.",
            "itemtype": "method",
            "name": "setHeight",
            "params": [
                {
                    "name": "hExpr",
                    "description": "The new height expression or the new height value.",
                    "type": "JSG.graph.expr.NumberExpression | Number"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1175,
            "description": "Sets the item collapsed size to the given width and height expressions or value.",
            "itemtype": "method",
            "name": "setCollapsedSize",
            "params": [
                {
                    "name": "wExpr",
                    "description": "The new width expression or the new width value.",
                    "type": "JSG.graph.expr.NumberExpression | Number"
                },
                {
                    "name": "hExpr",
                    "description": "The new height expression or the new height value.",
                    "type": "JSG.graph.expr.NumberExpression | Number"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1225,
            "description": "Replaces current item shape with given one.",
            "itemtype": "method",
            "name": "setShapeTo",
            "params": [
                {
                    "name": "newshape",
                    "description": "The new item shape.",
                    "type": "JSG.graph.model.shapes.Shape"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1252,
            "description": "Returns direct access to inner used shape.",
            "itemtype": "method",
            "name": "getShape",
            "return": {
                "description": "Current item shape.",
                "type": "JSG.graph.model.shapes.Shape"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1262,
            "description": "Evaluates all {{#crossLink \"JSG.graph.expr.Expression\"}}{{/crossLink}}s used by this item.\nE.g. expressions within properties, attributes, formats and shape are evaluated.</br>\n<b>Note:</b> subitems will be evaluated too!",
            "itemtype": "method",
            "name": "evaluate",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1330,
            "description": "Resolves parent references within internally used {{#crossLink \"JSG.graph.expr.Expression\"}}{{/crossLink}}s.</br>\nThe passed GraphItem is used to resolve parent reference and the optional <code>doRemove</code>\nflag can be used to clear the complete Expression formula.<br/>\nThis is useful in cases like copy & paste where the paste parent is not necessarily equal to\nthe copy parent.",
            "itemtype": "method",
            "name": "resolveParentReference",
            "params": [
                {
                    "name": "item",
                    "description": "Used to resolve parent reference.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "doRemove",
                    "description": "Specify <code>true</code> to remove value Expression formula completely.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1364,
            "description": "Rotates this item around specified point or around its pin if no rotation point is given.",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "The rotation angle in radiant.",
                    "type": "Number"
                },
                {
                    "name": "point",
                    "description": "An optional rotation point.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1382,
            "description": "Adds a new text node with given text to this item.</br>\nBy default this method tries to place the created text node at the next free position defined by\nvertical and horizontal format properties.</br>\n<b>Note:</b> calling this method has only an effect if\n{{#crossLink \"JSG.graph.model.GraphItem/isAddLabelAllowed:method\"}}{{/crossLink}} returns\n<code>true</code>.</br>\nFurther note: if an AttributeExpression is passed as label text, this method creates and returns\nan AttributedTextNode.\nSee {{#crossLink \"JSG.graph.attr.TextFormatAttributes.VerticalTextPosition\"}}{{/crossLink}},\n{{#crossLink \"JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition\"}}{{/crossLink}} and\n{{#crossLink \"JSG.graph.model.AttributedTextNode\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "addLabel",
            "params": [
                {
                    "name": "text",
                    "description": "The text of the new text node.",
                    "type": "JSG.graph.expr.Expression | JSG.graph.expr.AttributeExpression | String"
                },
                {
                    "name": "textnode",
                    "description": "An optional text node, if specified this one will be taken as label.",
                    "type": "JSG.graph.model.TextNode",
                    "optional": true
                }
            ],
            "return": {
                "description": "The created text node or <code>undefined</code> if adding a label is not allowed.",
                "type": "JSG.graph.model.TextNode"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1460,
            "description": "Returns <code>true</code> if this item supports simple label adding via\n{{#crossLink \"JSG.graph.model.GraphItem/addLabel:method\"}}{{/crossLink}},\n<code>false</code> otherwise.</br>\nThis method is intended to be overwritten by subclasses. Default implementation simply returns\n<code>true</code>.",
            "itemtype": "method",
            "name": "isAddLabelAllowed",
            "return": {
                "description": "<code>true</code> if label adding is supported, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1474,
            "description": "Returns the layer expression of this item.</br>\nLayers are used to change selection and visibility state of items.</br>\nSee {{#crossLink \"JSG.graph.model.Layer\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "getLayer",
            "return": {
                "description": "The layer expression.",
                "type": "JSG.graph.expr.StringExpression"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1485,
            "description": "Sets the new layer expression or value.",
            "itemtype": "method",
            "name": "setLayer",
            "params": [
                {
                    "name": "newLayer",
                    "description": "The new layer expression.",
                    "type": "JSG.graph.expr.StringExpression"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1505,
            "description": "Returns the type expression for this item.",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "The type expression.",
                "type": "JSG.graph.expr.StringExpression"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1514,
            "description": "Sets the new type expression or value.",
            "itemtype": "method",
            "name": "setType",
            "params": [
                {
                    "name": "type",
                    "description": "The new type expression or value.",
                    "type": "JSG.graph.expr.StringExpression"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1532,
            "description": "Returns the name expression for this item.",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "The type expression.",
                "type": "JSG.graph.expr.StringExpression"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1541,
            "description": "Sets the new name expression or value.",
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "type",
                    "description": "The new type expression or value.",
                    "type": "JSG.graph.expr.StringExpression"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1559,
            "description": "Calls layout on this item and on all of its subitems.</br>\nNote that subitems are traversed first.",
            "itemtype": "method",
            "name": "layoutAll",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1575,
            "description": "Layout this item.",
            "itemtype": "method",
            "name": "layout",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1711,
            "description": "Calculates the bounding rectangle which covers all inner subitems. This method is only used during\nlayout.",
            "itemtype": "method",
            "name": "_getBoundingRectOffAllSubItems",
            "params": [
                {
                    "name": "rect",
                    "description": "The starting rectangle which will be extended to cover subitems.",
                    "type": "JSG.geometry.Rectangle"
                },
                {
                    "name": "sourceItem",
                    "description": "The initial graph item to start subitems traversal at.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "origin",
                    "description": "The reference origin used to translate rectangles.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1761,
            "description": "Updates the positions of each registered text node depending on its text position setting.</br>\nSee {{#crossLink \"JSG.graph.attr.TextFormatAttributes.VerticalTextPosition\"}}{{/crossLink}} and\n{{#crossLink \"JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "updateLabelPositions",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1847,
            "description": "Adds a watermark to this GraphItem.",
            "itemtype": "method",
            "name": "addWatermark",
            "params": [
                {
                    "name": "text",
                    "description": "Text to display as watermark.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The watermark attribute set.",
                "type": "JSG.graph.attr.WatermarkAttributes"
            },
            "since": "1.6.7",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1867,
            "description": "Returns the watermark, if defined.",
            "itemtype": "method",
            "name": "getWatermark",
            "return": {
                "description": "The watermark definition.",
                "type": "JSG.graph.attr.WatermarkAttributes"
            },
            "since": "1.6.7",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1878,
            "description": "Returns the inner used format attributes.",
            "itemtype": "method",
            "name": "getFormat",
            "return": {
                "description": "The format attributes.",
                "type": "JSG.graph.attr.FormatAttributes"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1888,
            "description": "Returns the inner used text format attributes.</br>\n<b>Note:</b> if this item has no text format a new text format is created and returned.",
            "itemtype": "method",
            "name": "getTextFormat",
            "return": {
                "description": "The text format attributes.",
                "type": "JSG.graph.attr.TextFormatAttributes"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1899,
            "description": "Returns the number of {{#crossLink \"JSG.graph.model.TextNode\"}}{{/crossLink}}s this item currently\nhas as subitems.",
            "itemtype": "method",
            "name": "getTextItemCount",
            "return": {
                "description": "The number of text nodes added to this item.",
                "type": "Number"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1917,
            "description": "Returns the parent item or <code>undefined</code> if item has none.",
            "itemtype": "method",
            "name": "getParent",
            "return": {
                "description": "The parent item or <code>undefined</code>.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1927,
            "description": "Changes the parent of this item.</br>\nThis will deregister this item from its old parent and evaluate it after adding to new parent.",
            "itemtype": "method",
            "name": "changeParent",
            "params": [
                {
                    "name": "newparent",
                    "description": "The new parent item.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1967,
            "description": "Returns the {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}} instance this item belongs to\nor <code>undefined</code> if it is not added yet.",
            "itemtype": "method",
            "name": "getGraph",
            "return": {
                "description": "The graph this item was added to or <code>undefined</code>.",
                "type": "JSG.graph.model.Graph"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1978,
            "description": "Returns direct access to the inner list of sub items.",
            "itemtype": "method",
            "name": "getItems",
            "return": {
                "description": "The list of inner sub items.",
                "type": "Array"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 1988,
            "description": "Returns access to a sub item at the given index.",
            "itemtype": "method",
            "name": "getItemAt",
            "params": [
                {
                    "name": "index",
                    "description": "Index of item to retrieve.",
                    "type": "Index"
                }
            ],
            "return": {
                "description": "Sub items at the index position.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2003,
            "description": "Returns number of sub items.",
            "itemtype": "method",
            "name": "getItemCount",
            "return": {
                "description": "Current number of Sub items .",
                "type": "Number"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2013,
            "description": "Looks up an item by given path.",
            "itemtype": "method",
            "name": "findItemByPath",
            "params": [
                {
                    "name": "path",
                    "description": "The path of the item to find.",
                    "type": "JSG.graph.model.Path"
                }
            ],
            "return": {
                "description": "The item for given path or <code>undefined</code>.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2043,
            "description": "Adds given item as a sub item.</br>\n<b>Note:</b> if given item is already a sub item of this GraphItem, calling this method has no effect.<br/>\nThe index parameter is optional and if not set or if it is out or range the given item is simply\nappend to the subitems list. </br>\nFurthermore note that the passed item will be removed from its parent first if it was not done before.",
            "itemtype": "method",
            "name": "addItem",
            "params": [
                {
                    "name": "item",
                    "description": "The item to add.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "atIndex",
                    "description": "An optional index to specify the position within subitems list.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The added item or <code>undefined</code> if item was not added.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2078,
            "description": "Assigns a new ID to this graph item and to all of it sub items.</br>\nAn ID is only assigned if this graph item has no ID yet or if the force parameter is set to <code>true</code>. In both\ncases the IDs of the sub-items are newly assigned.\n<b>Note:</b> usually it is not required to call this method from outside.",
            "itemtype": "method",
            "name": "_assignId",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2115,
            "description": "Creates a new id.</br>\n<b>Note:</b> usually it is not required to call this method from outside.",
            "itemtype": "method",
            "name": "_createId",
            "return": {
                "description": "A new unique id or <code>undefined</code> if this item was not added to a graph yet.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2128,
            "description": "Removes given item from the list of sub items.<br/>\nNote: calling this method has no effect if passed item either has no parent or a different one\nthan this GraphItem.",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "item",
                    "description": "The item to remove.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2151,
            "description": "This method gets called if this item is about to be removed from its parent.</br>\nSubclasses should overwrite {{#crossLink \"JSG.graph.model.GraphItem/release:method\"}}{{/crossLink}} to perform\nany tasks on removal.",
            "itemtype": "method",
            "name": "_notifyRemove",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2169,
            "description": "This method is called before this item will be removed.</br>\nSubclasses should overwrite this method to perform any tasks on removal. Default implementation\ndoes nothing.",
            "itemtype": "method",
            "name": "release",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2179,
            "description": "Returns the index of this item within the sub items list of its parent.",
            "itemtype": "method",
            "name": "getIndex",
            "return": {
                "description": "This items index.",
                "type": "Number"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2189,
            "description": "Moves this item to the top of its parent sub items list.",
            "itemtype": "method",
            "name": "moveToTop",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2197,
            "description": "Moves this item one place up within the sub items list of its parent.",
            "itemtype": "method",
            "name": "moveUp",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2206,
            "description": "Moves this item to the bottom of its parent sub items list.",
            "itemtype": "method",
            "name": "moveToBottom",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2214,
            "description": "Moves this item one place down within the sub items list of its parent.",
            "itemtype": "method",
            "name": "moveDown",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2223,
            "description": "Moves this item to the specified index within the sub items list of its parent.</br>\nIf the index is out of range calling this method has no effect.",
            "itemtype": "method",
            "name": "moveToIndex",
            "params": [
                {
                    "name": "toIndex",
                    "description": "The index to move this item to.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2245,
            "description": "Translates given point up from this item to specified item.</br>\nAfter calling this method the given point is relative to the origin of specified item. Note that\nno new point is created and that the translation starts at this item parent. This means that the\ngiven point should be relative to this item parent.",
            "itemtype": "method",
            "name": "getTranslatedPoint",
            "params": [
                {
                    "name": "point",
                    "description": "The point to translate.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "toItem",
                    "description": "The item to translate point to.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "The translated point as convenience.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2265,
            "description": "Translates given point from item parent.</br>\nThat means that the item origin is subtracted from given point and any rotation is applied.",
            "itemtype": "method",
            "name": "translateFromParent",
            "params": [
                {
                    "name": "point",
                    "description": "The point to translate.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The translated point as convenience.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2280,
            "description": "Translates given point to item parent.</br>\nThat means that any rotation is applied to given point and item origin is added.",
            "itemtype": "method",
            "name": "translateToParent",
            "params": [
                {
                    "name": "point",
                    "description": "The point to translate.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The translated point as convenience.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2296,
            "description": "Returns translated shape points, i.e. the shape points are relative to given item.",
            "itemtype": "method",
            "name": "getTranslatedShapePoints",
            "params": [
                {
                    "name": "toItem",
                    "description": "The item to translate points to.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "reusepoints",
                    "description": "An optional array of points to reuse. If not provided a new one will be created.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of translated shape points.",
                "type": "Array"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2336,
            "description": "Returns the translated bounding box of this item.</br>\nThat means the returned bounding box is relative to given item.",
            "itemtype": "method",
            "name": "getTranslatedBoundingBox",
            "params": [
                {
                    "name": "toItem",
                    "description": "The item to translate bounding box to.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "reusebbox",
                    "description": "An optional bounding box to reuse. If not provided a new one will be created.",
                    "type": "JSG.geometry.BoundingBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "The translated bounding box.",
                "type": "JSG.geometry.BoundingBox"
            },
            "deprecated": true,
            "deprecationMessage": "use {{#crossLink \"JSG.graph.Utils.translateBoundingBoxUp:method\"}}{{/crossLink}}",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2359,
            "description": "Translates given bounding box to item parent.",
            "itemtype": "method",
            "name": "_translateBoundingBoxToParent",
            "params": [
                {
                    "name": "bbox",
                    "description": "The bounding box to translate.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "access": "private",
            "tagname": "",
            "deprecated": true,
            "deprecationMessage": "use public {{#crossLink \"JSG.graph.model.GraphItem/translateBoundingBoxToParent:method\"}}{{/crossLink}}",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2374,
            "description": "Translates given bounding box to item parent.",
            "itemtype": "method",
            "name": "translateBoundingBoxToParent",
            "params": [
                {
                    "name": "bbox",
                    "description": "The bounding box to translate.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "return": {
                "description": "The passed and now translated bbox as convenience.",
                "type": "JSG.geometry.BoundingBox"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2388,
            "description": "Translates given bounding box from this item parent.",
            "itemtype": "method",
            "name": "translateBoundingBoxFromParent",
            "params": [
                {
                    "name": "bbox",
                    "description": "The bounding box to translate.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "return": {
                "description": "The passed and now translated bbox as convenience.",
                "type": "JSG.geometry.BoundingBox"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2403,
            "description": "Checks if given point is within this item bounding box and within the area defined by its inner\nshape.</br>\nThe option find flag can be used to affect the result of this method.",
            "itemtype": "method",
            "name": "containsPoint",
            "params": [
                {
                    "name": "point",
                    "description": "The point to test.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "findFlag",
                    "description": "A flag to affect the result.",
                    "type": "JSG.graph.controller.FindFlags",
                    "optional": true
                }
            ],
            "return": {
                "description": "<code>true</code> if item contains given point, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2448,
            "description": "Saves this item to XML.</br>\nSet the optional <code>absolute</code> parameter to specify if the GraphItem pin and angle should\nbe saved absolute, i.e. relative to the CoordinateSystem of the Graph which contains this GraphItem.",
            "itemtype": "method",
            "name": "saveXML",
            "params": [
                {
                    "name": "file",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                },
                {
                    "name": "absolute",
                    "description": "If set to <code>true</code> the GraphItem pin and angle will be saved\nrelative to its Graph.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2514,
            "description": "Saves the content of this item to XML.</br>\nSet the optional <code>absolute</code> parameter to specify if the GraphItem pin and angle should\nbe saved absolute, i.e. relative to the CoordinateSystem of the Graph which contains this GraphItem.</br>\nSubclasses can overwrite to perform custom saving but should call this method before.",
            "itemtype": "method",
            "name": "saveXMLContent",
            "params": [
                {
                    "name": "file",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                },
                {
                    "name": "absolute",
                    "description": "If set to <code>true</code> the GraphItem pin and angle will be saved\nrelative to its Graph.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2561,
            "description": "Reads an item from given XML Node.",
            "itemtype": "method",
            "name": "readXML",
            "params": [
                {
                    "name": "xmlnode",
                    "description": "Node to read from.",
                    "type": "Node"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2701,
            "description": "Called when XML of given sub-item was read. <br/>\nSubclasses can overwrite. Default implementation adjust {{#crossLink \"JSG.graph.attr.TextFormatAttributes\"}}{{/crossLink}}\nsetting for {{#crossLink \"JSG.graph.model.TextNode\"}}{{/crossLink}}s",
            "itemtype": "method",
            "name": "onReadSubItem",
            "params": [
                {
                    "name": "subitem",
                    "description": "The sub-item which was read.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "parent",
                    "description": "The parent of sub-item.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2723,
            "description": "Tries to find a sub item of this item by given id.",
            "itemtype": "method",
            "name": "getItemById",
            "params": [
                {
                    "name": "id",
                    "description": "Id of the item to find.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the corresponding item or <code>undefined</code> if none could be found.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2746,
            "description": "Tries to find a sub item of this item by given name.",
            "itemtype": "method",
            "name": "getItemByName",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the item to find.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the corresponding item or <code>undefined</code> if none could be found.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2769,
            "description": "Restores ids within expressions of this item sub items.",
            "itemtype": "method",
            "name": "_restoreConnection",
            "params": [
                {
                    "name": "graph",
                    "description": "A graph instance used to find any items by ids.",
                    "type": "JSG.graph.model.Graph"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2842,
            "description": "Returns the TextNode found at specified location. If no location is provided or if no TextNode contains provided\nlocation the first TextNode found is returned as default.<br/>\nNote: only the sub items of this item are checked! This method returns <code>undefined</code> if no TextNode could\nbe found.",
            "itemtype": "method",
            "name": "getTextSubItem",
            "params": [
                {
                    "name": "loc",
                    "description": "A location relative to this item.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "A TextNode or <code>undefined</code> if none could be found.",
                "type": "JSG.graph.model.TextNode"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2867,
            "description": "Disables execution of GraphItems <code>refresh</code> function.",
            "itemtype": "method",
            "name": "disableRefresh",
            "deprecated": true,
            "deprecationMessage": "This method is currently under review!",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2876,
            "description": "Enables execution of GraphItems <code>refresh</code> function.",
            "itemtype": "method",
            "name": "enableRefresh",
            "params": [
                {
                    "name": "execute",
                    "description": "If set to <code>true</code> the refresh function is called immediately.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "deprecated": true,
            "deprecationMessage": "This method is currently under review!",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2890,
            "description": "Returns if refresh is enabled or disabled. Disabled means that a call to <code>refresh</code>\nhas no effect if it is not forced.",
            "itemtype": "method",
            "name": "isRefreshEnabled",
            "return": {
                "description": "<code>true</code> if refresh is enabled, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2901,
            "description": "Refreshes this item.</br>\nThis method can be used to update any used cache. <b>Note:</b> the framework assumes that after\ncalling this method this item and all of its sub items are up to date!",
            "itemtype": "method",
            "name": "refresh",
            "params": [
                {
                    "name": "force",
                    "description": "If set to <code>true</code> refresh sends an event even if inner cache was not changed.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2930,
            "description": "Updates inner cache.",
            "itemtype": "method",
            "name": "_update",
            "return": {
                "description": "<code>true</code> if cache changed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2943,
            "description": "Recalculates, the cached origin of this graph item.",
            "itemtype": "method",
            "name": "_updateOrigin",
            "return": {
                "description": "<code>true</code> if cache changed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2963,
            "description": "Recalculates, the cached bounding box of this graph item.",
            "itemtype": "method",
            "name": "_updateBoundingBox",
            "return": {
                "description": "<code>true</code> if cache changed, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2984,
            "description": "Returns the ConditionManager to add, remove or change conditions registered to this GraphItem.",
            "itemtype": "method",
            "name": "getConditionManager",
            "return": {
                "description": "The ConditionManager of this GraphItem.",
                "type": "JSG.graph.model.ConditionManager"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItem.js",
            "line": 2996,
            "description": "Checks if any conditions are registered to this GraphItem.<br/>\nNote: conditions are not directly registered to this GraphItem. Instead a ConditionManager is used\nto handle condition related tasks. See {{#crossLink \"JSG.graph.model.ConditionManager\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "hasConditions",
            "return": {
                "description": "<code>true</code> if this GraphItem as any registered conditions, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.GraphItem",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItemFactory.js",
            "line": 27,
            "description": "Creates a new graph item from given string.",
            "itemtype": "method",
            "name": "createItemFromString",
            "params": [
                {
                    "name": "typeStr",
                    "description": "A unique string to identify the item to create.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A new graph item.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.graph.model.GraphItemFactory",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItemFactory.js",
            "line": 959,
            "description": "Creates and returns an array of {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s which \nrepresents the friends for items of specified type.</br>\nNote: this method is intended to be overwritten by subclasses. Default implementation simply returns <code>undefined</code>.",
            "itemtype": "method",
            "name": "getFriends",
            "params": [
                {
                    "name": "item",
                    "description": "The GraphItem to create friends for.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "An array of GraphItems",
                "type": "Array"
            },
            "class": "JSG.graph.model.GraphItemFactory",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItemFactory.js",
            "line": 973,
            "description": "Returns a StringExpression which represents the link for the given type.</br>\nNote: this method is intended to be overwritten by subclasses. Default implementation simply returns <code>undefined</code>.",
            "itemtype": "method",
            "name": "getLink",
            "params": [
                {
                    "name": "type",
                    "description": "A unique string to identify the link to create.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a StringExpression representing the link.",
                "type": "JSG.graph.expr.StringExpression"
            },
            "class": "JSG.graph.model.GraphItemFactory",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItemFactory.js",
            "line": 986,
            "description": "Checks if given type classifies a valid subitem for the specified container.</br>\nNote: this method is intended to be overwritten by subclasses. Default implementation simply returns <code>true</code>.",
            "itemtype": "method",
            "name": "isValidSubItem",
            "params": [
                {
                    "name": "GraphItem",
                    "description": "to verify.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "containerType",
                    "description": "A unique string to classify the container type.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<code>true</code> if subitem type is valid for given container type, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.GraphItemFactory",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\GraphItemFactory.js",
            "line": 999,
            "description": "Gives a custom GraphItemFactory the possibility to adjust a GraphItem after it was restored from XML.</br>\nNote: this method is intended to be overwritten by subclasses. Default implementation does nothing.",
            "itemtype": "method",
            "name": "initReadItem",
            "params": [
                {
                    "name": "item",
                    "description": "GraphItem to initialize.\ndeprecated DON'T USE! Currently under review!!",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "class": "JSG.graph.model.GraphItemFactory",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Group.js",
            "line": 26,
            "description": "A layouter object to arrange inner <code>Group</code> items relative to the <code>Group</code>'s \n{{#crossLink \"JSG.geometry.BoundingBox\"}}{{/crossLink}}. Applications can replace this property with a custom\nlayouter. Note: the custom layouter object must provide a {{#crossLink \"JSG.graph.model.Group.Layouter/layout:method\"}}{{/crossLink}}\nmethod which is called whenever a new <code>BoundingBox</code> is set via {{#crossLink \"JSG.graph.model.GraphItem/setBoundingBoxTo:method\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "layouter",
            "type": "{JSG.graph.model.Group.Layouter}",
            "class": "JSG.graph.model.Group",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Group.js",
            "line": 131,
            "description": "Arranges inner items of given group relative to new group bounding-box.",
            "itemtype": "method",
            "name": "layout",
            "params": [
                {
                    "name": "group",
                    "description": "The group to arrange inner items of.",
                    "type": "JSG.graph.model.Group"
                },
                {
                    "name": "oldbox",
                    "description": "The old group bounding-box.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "class": "JSG.graph.model.Group.Layouter",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Group.js",
            "line": 144,
            "description": "Calculates the relative bounding-box factors of each group item relative to old group bounding-box.",
            "itemtype": "method",
            "name": "_initFactors",
            "params": [
                {
                    "name": "group",
                    "description": "The group to arrange inner items of.",
                    "type": "JSG.graph.model.Group"
                },
                {
                    "name": "oldbox",
                    "description": "The old group bounding-box.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.Group.Layouter",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Group.js",
            "line": 166,
            "description": "Creates a new factor object to store reference to affected <code>GraphItem</code> and its corresponding factors.",
            "itemtype": "method",
            "name": "_factorObj",
            "params": [
                {
                    "name": "item",
                    "description": "The graph item arrange.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "tlfactor",
                    "description": "The top-left point of items bound-box relative to old group bounding-box.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "brfactor",
                    "description": "The bottom-right point of items bound-box relative to old group bounding-box.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "reuseobj",
                    "description": "An optional object to reuse.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.Group.Layouter",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Group.js",
            "line": 182,
            "description": "Calculates a factor for given point relative to given bounding-box.",
            "itemtype": "method",
            "name": "_getFactorFor",
            "params": [
                {
                    "name": "pt",
                    "description": "The point to calculate the factor for.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "bbox",
                    "description": "The bounding-box to use.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "return": {
                "description": "The factor of given point relative to specified bounding-box.",
                "type": "JSG.geometry.Point"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.Group.Layouter",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Group.js",
            "line": 199,
            "description": "Arranges each group item relative to new group bounding-box.",
            "itemtype": "method",
            "name": "_update",
            "params": [
                {
                    "name": "group",
                    "description": "The group to arrange inner items of.",
                    "type": "JSG.graph.model.Group"
                },
                {
                    "name": "newbox",
                    "description": "The new group bounding-box.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.Group.Layouter",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Group.js",
            "line": 224,
            "description": "Applies given factor to specified point relative to given bounding-box.",
            "itemtype": "method",
            "name": "_applyFactorTo",
            "params": [
                {
                    "name": "pt",
                    "description": "The point to apply the factor to.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "factor",
                    "description": "The factor to apply.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "bbox",
                    "description": "The bounding-box to use.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "return": {
                "description": "The given point to which specified factor is applied.",
                "type": "JSG.geometry.Point"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.Group.Layouter",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Layer.js",
            "line": 17,
            "description": "Name of the layer.",
            "itemtype": "attribute",
            "name": "name",
            "type": "{String}",
            "class": "JSG.graph.model.Layer",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Layer.js",
            "line": 23,
            "description": "Defines whether items in the layer are visible.",
            "itemtype": "attribute",
            "name": "visible",
            "type": "{Boolean}",
            "optional": 1,
            "default": "true",
            "class": "JSG.graph.model.Layer",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Layer.js",
            "line": 31,
            "description": "Defines whether items in the layer are selectable.",
            "itemtype": "attribute",
            "name": "selectable",
            "type": "{Boolean}",
            "optional": 1,
            "default": "true",
            "class": "JSG.graph.model.Layer",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Layer.js",
            "line": 41,
            "description": "Saves this Layer instance to the given XML Stream.",
            "itemtype": "method",
            "name": "saveXML",
            "params": [
                {
                    "name": "writer",
                    "description": "XML writer to use for streaming.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "class": "JSG.graph.model.Layer",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Layer.js",
            "line": 55,
            "description": "Reads from given DOM node to initialize this Layer.",
            "itemtype": "method",
            "name": "readXML",
            "params": [
                {
                    "name": "xmlnode",
                    "description": "Node to read from.",
                    "type": "Node"
                }
            ],
            "class": "JSG.graph.model.Layer",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 45,
            "description": "Checks if this connection is attached to a target node.",
            "itemtype": "method",
            "name": "hasTargetNode",
            "return": {
                "description": "<code>true</code> if this connection is attached to a target node, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 54,
            "description": "Checks if this connection is attached to a source node.",
            "itemtype": "method",
            "name": "hasSourceNode",
            "return": {
                "description": "<code>true</code> if this connection is attached to a source node, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 64,
            "description": "Returns direct access to the attached source node.</br>\nIf this LineConnection has no attached source node <code>undefined</code> is returned.",
            "itemtype": "method",
            "name": "getSourceNode",
            "return": {
                "description": "The attached source node or <code>undefined</code>.",
                "type": "JSG.graph.model.Node"
            },
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 74,
            "description": "Returns direct access to the attached target node.</br>\nIf this LineConnection has no attached target node <code>undefined</code> is returned.",
            "itemtype": "method",
            "name": "getTargetNode",
            "return": {
                "description": "The attached target node or <code>undefined</code>.",
                "type": "JSG.graph.model.Node"
            },
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 136,
            "description": "Returns the coordinate representing the end point.</br>\n<b>Note:</b> this provides direct access to the underlying shape coordinate!",
            "itemtype": "method",
            "name": "getEndCoordinate",
            "return": {
                "description": "The coordinate representing the end point.",
                "type": "JSG.graph.Coordinate"
            },
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 147,
            "description": "Returns the coordinate representing the start point.</br>\n<b>Note:</b> this is provides direct access to the underlying shape coordinate!",
            "itemtype": "method",
            "name": "getStartCoordinate",
            "return": {
                "description": "The coordinate representing the start point.",
                "type": "JSG.graph.Coordinate"
            },
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 159,
            "description": "Returns the coordinate at specified index or <code>undefined</code> if index is out of range.</br>\n<b>Note:</b> this is provides direct access to the underlying shape coordinate!",
            "itemtype": "method",
            "name": "getCoordinateAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index to get the coordinate at.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The coordinate at given index or <code>undefined<code>.",
                "type": "JSG.graph.Coordinate"
            },
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 171,
            "description": "Returns the end point of the corresponding line shape.</br>\n<b>Note:</b> the point is defined relative to the item's parent origin.",
            "itemtype": "method",
            "name": "getEndPoint",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "A point instance to reuse. If not provided a new point will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The end point.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 184,
            "description": "Returns the start point of the corresponding line shape.</br>\n<b>Note:</b> the point is defined relative to the item's parent origin.",
            "itemtype": "method",
            "name": "getStartPoint",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "A point instance to reuse. If not provided a new point will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The start point.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 196,
            "description": "Returns the point at specified index or <code>undefined</code> if index is out of range.</br>\n<b>Note:</b> the point is defined relative to the item's parent origin.",
            "itemtype": "method",
            "name": "getPointAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index to get the point at.",
                    "type": "Number"
                },
                {
                    "name": "reusepoint",
                    "description": "A point instance to reuse. If not provided a new point will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The point at given index or <code>undefined</code>.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 215,
            "description": "Returns an array of points which currently represents this line connection.</br>\n<b>Note:</b> the points are defined relative to the item's parent origin.",
            "itemtype": "method",
            "name": "getPoints",
            "params": [
                {
                    "name": "reusearray",
                    "description": "An array of points to reuse. If not provided a new one will be created.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of points which represents this line connection.",
                "type": "Array"
            },
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 246,
            "description": "Returns the number of points the underlying shape defines.",
            "itemtype": "method",
            "name": "getPointsCount",
            "return": {
                "description": "The number of points this line connection currently consists of.",
                "type": "Number"
            },
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 257,
            "description": "Sets the coordinate representing the end point.</br>\n<b>Note:</b> this will replace the underlying shape coordinate!",
            "itemtype": "method",
            "name": "setEndCoordinateTo",
            "params": [
                {
                    "name": "coordinate",
                    "description": "The new end coordinate.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 268,
            "description": "Sets the coordinate representing the end point.</br>",
            "itemtype": "method",
            "name": "setEndCoordinate",
            "params": [
                {
                    "name": "xExpr",
                    "description": "The new horizontal coordinate parameter.",
                    "type": "JSG.graph.expr.Expression"
                },
                {
                    "name": "yExpr",
                    "description": "The new vertical coordinate parameter.",
                    "type": "JSG.graph.expr.Expression"
                }
            ],
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 279,
            "description": "Sets the coordinate representing the start point.</br>\n<b>Note:</b> this will replace the underlying shape coordinate!",
            "itemtype": "method",
            "name": "setStartCoordinateTo",
            "params": [
                {
                    "name": "coordinate",
                    "description": "The new start coordinate.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 290,
            "description": "Sets the coordinate representing the start point.</br>\n<b>Note:</b> this will replace the underlying shape coordinate!",
            "itemtype": "method",
            "name": "setStartCoordinate",
            "params": [
                {
                    "name": "xExpr",
                    "description": "The new horizontal coordinate parameter.",
                    "type": "JSG.graph.expr.Expression"
                },
                {
                    "name": "yExpr",
                    "description": "The new vertical coordinate parameter.",
                    "type": "JSG.graph.expr.Expression"
                }
            ],
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 302,
            "description": "Sets the end coordinate of corresponding line shape to given point.</br>\n<b>Note:</b> the new point must be defined relative to the item's parent origin. Furthermore note\nthat this will not replace the end coordinate, but set its values to specified point.",
            "itemtype": "method",
            "name": "setEndPointTo",
            "params": [
                {
                    "name": "point",
                    "description": "The new end point.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 314,
            "description": "Sets the start coordinate of corresponding line shape to given point.</br>\n<b>Note:</b> the new point must be defined relative to the item's parent origin. Furthermore note\nthat this will not replace the start coordinate, but set its values to specified point.",
            "itemtype": "method",
            "name": "setStartPointTo",
            "params": [
                {
                    "name": "point",
                    "description": "The new start point.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 327,
            "description": "Sets the line shape coordinate at specified index to the value of given point.<br/>\nThe coordinate at specified index is not replaced, but set to the values of given point. If \nthe index is out of range calling this method has no effect.</br>\n<b>Note:</b> the new point must be defined relative to the item's parent origin.",
            "itemtype": "method",
            "name": "setPointAt",
            "params": [
                {
                    "name": "index",
                    "description": "The coordinate index to set.",
                    "type": "Index"
                },
                {
                    "name": "point",
                    "description": "The new point at specified index.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 342,
            "description": "Sets all line shape coordinates to the values of given points.</br>\nThis will remove any superfluous coordinates or add them if required. If this LineConnection is\nattached the corresponding source and target coordinates are preserved. The preserved coordinates\nare not replaced, but their values are set to match specified points!</br>\n<b>Note:</b> the new points must be defined relative to the item's parent origin.",
            "itemtype": "method",
            "name": "setPoints",
            "params": [
                {
                    "name": "points",
                    "description": "An array of points to replace the coordinates values.",
                    "type": "Array"
                }
            ],
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 375,
            "itemtype": "method",
            "name": "clearBridges",
            "deprecated": true,
            "deprecationMessage": "DON'T USE!! SUBJECT TO CHANGE!",
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 382,
            "itemtype": "method",
            "name": "addBridgePoint",
            "params": [
                {
                    "name": "point",
                    "description": "The point to add a possible bridge at. Point must be relative to item's parent.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "DON'T USE!! SUBJECT TO CHANGE!",
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 394,
            "description": "Inserts given point or points at specified index. This will create new coordinates within the\nunderlying line shape.</br>\n<b>Note:</b> the new points must be defined relative to the item's parent origin.\n\nExample calls:\n<ul>\n\t<li>line.insertPointsAt(2, newPoint);</li>\n\t<li>line.insertPointsAt(2, newPoint1, newPoint2, newPoint3,...);</li>\n\t<li>line.insertPointsAt(2, [newPoint1, newPoint2,...]);</li>\n</ul>",
            "itemtype": "method",
            "name": "insertPointsAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index to insert new points at.",
                    "type": "Index"
                }
            ],
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 445,
            "description": "Removes the number of coordinates specified by count from the underlying line shape starting at\ngiven index.",
            "itemtype": "method",
            "name": "removePointsAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index to start the removal at.",
                    "type": "Number"
                },
                {
                    "name": "count",
                    "description": "The number of coordinates to remove.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 458,
            "description": "Convenience method to initialize this line connection with a start and end point.</br>\n<b>Note:</b> the points must be defined relative to the item's parent origin.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "startpoint",
                    "description": "The start point to use.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "endpoint",
                    "description": "The end point to use.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 533,
            "description": "Places the origin of this LineConnection to given point without moving it.<br/>\nNote: this will adjust each coordinate of this LineConnection! I.e. each not locked formula will be\noverwritten.",
            "itemtype": "method",
            "name": "placePinTo",
            "params": [
                {
                    "name": "location",
                    "description": "The new origin location relative to line parent.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\LineConnection.js",
            "line": 563,
            "description": "Checks if given point touches the line and returns the zero based line segment index.\n-1 is returned if the point is not on the line. Note: a line segment is defined by two points. A\nline has at least one segment, namely the segment defined by start and end point. If the point\ntouches this segment 0 is returned. If the line has (e.g.) three points, i.e. two segments, and \nthe point touches the segment defined by point 1 and end point, 1 is returned.",
            "itemtype": "method",
            "name": "getLineSegmentAtPoint",
            "params": [
                {
                    "name": "point",
                    "description": "The point to test.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "threshold",
                    "description": "The maximum point distance to the line.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The line segment index or -1 if the point does not touch the line.",
                "type": "Number"
            },
            "class": "JSG.graph.model.LineConnection",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 46,
            "description": "Creates a new model instance. </br>\nThis method is part of our copy-pattern, in which the copy is initially created by\n<code>newInstance</code>. Therefore subclasses should overwrite.",
            "itemtype": "method",
            "name": "newInstance",
            "return": {
                "description": "A new model instance.",
                "type": "JSG.graph.model.Model"
            },
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 58,
            "description": "Creates a copy of this model.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "A copy of this model.",
                "type": "JSG.graph.model.Model"
            },
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 75,
            "description": "Returns the inner AttributeList which contains all attributes currently added to this model.",
            "itemtype": "method",
            "name": "getModelAttributes",
            "return": {
                "description": "An AttributeList containing the Attributes currently added to this model.",
                "type": "JSG.graph.attr.AttributeList"
            },
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 85,
            "description": "Returns the Attribute at specified path or <code>undefined</code> if none could be found.",
            "itemtype": "method",
            "name": "getAttributeAtPath",
            "params": [
                {
                    "name": "path",
                    "description": "A complete Attribute path, i.e. path includes Attribute name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The referenced Attribute or <code>undefined</code>\nif none could be found.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 97,
            "description": "Returns the Attribute value at specified path or <code>undefined</code> if none could be found.",
            "itemtype": "method",
            "name": "getAttributeValueAtPath",
            "params": [
                {
                    "name": "path",
                    "description": "A complete Attribute path, i.e. path includes Attribute name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The referenced Attribute value or undefined if none could be found.",
                "type": "String/Number/boolean"
            },
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 114,
            "description": "Adds given Attribute to this model.</br>\n<b>Note:</b> this will replace any previous added Attribute with the same name!",
            "itemtype": "method",
            "name": "addAttribute",
            "params": [
                {
                    "name": "attribute",
                    "description": "The Attribute to add.",
                    "type": "JSG.graph.attr.Attribute"
                }
            ],
            "return": {
                "description": "The added Attribute or <code>undefined</code> if\nattribute could not be added.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 126,
            "description": "Adds given Attribute to this model using specified path.</br>\nThat means the path specifies the parent attribute to add the Attribute to.<br/>\n<b>Note:</b> this will replace any previous added Attribute for the same path!",
            "itemtype": "method",
            "name": "addAttributeAtPath",
            "params": [
                {
                    "name": "path",
                    "description": "The parent Attribute path.",
                    "type": "String"
                },
                {
                    "name": "attribute",
                    "description": "The Attribute to add.",
                    "type": "JSG.graph.attr.Attribute"
                }
            ],
            "return": {
                "description": "The added Attribute or <code>undefined</code> if\nattribute could not be added.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 141,
            "description": "Removes given Attribute from this model.",
            "itemtype": "method",
            "name": "removeAttribute",
            "params": [
                {
                    "name": "attribute",
                    "description": "The Attribute to remove.",
                    "type": "JSG.graph.attr.Attribute"
                }
            ],
            "return": {
                "description": "The removed attribute as convenience or <code>undefined</code>.",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 152,
            "description": "Removes the Attribute specified by given path.",
            "itemtype": "method",
            "name": "removeAttributeAtPath",
            "params": [
                {
                    "name": "path",
                    "description": "A complete Attribute path, i.e. path includes Attribute name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The removed Attribute or <code>undefined</code>",
                "type": "JSG.graph.attr.Attribute"
            },
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 168,
            "description": "Sets a new value or Expression to given model attribute.</br>\nTo add or replace an attribute use {{#crossLink \"JSG.graph.model.Model/addAttribute:method\"}}{{/crossLink}}.<br/>",
            "itemtype": "method",
            "name": "setAttribute",
            "params": [
                {
                    "name": "attribute",
                    "description": "The attribute to set the value for.",
                    "type": "JSG.graph.attr.Attribute"
                },
                {
                    "name": "value",
                    "description": "The new attribute value or expression.\nreturn {Boolean} <code>true</code> if attribute value was set, <code>false</code> otherwise.",
                    "type": "JSG.graph.expr.Expression | Object"
                }
            ],
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 181,
            "description": "Sets a new value or Expression to the model attribute specified by given path.</br>\nTo add or replace an attribute at a specified path use {{#crossLink \"JSG.graph.model.Model/addAttributeAtPath:method\"}}{{/crossLink}}.<br/>",
            "itemtype": "method",
            "name": "setAttributeAtPath",
            "params": [
                {
                    "name": "path",
                    "description": "A complete attribute path, i.e. a single path of attribute names.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new attribute value or expression.\nreturn {Boolean} <code>true</code> if attribute value was set, <code>false</code> otherwise.",
                    "type": "JSG.graph.expr.Expression | Object"
                }
            ],
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 195,
            "description": "Saves model Attributes to given XML.",
            "itemtype": "method",
            "name": "saveAttributesXML",
            "params": [
                {
                    "name": "xmlnode",
                    "description": "The XML node to save to.",
                    "type": "Node"
                }
            ],
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 212,
            "description": "Returns the unique id of this model.",
            "itemtype": "method",
            "name": "getId",
            "return": {
                "description": "Return the unique id of the model item. The id will remain unchanged even after saving and loading a graph.",
                "type": "Number"
            },
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 222,
            "description": "Set the unique id of the model item. This method should only be used internally by the system. Changing the unique id in a undefined way may\nlead to unpredictable results!",
            "itemtype": "method",
            "name": "setId",
            "params": [
                {
                    "name": "id",
                    "description": "New id for the model item.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 233,
            "description": "Save current model state. Default implementation does nothing.",
            "itemtype": "method",
            "name": "saveState",
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 241,
            "description": "Restore model state. Default implementation does nothing.",
            "itemtype": "method",
            "name": "restoreState",
            "params": [
                {
                    "name": "state",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 250,
            "description": "Adds given event listener to the list of listeners which will be notified when an event with\nspecified id occurs.",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "eventid",
                    "description": "The event id to register listener for.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The event listener to register.",
                    "type": "JSG.graph.model.events.EventListener"
                }
            ],
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 262,
            "description": "Removes given event listener from the list of listeners which will be notified when an event with\nspecified id occurs.",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "eventid",
                    "description": "The event id to deregister listener for.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The event listener to remove.",
                    "type": "JSG.graph.model.events.EventListener"
                }
            ],
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 274,
            "description": "Sends given pre event to all listeners which are registered to the id of specified event.</br>\n<b>Note:</b> the event object is usually the same instance as later used in\n{{#JSG.graph.controller.Model/sendPostEvent:method\"}}{{/crossLink}}. Therefore it is possible to\nattach custom data to the event.",
            "itemtype": "method",
            "name": "sendPreEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The event to send.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 287,
            "description": "Sends given post event to all listeners which are registered to the id of specified event.</br>\n<b>Note:</b> the event object is usually the same instance as used in\n{{#JSG.graph.controller.Model/sendPreEvent:method\"}}{{/crossLink}}. Therefore it is possible to\naccess any formerly attached custom data.",
            "itemtype": "method",
            "name": "sendPostEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The event to send.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 300,
            "description": "Returns <code>true</code> if events are enabled, otherwise <code>false</code>.",
            "itemtype": "method",
            "name": "areEventsEnabled",
            "return": {
                "description": "true if events are enabled, false if not.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 310,
            "description": "Enables event notification.",
            "itemtype": "method",
            "name": "enableEvents",
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 319,
            "description": "Disables event notification, i.e. after calling this method any triggered event will not be propagated\nuntil {{#crossLink \"JSG.graph.model.Model/enableEvents:method\"}}{{/crossLink}} is called again.",
            "itemtype": "method",
            "name": "disableEvents",
            "return": {
                "description": "The events enabled state, i.e. <code>true</code> if events were enabled before, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.Model",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Model.js",
            "line": 350,
            "description": "Unique name constant for the model {{#crossLink \"JSG.graph.attr.AttributeList\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "NAME",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.model.Attributes",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Node.js",
            "line": 63,
            "description": "Returns the title of this node or <code>undefined</code>.<br/>\nThe title of a Node is important for the collapse state, since it is rearranged than. By default the\nfirst inner TextNode instance is used as a title. Subclasses may overwrite this method to return\na different TextNode.",
            "itemtype": "method",
            "name": "getTitle",
            "return": {
                "description": "A TextNode instance representing the title of this Node or\n<code>undefined</code> if no title exists.",
                "type": "JSG.graph.model.TextNode"
            },
            "class": "JSG.graph.model.Node",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Node.js",
            "line": 96,
            "description": "Arranges the given title TextNode.<br/>\nCurrently the title is rearranged on collapse and restored to its original position on expand.\nSubclasses might overwrite this method to implement a different behaviour.",
            "itemtype": "method",
            "name": "layoutTitle",
            "params": [
                {
                    "name": "title",
                    "description": "The title TextNode to rearrange.",
                    "type": "JSG.graph.model.TextNode"
                }
            ],
            "class": "JSG.graph.model.Node",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Node.js",
            "line": 133,
            "description": "Adds given port to the list of ports this node has.",
            "itemtype": "method",
            "name": "addPort",
            "params": [
                {
                    "name": "port",
                    "description": "The port to add.",
                    "type": "JSG.graph.model.Port"
                }
            ],
            "return": {
                "description": "The added port.",
                "type": "JSG.graph.model.Port"
            },
            "class": "JSG.graph.model.Node",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Node.js",
            "line": 163,
            "description": "Adds given port to this node at specified location. The location should be given relative to\nthis nodes origin.</br>\nNote: the specified location will be converted to a relative\n{{#crossLink \"JSG.graph.Coordinate\"}}{{/crossLink}}. That means that the port location is automatically\nadjusted whenever the node size changes.",
            "itemtype": "method",
            "name": "addPortAtLocation",
            "params": [
                {
                    "name": "port",
                    "description": "The port to add.",
                    "type": "JSG.graph.model.Port"
                },
                {
                    "name": "location",
                    "description": "The location to add the port at.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The added port.",
                "type": "JSG.graph.model.Port"
            },
            "class": "JSG.graph.model.Node",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Node.js",
            "line": 185,
            "description": "Adds given port to this node at specified location. The location should be already relative, i.e.\nit should contain factors between 0 and 1 for the x and y coordinates.</br>\nNote: the specified location will be converted to a relative\n{{#crossLink \"JSG.graph.Coordinate\"}}{{/crossLink}}. That means that the port location is automatically\nadjusted whenever the node size changes.",
            "itemtype": "method",
            "name": "addPortAtRelativeLocation",
            "params": [
                {
                    "name": "port",
                    "description": "The port to add.",
                    "type": "JSG.graph.model.Port"
                },
                {
                    "name": "location",
                    "description": "The relative location factors to use.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The added port.",
                "type": "JSG.graph.model.Port"
            },
            "class": "JSG.graph.model.Node",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Node.js",
            "line": 203,
            "description": "Adds given port to this node at specified coordinate.",
            "itemtype": "method",
            "name": "addPortAtCoordinate",
            "params": [
                {
                    "name": "port",
                    "description": "The port to add.",
                    "type": "JSG.graph.model.Port"
                },
                {
                    "name": "coordinate",
                    "description": "The coordinate to add the port at.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "return": {
                "description": "The added port.",
                "type": "JSG.graph.model.Port"
            },
            "class": "JSG.graph.model.Node",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Node.js",
            "line": 216,
            "description": "Returns the port at specified index or <code>undefined</code> if the index is out of range.",
            "itemtype": "method",
            "name": "getPortAt",
            "params": [
                {
                    "name": "index",
                    "description": "The port index within this node.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The port at specified index or <code>undefined</code> .",
                "type": "JSG.graph.model.Port"
            },
            "class": "JSG.graph.model.Node",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Node.js",
            "line": 226,
            "description": "Returns the index of specified port or -1 if port is not in the nodes port list.",
            "itemtype": "method",
            "name": "getPortIndex",
            "params": [
                {
                    "name": "port",
                    "description": "The port to get the index for.",
                    "type": "JSG.graph.model.Port"
                }
            ],
            "return": {
                "description": "The index of specified port or -1 if port is unknown.",
                "type": "Number"
            },
            "class": "JSG.graph.model.Node",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Node.js",
            "line": 236,
            "description": "Returns the list of all ports known to this node.",
            "itemtype": "method",
            "name": "getPorts",
            "return": {
                "description": "The list of all known ports.",
                "type": "Array"
            },
            "class": "JSG.graph.model.Node",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Node.js",
            "line": 245,
            "description": "Checks if this node has ports.",
            "itemtype": "method",
            "name": "hasPorts",
            "return": {
                "description": "<code>true</code> if this node has ports, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.Node",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Node.js",
            "line": 254,
            "description": "Removes all ports from this node.</br>\n<b>Note:</b> attached edges should be detached before.",
            "itemtype": "method",
            "name": "clearPorts",
            "class": "JSG.graph.model.Node",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Node.js",
            "line": 269,
            "description": "Removes given port from this node.</br>\n<b>Note:</b> attached edges should be detached before.",
            "itemtype": "method",
            "name": "removePort",
            "params": [
                {
                    "name": "port",
                    "description": "The port to remove.",
                    "type": "JSG.graph.model.Port"
                }
            ],
            "class": "JSG.graph.model.Node",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Node.js",
            "line": 287,
            "description": "Convenience method to easily add a default port at the center of this node.",
            "itemtype": "method",
            "name": "addCenterPort",
            "return": {
                "description": "The created and added port.",
                "type": "JSG.graph.model.Port"
            },
            "class": "JSG.graph.model.Node",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Node.js",
            "line": 304,
            "description": "Convenience method which adds 4 default ports on each node side.",
            "itemtype": "method",
            "name": "addDefaultPorts",
            "class": "JSG.graph.model.Node",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Node.js",
            "line": 327,
            "description": "Gets the port at specified location or <code>undefined</code> if this node has no port at given\nlocation.</br>\nNote: location must be given relative to this nodes origin.",
            "itemtype": "method",
            "name": "getPortAtLocation",
            "params": [
                {
                    "name": "location",
                    "description": "The location to look at relative to nodes origin.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The port at given location or <code>undefined</code> if none could be found.",
                "type": "JSG.graph.model.Port"
            },
            "class": "JSG.graph.model.Node",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Node.js",
            "line": 355,
            "description": "Returns the port which corresponds to the given id. </br>\n<b>Note:</b> if this node has no port with specified id, the nodes within subitems are traversed\nuntil a port is found. If no port could be found <code>undefined</code> is returned.",
            "itemtype": "method",
            "name": "getPortById",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the port to look for.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The corresponding port or <code>undefined</code> if none could be found.",
                "type": "JSG.graph.model.Port"
            },
            "class": "JSG.graph.model.Node",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Node.js",
            "line": 386,
            "description": "Returns a list of edges attached to this nodes, i.e. each edge is either an incoming or outgoing\nedge and registered to a port of this node.",
            "itemtype": "method",
            "name": "getAttachedEdges",
            "return": {
                "description": "A list of attached edges.",
                "type": "Array"
            },
            "class": "JSG.graph.model.Node",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Path.js",
            "line": 23,
            "description": "Creates a new <code>Path</code> instance from given string.</br>\nNote: the passed string should be create by {{#crossLink \"JSG.graph.model.Path/toString:method\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "fromString",
            "params": [
                {
                    "name": "str",
                    "description": "A string to create a new <code>Path</code> instance from.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A new <code>Path</code> instance.",
                "type": "JSG.graph.model.Path"
            },
            "deprecated": true,
            "deprecationMessage": "WORK IN PROGRESS! Don't use, currently returns undefined!",
            "static": 1,
            "class": "JSG.graph.model.Path",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Path.js",
            "line": 38,
            "description": "The delimiter character internally used by <code>Path</code>. Currently this is the colon (':').",
            "itemtype": "property",
            "name": "_delimiter",
            "type": "String",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.model.Path",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Path.js",
            "line": 48,
            "description": "Returns the common prefix <code>Path</code> of given paths. If passed paths have no prefix in common\n<code>undefined</code> is returned.",
            "itemtype": "method",
            "name": "getCommonPrefix",
            "params": [
                {
                    "name": "path1",
                    "description": "First path to check prefix from.",
                    "type": "JSG.graph.model.Path"
                },
                {
                    "name": "path2",
                    "description": "Second path to check prefix from.",
                    "type": "JSG.graph.model.Path"
                }
            ],
            "return": {
                "description": "The common prefix or <code>undefined</code>",
                "type": "JSG.graph.model.Path"
            },
            "static": 1,
            "class": "JSG.graph.model.Path",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Path.js",
            "line": 78,
            "description": "Adds given id to this path.",
            "itemtype": "method",
            "name": "addId",
            "params": [
                {
                    "name": "id",
                    "description": "The id to add.",
                    "type": "String"
                }
            ],
            "class": "JSG.graph.model.Path",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Path.js",
            "line": 88,
            "description": "Removes and returns next id from this path, starting at first added id. If no IDs are available\n<code>undefined</code> is returned.",
            "itemtype": "method",
            "name": "nextId",
            "return": {
                "description": "The next Id within this path or <code>undefined</code> if path has no more IDs.",
                "type": "String"
            },
            "class": "JSG.graph.model.Path",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Path.js",
            "line": 99,
            "description": "Checks if this path has IDs.",
            "itemtype": "method",
            "name": "hasNextId",
            "return": {
                "description": "<code>true</code> if this path has IDs, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.Path",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Path.js",
            "line": 109,
            "description": "Checks if this path contains given id.",
            "itemtype": "method",
            "name": "containsId",
            "params": [
                {
                    "name": "id",
                    "description": "The id to check.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<code>true</code> if this path contains given id, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.Path",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Path.js",
            "line": 129,
            "description": "Returns a string representation of this path. This string can be used to create a new path instance\nfrom. See {{#crossLink \"JSG.graph.model.Path/fromString:method\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "A string representation of this path.",
                "type": "String"
            },
            "class": "JSG.graph.model.Path",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Port.js",
            "line": 79,
            "description": "Returns the Point to which an edge may connect, relative to specified parent.</br>\nNote: if no parent item is specified the Graph itself is used, i.e. the return point is relative\nto the origin of the outer {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}}.</br>",
            "itemtype": "method",
            "name": "getConnectionPoint",
            "params": [
                {
                    "name": "parent",
                    "description": "The optional parent item to which returned point is relative to.",
                    "type": "JSG.graph.model.GraphItem",
                    "optional": true
                },
                {
                    "name": "reusepoint",
                    "description": "An optional point instance to reuse. If not provided a new one will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The point to which an edge may connect.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.model.Port",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Port.js",
            "line": 99,
            "description": "Returns the coordinate to which an edge may connect.</br>\n<b>Note:</b> the coordinate is relative to the origin of this port.",
            "itemtype": "method",
            "name": "getConnectionCoordinate",
            "return": {
                "description": "The coordinate to use for connection.",
                "type": "JSG.graph.Coordinate"
            },
            "class": "JSG.graph.model.Port",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Port.js",
            "line": 110,
            "description": "Returns the center point of this port.</br>\n<b>Note:</b> the center point is relative to the origin of this port.",
            "itemtype": "method",
            "name": "getCenter",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "An optional point instance to reuse. If not provided a new one will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The cener point of this port.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.model.Port",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Port.js",
            "line": 122,
            "description": "Registers given {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}} to this port.</br>\nThe edge is either registered as outgoing or incoming edge to this port. An edge can never be\nregistered as both in- and outgoing edge.</br>\n<b>Note:</b> mostly it should never be required to call this method outside the API. To attach an edge\nto a port use {{#crossLink \"JSG.graph.model.Edge/setSourcePort:method\"}}{{/crossLink}} or\n{{#crossLink \"JSG.graph.model.Edge/setTargetPort:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "addEdge",
            "params": [
                {
                    "name": "edge",
                    "description": "The edge to register.",
                    "type": "JSG.graph.model.Edge"
                }
            ],
            "class": "JSG.graph.model.Port",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Port.js",
            "line": 143,
            "description": "Unregisters given {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}} from this port.</br>\n<b>Note:</b> mostly it should never be required to call this method outside the API. To detach an edge\nfrom a port use {{#crossLink \"JSG.graph.model.Edge/detachPort:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "remvoeEdge",
            "params": [
                {
                    "name": "edge",
                    "description": "The edge to unregister.",
                    "type": "JSG.graph.model.Edge"
                }
            ],
            "return": {
                "description": "<code>true</code> if edge was removed, <code>false</code> otherwise",
                "type": "Boolean"
            },
            "class": "JSG.graph.model.Port",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Port.js",
            "line": 157,
            "description": "Returns an <code>Array</code> of {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}s which are\ncurrently registered to this port.",
            "itemtype": "method",
            "name": "getEdges",
            "return": {
                "description": "An array of all registered edges.",
                "type": "Array"
            },
            "class": "JSG.graph.model.Port",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Port.js",
            "line": 175,
            "description": "Returns the number of all {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}s which are\ncurrently registered to this port.",
            "itemtype": "method",
            "name": "getEdgesCount",
            "return": {
                "description": "The number of all registered edges.",
                "type": "Number"
            },
            "class": "JSG.graph.model.Port",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Port.js",
            "line": 186,
            "description": "Returns all {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}s which are currently registered\nas incoming edges to this port.",
            "itemtype": "method",
            "name": "getIncomingEdges",
            "return": {
                "description": "An array of all incoming edges.",
                "type": "Array"
            },
            "class": "JSG.graph.model.Port",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\Port.js",
            "line": 196,
            "description": "Returns all {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}s which are currently registered\nas outgoing edges to this port.",
            "itemtype": "method",
            "name": "getOutgoingEdges",
            "return": {
                "description": "An array of all outgoing edges.",
                "type": "Array"
            },
            "class": "JSG.graph.model.Port",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\PortMapper.js",
            "line": 34,
            "description": "Type constant. Used for saving and reading to and from XML.",
            "itemtype": "property",
            "name": "TYPE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.model.PortMapper",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\PortMapper.js",
            "line": 43,
            "description": "Maps specified port for given GraphItem.<br/>\nThis method is a shortcut for calling {{#crossLink \"JSG.graph.model.PortMapper/mapPortId:method\"}}{{/crossLink}}\nwith the IDs of given GraphItem and Port.",
            "itemtype": "method",
            "name": "mapPort",
            "params": [
                {
                    "name": "item",
                    "description": "The GraphItem whose ID is used as key.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "port",
                    "description": "The Port whose ID is used as mapped ID.",
                    "type": "JSG.graph.model.Port"
                }
            ],
            "class": "JSG.graph.model.PortMapper",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\PortMapper.js",
            "line": 55,
            "description": "Maps specified port ID under given key.<br/>\nThis will replace any previously mapped port ID for the same key.",
            "itemtype": "method",
            "name": "mapPortId",
            "params": [
                {
                    "name": "key",
                    "description": "A key to identify mapped port ID.",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "The port ID to map.",
                    "type": "String"
                }
            ],
            "class": "JSG.graph.model.PortMapper",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\PortMapper.js",
            "line": 67,
            "description": "Returns the mapped Port for given key.<br/>\n<b>Note:</b> the returned Port can be a PortMapper as well. To get the first mapped Port which\nis not a PortMapper use {{#crossLink \"JSG.graph.model.PortMapper/getMappedItemPort:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getMappedPort",
            "params": [
                {
                    "name": "key",
                    "description": "A key to identify mapped port.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The mapped port instance or <code>undefined</code> if none exists.",
                "type": "JSG.graph.model.Port"
            },
            "class": "JSG.graph.model.PortMapper",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\PortMapper.js",
            "line": 81,
            "description": "Returns the ID of a mapped Port for given key.<br/>\n<b>Note:</b> the returned ID can be a PortMapper ID as well. To get the first mapped ID which\nis not a PortMapper ID use {{#crossLink \"JSG.graph.model.PortMapper/getMappedItemPortId:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getMappedPortId",
            "params": [
                {
                    "name": "key",
                    "description": "A key to identify mapped port ID.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The mapped port ID or <code>undefined</code> if none exists.",
                "type": "String"
            },
            "class": "JSG.graph.model.PortMapper",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\PortMapper.js",
            "line": 94,
            "description": "Returns the first mapped Port for given key which is not a PortMapper.<br/>\nThat means this method will traverse the path defined by connected PortMappers until a Port is\nfound which is not a PortMapper. If no Port could be found <code>undefined</code> is returned.",
            "itemtype": "method",
            "name": "getMappedItemPort",
            "params": [
                {
                    "name": "key",
                    "description": "A key to identify mapped port.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The mapped port instance or <code>undefined</code> if none exists.",
                "type": "JSG.graph.model.Port"
            },
            "class": "JSG.graph.model.PortMapper",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\PortMapper.js",
            "line": 108,
            "description": "Returns the first mapped port ID for given key which is not the ID of a PortMapper.<br/>\nThat means this method will traverse the path defined by connected PortMappers until a Port ID is\nfound which is not the ID of a PortMapper. If no such ID could be found <code>undefined</code> is\nreturned.",
            "itemtype": "method",
            "name": "getMappedItemPortId",
            "params": [
                {
                    "name": "key",
                    "description": "A key to identify mapped port ID.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The mapped port ID or <code>undefined</code> if none exists.",
                "type": "String"
            },
            "class": "JSG.graph.model.PortMapper",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\State.js",
            "line": 25,
            "description": "The complete class name, i.e. including namespace.",
            "itemtype": "property",
            "name": "CLASSNAME",
            "type": "{String}",
            "static": 1,
            "final": 1,
            "class": "JSG.graph.model.State",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\State.js",
            "line": 36,
            "description": "Returns the complete class String of this state instance. The class String is the name\nof the Attribute instance including its complete path, e.g. the class String of this general Attribute is\n<code>JSG.graph.attr.Attribute</code>.</br>",
            "itemtype": "method",
            "name": "getClassName",
            "return": {
                "description": "The complete class String of this State instance.",
                "type": "String"
            },
            "class": "JSG.graph.model.State",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\State.js",
            "line": 49,
            "description": "Adds given property under specified name to this state object.<br/>\nIf another property was previously stored under same name it will be replaced by given one.<br/>\n<b>Note:</b> for a custom object property the optional <code>classname</code> parameter must be provided. The\nclass name must be fully qualified, i.e. it must include any namespace objects. To restore the \ncustom property the provided class name will than be called with <code>new</code>.",
            "itemtype": "method",
            "name": "addProperty",
            "params": [
                {
                    "name": "name",
                    "description": "The name to store property under.",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "The property to store.",
                    "type": "Object"
                },
                {
                    "name": "classname",
                    "description": "A class name to restore given property from XML.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "A formerly stored property or <code>undefined</code>.",
                "type": "Object"
            },
            "class": "JSG.graph.model.State",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\State.js",
            "line": 75,
            "description": "Returns the property which was stored under given name or <code>undefined</code>.",
            "itemtype": "method",
            "name": "getProperty",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the property to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The stored property or <code>undefined</code>.",
                "type": "Object"
            },
            "class": "JSG.graph.model.State",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\State.js",
            "line": 87,
            "description": "Removes the property which is stored under given name.",
            "itemtype": "method",
            "name": "removeProperty",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the property to remove.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The removed property or <code>undefined</code> if none was removed.",
                "type": "Object"
            },
            "class": "JSG.graph.model.State",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\State.js",
            "line": 103,
            "description": "Copies this state object.<br/>\n<b>Note:</b> if a stored property object provides a <code>copy</code> method it will be copied too!",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "The copied state object.",
                "type": "JSG.graph.model.State"
            },
            "class": "JSG.graph.model.State",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\State.js",
            "line": 125,
            "description": "Saves this state object to XML.",
            "itemtype": "method",
            "name": "saveXML",
            "params": [
                {
                    "name": "xmlwriter",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "class": "JSG.graph.model.State",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\State.js",
            "line": 141,
            "description": "Saves given state entry to XML.<br/>\nThe state entry is a tuple of <code>name</code>, <code>property</code> and <code>classname</code>\nproperties.",
            "itemtype": "method",
            "name": "saveEntry",
            "params": [
                {
                    "name": "entry",
                    "description": "The state object entry to store.",
                    "type": "Object"
                },
                {
                    "name": "xmlwriter",
                    "description": "XMLWriter object to save to.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "class": "JSG.graph.model.State",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\State.js",
            "line": 163,
            "description": "Returns the type of given state object entry.<br/>\nThe returned type string represents either one of the basic Javascript types like <code>Boolean</code>,\n<code>Number</code> or <code>String</code> or it represents a class name.",
            "itemtype": "method",
            "name": "typeFromEntry",
            "params": [
                {
                    "name": "entry",
                    "description": "The state object entry to store.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A type string representing the kind of property given entry contains.",
                "type": "String"
            },
            "class": "JSG.graph.model.State",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\State.js",
            "line": 187,
            "description": "Reads the content of this state object from given XML Node.",
            "itemtype": "method",
            "name": "readXML",
            "params": [
                {
                    "name": "xmlnode",
                    "description": "An XML node to read from.",
                    "type": "Node"
                }
            ],
            "class": "JSG.graph.model.State",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\State.js",
            "line": 207,
            "description": "Reads an state object entry from given XML Node.",
            "itemtype": "method",
            "name": "readEntry",
            "params": [
                {
                    "name": "xmlnode",
                    "description": "An XML node to read from.",
                    "type": "Node"
                }
            ],
            "class": "JSG.graph.model.State",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\State.js",
            "line": 233,
            "description": "Reads a custom object from given XML Node.",
            "itemtype": "method",
            "name": "readObject",
            "params": [
                {
                    "name": "classname",
                    "description": "A fully qualified class name to construct the custom object from.",
                    "type": "String"
                },
                {
                    "name": "xmlnode",
                    "description": "An XML node to read from.",
                    "type": "Node"
                }
            ],
            "class": "JSG.graph.model.State",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\TextNode.js",
            "line": 108,
            "description": "Get current text content expression.",
            "itemtype": "method",
            "name": "getText",
            "return": {
                "description": "Returns current text expression.",
                "type": "JSG.graph.expr.Expression"
            },
            "class": "JSG.graph.model.TextNode",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\TextNode.js",
            "line": 118,
            "description": "Assign new text or text expression to TextNode.",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "text",
                    "description": "New text or text expression.",
                    "type": "JSG.graph.expr.Expression|String"
                }
            ],
            "class": "JSG.graph.model.TextNode",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\TextNode.js",
            "line": 162,
            "description": "Resets precalculated and cached text infos. This is necessary, if the content or the formatting of the text changed.",
            "itemtype": "method",
            "name": "invalidateSize",
            "class": "JSG.graph.model.TextNode",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\TextNode.js",
            "line": 172,
            "description": "Updates the size of this text node to fit the current text.</br>\nIf the size was adjusted the label positions of the text node's parent are updated too.",
            "itemtype": "method",
            "name": "updateSize",
            "class": "JSG.graph.model.TextNode",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\model\\TextNode.js",
            "line": 376,
            "description": "Convenience method to access the current horizontal text alignment as String.",
            "itemtype": "method",
            "name": "getTextAlign",
            "return": {
                "description": "The horizontal text align as string, i.e. either \"center\", \"left\" or \"right\".",
                "type": "String"
            },
            "class": "JSG.graph.model.TextNode",
            "module": "JSG.graph.model",
            "namespace": "JSG.graph.model"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\notifications\\Notification.js",
            "line": 33,
            "description": "An application wide unique name which identifies this notification.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "JSG.graph.notifications.Notification",
            "module": "JSG.graph.notifications",
            "namespace": "JSG.graph.notifications"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\notifications\\Notification.js",
            "line": 41,
            "description": "The object which sends this notification. Note that this an optional property.",
            "itemtype": "property",
            "name": "[object]",
            "type": "String",
            "class": "JSG.graph.notifications.Notification",
            "module": "JSG.graph.notifications",
            "namespace": "JSG.graph.notifications"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\notifications\\Notification.js",
            "line": 48,
            "description": "The event which triggered notification. Note that this an optional property.",
            "itemtype": "property",
            "name": "[event]",
            "type": "{JSG.graph.model.events.Event}",
            "class": "JSG.graph.notifications.Notification",
            "module": "JSG.graph.notifications",
            "namespace": "JSG.graph.notifications"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\notifications\\NotificationCenter.js",
            "line": 23,
            "description": "Returns an Array of entries, i.e. objects with an observer and an optional function.",
            "itemtype": "method",
            "name": "getObservers",
            "params": [
                {
                    "name": "forNotification",
                    "description": "The unique notification name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A list of entries for given notification.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.notifications.NotificationCenter",
            "module": "JSG.graph.notifications",
            "namespace": "JSG.graph.notifications"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\notifications\\NotificationCenter.js",
            "line": 41,
            "description": "Creates a new object with given observer and optional function as sole properties.",
            "itemtype": "method",
            "name": "newEntry",
            "params": [
                {
                    "name": "observer",
                    "description": "The observer object.",
                    "type": "Object"
                },
                {
                    "name": "func",
                    "description": "An optional function.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A new object to serve as an entry within the map of observers.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.notifications.NotificationCenter",
            "module": "JSG.graph.notifications",
            "namespace": "JSG.graph.notifications"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\notifications\\NotificationCenter.js",
            "line": 57,
            "description": "Returns the first entry within given list of entries which match the specified observer.",
            "itemtype": "method",
            "name": "getEntryFor",
            "params": [
                {
                    "name": "observer",
                    "description": "The observer object to get the entry for.",
                    "type": "Object"
                },
                {
                    "name": "entries",
                    "description": "A list of all entries to query.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The matching entry or <code>undefined</code> if none could be found.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.notifications.NotificationCenter",
            "module": "JSG.graph.notifications",
            "namespace": "JSG.graph.notifications"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\notifications\\NotificationCenter.js",
            "line": 77,
            "description": "Creates this NotificationCenter instance and defines its public interface.",
            "itemtype": "method",
            "name": "create",
            "return": {
                "description": "The NotificationCenter instance.",
                "type": "JSG.graph.notifications.NotificationCenter"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.notifications.NotificationCenter",
            "module": "JSG.graph.notifications",
            "namespace": "JSG.graph.notifications"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\notifications\\NotificationCenter.js",
            "line": 86,
            "description": "Registers given observer for specified notification. The <code>func</code> parameter\nis optional and defines a function which should be called on passed observer. If not\nprovided <code>onNotification</code> is called by default. That means the observer\nobject should provide this method.",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "observer",
                    "description": "An observer object which gets notified.",
                    "type": "Object"
                },
                {
                    "name": "forNotification",
                    "description": "The name of the notification the observer is interested in.",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "An optional reference to a function which is called on observer. If not provided\n<code>onNotification</code> is called.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "JSG.graph.notifications.NotificationCenter",
            "module": "JSG.graph.notifications",
            "namespace": "JSG.graph.notifications"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\notifications\\NotificationCenter.js",
            "line": 108,
            "description": "Removes given observer for the specified notification.",
            "itemtype": "method",
            "name": "unregiser",
            "params": [
                {
                    "name": "observer",
                    "description": "The observer to remove.",
                    "type": "Object"
                },
                {
                    "name": "forNotification",
                    "description": "The name of the notification the observer should be removed for.",
                    "type": "String"
                }
            ],
            "class": "JSG.graph.notifications.NotificationCenter",
            "module": "JSG.graph.notifications",
            "namespace": "JSG.graph.notifications"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\notifications\\NotificationCenter.js",
            "line": 125,
            "description": "Sends given notification to all observers which have registered for it.</br>\nThe Notification instance is passed as argument to the function provided by each\nobserver at registration time or to its <code>onNotification</code> method.",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "notification",
                    "description": "The notification to send.",
                    "type": "JSG.graph.notifications.Notification"
                }
            ],
            "class": "JSG.graph.notifications.NotificationCenter",
            "module": "JSG.graph.notifications",
            "namespace": "JSG.graph.notifications"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\notifications\\NotificationCenter.js",
            "line": 162,
            "description": "Returns the sole share NotificationCenter instance.",
            "itemtype": "method",
            "name": "getInstance",
            "return": {
                "description": "The globally shared NotificationCenter instance.",
                "type": "JSG.graph.notifications.NotificationCenter"
            },
            "class": "JSG.graph.notifications.NotificationCenter",
            "module": "JSG.graph.notifications",
            "namespace": "JSG.graph.notifications"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\EdgeProperties.js",
            "line": 36,
            "description": "Helper to get the X Coordinate of the start point.",
            "itemtype": "method",
            "name": "getStartX",
            "return": {
                "description": "X Coordinate of the start point.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.properties.EdgeProperties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\EdgeProperties.js",
            "line": 47,
            "description": "Helper to set the X Coordinate of the start point.",
            "itemtype": "method",
            "name": "setStartX",
            "params": [
                {
                    "name": "x",
                    "description": "New X Coordinate of the start point.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.properties.EdgeProperties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\EdgeProperties.js",
            "line": 60,
            "description": "Helper to get the YX Coordinate of the start point.",
            "itemtype": "method",
            "name": "getStartY",
            "return": {
                "description": "Y Coordinate of the start point.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.properties.EdgeProperties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\EdgeProperties.js",
            "line": 71,
            "description": "Helper to set the Y Coordinate of the start point.",
            "itemtype": "method",
            "name": "setStartY",
            "params": [
                {
                    "name": "y",
                    "description": "New Y Coordinate of the start point.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.properties.EdgeProperties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\EdgeProperties.js",
            "line": 84,
            "description": "Helper to get the X Coordinate of the end point.",
            "itemtype": "method",
            "name": "getEndX",
            "return": {
                "description": "X Coordinate of the end point.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.properties.EdgeProperties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\EdgeProperties.js",
            "line": 95,
            "description": "Helper to set the X Coordinate of the end point.",
            "itemtype": "method",
            "name": "setEndY",
            "params": [
                {
                    "name": "x",
                    "description": "New X Coordinate of the end point.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.properties.EdgeProperties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\EdgeProperties.js",
            "line": 108,
            "description": "Helper to get the Y Coordinate of the end point.",
            "itemtype": "method",
            "name": "getEndY",
            "return": {
                "description": "Y Coordinate of the end point.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.properties.EdgeProperties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\EdgeProperties.js",
            "line": 119,
            "description": "Helper to set the Y Coordinate of the end point.",
            "itemtype": "method",
            "name": "setEndY",
            "params": [
                {
                    "name": "y",
                    "description": "New Y Coordinate of the end point.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.properties.EdgeProperties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\GraphItemProperties.js",
            "line": 53,
            "description": "Helper function to get X Coordinate of Pin.",
            "itemtype": "method",
            "name": "getPinX",
            "return": {
                "description": "X Coordinate of Pin.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.properties.GraphItemProperties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\GraphItemProperties.js",
            "line": 64,
            "description": "Helper function to get X Coordinate of Pin.",
            "itemtype": "method",
            "name": "setPinX",
            "params": [
                {
                    "name": "x",
                    "description": "X Coordinate of Pin.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.properties.GraphItemProperties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\GraphItemProperties.js",
            "line": 75,
            "description": "Helper function to get Y Coordinate of Pin.",
            "itemtype": "method",
            "name": "getPinY",
            "return": {
                "description": "Y Coordinate of Pin.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.properties.GraphItemProperties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\GraphItemProperties.js",
            "line": 86,
            "description": "Helper function to get Y Coordinate of Pin.",
            "itemtype": "method",
            "name": "setPinY",
            "params": [
                {
                    "name": "y",
                    "description": "Y Coordinate of Pin.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.properties.GraphItemProperties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\GraphItemProperties.js",
            "line": 97,
            "description": "Helper function to get X Coordinate of LocalPin.",
            "itemtype": "method",
            "name": "getLocalPinX",
            "return": {
                "description": "X Coordinate of LocalPin.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.properties.GraphItemProperties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\GraphItemProperties.js",
            "line": 108,
            "description": "Helper function to get X Coordinate of LocalPin.",
            "itemtype": "method",
            "name": "setLocalPinX",
            "params": [
                {
                    "name": "x",
                    "description": "X Coordinate of Local Pin.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.properties.GraphItemProperties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\GraphItemProperties.js",
            "line": 119,
            "description": "Helper function to get Y Coordinate of LocalPin.",
            "itemtype": "method",
            "name": "getPinY",
            "return": {
                "description": "Y Coordinate of LocalPin.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.properties.GraphItemProperties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\GraphItemProperties.js",
            "line": 130,
            "description": "Helper function to get Y Coordinate of LocalPin.",
            "itemtype": "method",
            "name": "setLocalPinY",
            "params": [
                {
                    "name": "y",
                    "description": "Y Coordinate of Local Pin.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.properties.GraphItemProperties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\GraphItemProperties.js",
            "line": 141,
            "description": "Helper function to get X Coordinate of Origin.",
            "itemtype": "method",
            "name": "getOriginX",
            "return": {
                "description": "X Coordinate of Origin.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.properties.GraphItemProperties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\GraphItemProperties.js",
            "line": 153,
            "description": "Helper function to get X Coordinate of origin.",
            "itemtype": "method",
            "name": "setLocalPinX",
            "params": [
                {
                    "name": "x",
                    "description": "X Coordinate of origin.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.properties.GraphItemProperties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\GraphItemProperties.js",
            "line": 166,
            "description": "Helper function to get Y Coordinate of Origin.",
            "itemtype": "method",
            "name": "getOriginY",
            "return": {
                "description": "Y Coordinate of Origin.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.properties.GraphItemProperties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\GraphItemProperties.js",
            "line": 179,
            "description": "Helper function to get Y Coordinate of origin.",
            "itemtype": "method",
            "name": "setLocalPinY",
            "params": [
                {
                    "name": "y",
                    "description": "Y Coordinate of origin.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.properties.GraphItemProperties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\Properties.js",
            "line": 22,
            "description": "Adds a new property to the property container.",
            "itemtype": "method",
            "name": "addProperty",
            "params": [
                {
                    "name": "id",
                    "description": "Unique Name or id of the property.",
                    "type": "String"
                },
                {
                    "name": "getter",
                    "description": "Name of the function that acts as a getter for the Property.",
                    "type": "String"
                },
                {
                    "name": "setter",
                    "description": "Name of the function that acts as a setter for the Property.",
                    "type": "String"
                }
            ],
            "class": "JSG.graph.properties.Properties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\Properties.js",
            "line": 37,
            "description": "Adds a new index property to the property container. The getter and setter are called\nproviding the index.",
            "itemtype": "method",
            "name": "addIndexProperty",
            "params": [
                {
                    "name": "id",
                    "description": "Unique Name or id of the property.",
                    "type": "String"
                },
                {
                    "name": "getter",
                    "description": "Name of the function that acts as a getter for the Property.",
                    "type": "String"
                },
                {
                    "name": "setter",
                    "description": "Name of the function that acts as a setter for the Property.",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "Index that is passed to the getter and setter to retrieve or set values.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.properties.Properties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\Properties.js",
            "line": 54,
            "description": "Get a property by its id.",
            "itemtype": "method",
            "name": "JSG.graph.properties.Property",
            "params": [
                {
                    "name": "id",
                    "description": "Id of property to get.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Property corresponding to id.",
                "type": "Return_type"
            },
            "class": "JSG.graph.properties.Properties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\Properties.js",
            "line": 65,
            "description": "Gives access to the underlying container.",
            "itemtype": "method",
            "name": "getPropertiesMap",
            "return": {
                "description": "Map with the properties.",
                "type": "JSG.commons.Map"
            },
            "class": "JSG.graph.properties.Properties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\Properties.js",
            "line": 75,
            "description": "Get number of properties in the container.",
            "itemtype": "method",
            "name": "size",
            "return": {
                "description": "Amount of properties.",
                "type": "Number"
            },
            "class": "JSG.graph.properties.Properties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\Properties.js",
            "line": 85,
            "description": "Remove all properties from the container.",
            "itemtype": "method",
            "name": "clear",
            "class": "JSG.graph.properties.Properties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\Properties.js",
            "line": 94,
            "description": "Retrieve an Array with all properties.",
            "itemtype": "method",
            "name": "getAllProperties",
            "return": {
                "description": "Array with properties",
                "type": "Array"
            },
            "class": "JSG.graph.properties.Properties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\Properties.js",
            "line": 104,
            "description": "Copy property container.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "A copy of this property container.",
                "type": "JSG.graph.properties.Properties"
            },
            "class": "JSG.graph.properties.Properties",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\PropertiesProvider.js",
            "line": 58,
            "description": "Get Properties for model instance based on the model instance type.",
            "itemtype": "method",
            "name": "getProperties",
            "params": [
                {
                    "name": "forItem",
                    "description": "Item to retrieve properties for.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "Instance of properties. The return type depends on the given item.",
                "type": "JSG.graph.properties.GraphItemProperties"
            },
            "static": 1,
            "class": "JSG.graph.properties.PropertiesProvider",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\PropertiesProvider.js",
            "line": 70,
            "description": "Get FormatProperties for model instance.",
            "itemtype": "method",
            "name": "getFormatProperties",
            "params": [
                {
                    "name": "forItem",
                    "description": "Item to retrieve properties for.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "Instance of the format properties.",
                "type": "JSG.graph.properties.FormatProperties"
            },
            "static": 1,
            "class": "JSG.graph.properties.PropertiesProvider",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\PropertiesProvider.js",
            "line": 82,
            "description": "Get TextFormatProperties for model instance.",
            "itemtype": "method",
            "name": "getTextFormatProperties",
            "params": [
                {
                    "name": "forItem",
                    "description": "Item to retrieve properties for.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "Instance of the textformat properties.",
                "type": "JSG.graph.properties.TextFormatProperties"
            },
            "static": 1,
            "class": "JSG.graph.properties.PropertiesProvider",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\PropertiesProvider.js",
            "line": 94,
            "description": "Get ItemAttributeProperties for model instance.",
            "itemtype": "method",
            "name": "getItemAttributesProperties",
            "params": [
                {
                    "name": "forItem",
                    "description": "Item to retrieve attribute properties for.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "Instance of the item attribute properties.",
                "type": "JSG.graph.properties.ItemAttributeProperties"
            },
            "static": 1,
            "class": "JSG.graph.properties.PropertiesProvider",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\PropertiesProvider.js",
            "line": 106,
            "description": "Get LayoutAttributeProperties for model instance.",
            "itemtype": "method",
            "name": "getLayoutAttributeProperties",
            "params": [
                {
                    "name": "forItem",
                    "description": "Item to retrieve layout attribute properties for.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "Instance of the layout attribute properties.",
                "type": "JSG.graph.properties.LayoutAttributeProperties"
            },
            "static": 1,
            "class": "JSG.graph.properties.PropertiesProvider",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\PropertiesProvider.js",
            "line": 122,
            "description": "Wrapper method to add a property to the properties of the given model .",
            "itemtype": "method",
            "name": "addProperty",
            "params": [
                {
                    "name": "forItem",
                    "description": "Item to add property for.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "property",
                    "description": "Property to add.",
                    "type": "JSG.graph.properties.Property"
                }
            ],
            "static": 1,
            "class": "JSG.graph.properties.PropertiesProvider",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\Property.js",
            "line": 30,
            "description": "Creates a copy of this Property instance.</br>\n<b>Note:</b> this will not copy any current property value!",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "The copied Property.",
                "type": "JSG.graph.properties.Property"
            },
            "class": "JSG.graph.properties.Property",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\Property.js",
            "line": 43,
            "description": "Calls the getter attached to the property to retrieve the value of this property.",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "Value that was retrieved.",
                "type": "Variable"
            },
            "class": "JSG.graph.properties.Property",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\Property.js",
            "line": 60,
            "description": "Sets a value using the setter associated with this property.",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "scope",
                    "description": "Scope to use when calling the setter.",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Argument to pass to setter.",
                    "type": "[]"
                }
            ],
            "class": "JSG.graph.properties.Property",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\Property.js",
            "line": 86,
            "description": "Association a category with this property.",
            "itemtype": "method",
            "name": "setCategory",
            "params": [
                {
                    "name": "name",
                    "description": "Name of category.",
                    "type": "String"
                }
            ],
            "class": "JSG.graph.properties.Property",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\properties\\Property.js",
            "line": 97,
            "description": "Get the current category of this property.",
            "itemtype": "method",
            "name": "getCategory",
            "return": {
                "description": "Current category.",
                "type": "String"
            },
            "class": "JSG.graph.properties.Property",
            "module": "JSG.graph.properties",
            "namespace": "JSG.graph.properties"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\BBoxSelectionHandler.js",
            "line": 45,
            "description": "Shortcut to create a multiply term with given reference and factor.",
            "itemtype": "method",
            "name": "mulTerm",
            "params": [
                {
                    "name": "ref",
                    "description": "The reference part of multiply term.",
                    "type": "JSG.graph.expr.Reference"
                },
                {
                    "name": "fac",
                    "description": "The factor part of multiply term.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The created multiply term.",
                "type": "JSG.graph.expr.Term"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.selection.BBoxSelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\BBoxSelectionHandler.js",
            "line": 57,
            "description": "Shortcut to create a new coordinate from given x and y terms.",
            "itemtype": "method",
            "name": "coordinate",
            "params": [
                {
                    "name": "xTerm",
                    "description": "The term to specify the x coordinate part.",
                    "type": "JSG.graph.expr.Term"
                },
                {
                    "name": "yTerm",
                    "description": "The term to specify the y coordinate part.",
                    "type": "JSG.graph.expr.Term"
                }
            ],
            "return": {
                "description": "The created coordinate.",
                "type": "JSG.graph.Coordinate"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.selection.BBoxSelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\BBoxSelectionHandler.js",
            "line": 74,
            "description": "Implemented so this handler can be addressed by a {{#crossLink \"JSG.graph.expr.Reference\"}}{{/crossLink}} term.",
            "itemtype": "method",
            "name": "getPropertyValue",
            "return": {
                "description": "The property value or <code>undefined</code>.",
                "type": "Object"
            },
            "class": "JSG.graph.view.selection.BBoxSelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\BBoxSelectionHandler.js",
            "line": 88,
            "description": "Returns the width of internally used BoundingBox.",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "The BoundingBox width.",
                "type": "Number"
            },
            "class": "JSG.graph.view.selection.BBoxSelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\BBoxSelectionHandler.js",
            "line": 97,
            "description": "Returns the height of internally used BoundingBox.",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "The BoundingBox height.",
                "type": "Number"
            },
            "class": "JSG.graph.view.selection.BBoxSelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\BBoxSelectionHandler.js",
            "line": 113,
            "description": "Sets the internally used BoundingBox to given one.",
            "itemtype": "method",
            "name": "setBoundingBox",
            "params": [
                {
                    "name": "bbox",
                    "description": "The BoundingBox to set.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "class": "JSG.graph.view.selection.BBoxSelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\BBoxSelectionHandler.js",
            "line": 217,
            "description": "Called by {{#crossLink \"JSG.graph.view.selection.BBoxSelectionHandler/drawMarkers:method\"}}{{/crossLink}} to show\nadditional markers if required.<br/>\nThis method is intended to be overwritten by subclasses. Default implementation does nothing.",
            "itemtype": "method",
            "name": "_drawAdditionalMarkers",
            "params": [
                {
                    "name": "graphics",
                    "description": "The Graphics instance to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.selection.BBoxSelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\BBoxSelectionHandler.js",
            "line": 290,
            "description": "Returns the Marker at specified location. The location point should be relative to global GraphView.",
            "itemtype": "method",
            "name": "_getMarkerAt",
            "params": [
                {
                    "name": "point",
                    "description": "The location to look at.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The Marker at given location or <code>undefined</code>.",
                "type": "JSG.graph.view.selection.Marker"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.selection.BBoxSelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\BBoxSelectionHandler.js",
            "line": 308,
            "description": "Set up given handle for specified marker.",
            "itemtype": "method",
            "name": "name",
            "params": [
                {
                    "name": "handle",
                    "description": "The SelectionHandle to set up.",
                    "type": "JSG.graph.view.selection.SelectionHandle"
                },
                {
                    "name": "marker",
                    "description": "The marker to set up the handle for.",
                    "type": "JSG.graph.view.selection.Marker"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.selection.BBoxSelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 27,
            "description": "The base size for a command button. By default it is set to 800.",
            "itemtype": "property",
            "name": "BUTTON_SIZE",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.view.selection.CommandButton",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 45,
            "description": "Flag to represent an add command.",
            "itemtype": "property",
            "name": "ADD",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.view.selection.Type",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 53,
            "description": "Flag to represent a callback command.",
            "itemtype": "property",
            "name": "CALLBACK",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.view.selection.Type",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 61,
            "description": "Flag to represent an add-parent command.",
            "itemtype": "property",
            "name": "ADDPARENT",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.view.selection.Type",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 69,
            "description": "Flag to represent an add-child command.",
            "itemtype": "property",
            "name": "ADDCHILD",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.view.selection.Type",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 77,
            "description": "Flag to represent an add-sibling-before command.",
            "itemtype": "property",
            "name": "ADDSIBLINGBEFORE",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.view.selection.Type",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 85,
            "description": "Flag to represent an add-sibling-after command.",
            "itemtype": "property",
            "name": "ADDSIBLINGAFTER",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.view.selection.Type",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 104,
            "description": "Flag to represent left position.",
            "itemtype": "property",
            "name": "LEFT",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.view.selection.Position",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 112,
            "description": "Flag to represent center position.",
            "itemtype": "property",
            "name": "CENTER",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.view.selection.Position",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 120,
            "description": "Flag to represent right position.",
            "itemtype": "property",
            "name": "RIGHT",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.view.selection.Position",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 128,
            "description": "Flag to represent top position.",
            "itemtype": "property",
            "name": "TOP",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.view.selection.Position",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 136,
            "description": "Flag to represent middle position.",
            "itemtype": "property",
            "name": "MIDDLE",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.view.selection.Position",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 144,
            "description": "Flag to represent bottom position.",
            "itemtype": "property",
            "name": "BOTTOM",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.view.selection.Position",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 154,
            "description": "Returns the type of this CommandButton.<br/>\nSee {{#crossLink \"JSG.graph.view.selection.CommandButton.Type\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "The button type.",
                "type": "Number"
            },
            "class": "JSG.graph.view.selection.Position",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 165,
            "description": "Returns the position flag of this CommandButton.<br/>\nSee {{#crossLink \"JSG.graph.view.selection.CommandButton.Position\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getPosition",
            "return": {
                "description": "The button position.",
                "type": "Number"
            },
            "class": "JSG.graph.view.selection.Position",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 176,
            "description": "Returns the image key of this CommandButton.<br/>\nSee {{#crossLink \"JJSG.commons.ImagePool\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getImage",
            "return": {
                "description": "The key for the button image.",
                "type": "String"
            },
            "class": "JSG.graph.view.selection.Position",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 187,
            "description": "Returns the bounds for this CommandButton.",
            "itemtype": "method",
            "name": "getBounds",
            "return": {
                "description": "The button bounds",
                "type": "new JSG.geometry.Rectangle"
            },
            "class": "JSG.graph.view.selection.Position",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 197,
            "description": "Sets the size of this CommandButton.<br/>\nNote: the given size is used for the width and height of this button.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "size",
                    "description": "The new button size.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.view.selection.Position",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 208,
            "description": "Draws a representation of this CommandButton using provided graphics instance.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "graphics",
                    "description": "The Graphics instance to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.selection.Position",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\CommandButton.js",
            "line": 223,
            "description": "Checks if given location is within the bounds of this CommandButton. The location point should be given relative\nto global GraphView.",
            "itemtype": "method",
            "name": "containsPoint",
            "params": [
                {
                    "name": "point",
                    "description": "The location to check.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "<code>true</code> if point is within the bounds of this button, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.selection.Position",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\LineSelectionHandler.js",
            "line": 99,
            "description": "Draws the line specified by given points.<br/>\nNote: given points are translated to Graph coordinate system.",
            "itemtype": "method",
            "name": "_drawPolyline",
            "params": [
                {
                    "name": "points",
                    "description": "A list of points which specifies the line to draw.",
                    "type": "Array"
                },
                {
                    "name": "graphics",
                    "description": "The Graphics instance to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.selection.LineSelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\LineSelectionHandler.js",
            "line": 118,
            "description": "Draws a Marker for each given point.<br/>\nNote: given points are translated to Graph coordinate system.",
            "itemtype": "method",
            "name": "_drawMarkerPoints",
            "params": [
                {
                    "name": "points",
                    "description": "A list of points to draw a Marker at.",
                    "type": "Array"
                },
                {
                    "name": "graphics",
                    "description": "The Graphics instance to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.selection.LineSelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\LineSelectionHandler.js",
            "line": 137,
            "description": "Draws a Marker for given point and index.",
            "itemtype": "method",
            "name": "_drawMarkerAt",
            "params": [
                {
                    "name": "index",
                    "description": "The point index of the drawn marker.",
                    "type": "Number"
                },
                {
                    "name": "point",
                    "description": "The location to draw the marker at.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "marker",
                    "description": "The marker instance to draw.",
                    "type": "JSG.graph.view.selection.Marker"
                },
                {
                    "name": "style",
                    "description": "The current styles to use for drawing.",
                    "type": "JSG.graph.view.selection.SelectionStyle"
                },
                {
                    "name": "graphics",
                    "description": "The Graphics instance to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.selection.LineSelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\LineSelectionHandler.js",
            "line": 204,
            "description": "Returns the Marker at specified location. The location point should be relative to global GraphView.",
            "itemtype": "method",
            "name": "_getMarkerAt",
            "params": [
                {
                    "name": "point",
                    "description": "The location to look at.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The Marker at given location or <code>undefined</code>.",
                "type": "JSG.graph.view.selection.Marker"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.selection.LineSelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\Marker.js",
            "line": 29,
            "description": "Sets the size of this Marker.<br/>\nNote: the given size is used for the width and height of this Marker.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "size",
                    "description": "The new marker size.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.view.selection.Marker",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\Marker.js",
            "line": 40,
            "description": "Draws a representation of this Marker using provided graphics instance.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "graphics",
                    "description": "The Graphics instance to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                },
                {
                    "name": "style",
                    "description": "The current styles to use for drawing.",
                    "type": "JSG.graph.view.selection.SelectionStyle"
                }
            ],
            "class": "JSG.graph.view.selection.Marker",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\Marker.js",
            "line": 59,
            "description": "Simply passes the <code>drawMarker</code> request to given Graphics instance.",
            "itemtype": "method",
            "name": "drawMarker",
            "params": [
                {
                    "name": "graphics",
                    "description": "The Graphics instance to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                },
                {
                    "name": "bounds",
                    "description": "The marker bounds.",
                    "type": "JSG.geometry.Rectangle"
                },
                {
                    "name": "active",
                    "description": "Specifies if this Marker should be drawn active or not.",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.graph.view.selection.Marker",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\Marker.js",
            "line": 71,
            "description": "Checks if given location is within the bounds of this Marker. The location point should be given relative\nto global GraphView.",
            "itemtype": "method",
            "name": "containsPoint",
            "params": [
                {
                    "name": "point",
                    "description": "The location to check.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "<code>true</code> if point is within the bounds of this marker, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.selection.Marker",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\NodeSelectionHandler.js",
            "line": 31,
            "description": "Adds a {{#crossLink \"JSG.graph.view.selection.Marker\"}}{{/crossLink}} for each reshape-coordinate of given view.",
            "itemtype": "method",
            "name": "_addReshapeMarkers",
            "params": [
                {
                    "name": "view",
                    "description": "The view which represent current selected Node.",
                    "type": "JSG.graph.view.GraphItemView"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.selection.NodeSelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\RotationMarker.js",
            "line": 30,
            "description": "Returns the location of the rotation handle as point.",
            "itemtype": "method",
            "name": "getPinLocation",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse, if not supplied a new point will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The pin handler location.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.view.selection.RotationMarker",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\RotationMarker.js",
            "line": 41,
            "description": "Sets the new location of rotation handle.",
            "itemtype": "method",
            "name": "setPinLocation",
            "params": [
                {
                    "name": "point",
                    "description": "The new location of rotation handle.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.view.selection.RotationMarker",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "line": 38,
            "description": "Classifies a handle of type move, used e.g. in {{#crossLink \"JSG.graph.interaction.MoveActivator\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "MOVE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.view.selection.TYPE",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "line": 46,
            "description": "Classifies a handle of type execute, used e.g. in {{#crossLink \"JSG.graph.interaction.LinkActivator\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "EXECUTE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.view.selection.TYPE",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "line": 54,
            "description": "Classifies a handle of type command.",
            "itemtype": "property",
            "name": "COMMAND",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.view.selection.TYPE",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "line": 62,
            "description": "Classifies a handle of type resize, used e.g. in {{#crossLink \"JSG.graph.interaction.ResizeActivator\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "RESIZE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.view.selection.TYPE",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "line": 70,
            "description": "Classifies a handle of type reshape, used e.g. in {{#crossLink \"JSG.graph.interaction.ReshapeActivator\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "RESHAPE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.view.selection.TYPE",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "line": 78,
            "description": "Classifies a handle of type rotate, used e.g. in {{#crossLink \"JSG.graph.interaction.RotateActivator\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "ROTATE",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.view.selection.TYPE",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "line": 86,
            "description": "Classifies a handle of type edittext, used e.g. in {{#crossLink \"JSG.graph.interaction.EditTextActivator\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "EDITTEXT",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.view.selection.TYPE",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "line": 106,
            "description": "Direction north-west.",
            "itemtype": "property",
            "name": "NW",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.view.selection.INDEX",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "line": 114,
            "description": "Direction north.",
            "itemtype": "property",
            "name": "N",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.view.selection.INDEX",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "line": 122,
            "description": "Direction north-east.",
            "itemtype": "property",
            "name": "NE",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.view.selection.INDEX",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "line": 130,
            "description": "Direction east.",
            "itemtype": "property",
            "name": "E",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.view.selection.INDEX",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "line": 138,
            "description": "Direction south-east.",
            "itemtype": "property",
            "name": "SE",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.view.selection.INDEX",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "line": 146,
            "description": "Direction south.",
            "itemtype": "property",
            "name": "S",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.view.selection.INDEX",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "line": 154,
            "description": "Direction south-west.",
            "itemtype": "property",
            "name": "SW",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.view.selection.INDEX",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "line": 162,
            "description": "Direction west.",
            "itemtype": "property",
            "name": "W",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.graph.view.selection.INDEX",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "line": 172,
            "description": "Resets this handle. Should be called before it is reused.<br/>\nNote: this cannot reset custom added properties.",
            "itemtype": "method",
            "name": "reset",
            "class": "JSG.graph.view.selection.INDEX",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "line": 183,
            "description": "Returns the current point index. A point index of -1 signals that it was not set.",
            "itemtype": "method",
            "name": "getPointIndex",
            "return": {
                "description": "The current point index.",
                "type": "Number"
            },
            "class": "JSG.graph.view.selection.INDEX",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandle.js",
            "line": 192,
            "description": "Sets the new point index.",
            "itemtype": "method",
            "name": "setPointIndex",
            "params": [
                {
                    "name": "index",
                    "description": "The new point index to use.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.view.selection.INDEX",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandler.js",
            "line": 23,
            "description": "Registers the base SelectionView to this SelectionHandler.",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "selectionView",
                    "description": "The SelectionView instance to which this SelectionHandler belongs.",
                    "type": "JSG.graph.view.selection.SelectionView"
                }
            ],
            "class": "JSG.graph.view.selection.SelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandler.js",
            "line": 33,
            "description": "Returns the currently used selection style.",
            "itemtype": "method",
            "name": "getSelectionStyle",
            "return": {
                "description": "The selection styles used by the SelectionView.",
                "type": "JSG.graph.view.selection.SelectionStyle"
            },
            "class": "JSG.graph.view.selection.SelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandler.js",
            "line": 43,
            "description": "Checks if given point is within the displayed selection.",
            "itemtype": "method",
            "name": "containsPoint",
            "params": [
                {
                    "name": "point",
                    "description": "The point to test.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "<code>true</code> if item contains given point, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.selection.SelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandler.js",
            "line": 54,
            "description": "Returns the BoundingBox of current displayed selection.",
            "itemtype": "method",
            "name": "getBoundingBox",
            "params": [
                {
                    "name": "reusebbox",
                    "description": "An optional BoundingBox to reuse, if not supplied a new one will be created.",
                    "type": "JSG.geometry.BoundingBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "The BoundingBox of current selection.",
                "type": "JSG.geometry.BoundingBox"
            },
            "class": "JSG.graph.view.selection.SelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandler.js",
            "line": 65,
            "description": "Returns the location of the rotation pin as point.",
            "itemtype": "method",
            "name": "getPinPoint",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse, if not supplied a new point will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The pin location.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.view.selection.SelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandler.js",
            "line": 76,
            "description": "Returns the RotationMarker to use or <code>undefined</code> if displayed selection cannot be rotated.",
            "itemtype": "method",
            "name": "getRotationMarker",
            "params": [
                {
                    "name": "param_name",
                    "description": "param_description.",
                    "type": "Type"
                }
            ],
            "return": {
                "description": "The RotationMarker to use for rotating selection or <code>undefined</code>.",
                "type": "JSG.graph.view.selection.RotationMarker"
            },
            "class": "JSG.graph.view.selection.SelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandler.js",
            "line": 87,
            "description": "Returns the handle at specified location. The location must be relative to the origin of the\n{{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getHandleAt",
            "params": [
                {
                    "name": "point",
                    "description": "The location to look for a handle.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "event",
                    "description": "The current event which might provides additional information.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "reusehandle",
                    "description": "An optional handle to reuse, if not supplied a new handle will be created.",
                    "type": "JSG.graph.interaction.ActionHandle",
                    "optional": true
                }
            ],
            "return": {
                "description": "The handle to use at given location or <code>undefined</code>.",
                "type": "JSG.graph.interaction.ActionHandle"
            },
            "class": "JSG.graph.view.selection.SelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandler.js",
            "line": 101,
            "description": "Draws a selection representation for the current selected views.",
            "itemtype": "method",
            "name": "drawSelection",
            "params": [
                {
                    "name": "graphics",
                    "description": "param_description.",
                    "type": "Type"
                },
                {
                    "name": "selectionView",
                    "description": "The main SelectionView instance to which this handler is registered.",
                    "type": "JSG.graph.view.selection.SelectionView"
                }
            ],
            "class": "JSG.graph.view.selection.SelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandler.js",
            "line": 112,
            "description": "Refreshes this SelectionHandler to update inner state. This is usually called before the handle is requested to draw\nitself.",
            "itemtype": "method",
            "name": "refresh",
            "class": "JSG.graph.view.selection.SelectionHandler",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandlerFactory.js",
            "line": 21,
            "description": "Called to create a SelectionHandler for given selection.<br/>\nNote: this simply checks if we have single or multiple selection and calls corresponding methods respectively. If\na handler was created the passed SelectionView is registered to it.",
            "itemtype": "method",
            "name": "createSelectionHandler",
            "params": [
                {
                    "name": "selectionView",
                    "description": "The SelectionView to create the handler for. Note that this view is registered to the created handler.",
                    "type": "JSG.graph.view.selection.SelectionView"
                }
            ],
            "return": {
                "description": "The SelectionHandler to display selection.",
                "type": "JSG.graph.view.selection.SelectionHandler"
            },
            "class": "JSG.graph.view.selection.SelectionHandlerFactory",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandlerFactory.js",
            "line": 49,
            "description": "Called to create a SelectionHandler for given single selection.",
            "itemtype": "method",
            "name": "createSingleSelectionHandler",
            "params": [
                {
                    "name": "selView",
                    "description": "The view instance to mark as selected.",
                    "type": "JSG.ui.View"
                }
            ],
            "return": {
                "description": "The SelectionHandler to display given single selection.",
                "type": "JSG.graph.view.selection.SelectionHandler"
            },
            "class": "JSG.graph.view.selection.SelectionHandlerFactory",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionHandlerFactory.js",
            "line": 77,
            "description": "Called to create a SelectionHandler for given multiple selection.",
            "itemtype": "method",
            "name": "createMultipleSelectionHandler",
            "params": [
                {
                    "name": "selViews",
                    "description": "A list of {{#crossLink \"JSG.ui.View\"}}{{/crossLink}}s to mark as selected.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The SelectionHandler to display given multiple selection.",
                "type": "JSG.graph.view.selection.SelectionHandler"
            },
            "class": "JSG.graph.view.selection.SelectionHandlerFactory",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionStyle.js",
            "line": 17,
            "description": "The line color to use for drawing selection.",
            "itemtype": "property",
            "name": "lineColor",
            "type": "{String}",
            "class": "JSG.graph.view.selection.SelectionStyle",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionStyle.js",
            "line": 25,
            "description": "The line width to use for drawing selection.",
            "itemtype": "property",
            "name": "lineWidth",
            "type": "{Number}",
            "class": "JSG.graph.view.selection.SelectionStyle",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionStyle.js",
            "line": 33,
            "description": "The line style to use for drawing selection.",
            "itemtype": "property",
            "name": "lineStyle",
            "type": "{JSG.graph.attr.FormatAttributes.LineStyle}",
            "class": "JSG.graph.view.selection.SelectionStyle",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionStyle.js",
            "line": 42,
            "description": "Specifies if selection markers should be displayed.<br>\nSee {{#crossLink \"JSG.graph.view.selection.Marker\"}}{{/crossLink}} too.",
            "itemtype": "property",
            "name": "areMarkersVisible",
            "type": "{Boolean}",
            "class": "JSG.graph.view.selection.SelectionStyle",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionStyle.js",
            "line": 52,
            "description": "The marker fill color to use.<br>\nSee {{#crossLink \"JSG.graph.view.selection.Marker\"}}{{/crossLink}} too.",
            "itemtype": "property",
            "name": "markerFillColor",
            "type": "{String}",
            "class": "JSG.graph.view.selection.SelectionStyle",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionStyle.js",
            "line": 60,
            "description": "The marker fill color to use if the marker is disabled.<br>\nSee {{#crossLink \"JSG.graph.view.selection.Marker\"}}{{/crossLink}} too.",
            "itemtype": "property",
            "name": "markerFillColorDisabled",
            "type": "{String}",
            "class": "JSG.graph.view.selection.SelectionStyle",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionStyle.js",
            "line": 68,
            "description": "The marker border color to use .<br>\nSee {{#crossLink \"JSG.graph.view.selection.Marker\"}}{{/crossLink}} too.",
            "itemtype": "property",
            "name": "markerBorderColor",
            "type": "{String}",
            "class": "JSG.graph.view.selection.SelectionStyle",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionStyle.js",
            "line": 76,
            "description": "The marker size to use.<br>\nSee {{#crossLink \"JSG.graph.view.selection.Marker\"}}{{/crossLink}} too.",
            "itemtype": "property",
            "name": "markerSize",
            "type": "{Number}",
            "class": "JSG.graph.view.selection.SelectionStyle",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionStyle.js",
            "line": 84,
            "description": "The distance of a rotation marker to its corresponding {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}.<br>\nSee {{#crossLink \"JSG.graph.view.selection.RotationMarker\"}}{{/crossLink}} too.",
            "itemtype": "property",
            "name": "rotateMarkerDistance",
            "type": "{Number}",
            "class": "JSG.graph.view.selection.SelectionStyle",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionStyle.js",
            "line": 92,
            "description": "Specifies if a rotation marker should be displayed.<br>\nSee {{#crossLink \"JSG.graph.view.selection.RotationMarker\"}}{{/crossLink}} too.",
            "itemtype": "property",
            "name": "isRotateMarkerVisible",
            "type": "{Boolean}",
            "class": "JSG.graph.view.selection.SelectionStyle",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionStyle.js",
            "line": 107,
            "description": "Resets all style values to their defaults.",
            "itemtype": "method",
            "name": "reset",
            "class": "JSG.graph.view.selection.SelectionStyle",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 50,
            "description": "Adds given view to the list of currently selected views, managed by this SelectionView.<br/>\n<b>Note:</b> its required to call {{#crossLink \"JSG.graph.view.selection.SelectionView/_updateSelectionHandler:method\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "addView",
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.graph.view.selection.SelectionView/setSelection:method\"}}{{/crossLink}} instead.",
            "class": "JSG.graph.view.selection.SelectionView",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 60,
            "description": "Removes all currently registered views",
            "itemtype": "method",
            "name": "removeAllViews",
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.graph.view.selection.SelectionView/clearSelection:method\"}}{{/crossLink}} instead.",
            "class": "JSG.graph.view.selection.SelectionView",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 71,
            "description": "Clears current selection",
            "itemtype": "method",
            "name": "clearSelection",
            "class": "JSG.graph.view.selection.SelectionView",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 81,
            "description": "Registers the views of given selected {{#crossLink \"JSG.graph.controller.ModelController\"}}{{/crossLink}}s to this SelectionView.<br/>\nThis will replace any formerly registered views. The controllers can be either given as an array or as an enumeration.",
            "example": [
                "\n\tselectionView.setSelection([controller1, controller2, controller3]);\n\t//OR\n\tselectionView.setSelection(controller1, controller2, controller3);\n\nNote: as opposed to {{#crossLink \"JSG.graph.view.selection.SelectionView/addView:method\"}}{{/crossLink}} there is no\nneed to call {{#crossLink \"JSG.graph.view.selection.SelectionView/_updateSelectionHandler:method\"}}{{/crossLink}}\nafterwards!"
            ],
            "itemtype": "method",
            "name": "setSelection",
            "params": [
                {
                    "name": "selection",
                    "description": "A list of ModelControllers whose views should be registered.",
                    "type": "Array|JSG.graph.controller.ModelController",
                    "multiple": true
                }
            ],
            "class": "JSG.graph.view.selection.SelectionView",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 116,
            "description": "Returns the currently registered SelectionHandlerFactory.",
            "itemtype": "method",
            "name": "getHandlerFactory",
            "return": {
                "description": "The currently registered SelectionHandlerFactory.",
                "type": "JSG.graph.view.selection.SelectionHandlerFactory"
            },
            "class": "JSG.graph.view.selection.SelectionView",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 126,
            "description": "Registers given SelectionHandlerFactory.<br/>\nThe factory is used to provide a suitable {{#crossLink \"JSG.graph.view.selection.SelectionHandler\"}}{{/crossLink}} \nfor a given selection.",
            "itemtype": "method",
            "name": "setHandlerFactory",
            "params": [
                {
                    "name": "selHandlerFactory",
                    "description": "The SelectionHandlerFactory to use.",
                    "type": "JSG.graph.view.selection.SelectionHandlerFactory"
                }
            ],
            "class": "JSG.graph.view.selection.SelectionView",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 139,
            "description": "Returns the currently selected views.</br>\nNote: this grants direct access to the underlying views array.",
            "itemtype": "method",
            "name": "getViews",
            "return": {
                "description": "A list of all selected views.",
                "type": "Array"
            },
            "class": "JSG.graph.view.selection.SelectionView",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 151,
            "description": "Returns the currently used selection style.",
            "itemtype": "method",
            "name": "getStyle",
            "return": {
                "description": "The selection styles used by this SelectionView.",
                "type": "JSG.graph.view.selection.SelectionStyle"
            },
            "class": "JSG.graph.view.selection.SelectionView",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 160,
            "description": "Sets new selection styles to use.",
            "itemtype": "method",
            "name": "setStyle",
            "params": [
                {
                    "name": "style",
                    "description": "The new selection styles to use.",
                    "type": "JSG.graph.view.selection.SelectionStyle"
                }
            ],
            "class": "JSG.graph.view.selection.SelectionView",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 171,
            "description": "Called on selection changes to set current {{#crossLink \"JSG.graph.view.selection.SelectionHandler\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "_updateSelectionHandler",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.selection.SelectionView",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 182,
            "description": "Refreshes this selection view to update inner state.",
            "itemtype": "method",
            "name": "refresh",
            "class": "JSG.graph.view.selection.SelectionView",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 193,
            "description": "Returns if this SelectionView is currently visible or not, i.e. if it has any views to mark.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "<code>true</code> if SelectionView is visible, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.selection.SelectionView",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 204,
            "description": "Checks if currently marked selection is based on one view only.",
            "itemtype": "method",
            "name": "isSingleSelection",
            "return": {
                "description": "<code>true</code> if only one view is selected, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.selection.SelectionView",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 215,
            "description": "Returns the current rotation angle of this SelectionView.",
            "itemtype": "method",
            "name": "getRotationAngle",
            "return": {
                "description": "The rotation angle of this SelectionView in radiant.",
                "type": "Number"
            },
            "class": "JSG.graph.view.selection.SelectionView",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 226,
            "description": "Sets the rotation angle of this SelectionView.",
            "itemtype": "method",
            "name": "setRotationAngle",
            "params": [
                {
                    "name": "angle",
                    "description": "The new rotation angle of this SelectionView in radiant.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.view.selection.SelectionView",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 237,
            "description": "Returns the complete BoundingBox of this SelectionView to mark all selected and registered views.",
            "itemtype": "method",
            "name": "getBoundingBox",
            "params": [
                {
                    "name": "reusebbox",
                    "description": "An optional BoundingBox to reuse, if not given a new one will be created.",
                    "type": "JSG.geometry.BoundingBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "The BoundingBox of this SelectionView",
                "type": "JSG.geometry.BoundingBox"
            },
            "class": "JSG.graph.view.selection.SelectionView",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 251,
            "description": "Checks if SelectionView contains given point. The point must be relative to {{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}} \norigin.",
            "itemtype": "method",
            "name": "containsPoint",
            "params": [
                {
                    "name": "point",
                    "description": "The point to check, relative to GraphView origin.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "<code>true</code> if this SelectionView contains given point, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.selection.SelectionView",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 267,
            "description": "Returns the current {{#crossLink \"JSG.graph.Pin\"}}{{/crossLink}} location of this SelectionView as point.",
            "itemtype": "method",
            "name": "getPinPoint",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse, if not given a new point will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The pin location.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.view.selection.SelectionView",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 281,
            "description": "Returns the RotationMarker for this SelectionView or <code>undefined</code> if none has been set.",
            "itemtype": "method",
            "name": "getRotationMarker",
            "return": {
                "description": "The RotationMarker for this SelectionView or <code>undefined</code>.",
                "type": "JSG.graph.view.selection.RotationMarker"
            },
            "class": "JSG.graph.view.selection.SelectionView",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 292,
            "description": "Returns the handle at specified location. The location must be relative to the origin of the\n{{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getHandleAt",
            "params": [
                {
                    "name": "point",
                    "description": "The location, relative to GraphView, to look for a handle.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                }
            ],
            "return": {
                "description": "The SelectionHandle at given location or <code>undefined</code>",
                "type": "JSG.graph.view.selection.SelectionHandle"
            },
            "class": "JSG.graph.view.selection.SelectionView",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\selection\\SelectionView.js",
            "line": 324,
            "description": "Draws this SelectionView if it is visible.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "graphics",
                    "description": "The Graphics instance to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.selection.SelectionView",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\DefaultShapeRenderer.js",
            "line": 19,
            "description": "Initializes this renderer before any draw will be done.<br/>\nThis method is can be overwritten by subclasses. Default implementation does nothing.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "shape",
                    "description": "The shape to be drawn.",
                    "type": "JSG.graph.model.shapes.Shape"
                },
                {
                    "name": "graphics",
                    "description": "Graphics to use for rendering.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.shapes.DefaultShapeRenderer",
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\DefaultShapeRenderer.js",
            "line": 30,
            "description": "This function draws the given shape by filling its interior area.",
            "itemtype": "method",
            "name": "drawShapeFill",
            "params": [
                {
                    "name": "shape",
                    "description": "Shape to fill.",
                    "type": "JSG.graph.model.shapes.Shape"
                },
                {
                    "name": "closed",
                    "description": "True, if shape should be closed. This is primarily used for polygons and bezier curves to\nconnect the last with the first point.",
                    "type": "Boolean"
                },
                {
                    "name": "graphics",
                    "description": "Graphics to use for rendering.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.shapes.DefaultShapeRenderer",
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\DefaultShapeRenderer.js",
            "line": 43,
            "description": "This function draws the given shape border.",
            "itemtype": "method",
            "name": "drawShapeBorder",
            "params": [
                {
                    "name": "shape",
                    "description": "Shape to draw border for.",
                    "type": "JSG.graph.model.shapes.Shape"
                },
                {
                    "name": "closed",
                    "description": "True, if shape should be closed. This is primarily used for polygons and bezier curves to\nconnect the last with the first point.",
                    "type": "Boolean"
                },
                {
                    "name": "graphics",
                    "description": "Graphics to use for rendering.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.shapes.DefaultShapeRenderer",
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\DefaultShapeRenderer.js",
            "line": 56,
            "description": "This function clips output to the Graphics at the given shape border.",
            "itemtype": "method",
            "name": "setClipArea",
            "params": [
                {
                    "name": "shape",
                    "description": "Shape to clip to.",
                    "type": "JSG.graph.model.shapes.Shape"
                },
                {
                    "name": "graphics",
                    "description": "Graphics to use for clipping.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.shapes.DefaultShapeRenderer",
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\PathShapeRenderer.js",
            "line": 18,
            "description": "A private flag to track a draw by {{#crossLink \"JSG.graph.view.shapes.PathShapeRenderer/drawShapeFill:method\"}}{{/crossLink}}\nor {{#crossLink \"JSG.graph.view.shapes.PathShapeRenderer/drawShapeBorder:method\"}}{{/crossLink}} since we want to \ndraw the path only once.",
            "itemtype": "property",
            "name": "_isDrawn",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.shapes.PathShapeRenderer",
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\PathShapeRenderer.js",
            "line": 68,
            "description": "Returns a suitable function to perform the drawing for a given coordinate command id. If none could be found \n<code>undefined</code> is returned.<br/>\nThe returned function must be called with following parameters (in that order):\n<ul>\n<li>index - The current index in shapes coordinates array.</li>\n<li>coordinates - The shapes coordinates array.</li>\n<li>graphics - The <code>Graphics</code> instance to use for drawing.</li>\n</ul>\nAs a result the function returns the new current index in provided coordinates array.",
            "itemtype": "method",
            "name": "cmdFor",
            "params": [
                {
                    "name": "cmdid",
                    "description": "The command id to get the command function for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The function to use for drawing or <code>undefined</code>.",
                "type": "Function"
            },
            "class": "JSG.graph.view.shapes.PathShapeRenderer.Commands",
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\PathShapeRenderer.js",
            "line": 93,
            "description": "Overwritten from base class to ensure path is drawn only once.",
            "itemtype": "method",
            "name": "drawShapeFill",
            "params": [
                {
                    "name": "shape",
                    "description": "Shape to fill.",
                    "type": "JSG.graph.model.shapes.Shape"
                },
                {
                    "name": "closed",
                    "description": "True, if shape should be closed. This is primarily used for polygons and bezier curves to\nconnect the last with the first point.",
                    "type": "Boolean"
                },
                {
                    "name": "graphics",
                    "description": "Graphics to use for rendering.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.shapes.PathShapeRenderer",
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\PathShapeRenderer.js",
            "line": 110,
            "description": "Overwritten from base class to ensure path is drawn only once.",
            "itemtype": "method",
            "name": "drawShapeBorder",
            "params": [
                {
                    "name": "shape",
                    "description": "Shape to draw border for.",
                    "type": "JSG.graph.model.shapes.Shape"
                },
                {
                    "name": "closed",
                    "description": "True, if shape should be closed. This is primarily used for polygons and bezier curves to\nconnect the last with the first point.",
                    "type": "Boolean"
                },
                {
                    "name": "graphics",
                    "description": "Graphics to use for rendering.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.shapes.PathShapeRenderer",
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\PathShapeRenderer.js",
            "line": 126,
            "description": "This is called by {{#crossLink \"JSG.graph.view.shapes.PathShapeRenderer/drawShapeFill:method\"}}{{/crossLink}} or\n{{#crossLink \"JSG.graph.view.shapes.PathShapeRenderer/drawShapeBorder:method\"}}{{/crossLink}} to render given\npath-shape.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "shape",
                    "description": "The path-shape to render.",
                    "type": "JSG.graph.model.shapes.PathShape"
                },
                {
                    "name": "graphics",
                    "description": "Graphics to use for rendering.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.shapes.PathShapeRenderer",
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\PathShapeRenderer.js",
            "line": 159,
            "description": "This is called to actually draw a given path-shape.",
            "itemtype": "method",
            "name": "_drawPath",
            "params": [
                {
                    "name": "shape",
                    "description": "The path-shape to draw.",
                    "type": "JSG.graph.model.shapes.PathShape"
                },
                {
                    "name": "graphics",
                    "description": "Graphics to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.shapes.PathShapeRenderer",
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\PathShapeRenderer.js",
            "line": 186,
            "description": "Called to close a path or sub-path.",
            "itemtype": "method",
            "name": "_closePath",
            "params": [
                {
                    "name": "coord",
                    "description": "The current coordinate.",
                    "type": "JSG.graph.Coordinate"
                },
                {
                    "name": "graphics",
                    "description": "Graphics used to fill or stroke (sub-)path.",
                    "type": "JSG.ui.graphics.Graphics"
                },
                {
                    "name": "last",
                    "description": "A flag which indicates if given coordinate is the last one.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.shapes.PathShapeRenderer",
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\ShapeRenderer.js",
            "line": 33,
            "description": "Get an appropriate Renderer for the given shape.",
            "itemtype": "method",
            "name": "fromShape",
            "params": [
                {
                    "name": "shape",
                    "description": "Shape to get renderer for.",
                    "type": "JSG.graph.model.shapes.Shape"
                }
            ],
            "return": {
                "description": "ShapeRender to use for shape.",
                "type": "JSG.graph.view.shapes.DefaultShapeRenderer"
            },
            "static": 1,
            "class": "JSG.graph.view.shapes.ShapeRenderer",
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\ShapeRenderer.js",
            "line": 48,
            "description": "Registers given renderer for given shape type. This replaces any previously registered renderer for the same type.",
            "itemtype": "method",
            "name": "addRenderer",
            "params": [
                {
                    "name": "type",
                    "description": "The shape type to register a renderer for.",
                    "type": "String"
                },
                {
                    "name": "renderer",
                    "description": "The shape renderer to register.",
                    "type": "JSG.graph.view.shapes.DefaultShapeRenderer"
                }
            ],
            "class": "JSG.graph.view.shapes.ShapeRenderer",
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\shapes\\ShapeRenderer.js",
            "line": 58,
            "description": "Checks if a renderer is registered for given shape type.",
            "itemtype": "method",
            "name": "hasRenderer",
            "params": [
                {
                    "name": "type",
                    "description": "The shape type to check.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<code>true</code> if a renderer is registered for given type, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.shapes.ShapeRenderer",
            "module": "JSG.graph.view.shapes",
            "namespace": "JSG.graph.view.shapes"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\BBoxView.js",
            "line": 27,
            "description": "Checks if given point is within the BoundingBox of this BBoxView.",
            "itemtype": "method",
            "name": "containsPoint",
            "params": [
                {
                    "name": "point",
                    "description": "Point to check.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "<code>true</code> if point is within inner BoundingBox, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.BBoxView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\BBoxView.js",
            "line": 42,
            "description": "Returns direct access to inner BoundingBox.",
            "itemtype": "method",
            "name": "getBoundingBox",
            "return": {
                "description": "Inner BoundingBox instance this view is based on.",
                "type": "JSG.geometry.BoundingBox"
            },
            "class": "JSG.graph.view.BBoxView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\BBoxView.js",
            "line": 52,
            "description": "Returns the location of this view, i.e. the top-left corner of inner BoundingBox.",
            "itemtype": "method",
            "name": "getLocation",
            "return": {
                "description": "The top-left corner of inner BoundingBox.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.view.BBoxView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\BBoxView.js",
            "line": 62,
            "description": "Returns direct access to inner Format.",
            "itemtype": "method",
            "name": "getFormat",
            "return": {
                "description": "Format instance used by this view.",
                "type": "JSG.graph.attr.FormatAttributes"
            },
            "class": "JSG.graph.view.BBoxView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\BBoxView.js",
            "line": 72,
            "description": "Returns the current size of this view as Point instance.",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "The size of this view.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.view.BBoxView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\BBoxView.js",
            "line": 82,
            "description": "Sets the angle of inner BoundingBox to specified angle.",
            "itemtype": "method",
            "name": "setAngle",
            "params": [
                {
                    "name": "angle",
                    "description": "The rotation angle in radians.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.view.BBoxView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\BBoxView.js",
            "line": 92,
            "description": "Sets the new width and height of this view by applying specified values to inner BoundingBox.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "The new view width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The new view height.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.view.BBoxView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\BBoxView.js",
            "line": 104,
            "description": "Sets the new view location by applying specified values to the top-left point of inner BoundingBox.",
            "itemtype": "method",
            "name": "setLocation",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate of new view location.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate of new view location.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.view.BBoxView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\BBoxView.js",
            "line": 115,
            "description": "Draws rectangle shape of this view as defined by inner BoundingBox.</br>\nThe actual drawing  is splitted into several functions, each of it can be overwritten by subclasses. The\nsequence of called function is as follow: <code>translateGraphics</code>, <code>drawBackground</code>,\n<code>drawSubViews</code>, <code>drawBorder</code> and <code>drawDecorations</code>.</br>",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "grapghics",
                    "description": "The graphics to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.BBoxView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\BBoxView.js",
            "line": 136,
            "description": "Translates given Graphics instance.</br>\nCalled during drawing, subclasses may overwrite. Default implementation does nothing.",
            "itemtype": "method",
            "name": "translateGraphics",
            "params": [
                {
                    "name": "graphics",
                    "description": "The graphics to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.BBoxView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\BBoxView.js",
            "line": 146,
            "description": "Draws the views background fill.</br>\nThis applies inner format and shadow to provided Graphics instance.</br>\nNote: called during drawing, subclasses may overwrite.",
            "itemtype": "method",
            "name": "drawFill",
            "params": [
                {
                    "name": "graphics",
                    "description": "The graphics to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.BBoxView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\BBoxView.js",
            "line": 166,
            "description": "Draws the sub views of this view.</br>\nNote: called during drawing, subclasses may overwrite. Default implementation simply calls\n<code>draw</code> on each sub view.",
            "itemtype": "method",
            "name": "drawSubViews",
            "params": [
                {
                    "name": "graphics",
                    "description": "The Graphics to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.BBoxView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\BBoxView.js",
            "line": 191,
            "description": "Strokes this view.</br>\nThis applies inner line format to provided Graphics instance.</br>\nNote: called during drawing, subclasses may overwrite.",
            "itemtype": "method",
            "name": "drawBorder",
            "params": [
                {
                    "name": "graphics",
                    "description": "The graphics to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.BBoxView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\BBoxView.js",
            "line": 207,
            "description": "Used to draw any additional elements or components on top of this View.</br>\nNote: called during drawing, subclasses may overwrite. Default implementation does nothing.",
            "itemtype": "method",
            "name": "drawDecorations",
            "params": [
                {
                    "name": "graphics",
                    "description": "The graphics to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.BBoxView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\ContentNodeView.js",
            "line": 38,
            "description": "Sets the ViewPanel to use within internal ScrollView.",
            "itemtype": "method",
            "name": "setViewPanel",
            "params": [
                {
                    "name": "viewpanel",
                    "description": "The new ViewPanel to use inside ScrollView.",
                    "type": "JSG.ui.scrollview.ViewPanel"
                }
            ],
            "class": "JSG.graph.view.ContentNodeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\ContentNodeView.js",
            "line": 64,
            "description": "Sets the new ContentPane view to use within ScrollViews ViewPanel.",
            "itemtype": "method",
            "name": "setContentPaneView",
            "params": [
                {
                    "name": "cpView",
                    "description": "The new ContentPane view.",
                    "type": "JSG.graph.view.GraphItemView"
                }
            ],
            "class": "JSG.graph.view.ContentNodeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\ContentNodeView.js",
            "line": 119,
            "description": "Checks if given event at specified location is directly handled by ContentNodeView. Directly means\nthat this event is consumed by ContentNodeView itself and should not be passed to any sub-views.",
            "itemtype": "method",
            "name": "doHandleEventAt",
            "params": [
                {
                    "name": "location",
                    "description": "The location at which the event occurred.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "event",
                    "description": "The event to handle.",
                    "type": "JSG.ui.events.MouseEvent"
                }
            ],
            "return": {
                "description": "<code>true</code> if the event will be consumed by ContentNodeView directly, <code>false</code> if it should\nbe passed to its sub-views.",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.ContentNodeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\ContentNodeView.js",
            "line": 174,
            "description": "Adds given sub-view to this ViewPanels content view.",
            "itemtype": "method",
            "name": "_addView",
            "params": [
                {
                    "name": "view",
                    "description": "View to add.",
                    "type": "JSG.ui.View"
                },
                {
                    "name": "index",
                    "description": "Index to place the view at in the subviews array. If not supplied, the\nview will be added to the end of the view list.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "View, that was added.",
                "type": "JSG.ui.View"
            },
            "class": "JSG.graph.view.ContentNodeViewPanel",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\ContentNodeView.js",
            "line": 187,
            "description": "Removes given sub-view from the sub-view list of this ViewPanels content view.",
            "itemtype": "method",
            "name": "_removeView",
            "params": [
                {
                    "name": "view",
                    "description": "View to remove.",
                    "type": "JSG.ui.View"
                }
            ],
            "return": {
                "description": "<code>true</code> if view was removed otherwise <code>false</code>",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.ContentNodeViewPanel",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\ContentNodeView.js",
            "line": 197,
            "description": "Removes all sub-views from the sub-view list of this ViewPanels content view.",
            "itemtype": "method",
            "name": "_removeAllViews",
            "class": "JSG.graph.view.ContentNodeViewPanel",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\ContentNodeView.js",
            "line": 305,
            "description": "Implemented to fulfill content view constraint.<br/>\nSee {{#crossLink \"JSG.ui.scrollview.ViewPort/setContentView:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "setScrollTo",
            "params": [
                {
                    "name": "point",
                    "description": "The scroll position to apply to this content view.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "since": "1.6.2",
            "class": "JSG.graph.view.ContentPaneView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\ContentNodeView.js",
            "line": 354,
            "description": "Registers to given GraphItem, i.e. this listener registers as EventListener to passed item.",
            "itemtype": "method",
            "name": "registerTo",
            "params": [
                {
                    "name": "item",
                    "description": "The item to register to.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.BBoxListener",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\ContentNodeView.js",
            "line": 370,
            "description": "Unregisters from given GraphItem.",
            "itemtype": "method",
            "name": "deregisterFrom",
            "params": [
                {
                    "name": "item",
                    "description": "The item to register from.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.BBoxListener",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\ContentNodeView.js",
            "line": 386,
            "description": "EventListener function. Default implementation does nothing.",
            "itemtype": "method",
            "name": "handlePreEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.view.BBoxListener",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\ContentNodeView.js",
            "line": 394,
            "description": "EventListener function. Default implementation simply revalidates registered ContentPaneView.",
            "itemtype": "method",
            "name": "handlePostEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing more details.",
                    "type": "JSG.graph.model.events.Event"
                }
            ],
            "class": "JSG.graph.view.BBoxListener",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EdgeView.js",
            "line": 29,
            "description": "Returns the 0 based index of line segment t given location or -1 if point does not touch this edge.</br>\nSee {{#crossLink \"JSG.graph.model.LineConnection/getLineSegmentAtPoint:method\"}}{{/crossLink}}\nfor more information about line segments.",
            "itemtype": "method",
            "name": "getLineSegmentAtPoint",
            "params": [
                {
                    "name": "point",
                    "description": "The location to test.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "threshold",
                    "description": "The maximum point distance to the line.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The line segment index or -1 if the point does not touch the line.",
                "type": "Number"
            },
            "class": "JSG.graph.view.EdgeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EdgeView.js",
            "line": 43,
            "description": "Checks if given Point is over a possible line end arrow. Provided Point should be relative this\norigin.",
            "itemtype": "method",
            "name": "hitsLineArrowEnd",
            "params": [
                {
                    "name": "point",
                    "description": "The point to test, relative to edge origin.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "threshold",
                    "description": "The maximum distance between the point to test to a possible arrow.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "<code>true</code> if given point hits line end arrow, <code>false</code> if line\nhas no end arrow or given point is not near it.",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.EdgeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EdgeView.js",
            "line": 57,
            "description": "Checks if given Point is over a possible line start arrow. Provided Point should be relative this\norigin.",
            "itemtype": "method",
            "name": "hitsLineArrowStart",
            "params": [
                {
                    "name": "point",
                    "description": "The point to test, relative to edge origin.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "threshold",
                    "description": "The maximum distance between the point to test to a possible arrow.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "<code>true</code> if given point hits line start arrow, <code>false</code> if line\nhas no start arrow or given point is not near it.",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.EdgeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EdgeView.js",
            "line": 166,
            "description": "Convenience method to call <code>evaluate</code> on underlying Edge model.",
            "itemtype": "method",
            "name": "evaluate",
            "class": "JSG.graph.view.EdgeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditBezierShapeView.js",
            "line": 24,
            "description": "The default used marker size.",
            "itemtype": "property",
            "name": "MARKER_SIZE",
            "type": "Numeric",
            "static": 1,
            "class": "JSG.graph.view.EditBezierShapeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 28,
            "description": "The default used marker size.",
            "itemtype": "property",
            "name": "MARKER_SIZE",
            "type": "Numeric",
            "static": 1,
            "class": "JSG.graph.view.EditShapeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 36,
            "description": "A shared Marker instance used for temporary calculations.",
            "itemtype": "property",
            "name": "_tmpmarker",
            "type": "JSG.graph.view.EditShapeView.Marker",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.EditShapeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 44,
            "description": "Returns the shared _tmpmarker instance. If currently <code>undefined</code> a new one will be created.",
            "itemtype": "method",
            "name": "_getTmpMarker",
            "return": {
                "description": "The shared _tmpmarker instance",
                "type": "JSG.graph.view.EditShapeView.Marker"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.EditShapeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 59,
            "description": "Specifies the points at which {{#crossLink \"JSG.graph.view.EditShapeView.Marker\"}}{{/crossLink}}s are shown.</br>\nThat means that all currently used markers are removed and a new one is added for each point\nwithin provided PointList.",
            "itemtype": "method",
            "name": "setPointList",
            "params": [
                {
                    "name": "pointlist",
                    "description": "The list of points to show the markers at.",
                    "type": "JSG.geometry.PointList"
                },
                {
                    "name": "origin",
                    "description": "The new origin of this edit view.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "angle",
                    "description": "The rotation angle to use for this edit view.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.view.EditShapeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 85,
            "description": "Specifies if the edited {{#crossLink \"JSG.graph.model.shapes.Shape\"}}{{/crossLink}} is closed.",
            "itemtype": "method",
            "name": "setIsClosed",
            "params": [
                {
                    "name": "doIt",
                    "description": "Specify <code>true</code> to close edited Shape, <code>false</code> otherwise.",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.graph.view.EditShapeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 95,
            "description": "Translates given Point to this view, i.e. the point should be defined relative to the parent of\nthis view.",
            "itemtype": "method",
            "name": "translatePoint",
            "params": [
                {
                    "name": "point",
                    "description": "The point to translate.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The translated point.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.view.EditShapeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 110,
            "description": "Draw the temporary markers and lines of the edited shape.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "graphics",
                    "description": "Graphics to draw to.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.EditShapeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 155,
            "description": "Returns the Marker instance at specified index.</br>\n<b>Note:</b> the index must be within the markers range!! It is not checked!",
            "itemtype": "method",
            "name": "getMarker",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the Marker to get.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the Marker at specified index.",
                "type": "JSG.graph.view.EditShapeView.Marker"
            },
            "class": "JSG.graph.view.EditShapeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 167,
            "description": "Insert given Marker into the list of all displayed Markers.</br>\nThe insert position is defined by {{#crossLink \"JSG.graph.view.EditShapeView.Marker/index:property\"}}{{/crossLink}}.\nIf it is <code>-1</code> a new marker instance will be added at the end of this list.",
            "itemtype": "method",
            "name": "insertMarker.",
            "params": [
                {
                    "name": "marker",
                    "description": "The Marker to insert.",
                    "type": "JSG.graph.view.EditShapeView.Marker"
                }
            ],
            "return": {
                "description": "The inserted Marker.",
                "type": "JSG.graph.view.EditShapeView.Marker"
            },
            "class": "JSG.graph.view.EditShapeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 185,
            "description": "Removes given Marker from the list of all displayed markers.",
            "itemtype": "method",
            "name": "deleteMarker",
            "params": [
                {
                    "name": "marker",
                    "description": "The marker to remove.",
                    "type": "JSG.graph.view.EditShapeView.Marker"
                }
            ],
            "class": "JSG.graph.view.EditShapeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 195,
            "description": "Returns an Array of Points defined by the center points of all markers.",
            "itemtype": "method",
            "name": "getMarkerPoints",
            "return": {
                "description": "A list of all markers center points.",
                "type": "Array"
            },
            "class": "JSG.graph.view.EditShapeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 211,
            "description": "Returns the number of markers currently displayed.",
            "itemtype": "method",
            "name": "getMarkerCount",
            "return": {
                "description": "The number of displayed markers",
                "type": "Number"
            },
            "class": "JSG.graph.view.EditShapeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 220,
            "description": "returns the Marker for specified location or <code>undefined</code> if no marker could be found.",
            "itemtype": "method",
            "name": "getMarkerAt",
            "params": [
                {
                    "name": "location",
                    "description": "The marker location.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The Marker or <code>undefined</code>.",
                "type": "JSG.graph.view.EditShapeView.Marker"
            },
            "class": "JSG.graph.view.EditShapeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 294,
            "description": "The marker index or -1 if this marker was not added yet.",
            "itemtype": "property",
            "name": "name",
            "type": "Number",
            "class": "JSG.graph.view.EditShapeView.Marker",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 309,
            "description": "Draws this Marker using given graphics.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "graphics",
                    "description": "Graphics class to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.EditShapeView.Marker",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 320,
            "description": "Checks if given Point is within the bounds of this Marker.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "point",
                    "description": "The point to check.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "<code>true</code> if point is within Marker bounds, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.EditShapeView.Marker",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 334,
            "description": "Returns the Marker location, i.e. the top-left corner of its corresponding bounds rectangle.",
            "itemtype": "method",
            "name": "getLocation",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse, if not supplied a new point will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The marker location.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.view.EditShapeView.Marker",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 346,
            "description": "Returns the Marker center.",
            "itemtype": "method",
            "name": "getCenter",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse, if not supplied a new point will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The marker location.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.view.EditShapeView.Marker",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 359,
            "description": "Sets the Marker center.",
            "itemtype": "method",
            "name": "setCenter",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate of new center.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate of new center.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.view.EditShapeView.Marker",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 370,
            "description": "Sets the Marker center.",
            "itemtype": "method",
            "name": "setCenterTo",
            "params": [
                {
                    "name": "point",
                    "description": "The coordinate of new center.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.view.EditShapeView.Marker",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 380,
            "description": "Sets the Marker location, i.e. the top-left corner of its corresponding bounds rectangle.",
            "itemtype": "method",
            "name": "setLocationTo",
            "params": [
                {
                    "name": "point",
                    "description": "The new top-left corner of its bounds rectangle.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.view.EditShapeView.Marker",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\EditShapeView.js",
            "line": 391,
            "description": "Sets the Marker location, i.e. the top-left corner of its corresponding bounds rectangle.",
            "itemtype": "method",
            "name": "setLocation",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate of new location.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate of new location.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.view.EditShapeView.Marker",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\FloatingToolbar.js",
            "line": 56,
            "description": "Add a tool to the list of tools in the view",
            "itemtype": "method",
            "name": "_addTool",
            "params": [
                {
                    "name": "tool",
                    "description": "Tool to add to toolbar.",
                    "type": "JSG.graph.view.FloatingToolbar.Tool"
                }
            ],
            "class": "JSG.graph.view.FloatingToolbar",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 35,
            "description": "Returns the id of the associated {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getId",
            "return": {
                "description": "The id of the underlying GraphItem.",
                "type": "Number"
            },
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 45,
            "description": "Returns the underlying GraphItem",
            "itemtype": "method",
            "name": "getItem",
            "return": {
                "description": "The underlying GraphItem",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 55,
            "description": "Returns the GraphView, i.e. the view associated to the {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}} model.",
            "itemtype": "method",
            "name": "getGraphView",
            "return": {
                "description": "The GraphView",
                "type": "JSG.graph.view.GraphView"
            },
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 65,
            "description": "Convenience method to get the rotation angle of the underlying {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getAngle",
            "return": {
                "description": "The angle expression value of the underlying GraphItem.",
                "type": "Number"
            },
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 75,
            "description": "Convenience method to get the {{#crossLink \"JSG.graph.model.shapes.Shape\"}}{{/crossLink}} points\nof the underlying {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}. Note that the\npoints are defined relative to the origin of corresponding GraphItem.</br>\nSee {{#crossLink \"JSG.graph.view.GraphItemView/getTranslatedShapePoints:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "getPointList",
            "return": {
                "description": "The shape points.",
                "type": "JSG.geometry.PointList"
            },
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 89,
            "description": "Gets the BoundingBox of the underlying {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getBoundingBox",
            "return": {
                "description": "BoundingBox of underlying GraphItem.",
                "type": "JSG.geometry.BoundingBox"
            },
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 98,
            "description": "Gets the origin of the underlying {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getOrigin",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "An optional Point instance to reuse, if not defined a new one will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The origin of underlying GraphItem.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 108,
            "description": "Sets the origin of the underlying {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} to the\nspecified Point.",
            "itemtype": "method",
            "name": "setOriginTo",
            "params": [
                {
                    "name": "point",
                    "description": "The new origin location",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 119,
            "description": "Gets the Pin location of the underlying {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getPin",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "An optional Point instance to reuse, if not defined a new one will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The Pin location of underlying GraphItem.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 129,
            "description": "Checks if given Point is within this view.",
            "itemtype": "method",
            "name": "containsPoint",
            "params": [
                {
                    "name": "point",
                    "description": "The point to check.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "findFlag",
                    "description": "A flag to affect the contain decision.",
                    "type": "JSG.graph.controller.FindFlags",
                    "optional": true
                }
            ],
            "return": {
                "description": "<code>true</code> if this view contains given point, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 140,
            "description": "Translates given point from Views parent.</br>\nSee {{#crossLink \"JSG.graph.model.GraphItem/translateFromParent:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "translateFromParent",
            "params": [
                {
                    "name": "point",
                    "description": "The point to translate.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "Given and now translated point as convenience.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 151,
            "description": "Translates given point to parent of this view.</br>\nSee {{#crossLink \"JSG.graph.model.GraphItem/translateToParent:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "translateToParent",
            "params": [
                {
                    "name": "point",
                    "description": "The point to translate.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "Given and now translated point as convenience.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 162,
            "description": "Convenience method to get the {{#crossLink \"JSG.graph.model.shapes.Shape\"}}{{/crossLink}} points already translated to the given view. </br>\nI.e. the shape points are relative to the origin of given view.",
            "itemtype": "method",
            "name": "getTranslatedShapePoints",
            "params": [
                {
                    "name": "toView",
                    "description": "The GraphItemView to translate points to.",
                    "type": "JSG.graph.view.GraphItemView"
                },
                {
                    "name": "reusepoints",
                    "description": "An optional array of points to reuse. If not provided a new one will be created.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of translated shape points.",
                "type": "Array"
            },
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 174,
            "description": "Returns the BoundingBox of the underlying {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} already translated to given GraphItemView.</br>\nThat means the returned BoundingBox is relative to given item.",
            "itemtype": "method",
            "name": "getTranslatedBoundingBox",
            "params": [
                {
                    "name": "toView",
                    "description": "The GraphItemView to translate BoundingBox to.",
                    "type": "JSG.graph.view.GraphItemView"
                },
                {
                    "name": "reusebbox",
                    "description": "An optional bounding box to reuse. If not provided a new one will be created.",
                    "type": "JSG.geometry.BoundingBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "The translated bounding box.",
                "type": "JSG.geometry.BoundingBox"
            },
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 187,
            "description": "The main drawing routine.</br>\nUsually it is not required to override this method. Instead subclasses should rather overwrite one of\n{{#crossLink \"JSG.graph.view.GraphItemView/drawFill:method\"}}{{/crossLink}},\n{{#crossLink \"JSG.graph.view.GraphItemView/drawBorder:method\"}}{{/crossLink}} or\n{{#crossLink \"JSG.graph.view.GraphItemView/drawDecorations:method\"}}{{/crossLink}} methods which\nare called in that order.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "graphics",
                    "description": "The current Graphics instance to use for drawing this GraphItemView.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 268,
            "description": "Translates given Graphics instance to the origin of this view.</br>\nCalled during drawing, subclasses may overwrite.",
            "itemtype": "method",
            "name": "translateGraphics",
            "params": [
                {
                    "name": "grapghics",
                    "description": "The graphics to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 283,
            "description": "Fills the defined {{#crossLink \"JSG.graph.model.shapes.Shape\"}}{{/crossLink}} using given Format.</br>\nThis applies specified format and shadow to provided Graphics instance. The Shape then is actually\ndrawn by using inner {{#crossLink \"JSG.graph.view.shapes.ShapeRenderer\"}}{{/crossLink}} instance.</br>\nNote: called during drawing, subclasses may overwrite.",
            "itemtype": "method",
            "name": "drawFill",
            "params": [
                {
                    "name": "graphics",
                    "description": "The graphics to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                },
                {
                    "name": "format",
                    "description": "The Format to use for drawing.",
                    "type": "JSG.graph.attr.FormatAttributes"
                },
                {
                    "name": "rect",
                    "description": "A rectangle which specifies the GraphItem bounds",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 303,
            "description": "Draws a watermark, if the watermark attribute has been set. \nNote: called during drawing, subclasses may overwrite.",
            "itemtype": "method",
            "name": "drawWatermark",
            "params": [
                {
                    "name": "graphics",
                    "description": "The graphics to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                },
                {
                    "name": "rect",
                    "description": "A rectangle which specifies the GraphItem bounds",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 384,
            "description": "Draws the sub views of this GraphItemView.</br>\nNote: called during drawing, subclasses may overwrite.",
            "itemtype": "method",
            "name": "drawSubViews",
            "params": [
                {
                    "name": "graphics",
                    "description": "The Graphics to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 425,
            "description": "Strokes the defined {{#crossLink \"JSG.graph.model.shapes.Shape\"}}{{/crossLink}} using given Format\nand inner {{#crossLink \"JSG.graph.view.shapes.ShapeRenderer\"}}{{/crossLink}} instance.</br>\nNote: called during drawing, subclasses may overwrite.",
            "itemtype": "method",
            "name": "drawBorder",
            "params": [
                {
                    "name": "graphics",
                    "description": "The graphics to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                },
                {
                    "name": "format",
                    "description": "The Format to use for drawing.",
                    "type": "JSG.graph.attr.FormatAttributes"
                },
                {
                    "name": "rect",
                    "description": "A rectangle which specifies the GraphItem bounds",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 446,
            "description": "Used to draw any additional elements or components on top of this GraphItemView.</br>\nNote: called during drawing, subclasses may overwrite.",
            "itemtype": "method",
            "name": "drawDecorations",
            "params": [
                {
                    "name": "graphics",
                    "description": "The graphics to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                },
                {
                    "name": "rect",
                    "description": "A rectangle which specifies the GraphItem bounds",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 474,
            "description": "Checks if given event at specified location is handled by this GraphItemView.",
            "itemtype": "method",
            "name": "doHandleEventAt",
            "params": [
                {
                    "name": "location",
                    "description": "The location at which the event occurred.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "event",
                    "description": "The event to handle.",
                    "type": "JSG.ui.events.Event"
                }
            ],
            "return": {
                "description": "<code>true</code> if the event will be consumed by this GraphItemView, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 486,
            "description": "Called, if mouse is pressed on top of this GraphItemView.",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "location",
                    "description": "Location, relative to the container coordinates, of the mouse event.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "viewer",
                    "description": "Viewer to which the controller belongs.",
                    "type": "JSG.ui.viewer.GraphViewer"
                },
                {
                    "name": "event",
                    "description": "MouseEvent parameters.",
                    "type": "JSG.ui.events.MouseEvent"
                }
            ],
            "return": {
                "description": "Return false to intercept the event. No further processing will occur or true to allow default handling.",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 513,
            "description": "Checks if location is inside the collapse button bounds of this GraphItemView.",
            "itemtype": "method",
            "name": "hitCollapseButton",
            "params": [
                {
                    "name": "location",
                    "description": "The location to check.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "<code>true</code> if given location is inside collapse button bounds, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 525,
            "description": "Returns the Shape definition of the underlying {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getShape",
            "return": {
                "description": "The Shape instance used by corresponding GraphItem.",
                "type": "JSG.graph.model.shapes.Shape"
            },
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 535,
            "description": "Returns the Attributes of the underlying {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getItemAttributes",
            "return": {
                "description": "The Attributes used by corresponding GraphItem.",
                "type": "JSG.graph.attr.ItemAttributes"
            },
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 545,
            "description": "Sets the ShapeRenderer to use for drawing the Shape of underlying {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setShapeRenderer",
            "params": [
                {
                    "name": "shapeRenderer",
                    "description": "The ShapeRenderer to use for drawing the Shape.",
                    "type": "JSG.graph.view.shapes.ShapeRenderer"
                }
            ],
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 557,
            "description": "Sets the BoundingBox of the underlying {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setBoundingBox",
            "params": [
                {
                    "name": "The",
                    "description": "new BoundingBox of underlying GraphItem.",
                    "type": "JSG.geometry.BoundingBox"
                }
            ],
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphItemView.js",
            "line": 579,
            "description": "Calculates the preferred bounding Rectangle this view needs to draw itself. The optional parameter\ncan be used to give hints to calculation, e.g. to specify the available space.</br>\n<b>Note:</b> This method is intended to be overwritten by subclasses. Default implementation does nothing.",
            "itemtype": "method",
            "name": "getPreferredBounds",
            "params": [
                {
                    "name": "recthint",
                    "description": "An optional Rectangle to influence calculation.",
                    "type": "JSG.geometry.Rectangle",
                    "optional": true
                },
                {
                    "name": "reuserect",
                    "description": "An optional Rectangle to reuse, if not supplied a new one will be created.",
                    "type": "JSG.geometry.Rectangle",
                    "optional": true
                }
            ],
            "return": {
                "description": "The preferred Rectangle this view needs to draw itself.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.graph.view.GraphItemView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 50,
            "description": "Returns the GraphSettings to used for underlying Graph.",
            "itemtype": "method",
            "name": "getSettings",
            "return": {
                "description": "The currently used GraphSettings.",
                "type": "JSG.graph.model.settings.GraphSettings"
            },
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 64,
            "description": "Clears internal used canvas cache.</br>\n<b>Note:</b> it should almost never be required to call this method outside framework!",
            "itemtype": "method",
            "name": "clearCache",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 96,
            "description": "Draws this GraphView using given graphics.",
            "itemtype": "method",
            "name": "drawClientArea",
            "params": [
                {
                    "name": "graphics",
                    "description": "Graphics class to use for generating output.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 479,
            "itemtype": "method",
            "name": "_drawTitles",
            "params": [
                {
                    "name": "graphics",
                    "description": "Graphics class to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Currently not used!",
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 523,
            "description": "Draws registered overlay view.",
            "itemtype": "method",
            "name": "_drawOverlay",
            "params": [
                {
                    "name": "graphics",
                    "description": "Graphics class to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 599,
            "description": "Draws a grid on the GraphView background.",
            "itemtype": "method",
            "name": "_drawGrid",
            "params": [
                {
                    "name": "graphics",
                    "description": "Graphics class to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                },
                {
                    "name": "drawRect",
                    "description": "A rectangle which defines the grid bounds.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 691,
            "description": "Draws all registered feedback views.",
            "itemtype": "method",
            "name": "_drawFeedback",
            "params": [
                {
                    "name": "graphics",
                    "description": "Graphics class to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 706,
            "description": "Draws all registered layer views.",
            "itemtype": "method",
            "name": "_drawLayers",
            "params": [
                {
                    "name": "graphics",
                    "description": "Graphics class to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 743,
            "description": "Calculates the current page offset for given location point which is relative to the {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}}\nmodel of this <code>GraphView</code>.</br>\n<b>Note:</b> this method should only be used if the display mode is set to {{#crossLink \"JSG.ui.graphics.DisplayMode/PAGE:property\"}}{{/crossLink}}.\nThe returned offset can be added to given location point to get the correct position relative to the parent of this <code>GraphView</code>. \nFor the opposite direction refer to {{#crossLink \"JSG.graph.view.GraphView/getPageOffsetFrom:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getPageOffsetTo",
            "params": [
                {
                    "name": "location",
                    "description": "The location to calculate the offset for. The point must be relative to the parent of this <code>GraphView</code>.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse, if not supplied a new point will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The page offset.",
                "type": "JSG.geometry.Point"
            },
            "since": "1.6.0",
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 767,
            "description": "Calculates the current page offset for given location point which is relative to the parent of this <code>GraphView</code>.</br>\n<b>Note:</b> this method should only be used if the display mode is set to {{#crossLink \"JSG.ui.graphics.DisplayMode/PAGE:property\"}}{{/crossLink}}.\nThe returned offset can be subtracted from given location point to get the correct position relative to <code>Graph</code> origin. \nFor the opposite direction refer to {{#crossLink \"JSG.graph.view.GraphView/getPageOffsetTo:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getPageOffsetFrom",
            "params": [
                {
                    "name": "location",
                    "description": "The location to calculate the offset for. The point must be relative to the parent of this <code>GraphView</code>.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse, if not supplied a new point will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The page offset.",
                "type": "JSG.geometry.Point"
            },
            "since": "1.6.0",
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 831,
            "description": "Calculates the current page offset for given location point which is relative to the parent of this <code>GraphView</code>.</br>\n<b>Note:</b> this method should only be used if the display mode is set to {{#crossLink \"JSG.ui.graphics.DisplayMode/PAGE:property\"}}{{/crossLink}}.\nThe returned offset can be subtracted from given location point to get the correct position relative to <code>Graph</code> origin. \nFor the opposite direction refer to {{#crossLink \"JSG.graph.view.GraphView/getPageOffsetTo:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getPageOffset",
            "params": [
                {
                    "name": "location",
                    "description": "The location to calculate the offset for. The point must be relative to the parent of this <code>GraphView</code>.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse, if not supplied a new point will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The page offset.",
                "type": "JSG.geometry.Point"
            },
            "deprecated": true,
            "deprecationMessage": "Please use {{#crossLink \"JSG.graph.view.GraphView/getPageOffsetFrom:method\"}}{{/crossLink}} instead.",
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 847,
            "description": "Sets the order to use for displaying the layer views.</br>\nThe parameter is simply an array of layer IDs where the occurrence within the array defines the\norder in which the layer views are show. E.g. the last id specifies the layer on top. Layers which are\nnot covered by this order are simply drawn first in the same order as they were added.</br>\nThe default order used by this GraphView is: <code>[LayerId.PORTS, LayerId.SELECTION, LayerId.FRIENDS]</code>.</br>\nSee {{#crossLink \"JSG.graph.view.LayerId\"}}{{/crossLink}} for predefined layer IDs.",
            "itemtype": "method",
            "name": "setLayerOrder",
            "params": [
                {
                    "name": "order",
                    "description": "A list of layer IDs or <code>undefined</code> to not apply any order.",
                    "type": "Array"
                }
            ],
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 861,
            "description": "Returns the list of views for specified layer. If no layer exists for specified id a new layer is\ncreated.</br>\nTo specify an order for the layers use {{#crossLink \"JSG.graph.view.GraphView/setLayerOrder:method\"}}{{/crossLink}}.</br></br>\nSee {{#crossLink \"JSG.graph.view.LayerId\"}}{{/crossLink}} for predefined layer IDs.",
            "itemtype": "method",
            "name": "getLayer",
            "params": [
                {
                    "name": "layerId",
                    "description": "The id of the layer to get the views for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A list of {{#crossLink \"JSG.ui.View\"}}{{/crossLink}}s registered for specified layer.",
                "type": "Array"
            },
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 891,
            "description": "Checks if there is a layer with given id currently registered.</br>\nNote: this method only returns <code>true</code> if a layer exists for given id and this layer\ncontains at least one view.",
            "itemtype": "method",
            "name": "hasLayer",
            "params": [
                {
                    "name": "layerId",
                    "description": "The id of the layer to check existence of.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<code>true</code> if this GraphView has a non empty layer registered with specified id, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 904,
            "description": "Removes the layer with specified id and all of its registered views.",
            "itemtype": "method",
            "name": "clearLayer",
            "params": [
                {
                    "name": "layerId",
                    "description": "The id of the layer to remove.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Removed layer as convenience or <code>undefined</code> if no layer with given id\nwas registered.",
                "type": "Array"
            },
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 915,
            "description": "Clears all currently registered layers.",
            "itemtype": "method",
            "name": "clearAllLayer",
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 924,
            "description": "Adds given View to the list of registered feedbacks.",
            "itemtype": "method",
            "name": "addFeedback",
            "params": [
                {
                    "name": "view",
                    "description": "The view to add.",
                    "type": "JSG.ui.View"
                }
            ],
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 933,
            "description": "Checks if there are any feedbacks currently registered.",
            "itemtype": "method",
            "name": "hasFeedback",
            "return": {
                "description": "<code>true</code> if this GraphView has registered feedbacks, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 942,
            "description": "Removes given View from the list of registered feedbacks.",
            "itemtype": "method",
            "name": "removeFeedback",
            "params": [
                {
                    "name": "view",
                    "description": "The view to remove.",
                    "type": "JSG.ui.View"
                }
            ],
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 951,
            "description": "Removes all currently registered feedbacks.",
            "itemtype": "method",
            "name": "clearFeedback",
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 961,
            "description": "Returns the view used for drawing current selection or <code>undefined</code> if none was registered.<br/>\n<b>Note:</b> the framework uses an instance of {{#crossLink \"JSG.graph.view.selection.SelectionView\"}}{{/crossLink}}\nto visualize current selection. To retrieve it, it is recommended to use {{#crossLink \"JSG.ui.viewer.GraphViewer/getSelectionView:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getSelectionView",
            "return": {
                "description": "view The current selection view or <code>undefined</code>.",
                "type": "JSG.ui.View"
            },
            "deprecated": true,
            "deprecationMessage": "The selection view is managed by {{#crossLink \"JSG.ui.viewer.GraphViewer\"}}{{/crossLink}}. Therefore use\n{{#crossLink \"JSG.ui.viewer.GraphViewer/getSelectionView:method\"}}{{/crossLink}}.",
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 976,
            "description": "Sets the view to use for drawing and/or marking current selection. This will replace any previous added selection view.",
            "itemtype": "method",
            "name": "setSelectionView",
            "params": [
                {
                    "name": "view",
                    "description": "The new selection view.",
                    "type": "JSG.ui.View"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "The selection view is managed by {{#crossLink \"JSG.ui.viewer.GraphViewer\"}}{{/crossLink}}. Therefore use\n{{#crossLink \"JSG.ui.viewer.GraphViewer/setSelectionView:method\"}}{{/crossLink}}.",
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 989,
            "description": "Clears the selection layer, i.e. the layer with id {{#crossLink \"JSG.graph.view.LayerId/SELECTION:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "removeSelectionView",
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 998,
            "description": "Sets the new overlay view to draw.</br>\nNote that the overlay view will be drawn after all layer views are drawn.",
            "itemtype": "method",
            "name": "setOverlayView",
            "params": [
                {
                    "name": "view",
                    "description": "The new overlay view.",
                    "type": "JSG.ui.View"
                }
            ],
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 1011,
            "description": "Removes current overlay view.",
            "itemtype": "method",
            "name": "removeOverlayView",
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\GraphView.js",
            "line": 1024,
            "description": "Implemented to fulfill content view constraint.<br/>\nSee {{#crossLink \"JSG.ui.scrollview.ViewPort/setContentView:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "setScrollTo",
            "params": [
                {
                    "name": "point",
                    "description": "The scroll position to apply to this content view.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "since": "1.6.2",
            "class": "JSG.graph.view.GraphView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\LayerId.js",
            "line": 16,
            "description": "A layer used for highlighting or indicating available ports.",
            "itemtype": "property",
            "name": "PORTS",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.view.selection.LayerId",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\LayerId.js",
            "line": 24,
            "description": "A layer used to display friend views.",
            "itemtype": "property",
            "name": "FRIENDS",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.view.selection.LayerId",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\LayerId.js",
            "line": 32,
            "description": "A layer used to display current selection.",
            "itemtype": "property",
            "name": "SELECTION",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.view.selection.LayerId",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\LayerId.js",
            "line": 40,
            "description": "A layer used to display snap lines.",
            "itemtype": "property",
            "name": "SNAPLINES",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.view.selection.LayerId",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\LayerId.js",
            "line": 48,
            "description": "A layer used to display layout marker.",
            "itemtype": "property",
            "name": "LAYOUTMARKER",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.view.selection.LayerId",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\LayerId.js",
            "line": 56,
            "description": "A layer used to display the target container.",
            "itemtype": "property",
            "name": "TARGETCONTAINER",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.view.selection.LayerId",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\LayerId.js",
            "line": 64,
            "description": "A layer used to display a toolbar.",
            "itemtype": "property",
            "name": "TOOLBAR",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.view.selection.LayerId",
            "module": "JSG.graph.view.selection",
            "namespace": "JSG.graph.view.selection"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\MarqueeFeedbackView.js",
            "line": 30,
            "description": "Returns the bounds of this view.",
            "itemtype": "method",
            "name": "getBounds",
            "params": [
                {
                    "name": "reuserect",
                    "description": "An optional Rectangle instance to reuse. If not provided a new one will be created.",
                    "type": "JSG.geometry.Rectangle",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current bounds of this view.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.graph.view.MarqueeFeedbackView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\MarqueeFeedbackView.js",
            "line": 42,
            "description": "Sets the bounds of this view.",
            "itemtype": "method",
            "name": "setBounds",
            "params": [
                {
                    "name": "x",
                    "description": "The new x coordinate of this view.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The new y coordinate of this view.",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "The new width of this view.",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "The new height of this view.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.view.MarqueeFeedbackView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\MarqueeFeedbackView.js",
            "line": 54,
            "description": "Returns the origin of this view. The origin is the top, left point of the bounds rectangle, i.e\nthe x and y coordinate.",
            "itemtype": "method",
            "name": "getOrigin",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "An optional Point instance to reuse. If not provided a new one will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The origin of this view.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.view.MarqueeFeedbackView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\MarqueeFeedbackView.js",
            "line": 67,
            "description": "Returns the center of view bounds.",
            "itemtype": "method",
            "name": "getCenter",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "An optional Point instance to reuse. If not provided a new one will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The center of current view bounds.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.view.MarqueeFeedbackView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\NodeView.js",
            "line": 26,
            "description": "Adds given sub view to the list of PortViews.",
            "itemtype": "method",
            "name": "addPortView",
            "params": [
                {
                    "name": "view",
                    "description": "The PortView to add as sub view.",
                    "type": "JSG.graph.view.PortView"
                }
            ],
            "class": "JSG.graph.view.NodeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\NodeView.js",
            "line": 37,
            "description": "Removes given sub view from the list of PortViews.",
            "itemtype": "method",
            "name": "removePortView",
            "params": [
                {
                    "name": "view",
                    "description": "The PortView to remove.",
                    "type": "JSG.graph.view.PortView"
                }
            ],
            "class": "JSG.graph.view.NodeView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SelectionProvider.js",
            "line": 30,
            "description": "Notification name which qualifies the notification send on selection changes.",
            "itemtype": "property",
            "name": "SELECTION_CHANGED_NOTIFICATION",
            "type": "{String}",
            "static": 1,
            "class": "JSG.graph.view.SelectionProvider",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SelectionProvider.js",
            "line": 39,
            "description": "Adds given listener to the list of listeners which will be notified when a selection changed event occurs.",
            "itemtype": "method",
            "name": "addSelectionChangedListener",
            "params": [
                {
                    "name": "listener",
                    "description": "The listener object on which <code>onSelectionChanged()</code> is called.",
                    "type": "Object"
                }
            ],
            "class": "JSG.graph.view.SelectionProvider",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SelectionProvider.js",
            "line": 49,
            "description": "Removes given listener from the list of listeners which will be notified when a selection changed event occurs.",
            "itemtype": "method",
            "name": "removeSelectionChangedListener",
            "params": [
                {
                    "name": "listener",
                    "description": "The listener object to remove.",
                    "type": "Object"
                }
            ],
            "class": "JSG.graph.view.SelectionProvider",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SelectionProvider.js",
            "line": 58,
            "description": "Calls <code>onSelectionChanged()</code> on all registered listeners and sends a\n<code>SelectionChangedNotification</code> notification to the\n{{#crossLink \"JSG.graph.notifications.NotificationCenter\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "name",
            "params": [
                {
                    "name": "name",
                    "description": "Description.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.SelectionProvider",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SelectionProvider.js",
            "line": 75,
            "description": "Returns the application or API dependent selection context. This might be <code>undefined</code>\nif it was not set or cleared.",
            "itemtype": "method",
            "name": "getSelectionContext",
            "params": [
                {
                    "name": "param_name",
                    "description": "param_description.",
                    "type": "Type"
                }
            ],
            "return": {
                "description": "The current selection context object or <code>undefined</code>",
                "type": "Object"
            },
            "class": "JSG.graph.view.SelectionProvider",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SelectionProvider.js",
            "line": 87,
            "description": "Marks given controller as selected.</br>\nThe optional <code>selcontext</code> parameter can be used to store additional API or application\ndependent information for this selection. Note: in each case calling this method overwrites an earlier\n<code>selcontext</code> object! Either with a new object or with <code>undefined</code> if no new\n<code>selcontext</code> object is provided.",
            "itemtype": "method",
            "name": "select",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to select.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "selcontext",
                    "description": "An optional arbitrary selection context object. This overwrites current\nselection context object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "JSG.graph.view.SelectionProvider",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SelectionProvider.js",
            "line": 106,
            "description": "Selects given controller.</br>\nThis method does not send an event or notification.",
            "itemtype": "method",
            "name": "_doSelect",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to select.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "return": {
                "description": "<code>true</code> if given controller was selected, </code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.graph.view.SelectionProvider",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SelectionProvider.js",
            "line": 126,
            "description": "Selects all controllers within given Array.</br>\nNote: this will not change or replace currently selection. Use\n{{#crossLink \"JSG.graph.view.SelectionProvider/setSelection:method\"}}{{/crossLink}} to do this.</br>\nThe optional <code>selcontext</code> parameter can be used to store additional API or application\ndependent information for this selection. Note: in each case calling this method overwrites an earlier\n<code>selcontext</code> object! Either with a new object or with <code>undefined</code> if no new\n<code>selcontext</code> object is provided.</br>\nThis method sends a\n{{#crossLink \"JSG.graph.view.SelectionProvider/SELECTION_CHANGED_NOTIFICATION:property\"}}{{/crossLink}}\nnotification if at least one of the controller within given array was not selected before and\nis therefore added to inner selection list.",
            "itemtype": "method",
            "name": "selectAll",
            "params": [
                {
                    "name": "controllers",
                    "description": "An array of controllers to select.",
                    "type": "Array"
                },
                {
                    "name": "selcontext",
                    "description": "An optional arbitrary selection context object. This overwrites current\nselection context object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "JSG.graph.view.SelectionProvider",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SelectionProvider.js",
            "line": 163,
            "description": "Sets current selection to the list of given controllers.</br>\nThe optional <code>selcontext</code> parameter can be used to store additional API or application\ndependent information for this selection. Note: in each case calling this method overwrites an earlier\n<code>selcontext</code> object! Either with a new object or with <code>undefined</code> if no new\n<code>selcontext</code> object is provided.",
            "itemtype": "method",
            "name": "setSelection",
            "params": [
                {
                    "name": "controllers",
                    "description": "An array of controllers to select.",
                    "type": "Array"
                },
                {
                    "name": "selcontext",
                    "description": "An optional arbitrary selection context object. This overwrites current\nselection context object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "JSG.graph.view.SelectionProvider",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SelectionProvider.js",
            "line": 182,
            "description": "Deselects given controller if it was selected before and therefore is known to this SelectionProvider.",
            "itemtype": "method",
            "name": "deselect",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to deselect.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "class": "JSG.graph.view.SelectionProvider",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SelectionProvider.js",
            "line": 204,
            "description": "Checks if there currently are any selected controllers.",
            "itemtype": "method",
            "name": "hasSelection",
            "return": {
                "description": "<code>true</code> if selected controllers exists, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.SelectionProvider",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SelectionProvider.js",
            "line": 214,
            "description": "Checks if there is currently only one selected controller.",
            "itemtype": "method",
            "name": "hasSingleSelection",
            "return": {
                "description": "<code>true</code> if only one controller is selected, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.SelectionProvider",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SelectionProvider.js",
            "line": 224,
            "description": "Checks if given item is selected, i.e. its corresponding controller is selected.",
            "itemtype": "method",
            "name": "isSelected",
            "params": [
                {
                    "name": "item",
                    "description": "The item to check selection for.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "<code>true</code> item's controller is selected, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.view.SelectionProvider",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SelectionProvider.js",
            "line": 235,
            "description": "Returns all currently selected Controllers.",
            "itemtype": "method",
            "name": "getSelection",
            "return": {
                "description": "A list of all selected controllers.",
                "type": "Array"
            },
            "class": "JSG.graph.view.SelectionProvider",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SelectionProvider.js",
            "line": 245,
            "description": "Gets first selected controller from current selection or <code>undefined</code> if no selection exists.<br/>\nSee {{#crossLink \"JSG.graph.view.SelectionProvider/getLastSelection:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "getFirstSelection",
            "params": [
                {
                    "name": "controller",
                    "description": "The first selected controller from current selection or <code>undefined</code>.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "class": "JSG.graph.view.SelectionProvider",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SelectionProvider.js",
            "line": 255,
            "description": "Gets last selected controller from current selection or <code>undefined</code> if no selection exists.<br/>\nSee {{#crossLink \"JSG.graph.view.SelectionProvider/getFirstSelection:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "getLastSelection",
            "params": [
                {
                    "name": "controller",
                    "description": "The last selected controller from current selection or <code>undefined</code>.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "since": "1.6.0",
            "class": "JSG.graph.view.SelectionProvider",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SelectionProvider.js",
            "line": 267,
            "description": "Deselects all currently selected controllers.</br>\nNote: this clears an optional selection context too.",
            "itemtype": "method",
            "name": "clearSelection",
            "params": [
                {
                    "name": "notify",
                    "description": "Send notification message. This might not be necessary, if another item is selected directly after the selection is cleared.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "JSG.graph.view.SelectionProvider",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SnapFeedbackView.js",
            "line": 30,
            "description": "Sets the origin of this view to given point.",
            "itemtype": "method",
            "name": "setOriginTo",
            "params": [
                {
                    "name": "p",
                    "description": "The new origin location.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.view.SnapFeedbackView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SnapFeedbackView.js",
            "line": 39,
            "description": "Sets the origin of this view to given x and y location.",
            "itemtype": "method",
            "name": "setOrigin",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate of new origin location.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate of new origin location.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.view.SnapFeedbackView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SnapFeedbackView.js",
            "line": 50,
            "description": "Returns the origin of this view.<br/>",
            "itemtype": "method",
            "name": "getOrigin",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse, if not supplied a new point will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The views origin.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.view.SnapFeedbackView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SnapFeedbackView.js",
            "line": 63,
            "description": "Sets the target point to given one.",
            "itemtype": "method",
            "name": "setTargetTo",
            "params": [
                {
                    "name": "p",
                    "description": "The new target point.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.view.SnapFeedbackView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SnapFeedbackView.js",
            "line": 72,
            "description": "Sets the target point to given x and y coordinates.",
            "itemtype": "method",
            "name": "setTarget",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate of new target location.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate of new target location.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.view.SnapFeedbackView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SnapFeedbackView.js",
            "line": 83,
            "description": "Returns the target point of this view.<br/>",
            "itemtype": "method",
            "name": "getTarget",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse, if not supplied a new point will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The views target point.",
                "type": "JSG.geometry.Point"
            },
            "since": "1.6.0",
            "class": "JSG.graph.view.SnapFeedbackView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SnapFeedbackView.js",
            "line": 96,
            "description": "Sets the new line color to use, default is rgba(255,0,0,0.5).",
            "itemtype": "method",
            "name": "setLineColor",
            "params": [
                {
                    "name": "color",
                    "description": "The new line color.",
                    "type": "String"
                }
            ],
            "since": "1.6.0",
            "class": "JSG.graph.view.SnapFeedbackView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SnapFeedbackView.js",
            "line": 108,
            "description": "Sets the new line width to use.",
            "itemtype": "method",
            "name": "setLineWidth",
            "params": [
                {
                    "name": "width",
                    "description": "The new line width.",
                    "type": "Number"
                }
            ],
            "since": "1.6.0",
            "class": "JSG.graph.view.SnapFeedbackView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\view\\SnapFeedbackView.js",
            "line": 118,
            "description": "Sets the new line style to use, default is {{#crossLink \"JSG.graph.attr.FormatAttributes.LineStyle/DASH:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setLineStyle",
            "params": [
                {
                    "name": "style",
                    "description": "The new line style.",
                    "type": "JSG.graph.attr.FormatAttributes.LineStyle"
                }
            ],
            "since": "1.6.0",
            "class": "JSG.graph.view.SnapFeedbackView",
            "module": "JSG.graph.view",
            "namespace": "JSG.graph.view"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 23,
            "description": "Create a coordinate from an absolute x and an y value given as a point. This function creates static expressions for the coordinate.",
            "itemtype": "method",
            "name": "fromPoint",
            "params": [
                {
                    "name": "point",
                    "description": "Point with coordinate values to use.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "New allocated coordinate.",
                "type": "JSG.graph.Coordinate"
            },
            "static": 1,
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 35,
            "description": "Create a coordinate from an absolute x and an y value. This function create statics expressions for the coordinate.",
            "itemtype": "method",
            "name": "fromXY",
            "params": [
                {
                    "name": "x",
                    "description": "X Coordinate to use.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y Coordinate to use.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "New allocated coordinate.",
                "type": "JSG.graph.Coordinate"
            },
            "static": 1,
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 48,
            "description": "Description",
            "itemtype": "method",
            "name": "fromRelativeXY",
            "params": [
                {
                    "name": "x",
                    "description": "A factor for a coordinate expression to use. The coordinate will be created by defining a formula : factor + \" * WIDTH\".\nThis way the coordinate is calculated using the height of the object",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "A factor for a coordinate expression to use. The coordinate will be created by defining a formula : factor + \" * HEIGHT\".\nThis way the coordinate is calculated using the height of the object",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "New allocated coordinate.",
                "type": "JSG.graph.Coordinate"
            },
            "static": 1,
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 63,
            "description": "Create a default coordinate with the coordinates set to 0.",
            "itemtype": "method",
            "name": "Factory",
            "static": 1,
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 73,
            "description": "Saves a coordinate to an XML stream.<br/>\nNote: the last parameter is optional and defines a map of additional XML attributes to be saved too. These attributes\nare <code>String</code>-<code>String</code> pairs and set to the coordinate again on {{#crossLink \"JSG.graph.Coordinate/readXML:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "saveXML",
            "params": [
                {
                    "name": "name",
                    "description": "Tag to create for the coordinate.",
                    "type": "String"
                },
                {
                    "name": "writer",
                    "description": "XMLWriter to use.",
                    "type": "JSG.commons.XMLWriter"
                },
                {
                    "name": "attributes",
                    "description": "An optional Map of name-value pairs to save as coordinate attributes.",
                    "type": "JSG.commons.Map",
                    "optional": true
                }
            ],
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 90,
            "description": "Saves given XML attributes to an XML stream.<br/>",
            "itemtype": "method",
            "name": "_saveAttributes",
            "params": [
                {
                    "name": "attributes",
                    "description": "An optional Map of name-value pairs to save as coordinate attributes.",
                    "type": "JSG.commons.Map",
                    "optional": true
                },
                {
                    "name": "writer",
                    "description": "XMLWriter to use.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "1.6.0",
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 108,
            "description": "Read a coordinate from an XML node.",
            "itemtype": "method",
            "name": "readXML",
            "params": [
                {
                    "name": "node",
                    "description": "Node to read from.",
                    "type": "Node"
                }
            ],
            "since": "1.6.0",
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 128,
            "description": "Reads attributes from given XML node and adds them to this coordinate.<br/>",
            "itemtype": "method",
            "name": "_readAttributes",
            "params": [
                {
                    "name": "node",
                    "description": "Node to read from.",
                    "type": "Node"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "1.6.0",
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 145,
            "description": "Checks if this coordinate is equal to the given one. Equal means that both coordinates have the\nsame x and y expressions.</br>\n<b>Note:</b> instead of passing a coordinate instance it is also possible to call this method with \nx and y expressions as well or with its corresponding values!</br>\nSee {{#crossLink \"JSG.graph.expr.Expression\"}}{{/crossLink}} to get information about equality \nof expressions.",
            "itemtype": "method",
            "name": "isEqualTo",
            "params": [
                {
                    "name": "coordinate",
                    "description": "The other coordinate to check against.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "return": {
                "description": "<code>true</code> if both coordinates are equal, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 170,
            "description": "Copy a coordinate",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "Copy of this coordinate.",
                "type": "JSG.graph.Coordinate"
            },
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 182,
            "description": "Evaluate all formulas in this coordinate. The parser will parse, evaluate the formula strings and create precompiled terms.",
            "itemtype": "method",
            "name": "evaluate",
            "params": [
                {
                    "name": "item",
                    "description": "Item, this coordinate belongs to.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 193,
            "description": "Invalidate all terms of the pin. This will have the effect that the formulas are parsed and calculated again.",
            "itemtype": "method",
            "name": "invalidateTerms",
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 203,
            "description": "Resolves parent references within inner Expression.</br>\nThe passed GraphItem is used to resolve the parent item and the optional <code>doRemove</code>\nflag can be used to clear the complete formula of inner Expressions.",
            "itemtype": "method",
            "name": "resolveParentReference",
            "params": [
                {
                    "name": "item",
                    "description": "Used to resolve parent reference.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "doRemove",
                    "description": "Specify <code>true</code> to remove inner formula completely.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 217,
            "description": "Lock the expressions in this coordinate. This way the formulas and and values of the coordinate can not be changed.",
            "itemtype": "method",
            "name": "lock",
            "params": [
                {
                    "name": "lock",
                    "description": "Enable or disable lock.",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 228,
            "description": "Lock the X expression in this coordinate. This way the formulas and and values of the X-coordinate can not be changed.",
            "itemtype": "method",
            "name": "lock",
            "params": [
                {
                    "name": "lock",
                    "description": "Enable or disable lock.",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 238,
            "description": "Lock the Y expression in this coordinate. This way the formulas and and values of the Y-coordinate can not be changed.",
            "itemtype": "method",
            "name": "lock",
            "params": [
                {
                    "name": "lock",
                    "description": "Enable or disable lock.",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 248,
            "description": "Return the X Coordinate.",
            "itemtype": "method",
            "name": "getX",
            "return": {
                "description": "X Coordinate Expression.",
                "type": "JSG.graph.expr.Expression"
            },
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 258,
            "description": "Return the Y Coordinate.",
            "itemtype": "method",
            "name": "getY",
            "return": {
                "description": "Y Coordinate Expression.",
                "type": "JSG.graph.expr.Expression"
            },
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 268,
            "description": "Assign the coordinates properties of another coordinate to this coordinate.",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "coordinate",
                    "description": "Coordinate to copy properties from.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 281,
            "description": "Assign values to a coordinate using a point. The result will contain static coordinate values and overwrite any formula.",
            "itemtype": "method",
            "name": "setToPoint",
            "params": [
                {
                    "name": "point",
                    "description": "Point with x and y coordinate.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 291,
            "description": "Assign new expressions or values to the coordinate.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "xExpression",
                    "description": "X Expression to assign.",
                    "type": "JSG.graph.expr.Expression"
                },
                {
                    "name": "yExpression",
                    "description": "Y Expression to assign.",
                    "type": "JSG.graph.expr.Expression"
                }
            ],
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 305,
            "description": "Assign a new expression or value to the X coordinate.",
            "itemtype": "method",
            "name": "setX",
            "params": [
                {
                    "name": "xExpression",
                    "description": "X Expression to assign.",
                    "type": "JSG.graph.expr.Expression"
                }
            ],
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 315,
            "description": "Assign a new expression or value to the Y coordinate.",
            "itemtype": "method",
            "name": "setY",
            "params": [
                {
                    "name": "yExpression",
                    "description": "Y Expression to assign.",
                    "type": "JSG.graph.expr.Expression"
                }
            ],
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 325,
            "description": "Move the values of the coordinate by the given values. Any formula contained in the expressions will be overwritten.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "dx",
                    "description": "Units to move in the horizontal direction.",
                    "type": "Number"
                },
                {
                    "name": "dy",
                    "description": "Units to move in the vertical direction.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 340,
            "description": "Retrieves the values of the coordinate as a Point.",
            "itemtype": "method",
            "name": "toPoint",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "Point to use for return value.",
                    "type": "Type",
                    "optional": true
                }
            ],
            "return": {
                "description": "Point containing the x and y value of the coordinate.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Coordinate.js",
            "line": 354,
            "description": "Returns a string representation of this Coordinate instance.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "String with x and y expressions.",
                "type": "String"
            },
            "class": "JSG.graph.Coordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\CoordinateProxy.js",
            "line": 22,
            "description": "Returns the original coordinate of this CoordinateProxy.</br>\n<b>Note:</b> this provides direct access to the underlying coordinate!",
            "itemtype": "method",
            "name": "getCoordinate",
            "return": {
                "description": "The original coordinate of this CoordinateProxy.",
                "type": "JSG.graph.Coordinate"
            },
            "class": "JSG.graph.CoordinateProxy",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 35,
            "description": "Copy the pin.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "A copy of this pin.",
                "type": "JSG.graph.Pin"
            },
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 47,
            "description": "Save the pin to an xml stream.",
            "itemtype": "method",
            "name": "saveXML",
            "params": [
                {
                    "name": "name",
                    "description": "Tag name to use.",
                    "type": "String"
                },
                {
                    "name": "writer",
                    "description": "XML Writer instance.",
                    "type": "JSG.commons.XMLWriter"
                },
                {
                    "name": "absolute",
                    "description": "Convert the coordinate to graph coordinates before saving, if true.",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 73,
            "description": "Read the Pin from a DOM Node.",
            "itemtype": "method",
            "name": "readXML",
            "params": [
                {
                    "name": "node",
                    "description": "DOM Node to read from.",
                    "type": "Node"
                }
            ],
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 102,
            "description": "Evaluate the expressions in the Pin.",
            "itemtype": "method",
            "name": "evaluate",
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 112,
            "description": "Invalidate all terms of the pin. This will have the effect that the formulas are parsed and calculated again.",
            "itemtype": "method",
            "name": "invalidateTerms",
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 122,
            "description": "Resolves parent references within inner pin and local pin Expressions.</br>\nThe optional <code>clearFormula</code> flag can be used to clear the complete Expression formula.",
            "itemtype": "method",
            "name": "resolveParentReference",
            "params": [
                {
                    "name": "clearFormula",
                    "description": "Specify <code>true</code> to remove inner Expression formula completely.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 134,
            "description": "Lock the formulas in the Pin coordinate expressions. This way the formulas will not be\noverwritten by values.",
            "itemtype": "method",
            "name": "lockPin",
            "params": [
                {
                    "name": "doIt",
                    "description": "Set or remove lock..",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 145,
            "description": "Lock the formulas in the LocalPin coordinate expressions. This way the formulas will not be\noverwritten by values.",
            "itemtype": "method",
            "name": "lockLocalPin",
            "params": [
                {
                    "name": "doIt",
                    "description": "Set or remove lock..",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 156,
            "description": "Get the x expression of the Pin coordinate.",
            "itemtype": "method",
            "name": "getX",
            "return": {
                "description": "X Expression of the Pin coordinate.",
                "type": "JSG.graph.expr.Expression"
            },
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 166,
            "description": "Get the y expression of the Pin coordinate.",
            "itemtype": "method",
            "name": "getY",
            "return": {
                "description": "Y Expression of the Pin coordinate.",
                "type": "JSG.graph.expr.Expression"
            },
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 176,
            "description": "Get the x expression of the LocalPin coordinate.",
            "itemtype": "method",
            "name": "getX",
            "return": {
                "description": "X Expression of the LocalPin coordinate.",
                "type": "JSG.graph.expr.Expression"
            },
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 186,
            "description": "Get the y expression of the LocalPin coordinate.",
            "itemtype": "method",
            "name": "getY",
            "return": {
                "description": "Y Expression of the LocalPin coordinate.",
                "type": "JSG.graph.expr.Expression"
            },
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 196,
            "description": "Get the Pin coordinate as a Point.",
            "itemtype": "method",
            "name": "getPoint",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "Point to use for return to avoid new allocation.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "Pin coordinate as Point.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 208,
            "description": "Get the LocalPin coordinate as a Point.",
            "itemtype": "method",
            "name": "getPoint",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "Point to use for return to avoid new allocation.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "Pin coordinate as Point.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 220,
            "description": "Get the Pin coordinate.",
            "itemtype": "method",
            "name": "getCoordinate",
            "params": [
                {
                    "name": "reusecoordinate",
                    "description": "Coordinate to use for return to avoid new allocation.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "return": {
                "description": "Pin coordinate.",
                "type": "JSG.graph.Coordinate"
            },
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 233,
            "description": "Get the LocalPin coordinate.",
            "itemtype": "method",
            "name": "getLocalCoordinate",
            "params": [
                {
                    "name": "reusecoordinate",
                    "description": "Coordinate to use for return to avoid new allocation.",
                    "type": "JSG.graph.Coordinate",
                    "optional": true
                }
            ],
            "return": {
                "description": "LocalPin coordinate.",
                "type": "JSG.graph.Coordinate"
            },
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 246,
            "description": "Set the X Expression of the Pin coordinate.",
            "itemtype": "method",
            "name": "setX",
            "params": [
                {
                    "name": "xExpression",
                    "description": "New expression for the x part of the Pin coordinate.",
                    "type": "JSG.graph.expr.Expression"
                }
            ],
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 258,
            "description": "Set the Y Expression of the Pin coordinate.",
            "itemtype": "method",
            "name": "setY",
            "params": [
                {
                    "name": "yExpression",
                    "description": "New expression for the y part of the Pin coordinate.",
                    "type": "JSG.graph.expr.Expression"
                }
            ],
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 270,
            "description": "Set new coordinates values for the Pin. The values with replace the Pin coordinates with the static expression values in the point.",
            "itemtype": "method",
            "name": "setPointTo",
            "params": [
                {
                    "name": "point",
                    "description": "Point to use for Pin.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 282,
            "description": "Set new coordinates values for the Pin. The values with replace the Pin coordinates with the static expression values given.",
            "itemtype": "method",
            "name": "setPoint",
            "params": [
                {
                    "name": "x",
                    "description": "Value for x coordinate of the Pin.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Value for y coordinate of the Pin.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 293,
            "description": "Set the X Expression of the LocalPin coordinate.",
            "itemtype": "method",
            "name": "setLocalX",
            "params": [
                {
                    "name": "xExpression",
                    "description": "New expression for the x part of the LocalPin coordinate.",
                    "type": "JSG.graph.expr.Expression"
                }
            ],
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 305,
            "description": "Set the Y Expression of the LocalPin coordinate.",
            "itemtype": "method",
            "name": "setLocalY",
            "params": [
                {
                    "name": "yExpression",
                    "description": "New expression for the y part of the LocalPin coordinate.",
                    "type": "JSG.graph.expr.Expression"
                }
            ],
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 317,
            "description": "Set new coordinates values for the LocalPin. The values with replace the LocalPin coordinates with the static expression values in the point.",
            "itemtype": "method",
            "name": "setPointTo",
            "params": [
                {
                    "name": "point",
                    "description": "Point to use for LocalPin.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 329,
            "description": "Set new coordinates values for the LocalPin. The values with replace the pin coordinates with the static expression values given.",
            "itemtype": "method",
            "name": "setPoint",
            "params": [
                {
                    "name": "x",
                    "description": "Value for x coordinate of the LocalPin.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Value for y coordinate of the LocalPin.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 340,
            "description": "Assign a new coordinate to the Pin.",
            "itemtype": "method",
            "name": "setCoordinateTo",
            "params": [
                {
                    "name": "coordinate",
                    "description": "New coordinate to use for the Pin.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 352,
            "description": "Define new coordinate expresssions for the Pin.",
            "itemtype": "method",
            "name": "setCoordinate",
            "params": [
                {
                    "name": "xExpression",
                    "description": "X Expression of the coordinate.",
                    "type": "JSG.graph.expr.Expression"
                },
                {
                    "name": "yExpression",
                    "description": "Y Expression of the coordinate.",
                    "type": "JSG.graph.expr.Expression"
                }
            ],
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 363,
            "description": "Assign a new coordinate to the LocalPin.",
            "itemtype": "method",
            "name": "setLocalCoordinateTo",
            "params": [
                {
                    "name": "coordinate",
                    "description": "New coordinate to use for the LocalPin.",
                    "type": "JSG.graph.Coordinate"
                }
            ],
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 373,
            "description": "Define new coordinate expresssions for the LocalPin.",
            "itemtype": "method",
            "name": "setLocalCoordinate",
            "params": [
                {
                    "name": "xExpression",
                    "description": "X Expression of the coordinate.",
                    "type": "JSG.graph.expr.Expression"
                },
                {
                    "name": "yExpression",
                    "description": "Y Expression of the coordinate.",
                    "type": "JSG.graph.expr.Expression"
                }
            ],
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 384,
            "description": "Copy content from another pin.",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "pin",
                    "description": "Pin to retrieve values from.",
                    "type": "JSG.graph.Pin"
                }
            ],
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 396,
            "description": "Move the Pin by the given values.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "dX",
                    "description": "Value to move in the horizontal direction.",
                    "type": "Number"
                },
                {
                    "name": "dY",
                    "description": "Value to move in the vertical direction.",
                    "type": "Number"
                }
            ],
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Pin.js",
            "line": 410,
            "description": "Rotates this Pin around given point by specified angle.</br>\nThe rotation point is optional and if not given the Pin will be rotated around its origin, i.e (0, 0).",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "Rotation angle in radians.",
                    "type": "Number"
                },
                {
                    "name": "point",
                    "description": "An optional rotation point.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "class": "JSG.graph.Pin",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 15,
            "description": "Change the X-coordinate relative to the width of the GraphItem.",
            "itemtype": "property",
            "name": "XRELATIVETOWIDTH",
            "type": "{Number}",
            "class": "JSG.graph.ReshapeType",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 21,
            "description": "Change the X-coordinate relative to the height of the GraphItem.",
            "itemtype": "property",
            "name": "XRELATIVETOHEIGHT",
            "type": "{Number}",
            "class": "JSG.graph.ReshapeType",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 27,
            "description": "Change the Y-coordinate relative to the height of the GraphItem.",
            "itemtype": "property",
            "name": "YRELATIVETOHEIGHT",
            "type": "{Number}",
            "class": "JSG.graph.ReshapeType",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 33,
            "description": "Change the Y-coordinate relative to the width of the GraphItem.",
            "itemtype": "property",
            "name": "YRELATIVETOWIDTH",
            "type": "{Number}",
            "class": "JSG.graph.ReshapeType",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 39,
            "description": "Change the X-coordinate relative to the width starting at the right side of the GraphItem.",
            "itemtype": "property",
            "name": "XRELATIVETOWIDTHFROMRIGHT",
            "type": "{Number}",
            "class": "JSG.graph.ReshapeType",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 45,
            "description": "Change the X-coordinate relative to the height starting at the right side of the GraphItem.",
            "itemtype": "property",
            "name": "XRELATIVETOHEIGHTFROMRIGHT",
            "type": "{Number}",
            "class": "JSG.graph.ReshapeType",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 51,
            "description": "Change the Y-coordinate relative to the height starting at the bottom of the GraphItem.",
            "itemtype": "property",
            "name": "YRELATIVETOHEIGHTFROMBOTTOM",
            "type": "{Number}",
            "class": "JSG.graph.ReshapeType",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 57,
            "description": "Change the Y-coordinate relative to the width starting at the bottom of the GraphItem.",
            "itemtype": "property",
            "name": "YRELATIVETOWIDTHFROMBOTTOM",
            "type": "{Number}",
            "class": "JSG.graph.ReshapeType",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 63,
            "description": "Change the X-coordinate using the width of the GraphItem.",
            "itemtype": "property",
            "name": "XABSOLUTEWIDTH",
            "type": "{Number}",
            "class": "JSG.graph.ReshapeType",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 69,
            "description": "Change the Y-coordinate using the height of the GraphItem.",
            "itemtype": "property",
            "name": "YABSOLUTEHEIGHT",
            "type": "{Number}",
            "class": "JSG.graph.ReshapeType",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 75,
            "description": "Change the X-coordinate using the width starting at the right of the GraphItem.",
            "itemtype": "property",
            "name": "XABSOLUTEWIDTHFROMRIGHT",
            "type": "{Number}",
            "class": "JSG.graph.ReshapeType",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 81,
            "description": "Change the Y-coordinate using the height starting at the bottom of the GraphItem.",
            "itemtype": "property",
            "name": "YABSOLUTEHEIGHTFROMBOTTOM",
            "type": "{Number}",
            "class": "JSG.graph.ReshapeType",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 122,
            "description": "Copy this ReshapeCoordinate.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "A copy of this class.",
                "type": "JSG.graph.ReshapeCoordinate"
            },
            "class": "JSG.graph.ReshapeCoordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 134,
            "description": "Save the ReshapeCoordinate to an xml stream.",
            "itemtype": "method",
            "name": "saveXML",
            "params": [
                {
                    "name": "name",
                    "description": "Tag name to use.",
                    "type": "String"
                },
                {
                    "name": "writer",
                    "description": "XML Writer instance.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "class": "JSG.graph.ReshapeCoordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 166,
            "description": "Read the ReshapeCoordinate from a DOM Node.",
            "itemtype": "method",
            "name": "readXML",
            "params": [
                {
                    "name": "node",
                    "description": "DOM Node to read from.",
                    "type": "Node"
                }
            ],
            "class": "JSG.graph.ReshapeCoordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 227,
            "description": "Copy content from another ReshapeCoordinate.",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "coordinate",
                    "description": "ReshapeCoordinate to retrieve values from.",
                    "type": "JSG.graph.ReshapeCoordinate"
                }
            ],
            "class": "JSG.graph.ReshapeCoordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 246,
            "description": "Get X minimum value.",
            "itemtype": "method",
            "name": "getXMin",
            "return": {
                "description": "X Minimum.",
                "type": "Number"
            },
            "class": "JSG.graph.ReshapeCoordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 256,
            "description": "Get X maximum value.",
            "itemtype": "method",
            "name": "getXMax",
            "return": {
                "description": "X Maximum.",
                "type": "Number"
            },
            "class": "JSG.graph.ReshapeCoordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 266,
            "description": "Get Y minimum value.",
            "itemtype": "method",
            "name": "getYMin",
            "return": {
                "description": "Y Minimum.",
                "type": "Number"
            },
            "class": "JSG.graph.ReshapeCoordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 276,
            "description": "Get Y maximum value.",
            "itemtype": "method",
            "name": "getYMax",
            "return": {
                "description": "Y Maximum.",
                "type": "Number"
            },
            "class": "JSG.graph.ReshapeCoordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 286,
            "description": "Get name.",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "Name of related property.",
                "type": "String"
            },
            "class": "JSG.graph.ReshapeCoordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 296,
            "description": "Get allowed direction of reshape action.",
            "itemtype": "method",
            "name": "getVertical",
            "return": {
                "description": "True, if allowed direction is vertical, otherwise false.",
                "type": "Boolean"
            },
            "class": "JSG.graph.ReshapeCoordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\ReshapeCoordinate.js",
            "line": 306,
            "description": "Get ReshapeCoordiante rule.",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "ReshapeCoordinate rule.",
                "type": "JSG.graph.ReshapeType"
            },
            "class": "JSG.graph.ReshapeCoordinate",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Size.js",
            "line": 35,
            "description": "Checks if this size instance is equal to the given one. Equal means that both sizes have the\nsame width and height expressions.</br>\n<b>Note:</b> instead of passing a size instance it is also possible to call this method with \nwidth and height expressions as well or with its corresponding values!</br>\nSee {{#crossLink \"JSG.graph.expr.Expression\"}}{{/crossLink}} to get information about equality \nof expressions.",
            "itemtype": "method",
            "name": "isEqualTo",
            "params": [
                {
                    "name": "size",
                    "description": "The other size to check against or the width and height expressions.",
                    "type": "JSG.graph.Size"
                }
            ],
            "return": {
                "description": "<code>true</code> if both sizes are equal, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.graph.Size",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Size.js",
            "line": 59,
            "description": "Copy this object.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "A copy of this object.",
                "type": "JSG.graph.Size"
            },
            "class": "JSG.graph.Size",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Size.js",
            "line": 69,
            "description": "Recalculate the formulas in this object.",
            "itemtype": "method",
            "name": "evaluate",
            "params": [
                {
                    "name": "item",
                    "description": "Item the size object belongs to. This is necessary to resolve references.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "class": "JSG.graph.Size",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Size.js",
            "line": 80,
            "description": "Invalidate all terms of the pin. This will have the effect that the formulas are parsed and calculated again.",
            "itemtype": "method",
            "name": "invalidateTerms",
            "class": "JSG.graph.Size",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Size.js",
            "line": 90,
            "description": "Resolves parent references within inner width and height formula expressions.</br>\nThe passed GraphItem is used to resolve its parent and the optional <code>doRemove</code>\nflag can be used to clear the complete formula.",
            "itemtype": "method",
            "name": "resolveParentReference",
            "params": [
                {
                    "name": "item",
                    "description": "Used to resolve parent reference.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "doRemove",
                    "description": "Specify <code>true</code> to remove inner formula completely.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "JSG.graph.Size",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Size.js",
            "line": 104,
            "description": "Retrieve the width expression.",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "Width.",
                "type": "JSG.graph.expr.NumberExpression"
            },
            "class": "JSG.graph.Size",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Size.js",
            "line": 114,
            "description": "Retrieve the height expression.",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "Height.",
                "type": "JSG.graph.expr.NumberExpression"
            },
            "class": "JSG.graph.Size",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Size.js",
            "line": 124,
            "description": "Assign the values of another Size object to this object.",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "size",
                    "description": "Size object to copy values from.",
                    "type": "JSG.graph.Size"
                }
            ],
            "class": "JSG.graph.Size",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Size.js",
            "line": 134,
            "description": "Assign a new width and height.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "wExpression",
                    "description": "New width expression.",
                    "type": "JSG.graph.expr.NumberExpression"
                },
                {
                    "name": "wExpression",
                    "description": "New height expression.",
                    "type": "JSG.graph.expr.NumberExpression"
                }
            ],
            "class": "JSG.graph.Size",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Size.js",
            "line": 146,
            "description": "Sets the expression or value to use for width. It can be a value of a formula.",
            "itemtype": "method",
            "name": "setWidth",
            "params": [
                {
                    "name": "wExpression",
                    "description": "New width expression.",
                    "type": "JSG.graph.expr.NumberExpression"
                }
            ],
            "class": "JSG.graph.Size",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Size.js",
            "line": 156,
            "description": "Sets the expression or value to use for height. It can be a value of a formula.",
            "itemtype": "method",
            "name": "setHeight",
            "params": [
                {
                    "name": "wExpression",
                    "description": "New height expression.",
                    "type": "JSG.graph.expr.NumberExpression"
                }
            ],
            "class": "JSG.graph.Size",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Size.js",
            "line": 166,
            "description": "Retrieve the width and height as a point object.",
            "itemtype": "method",
            "name": "toPoint",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "Point to use as a return value. If not specified, a new point will be allocated.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "Point, containing the width and height, as x and y values.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.Size",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Size.js",
            "line": 181,
            "description": "Retrieve the width and height as a Rectangle object. The x and y are set to 0.",
            "itemtype": "method",
            "name": "toRectangle",
            "params": [
                {
                    "name": "reuserect",
                    "description": "Rectangle to use as a return value. If not specified, a new rectangle will be allocated.",
                    "type": "JSG.geometry.Rectangle",
                    "optional": true
                }
            ],
            "return": {
                "description": "Rectangle, containing the width and height.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.graph.Size",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Size.js",
            "line": 195,
            "description": "Retrieve the width and height as a String.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "String representation of the size object.",
                "type": "String"
            },
            "class": "JSG.graph.Size",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Size.js",
            "line": 205,
            "description": "Save the object to an XML stream.",
            "itemtype": "method",
            "name": "saveXML",
            "params": [
                {
                    "name": "name",
                    "description": "Tag name for the size object.",
                    "type": "String"
                },
                {
                    "name": "writer",
                    "description": "Writer to use for saving.",
                    "type": "JSG.commons.XMLWriter"
                }
            ],
            "class": "JSG.graph.Size",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Size.js",
            "line": 219,
            "description": "Read the object from a DOM Node.",
            "itemtype": "method",
            "name": "saveXML",
            "params": [
                {
                    "name": "node",
                    "description": "Node to read from.",
                    "type": "Node"
                }
            ],
            "class": "JSG.graph.Size",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Utils.js",
            "line": 19,
            "description": "Traverses view hierarchy from given view, inclusively, up to specified view, exclusively, and \ncalls given function on any traversed view as only parameter...",
            "static": 1,
            "itemtype": "method",
            "name": "traverseUp",
            "params": [
                {
                    "name": "fromView",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "toView",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "JSG.graph.Utils",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Utils.js",
            "line": 41,
            "description": "Traverses view hierarchy from given view, exclusive, down to specified view, inclusive, and calls\ngiven function with current traversed view as only parameter",
            "static": 1,
            "itemtype": "method",
            "name": "traverseDown",
            "params": [
                {
                    "name": "fromView",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "toView",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "JSG.graph.Utils",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Utils.js",
            "line": 67,
            "description": "Traverses item hierarchy from given item, inclusively, up to specified item, exclusively, and \ncalls given function on any traversed item as only parameter...",
            "static": 1,
            "itemtype": "method",
            "name": "traverseItemUp",
            "params": [
                {
                    "name": "fromItem",
                    "description": "item to start traversal at",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "toItem",
                    "description": "",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "func",
                    "description": "the function object to call",
                    "type": "Object"
                }
            ],
            "class": "JSG.graph.Utils",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Utils.js",
            "line": 87,
            "description": "Traverses item hierarchy from given item, exclusive, down to specified item, inclusive, and calls\ngiven function with current traversed item as only parameter",
            "static": 1,
            "itemtype": "method",
            "name": "traverseItemDown",
            "params": [
                {
                    "name": "fromItem",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "toItem",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "JSG.graph.Utils",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Utils.js",
            "line": 111,
            "description": "Traverses item hierarchy from given item, inclusively, and calls the provided function on each \nvisited sub-item.",
            "static": 1,
            "itemtype": "method",
            "name": "traverseItem",
            "params": [
                {
                    "name": "item",
                    "description": "The item to start traversal at.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "func",
                    "description": "The function to call for each visited item.",
                    "type": "Function"
                }
            ],
            "class": "JSG.graph.Utils",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Utils.js",
            "line": 131,
            "static": 1,
            "itemtype": "method",
            "name": "translatePointUp",
            "params": [
                {
                    "name": "point",
                    "description": "the point to translate",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "fromItem",
                    "description": "the item to start translation at (inclusively)",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "toItem",
                    "description": "the item to stop translation at (exclusively)",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "The passed and now translated point as convenience.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.Utils",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Utils.js",
            "line": 146,
            "static": 1,
            "itemtype": "method",
            "name": "translatePointDown",
            "params": [
                {
                    "name": "point",
                    "description": "the point to translate",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "fromItem",
                    "description": "the item to start translation at (exclusively)",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "toItem",
                    "description": "the item to stop translation at (inclusively)",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "The passed and now translated point as convenience.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.graph.Utils",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Utils.js",
            "line": 161,
            "description": "Translates given BoundingBox from given item (inclusively) up to specified parent item (exclusively).",
            "itemtype": "method",
            "name": "translateBoundingBoxUp",
            "params": [
                {
                    "name": "bbox",
                    "description": "The BoundingBox to translate.",
                    "type": "JSG.geometry.BoundingBox"
                },
                {
                    "name": "fromItem",
                    "description": "The item to start translation at (inclusively).",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "toItem",
                    "description": "The item to stop translation at (exclusively).",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "The passed and now translated bbox as convenience.",
                "type": "JSG.geometry.BoundingBox"
            },
            "static": 1,
            "class": "JSG.graph.Utils",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Utils.js",
            "line": 177,
            "description": "Translates given BoundingBox from given item (exclusively) down to specified sub item (inclusively).",
            "itemtype": "method",
            "name": "translateBoundingBoxDown",
            "params": [
                {
                    "name": "bbox",
                    "description": "The BoundingBox to translate.",
                    "type": "JSG.geometry.BoundingBox"
                },
                {
                    "name": "fromItem",
                    "description": "The item to start translation at (exclusively).",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "toItem",
                    "description": "The item to stop translation at (inclusively).",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "The passed and now translated bbox as convenience.",
                "type": "JSG.geometry.BoundingBox"
            },
            "static": 1,
            "class": "JSG.graph.Utils",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Utils.js",
            "line": 194,
            "description": "Traverses the graph hierarchy starting at given item up to graph. If item is not within graph,\nundefined is returned",
            "static": 1,
            "itemtype": "method",
            "name": "getGraph",
            "params": [
                {
                    "name": "item",
                    "description": "",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "",
                "type": "JSG.graph.model.Graph"
            },
            "class": "JSG.graph.Utils",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Utils.js",
            "line": 210,
            "description": "Tries to find the common parent GraphItem of given item1 and item2. <br/>\nIf no parent could be found undefined is returned. Note: since one item could be the parent of\nthe other item, it is possible that the common parent is one of given items itself.",
            "static": 1,
            "itemtype": "method",
            "name": "findCommonParent",
            "params": [
                {
                    "name": "item1",
                    "description": "",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "item2",
                    "description": "",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "graph",
                    "description": "Optional Graph instance to look up common parent. If not given either item1 or\nitem2 must be added to a Graph instance already!",
                    "type": "JSG.graph.model.Graph",
                    "optional": true
                }
            ],
            "return": {
                "description": "The common parent of given items or <code>undefined</code> in none could be found.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.graph.Utils",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Utils.js",
            "line": 238,
            "description": "Returns the font metrics for the given TextFormat.</br>\nThis either returns a previously cached font metrics or calculates a new one if cache was invalidated or the \nfont definition is new.",
            "static": 1,
            "itemtype": "method",
            "name": "getFontMetrics",
            "return": {
                "description": "An object with the member 'height'.",
                "type": "Metrics"
            },
            "class": "JSG.graph.Utils",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Utils.js",
            "line": 375,
            "description": "Calculates the center position of the currently visible graph region.",
            "itemtype": "method",
            "name": "getVisibleCenter",
            "params": [
                {
                    "name": "editor",
                    "description": "The editor which displays the graph.",
                    "type": "JSG.ui.GraphEditor"
                },
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse, if not supplied a new point will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The center position of currently visible graph region.",
                "type": "JSG.geometry.Point"
            },
            "since": "1.6.0",
            "class": "JSG.graph.Utils",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Utils.js",
            "line": 394,
            "description": "Returns a color string from given red, green and blue values.",
            "itemtype": "method",
            "name": "colorFromRGB",
            "params": [
                {
                    "name": "red",
                    "description": "A red color value.",
                    "type": "Number"
                },
                {
                    "name": "green",
                    "description": "A green color value.",
                    "type": "Number"
                },
                {
                    "name": "blue",
                    "description": "A blue color value.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The resulting color string.",
                "type": "String"
            },
            "static": 1,
            "class": "JSG.graph.Utils",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Utils.js",
            "line": 407,
            "description": "Returns a rgb color string from given hex color string.",
            "itemtype": "method",
            "name": "colorToRGB",
            "params": [
                {
                    "name": "color",
                    "description": "A hex color definition. Might start with <code>#</code>.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The corresponding <code>rgb()</code> color string.",
                "type": "String"
            },
            "static": 1,
            "since": "1.6.0",
            "class": "JSG.graph.Utils",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\graph\\Utils.js",
            "line": 425,
            "description": "Applies an alpha value to given rgb or hex color string. A passed hex color strings should start with <code>#</code> \nand analog a passed rgb color string should start with <code>rgb</code>.<br/>\nNote: the result will be either a rgba color string or the given color if aplha could not be applied.",
            "itemtype": "method",
            "name": "applyAlphaToColor",
            "params": [
                {
                    "name": "color",
                    "description": "A hex or rgb color definition to apply the alpha value to.",
                    "type": "String"
                },
                {
                    "name": "alpha",
                    "description": "The alpha value to apply, must be between 0 and 1.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The corresponding <code>rgba()</code> color string.",
                "type": "String"
            },
            "static": 1,
            "since": "1.6.0",
            "class": "JSG.graph.Utils",
            "module": "JSG.graph",
            "namespace": "JSG.graph"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\DragEvent.js",
            "line": 13,
            "description": "Drop event.",
            "itemtype": "property",
            "name": "DROP",
            "type": "Number",
            "class": "JSG.ui.events.DragEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\DragEvent.js",
            "line": 18,
            "description": "Drag enter event.",
            "itemtype": "property",
            "name": "ENTER",
            "type": "Number",
            "class": "JSG.ui.events.DragEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\DragEvent.js",
            "line": 23,
            "description": "Drage exit event.",
            "itemtype": "property",
            "name": "EXIT",
            "type": "Number",
            "class": "JSG.ui.events.DragEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\DragEvent.js",
            "line": 28,
            "description": "Drag leave event.",
            "itemtype": "property",
            "name": "LEAVE",
            "type": "Number",
            "class": "JSG.ui.events.DragEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\DragEvent.js",
            "line": 33,
            "description": "Drag over event.",
            "itemtype": "property",
            "name": "OVER",
            "type": "Number",
            "class": "JSG.ui.events.DragEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\DragEvent.js",
            "line": 55,
            "description": "Create a drag event from a Javascript Drag Event and add some information to it.",
            "itemtype": "method",
            "name": "fromEvent",
            "params": [
                {
                    "name": "canvas",
                    "description": "Canvas for the event.",
                    "type": "Canvas"
                },
                {
                    "name": "ev",
                    "description": "Original Javascript drag event info.",
                    "type": "Event"
                },
                {
                    "name": "type",
                    "description": "Type of event.",
                    "type": "JSG.ui.events.DragEventType"
                }
            ],
            "static": 1,
            "class": "JSG.ui.events.DragEvent",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\Event.js",
            "line": 21,
            "description": "Type of event. See subclasses for event type constants.",
            "itemtype": "property",
            "name": "type",
            "type": "Number",
            "class": "JSG.ui.events.Event",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\Event.js",
            "line": 27,
            "description": "JavaScript native event info.",
            "itemtype": "property",
            "name": "event",
            "type": "Event",
            "class": "JSG.ui.events.Event",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\Event.js",
            "line": 33,
            "description": "Flag to indicate, that mouse event is already used and should not be handled.",
            "itemtype": "property",
            "name": "isConsumed",
            "type": "Boolean",
            "class": "JSG.ui.events.Event",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\Event.js",
            "line": 39,
            "description": "Flag to indicate, that a repaint shall occur, after the event has been processed.",
            "itemtype": "property",
            "name": "doRepaint",
            "type": "Boolean",
            "class": "JSG.ui.events.Event",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\Event.js",
            "line": 45,
            "description": "The bounds of current active canvas, i.e. the canvas which had focus when this event\noccurred.",
            "itemtype": "property",
            "name": "canvasRect",
            "type": "ClientRect",
            "class": "JSG.ui.events.Event",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\Event.js",
            "line": 51,
            "description": "The id of current active canvas, i.e. the canvas which had focus when this event occurred.",
            "itemtype": "property",
            "name": "canvasId",
            "type": "String",
            "class": "JSG.ui.events.Event",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\Event.js",
            "line": 59,
            "description": "Event location relative to the canvas.",
            "itemtype": "property",
            "name": "location",
            "type": "JSG.geometry.Point",
            "class": "JSG.ui.events.Event",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\Event.js",
            "line": 89,
            "description": "Event location relative to the browser window.",
            "itemtype": "property",
            "name": "windowLocation",
            "type": "JSG.geometry.Point",
            "class": "JSG.ui.events.Event",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\Event.js",
            "line": 97,
            "description": "The event location as point.",
            "itemtype": "property",
            "name": "location",
            "type": "{JSG.geometry.Point}",
            "class": "JSG.ui.events.Event",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\Event.js",
            "line": 104,
            "description": "The event location relative to browser window as point.",
            "itemtype": "property",
            "name": "windowLocation",
            "type": "{JSG.geometry.Point}",
            "class": "JSG.ui.events.Event",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\Event.js",
            "line": 113,
            "description": "Checks if this Event was triggered inside the bounds of current active canvas.",
            "itemtype": "method",
            "name": "isInCanvas",
            "return": {
                "description": "<code>true</code> if Event location is inside canvas bounds, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.ui.events.Event",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\Event.js",
            "line": 128,
            "description": "Defines this event as consumed so it does not propagate to other DOM elements.",
            "itemtype": "method",
            "name": "consume",
            "class": "JSG.ui.events.Event",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 13,
            "description": "Gesture cancel event.",
            "itemtype": "property",
            "name": "CANCEL",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 18,
            "description": "Gesture drag start event.",
            "itemtype": "property",
            "name": "DRAGSTART",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 23,
            "description": "Gesture drag event.",
            "itemtype": "property",
            "name": "DRAG",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 28,
            "description": "Gesture drag end event.",
            "itemtype": "property",
            "name": "DRAGEND",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 33,
            "description": "Gesture transform start event.",
            "itemtype": "property",
            "name": "TRANSFORMSTART",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 38,
            "description": "Gesture transform event.",
            "itemtype": "property",
            "name": "TRANSFORM",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 43,
            "description": "Gesture transform end event.",
            "itemtype": "property",
            "name": "TRANSFORMEND",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 48,
            "description": "Tap down event.",
            "itemtype": "property",
            "name": "TAPDOWN",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 53,
            "description": "Tap up event.",
            "itemtype": "property",
            "name": "TAPUP",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 58,
            "description": "Double tap event.",
            "itemtype": "property",
            "name": "DBLTAP",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 63,
            "description": "Gesture pinch start event.",
            "itemtype": "property",
            "name": "PINCHSTART",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 68,
            "description": "Gesture pinch event.",
            "itemtype": "property",
            "name": "PINCH",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 73,
            "description": "Gesture pinch end event.",
            "itemtype": "property",
            "name": "PINCHEND",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 78,
            "description": "Gesture swipe event.",
            "itemtype": "property",
            "name": "SWIPE",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 83,
            "description": "Gesture ROTATESTART event.",
            "itemtype": "property",
            "name": "ROTATESTART",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 88,
            "description": "Gesture rotate event.",
            "itemtype": "property",
            "name": "ROTATE",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 93,
            "description": "Gesture rotate end event.",
            "itemtype": "property",
            "name": "ROTATEEND",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 98,
            "description": "Gesture pan start event.",
            "itemtype": "property",
            "name": "PANSTART",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 103,
            "description": "Gesture pan event.",
            "itemtype": "property",
            "name": "PAN",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 108,
            "description": "Gesture pan end event.",
            "itemtype": "property",
            "name": "PANEND",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 113,
            "description": "Gesture hold event, i.e. a longer tap event.",
            "itemtype": "property",
            "name": "HOLD",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 118,
            "description": "General touch event.",
            "itemtype": "property",
            "name": "TOUCH",
            "type": "Number",
            "class": "JSG.ui.events.GestureEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 141,
            "description": "Create a mouse event from a Javascript Gesture Event and add some information to it.",
            "itemtype": "method",
            "name": "fromEvent",
            "params": [
                {
                    "name": "gs",
                    "description": "GraphicSystem, where the event originated.",
                    "type": "JSG.ui.GraphicSystem"
                },
                {
                    "name": "gesture",
                    "description": "The native gesture event.",
                    "type": "Event"
                },
                {
                    "name": "type",
                    "description": "Type of event.",
                    "type": "JSG.ui.events.GestureEventType"
                }
            ],
            "static": 1,
            "class": "JSG.ui.events.GestureEvent",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 189,
            "description": "The native gesture event.",
            "itemtype": "property",
            "name": "gesture",
            "type": "Event",
            "class": "JSG.ui.events.GestureEvent",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 195,
            "description": "Gesture type, i.e. one of the predefined type constants.",
            "itemtype": "property",
            "name": "type",
            "type": "JSG.ui.events.GestureEventType",
            "class": "JSG.ui.events.GestureEvent",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 201,
            "description": "Key pressed while using the mouse. Javascript key event key identifier, if a key is pressed, otherwise undefined.",
            "itemtype": "property",
            "name": "key",
            "type": "Number",
            "class": "JSG.ui.events.GestureEvent",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 207,
            "description": "Coordinate system of current active canvas, i.e. the canvas which had focus when this event\noccurred.",
            "itemtype": "property",
            "name": "cs",
            "type": "{JSG.ui.graphics.CoordinateSystem}",
            "class": "JSG.ui.events.GestureEvent",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 233,
            "description": "Checks, if a key is pressed during the mouse operation.",
            "itemtype": "method",
            "name": "isPressed",
            "params": [
                {
                    "name": "Key",
                    "description": "to check. Either a predefined key or a JavaScript key identifier.",
                    "type": "JSG.ui.events.KeyType | Number"
                }
            ],
            "return": {
                "description": "True, if the type of key is clicked.",
                "type": "Boolean"
            },
            "class": "JSG.ui.events.GestureEvent",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 255,
            "description": "Checks if this GestureEvent was triggered inside the bounds of current active canvas. Since a gesture event can\nhave multiple touch events only the first one is considered.",
            "itemtype": "method",
            "name": "isInCanvas",
            "return": {
                "description": "<code>true</code> if GestureEvent location is inside canvas bounds, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.ui.events.GestureEvent",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 270,
            "description": "Returns a string representation for the given type. If the type is unknown its number is simply\nreturned.",
            "itemtype": "method",
            "name": "eventType2string",
            "params": [
                {
                    "name": "The",
                    "description": "event type code.",
                    "type": "JSG.ui.events.GestureEventType | Number"
                }
            ],
            "return": {
                "description": "The corresponding string representation.",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.events.GestureEvent",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\GestureEvent.js",
            "line": 311,
            "description": "Checks, which button is clicked.",
            "itemtype": "method",
            "name": "isClicked",
            "params": [
                {
                    "name": "Button",
                    "description": "type to check.",
                    "type": "JSG.ui.events.ButtonType"
                }
            ],
            "return": {
                "description": "True, if the type of button is clicked.",
                "type": "Boolean"
            },
            "class": "JSG.ui.events.GestureEvent",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\KeyEvent.js",
            "line": 13,
            "description": "Key down event.",
            "itemtype": "property",
            "name": "DOWN",
            "type": "Number",
            "class": "JSG.ui.events.KeyEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\KeyEvent.js",
            "line": 18,
            "description": "Key up event.",
            "itemtype": "property",
            "name": "UP",
            "type": "Number",
            "class": "JSG.ui.events.KeyEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\KeyEvent.js",
            "line": 40,
            "description": "The key code of currently pressed key.</br>\nNote: this is shared between all instances.",
            "itemtype": "property",
            "name": "currentKey",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.ui.events.KeyEvent",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\KeyEvent.js",
            "line": 51,
            "description": "Creates a key event from a native key event and adds some information to it.",
            "itemtype": "method",
            "name": "fromEvent",
            "params": [
                {
                    "name": "canvas",
                    "description": "Canvas for the event.",
                    "type": "Canvas"
                },
                {
                    "name": "ev",
                    "description": "The native key event info.",
                    "type": "Event"
                },
                {
                    "name": "type",
                    "description": "Type of event.",
                    "type": "JSG.ui.events.KeyEventType"
                }
            ],
            "static": 1,
            "class": "JSG.ui.events.KeyEvent",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\KeyEvent.js",
            "line": 63,
            "description": "Javascript key event key identifier.",
            "itemtype": "property",
            "name": "key",
            "type": "Number",
            "class": "JSG.ui.events.KeyEvent",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\KeyEvent.js",
            "line": 79,
            "description": "Checks if the key code of given event contains a modifier key.</br>\nCurrently <code>SHIFT</code>, <code>ALT</code> and <code>CTRL</code> are handled as modifier keys.",
            "itemtype": "method",
            "name": "containsModifierKey",
            "params": [
                {
                    "name": "event",
                    "description": "The Event to check for modifier key.",
                    "type": "JSG.ui.events.Event"
                }
            ],
            "return": {
                "description": "<code>true</code> if key code of given Event contains a modifier key, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.ui.events.KeyEvent",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\KeyEvent.js",
            "line": 101,
            "description": "Checks, if given key was pressed.",
            "itemtype": "method",
            "name": "isPressed",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check. Either a predefined key or a JavaScript key identifier.",
                    "type": "JSG.ui.events.KeyType | Number"
                }
            ],
            "return": {
                "description": "True, if the type of key was pressed.",
                "type": "Boolean"
            },
            "class": "JSG.ui.events.KeyEvent",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 13,
            "description": "Mouse down event.",
            "itemtype": "property",
            "name": "DOWN",
            "type": "Number",
            "class": "JSG.ui.events.MouseEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 18,
            "description": "Mouse move event.",
            "itemtype": "property",
            "name": "MOVE",
            "type": "Number",
            "class": "JSG.ui.events.MouseEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 23,
            "description": "Mouse up event.",
            "itemtype": "property",
            "name": "UP",
            "type": "Number",
            "class": "JSG.ui.events.MouseEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 28,
            "description": "Mouse exit event.",
            "itemtype": "property",
            "name": "EXIT",
            "type": "Number",
            "class": "JSG.ui.events.MouseEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 33,
            "description": "Mouse double click event.",
            "itemtype": "property",
            "name": "DBLCLK",
            "type": "Number",
            "class": "JSG.ui.events.MouseEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 38,
            "description": "Mouse wheel event.",
            "itemtype": "property",
            "name": "WHEEL",
            "type": "Number",
            "class": "JSG.ui.events.MouseEventType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 50,
            "description": "Left Mouse Button.",
            "itemtype": "property",
            "name": "LEFT",
            "type": "Number",
            "class": "JSG.ui.events.ButtonType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 55,
            "description": "Right Mouse Button.",
            "itemtype": "property",
            "name": "RIGHT",
            "type": "Number",
            "class": "JSG.ui.events.ButtonType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 68,
            "description": "Ctrl-Key.",
            "itemtype": "property",
            "name": "DOWN",
            "type": "Number",
            "class": "JSG.ui.events.KeyType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 73,
            "description": "Alt-Key.",
            "itemtype": "property",
            "name": "ALT",
            "type": "Number",
            "class": "JSG.ui.events.KeyType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 78,
            "description": "Shift-Key.",
            "itemtype": "property",
            "name": "SHIFT",
            "type": "Number",
            "class": "JSG.ui.events.KeyType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 83,
            "description": "Alt-Gr-Key.",
            "itemtype": "property",
            "name": "META",
            "type": "Number",
            "class": "JSG.ui.events.KeyType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 88,
            "description": "Esc-Key",
            "itemtype": "property",
            "name": "ESC",
            "type": "Number",
            "class": "JSG.ui.events.KeyType",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 110,
            "description": "Creates a mouse event from a native mouse event and adds some information to it.",
            "itemtype": "method",
            "name": "fromEvent",
            "params": [
                {
                    "name": "canvas",
                    "description": "Canvas for the event.",
                    "type": "Canvas"
                },
                {
                    "name": "ev",
                    "description": "Original Javascript mouse event info.",
                    "type": "Event"
                },
                {
                    "name": "type",
                    "description": "Type of event.",
                    "type": "JSG.ui.events.MouseEventType"
                }
            ],
            "static": 1,
            "class": "JSG.ui.events.MouseEvent",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 122,
            "description": "Key pressed while using the mouse. Javascript key event key identifier, if a key is pressed, otherwise undefined.",
            "itemtype": "property",
            "name": "key",
            "type": "Number",
            "class": "JSG.ui.events.MouseEvent",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 127,
            "description": "API internal.</br>\nUsed to signal to not switch focus during mouse event.",
            "itemtype": "property",
            "name": "keepFocus",
            "type": "Boolean",
            "class": "JSG.ui.events.MouseEvent",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 137,
            "description": "Checks, which button is clicked.",
            "itemtype": "method",
            "name": "isClicked",
            "params": [
                {
                    "name": "Button",
                    "description": "type to check.",
                    "type": "JSG.ui.events.ButtonType"
                }
            ],
            "return": {
                "description": "True, if the type of button is clicked.",
                "type": "Boolean"
            },
            "class": "JSG.ui.events.MouseEvent",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\events\\MouseEvent.js",
            "line": 148,
            "description": "Checks, if given key is pressed during the mouse operation.",
            "itemtype": "method",
            "name": "isPressed",
            "params": [
                {
                    "name": "Key",
                    "description": "to check. Either a predefined key or a JavaScript key identifier.",
                    "type": "JSG.ui.events.KeyType | Number"
                }
            ],
            "return": {
                "description": "True, if the type of key is clicked.",
                "type": "Boolean"
            },
            "class": "JSG.ui.events.MouseEvent",
            "module": "JSG.ui.events",
            "namespace": "JSG.ui.events"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 19,
            "description": "The drawing area is displayed as one large drawing sheet.",
            "itemtype": "property",
            "name": "ENDLESS",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.ui.graphics.DisplayMode",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 26,
            "description": "The drawing area is displayed as pages depending on the page setting of the Graph.",
            "itemtype": "property",
            "name": "PAGE",
            "final": 1,
            "type": "{Number}",
            "class": "JSG.ui.graphics.DisplayMode",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 51,
            "description": "Returns the current zoom factor.",
            "itemtype": "method",
            "name": "getZoom",
            "return": {
                "description": "The current zoom factor.",
                "type": "Number"
            },
            "class": "JSG.ui.graphics.CoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 61,
            "description": "Set the current zoom factor.",
            "itemtype": "method",
            "name": "setZoom",
            "params": [
                {
                    "name": "factor",
                    "description": "New zoom factor between 0.1 and 4",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.CoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 71,
            "description": "Transforms horizontal logical coordinates to device coordinates.",
            "itemtype": "method",
            "name": "logToDeviceX",
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate to be transformed",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Transformed coordinate.",
                "type": "Number"
            },
            "class": "JSG.ui.graphics.CoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 82,
            "description": "Transforms vertical logical coordinates to device coordinates.",
            "itemtype": "method",
            "name": "logToDeviceY",
            "params": [
                {
                    "name": "y",
                    "description": "Coordinate to be transformed",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Transformed coordinate.",
                "type": "Number"
            },
            "class": "JSG.ui.graphics.CoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 93,
            "description": "Transforms horizontal device coordinates to logical coordinates.",
            "itemtype": "method",
            "name": "deviceToLogX",
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate to be transformed",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Transformed coordinate.",
                "type": "Number"
            },
            "class": "JSG.ui.graphics.CoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 104,
            "description": "Transforms vertical device coordinates to logical coordinates.",
            "itemtype": "method",
            "name": "deviceToLogY",
            "params": [
                {
                    "name": "y",
                    "description": "Coordinate to be transformed",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Transformed coordinate.",
                "type": "Number"
            },
            "class": "JSG.ui.graphics.CoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 115,
            "description": "Transforms horizontal device coordinates to logical coordinates not regarding the zoom factor.",
            "itemtype": "method",
            "name": "deviceToLogXNoZoom",
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate to be transformed",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Transformed coordinate.",
                "type": "Number"
            },
            "class": "JSG.ui.graphics.CoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 126,
            "description": "Transforms vertical device coordinates to logical coordinates not regarding the zoom factor.",
            "itemtype": "method",
            "name": "deviceToLogPoint",
            "params": [
                {
                    "name": "y",
                    "description": "Coordinate to be transformed",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Transformed coordinate.",
                "type": "Number"
            },
            "class": "JSG.ui.graphics.CoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 137,
            "description": "Transforms device point to logical point.",
            "itemtype": "method",
            "name": "deviceToLogPoint",
            "params": [
                {
                    "name": "pt",
                    "description": "Point to be transformed",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "Transformed point.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.ui.graphics.CoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 152,
            "description": "Transforms a metrical coordinate to a logical coordinate. Metrical coordinates are given in 1/100 mm.",
            "itemtype": "method",
            "name": "metricToLogX",
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate to be transformed",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Transformed coordinate.",
                "type": "Number"
            },
            "class": "JSG.ui.graphics.CoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 163,
            "description": "Transforms a metrical coordinate to a logical coordinate not regarding the current zoom. Metrical coordinates are given in 1/100 mm.",
            "itemtype": "method",
            "name": "metricToLogXNoZoom",
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate to be transformed",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Transformed coordinate.",
                "type": "Number"
            },
            "class": "JSG.ui.graphics.CoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 174,
            "description": "Transforms a metrical coordinate to a logical coordinate. Metrical coordinates are given in 1/100 mm.",
            "itemtype": "method",
            "name": "metricToLogY",
            "params": [
                {
                    "name": "y",
                    "description": "Coordinate to be transformed",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Transformed coordinate.",
                "type": "Number"
            },
            "class": "JSG.ui.graphics.CoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 185,
            "description": "Transforms a metrical coordinate to a logical coordinate not regarding the current zoom. Metrical coordinates are given in 1/100 mm.",
            "itemtype": "method",
            "name": "metricToLogYNoZoom",
            "params": [
                {
                    "name": "y",
                    "description": "Coordinate to be transformed",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Transformed coordinate.",
                "type": "Number"
            },
            "class": "JSG.ui.graphics.CoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 196,
            "description": "Returns the major unit for the scale and grid.",
            "itemtype": "method",
            "name": "getMajorUnit",
            "return": {
                "description": "Major unit.",
                "type": "Number"
            },
            "class": "JSG.ui.graphics.CoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 206,
            "description": "Returns the minor unit for the scale and grid.",
            "itemtype": "method",
            "name": "getMinorUnit",
            "return": {
                "description": "Minor Unit",
                "type": "Number"
            },
            "class": "JSG.ui.graphics.CoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 216,
            "description": "Returns the major unit display string for the scale and grid.",
            "itemtype": "method",
            "name": "getMajorUnitString",
            "return": {
                "description": "Major unit string.",
                "type": "String"
            },
            "class": "JSG.ui.graphics.CoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 226,
            "description": "Returns the minor unit display string for the scale and grid.",
            "itemtype": "method",
            "name": "getMinorUnitString",
            "return": {
                "description": "Minor unit string.",
                "type": "String"
            },
            "class": "JSG.ui.graphics.CoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 236,
            "description": "Converts given value in units of coordinate system to a value in units of SVG.",
            "itemtype": "method",
            "name": "toSVGUnit",
            "params": [
                {
                    "name": "unit",
                    "description": "The value to convert.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Converted value.",
                "type": "Number"
            },
            "class": "JSG.ui.graphics.CoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 247,
            "itemtype": "method",
            "name": "round",
            "params": [
                {
                    "name": "number",
                    "description": "The number to round",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Rounded number.",
                "type": "Number"
            },
            "deprecated": true,
            "deprecationMessage": "Don't use! Subject to be removed!",
            "class": "JSG.ui.graphics.CoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\CoordinateSystem.js",
            "line": 256,
            "itemtype": "method",
            "name": "roundToMiddle",
            "params": [
                {
                    "name": "number",
                    "description": "The number to round",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Rounded number.",
                "type": "Number"
            },
            "deprecated": true,
            "deprecationMessage": "Don't use! Subject to be removed!",
            "class": "JSG.ui.graphics.CoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\DocumentEventDispatcher.js",
            "line": 53,
            "description": "Registers given function for specified event string. The function is called with given scope object and gets\nnative event object as sole parameter.</br>\nNote: only one function per event and scope can be registered. But it is possible to register several functions\nfor same event if they have different scope.",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "evstr",
                    "description": "A string which defines the event to register function for.",
                    "type": "String"
                },
                {
                    "name": "scope",
                    "description": "The scope object to call the function with.",
                    "type": "Object"
                },
                {
                    "name": "func",
                    "description": "The function to call when specified event occurs.",
                    "type": "Function"
                }
            ],
            "class": "JSG.ui.graphics.DocumentEventDispatcher",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\DocumentEventDispatcher.js",
            "line": 76,
            "description": "Removes registered function for given event and scope.",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "evstr",
                    "description": "A string which defines the event to remove the listener function for.",
                    "type": "String"
                },
                {
                    "name": "scope",
                    "description": "The scope object of listener function to remove.",
                    "type": "Object"
                }
            ],
            "class": "JSG.ui.graphics.DocumentEventDispatcher",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\GraphicSystem.js",
            "line": 537,
            "description": "Sets the coordinate system to use.",
            "itemtype": "method",
            "name": "setCoordinateSystem",
            "params": [
                {
                    "name": "cs",
                    "description": "The new coordinate system.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ],
            "class": "JSG.ui.graphics.GraphicSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\GraphicSystem.js",
            "line": 546,
            "description": "Returns the current graphics instance used for drawing.",
            "itemtype": "method",
            "name": "getGraphics",
            "return": {
                "description": "The currently used graphics instance.",
                "type": "JSG.ui.graphics.Graphics"
            },
            "class": "JSG.ui.graphics.GraphicSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\GraphicSystem.js",
            "line": 555,
            "description": "Returns the current graphics context. This is the native canvas context2D object.",
            "itemtype": "method",
            "name": "getGraphicsContext",
            "return": {
                "description": "The graphics 2D Canvas context.",
                "type": "Context2D"
            },
            "class": "JSG.ui.graphics.GraphicSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\GraphicSystem.js",
            "line": 564,
            "description": "Returns the native canvas object.",
            "itemtype": "method",
            "name": "getCanvas",
            "return": {
                "description": "The native canvas object.",
                "type": "Canvas"
            },
            "class": "JSG.ui.graphics.GraphicSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\GraphicSystem.js",
            "line": 573,
            "description": "Returns the current canvas size as point.",
            "itemtype": "method",
            "name": "getSize",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse. If none is provided a new point will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The canvas size.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.ui.graphics.GraphicSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\GraphicSystem.js",
            "line": 584,
            "description": "Resizes inner canvas object to specified size.</br>\nNote: this will trigger a repaint.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "The new canvas width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The new canvas height.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.GraphicSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\GraphicSystem.js",
            "line": 600,
            "description": "Sets the main root view to draw on canvas.</br>\nNote: this will trigger a repaint.",
            "itemtype": "method",
            "name": "setContent",
            "params": [
                {
                    "name": "view",
                    "description": "The new root view.",
                    "type": "JSG.ui.View"
                }
            ],
            "class": "JSG.ui.graphics.GraphicSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\GraphicSystem.js",
            "line": 611,
            "description": "Returns the curren cursor style setting used by inner canvas object.",
            "itemtype": "method",
            "name": "getCursor",
            "params": [
                {
                    "name": "param_name",
                    "description": "param_description.",
                    "type": "Type"
                }
            ],
            "return": {
                "description": "The current cursor style.",
                "type": "String"
            },
            "class": "JSG.ui.graphics.GraphicSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\GraphicSystem.js",
            "line": 621,
            "description": "Sets the cursor style to be used by inner canvas object.",
            "itemtype": "method",
            "name": "setCursor",
            "params": [
                {
                    "name": "name",
                    "description": "The new cursor style string to use.",
                    "type": "String"
                }
            ],
            "class": "JSG.ui.graphics.GraphicSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\GraphicSystem.js",
            "line": 630,
            "description": "Draws the current root view and all of its subviews.",
            "itemtype": "method",
            "name": "paint",
            "params": [
                {
                    "name": "force",
                    "description": "Specify <code>true</code> to force a paint no matter of current inner state.",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.ui.graphics.GraphicSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\GraphicSystem.js",
            "line": 644,
            "description": "Internal method which actually triggers the repaint.",
            "itemtype": "method",
            "name": "_doPaint",
            "params": [
                {
                    "name": "force",
                    "description": "Specify <code>true</code> to force a paint no matter of current inner state.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.graphics.GraphicSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\GraphicSystem.js",
            "line": 667,
            "description": "Sets the main InteractionHandler to use. The InteractionHandler will get all mouse, key and touch events.",
            "itemtype": "method",
            "name": "setInteractionHandler",
            "params": [
                {
                    "name": "interactionHandler",
                    "description": "The new InteractionHandler to use.",
                    "type": "JSG.graph.interaction.InteractionHandler"
                }
            ],
            "return": {
                "description": "return_description",
                "type": "Return_type"
            },
            "class": "JSG.ui.graphics.GraphicSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\GraphicSystem.js",
            "line": 684,
            "description": "Called on global key event.</br>\nThis will propagate the event to current InteractionHandler or to the root view if no handler was set.",
            "itemtype": "method",
            "name": "onKeyEvent",
            "params": [
                {
                    "name": "ev",
                    "description": "The native key event.",
                    "type": "Event"
                },
                {
                    "name": "type",
                    "description": "The key event type, i.e. either up or down.",
                    "type": "JSG.ui.events.KeyEventType"
                }
            ],
            "class": "JSG.ui.graphics.GraphicSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\GraphicSystem.js",
            "line": 706,
            "description": "Propagates key event to current InteractionHandler or to the root view if no handler was set.",
            "itemtype": "method",
            "name": "_notifyKeyEvent",
            "params": [
                {
                    "name": "ev",
                    "description": "The key event.",
                    "type": "JSG.ui.events.KeyEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.graphics.GraphicSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\GraphicSystem.js",
            "line": 723,
            "description": "Called when this GraphicSystem is no longer needed to clean up required resources.",
            "itemtype": "method",
            "name": "destroy",
            "class": "JSG.ui.graphics.GraphicSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 56,
            "description": "Checks if a canvas is assigned.",
            "itemtype": "method",
            "name": "isContextDefined",
            "return": {
                "description": "True, if a canvas is assigned, otherwise false.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 67,
            "description": "Get attached Coordinate System.",
            "itemtype": "method",
            "name": "getCoordinateSystem",
            "return": {
                "description": "Current Coordinate System.",
                "type": "JSG.ui.graphics.CoordinateSystem"
            },
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 77,
            "description": "Set Coordinate System.",
            "itemtype": "method",
            "name": "setCoordinateSystem",
            "params": [
                {
                    "name": "cs",
                    "description": "New Coordinate System.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 87,
            "description": "Save the current canvas state including transformations, clip status and format definitions",
            "itemtype": "method",
            "name": "save",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 98,
            "description": "Restore the last saved canvas status.",
            "itemtype": "method",
            "name": "restore",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 110,
            "description": "Get the current 2D canvas context. The context can be used for direct output to the underlying canvas. This should be used with care\nas derived classes can not handle the direct output.",
            "itemtype": "method",
            "name": "getContext",
            "return": {
                "description": "2D Canvas context",
                "type": "Context2D"
            },
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 121,
            "description": "Set the transparency of the output. Using the transparency items below the transparent items shine through.",
            "itemtype": "method",
            "name": "setTransparency",
            "params": [
                {
                    "name": "transparency",
                    "description": "Grade of transparency. Values between 0 and 100 are allowed, where 0 stands for completed transparency and 100 for no transparency.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 131,
            "description": "Translate the output by the given coordinates. All output generated after a call to translate will be drawn with an offset defined\nusing this function.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "dx",
                    "description": "Horizontal offset.",
                    "type": "Number"
                },
                {
                    "name": "dy",
                    "description": "Vertical offset.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 143,
            "description": "Scales the output by the given scale factors. All following output will be drawn using the given scaling factors.",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "x",
                    "description": "Scale factor for horizontal coordinates.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Scale factor for vertical coordinates.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 154,
            "description": "Rotate the graphic context. All following draw operations will be rotated by the given angle.",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "Angle in radians.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 164,
            "description": "Clip following output to a previously created path.",
            "itemtype": "method",
            "name": "clip",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 173,
            "description": "Clip following output to the given Rectangle.",
            "itemtype": "method",
            "name": "setClip",
            "params": [
                {
                    "name": "rect",
                    "description": "Rectangle to clip to..",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 193,
            "description": "Clips following output to given rectangle.</br>\nThe difference to {{#crossLink \"JSG.ui.graphics.Graphics/setClip:method\"}}{{/crossLink}} is that this method\ntranslates given rectangle to current canvas state including all transformations and rotations.",
            "itemtype": "method",
            "name": "setImageClip",
            "params": [
                {
                    "name": "rect",
                    "description": "Rectangle to clip to.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 213,
            "description": "Clip output to a given polygon or bezier path, defined by the passed point definitions. A bezier is defined by the context point that\nis part of the curve and two control points, that define the shape of the curve. The first control point (cpFrom) precedes the point on the curve\nand defines how the curve point is approached from the previous point and the second control point (cpTo) defines how the curve\nis continued after the context point.",
            "itemtype": "method",
            "name": "setClipArea",
            "params": [
                {
                    "name": "cpFrom",
                    "description": "Bezier control points. This point list defines the control points preceding the context points.\nIf not defined, only the second points parameter will be used and the clip region is defined as a polygon.",
                    "type": "JSG.geometry.Point[]",
                    "optional": true
                },
                {
                    "name": "points",
                    "description": "Points, definining the polygon or the context points of a bezier.",
                    "type": "JSG.geometry.Point[]"
                },
                {
                    "name": "cpTo",
                    "description": "Bezier control points. This point list defines the control points following the context points.\nIf not defined, only the second points parameter will be used and the clip region is defined as a polygon.",
                    "type": "JSG.geometry.Point[]",
                    "optional": true
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 249,
            "description": "Set a fill color to be used for the following drawing operations.",
            "itemtype": "method",
            "name": "setFillColor",
            "params": [
                {
                    "name": "color",
                    "description": "Fill color definition. The fill color is given as a hexadecimal string preceded by a hash (#). '#FFFFFF' is defined as a white fill color.\nand '#000000' would define a black fill color.",
                    "type": "String"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 262,
            "description": "Returns the currently used fill color.</br>\nSee {{#crossLink \"JSG.ui.graphics.Graphics/setFillColor:method\"}}{{/crossLink}} for additional information about valid \nfill color values.",
            "itemtype": "method",
            "name": "getFillColor",
            "return": {
                "description": "The currently used fill color.",
                "type": "String"
            },
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 274,
            "description": "Set line cap to be used for the following drawing operations.<br/>\nPlease refer to {{#crossLink \"JSG.graph.attr.FormatAttributes.LineCap\"}}{{/crossLink}} for information on supported\nline caps.",
            "itemtype": "method",
            "name": "setLineCap",
            "params": [
                {
                    "name": "cap",
                    "description": "The line cap to use.",
                    "type": "String"
                }
            ],
            "since": "1.6.0",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 289,
            "description": "Set a line color to be used for the following drawing operations.",
            "itemtype": "method",
            "name": "setLineColor",
            "params": [
                {
                    "name": "color",
                    "description": "Line color definition. The line color is given as a hexadecimal string preceded by a hash (#). '#FFFFFF' is defined as a white fill color.\nand '#000000' would define a black fill color.",
                    "type": "String"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 302,
            "description": "Define a line style to be used for the following drawing operations.",
            "itemtype": "method",
            "name": "setLineStyle",
            "params": [
                {
                    "name": "style",
                    "description": "New line style definition.",
                    "type": "JSG.graph.attr.FormatAttributes.LineStyle"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 312,
            "description": "Define a fill style to be used for the following drawing operations.",
            "itemtype": "method",
            "name": "setFillStyle",
            "params": [
                {
                    "name": "style",
                    "description": "New fill style definition.",
                    "type": "JSG.graph.attr.FormatAttributes.FillStyle"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 322,
            "description": "Defines horizontal text alignment to be used for the following text drawing operations.</br>\nNote: the given alignment is not directly applied. It is only utilized by a call to \n{{#crossLink \"JSG.ui.graphics.Graphics/fillText:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setTextAlign",
            "params": [
                {
                    "name": "align",
                    "description": "New text alignment.",
                    "type": "JSG.graph.attr.TextFormatAttributes.TextAlignment"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 334,
            "description": "Defines horizontal text alignment to be used for the following text drawing operations.</br>\nIn contrast to {{#crossLink \"JSG.ui.graphics.Graphics/setTextAlign:method\"}}{{/crossLink}} this method applies the given\nalignment to internal drawing context directly.",
            "itemtype": "method",
            "name": "setTextAlignment",
            "params": [
                {
                    "name": "align",
                    "description": "New text alignment.",
                    "type": "JSG.graph.attr.TextFormatAttributes.TextAlignment"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 357,
            "description": "Defines the vertical placement of text output relative to the given coordinate.",
            "itemtype": "method",
            "name": "setTextBaseline",
            "params": [
                {
                    "name": "baseline",
                    "description": "Baseline definitions like in canvas specification (alphabetic, top, hanging, middle, ideographic, bottom).",
                    "type": "String"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 367,
            "description": "Set the font name of the font to be used for text output. You need to call setFont to activate the font settings for text output.",
            "itemtype": "method",
            "name": "setFontName",
            "params": [
                {
                    "name": "name",
                    "description": "New font name. The use of 'Websafe' fonts is recommended.",
                    "type": "String"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 377,
            "description": "Set the font size of the font to be used for text output. You need to call setFont to activate the font settings for text output.",
            "itemtype": "method",
            "name": "setFontSize",
            "params": [
                {
                    "name": "name",
                    "description": "New font size in point.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 387,
            "description": "Set the font style of the font to be used for text output. You need to call setFont to activate the font settings for text output.",
            "itemtype": "method",
            "name": "setFontStyle",
            "params": [
                {
                    "name": "style",
                    "description": "New font style.",
                    "type": "JSG.graph.attr.TextFormatAttributes.FontStyle"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 397,
            "description": "Activate the font information for the following text output. After setting the font information (setFontName etc.), the font\nhas to be activated before text output will use the font information.",
            "itemtype": "method",
            "name": "setFont",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 433,
            "description": "Draw an elliptical border on the canvas.",
            "itemtype": "method",
            "name": "drawEllipse",
            "params": [
                {
                    "name": "rect",
                    "description": "Bounding rectangle of the ellipse to be drawn.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 465,
            "description": "Draw a line on the canvas.",
            "itemtype": "method",
            "name": "drawLine",
            "params": [
                {
                    "name": "start",
                    "description": "Start point of the line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "end",
                    "description": "End point of the line.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 582,
            "description": "Draw an arrow at the end of the line. The start and end points are needed to calculate the direction of the line.\nThe arrow is drawn using the current line color and fill color.",
            "itemtype": "method",
            "name": "drawArrow",
            "params": [
                {
                    "name": "start",
                    "description": "Start point of the line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "end",
                    "description": "End point of the line.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "type",
                    "description": "Arrow style.",
                    "type": "JSG.graph.attr.FormatAttributes.ArrowStyle"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 808,
            "description": "Utility function to retrieve the arrow width based on the arrow type",
            "itemtype": "method",
            "name": "getArrowWidthByType",
            "params": [
                {
                    "name": "type",
                    "description": "Arrow style.",
                    "type": "JSG.graph.attr.FormatAttributes.ArrowStyle"
                }
            ],
            "return": {
                "description": "Arrow width in 1/100th mm.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 837,
            "description": "Set the width of a line for the next drawing operations.",
            "itemtype": "method",
            "name": "setLineWidth",
            "params": [
                {
                    "name": "width",
                    "description": "Width in 1/100th mm.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 851,
            "description": "Define the rounding of polyline edges or corners. It can be used to draw a rounded rectangle or to display rounded corners, when drawing a polygon or polyline.",
            "itemtype": "method",
            "name": "setLineCorner",
            "params": [
                {
                    "name": "size",
                    "description": "Size of round in 1/100th mm.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 861,
            "description": "Define the arrow style drawn at the beginning of a line, if you draw a line or polyline.",
            "itemtype": "method",
            "name": "setLineArrowStart",
            "params": [
                {
                    "name": "arrow",
                    "description": "Arrow style.",
                    "type": "JSG.graph.attr.FormatAttributes.ArrowStyle"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 871,
            "description": "Define the arrow style drawn at the end of a line, if you draw a line or polyline.",
            "itemtype": "method",
            "name": "setLineArrowEnd",
            "params": [
                {
                    "name": "arrow",
                    "description": "Arrow style.",
                    "type": "JSG.graph.attr.FormatAttributes.ArrowStyle"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 881,
            "description": "Define the shadow used for the next drawing operation",
            "itemtype": "method",
            "name": "setShadow",
            "params": [
                {
                    "name": "color",
                    "description": "Hexadecimal color string to define the shadow color",
                    "type": "String"
                },
                {
                    "name": "offsetX",
                    "description": "Horizontal width of the shadow in 1/100th mm.",
                    "type": "Number"
                },
                {
                    "name": "offsetY",
                    "description": "Vertical height of the shadow in 1/100th mm.",
                    "type": "Number"
                },
                {
                    "name": "blur",
                    "description": "Blur factor, where 0 is no blur.",
                    "type": "Number"
                },
                {
                    "name": "bounds",
                    "description": "Bounding Rectangle where the shadow shall be drawn.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 897,
            "description": "Resets currently defined shadow values to their defaults, i.e. this results in no visible shadow.",
            "itemtype": "method",
            "name": "resetShadow",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 909,
            "description": "Set an image pattern to use for the next fill operation. The pattern is automatically added to a global ImagePool.",
            "itemtype": "method",
            "name": "setPattern",
            "params": [
                {
                    "name": "bounds",
                    "description": "Bounding Rectangle where the pattern shall be drawn.",
                    "type": "JSG.geometry.Rectangle"
                },
                {
                    "name": "pattern",
                    "description": "URL of the pattern.",
                    "type": "String"
                },
                {
                    "name": "patternStyle",
                    "description": "Pattern output options. An image can be drawn stretched, center or being repeated.",
                    "type": "JSG.graph.attr.FormatAttributes.PatternStyle"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 925,
            "description": "Set a linear gradient to be used for the next fill output.",
            "itemtype": "method",
            "name": "setGradientLinear",
            "params": [
                {
                    "name": "bounds",
                    "description": "Bounding Rectangle where the gradient shall be drawn.",
                    "type": "JSG.geometry.Rectangle"
                },
                {
                    "name": "color",
                    "description": "Hexadecimal color string to define the color to start from",
                    "type": "String"
                },
                {
                    "name": "color",
                    "description": "Hexadecimal color string to define the color to go to.",
                    "type": "String"
                },
                {
                    "name": "angle",
                    "description": "Gradient angle in degrees.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 952,
            "description": "Evaluate the vector to be used for the linear gradient. This vector is needed to correctly define begin, start and direction of the gradient.",
            "itemtype": "method",
            "name": "evaluateLinearGradientVector",
            "params": [
                {
                    "name": "bounds",
                    "description": "Bounding Rectangle where the gradient shall be drawn.",
                    "type": "JSG.geometry.Rectangle"
                },
                {
                    "name": "angle",
                    "description": "Gradient angle in degrees.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Evaluated result vector",
                "type": "JSG.geometry.Point[]"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1025,
            "description": "Create a linear canvas gradient using the vector coordinates given.",
            "itemtype": "method",
            "name": "createLinearGradient",
            "params": [
                {
                    "name": "x0",
                    "description": "The X-coordinate of the start point of the gradient .",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "The Y-coordinate of the start point of the gradient .",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "The X-coordinate of the end point of the gradient .",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "The Y-coordinate of the end point of the gradient .",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Linear gradient, that can be used for fill operations.",
                "type": "Object"
            },
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1047,
            "description": "Set a radial gradient to be used for the next fill operation. The gradient starts at the offset position and\nends at the border of the bounds.",
            "itemtype": "method",
            "name": "setGradientLinear",
            "params": [
                {
                    "name": "bounds",
                    "description": "Bounding Rectangle where the gradient shall be drawn.",
                    "type": "JSG.geometry.Rectangle"
                },
                {
                    "name": "color",
                    "description": "Hexadecimal color string to define the color to start from",
                    "type": "String"
                },
                {
                    "name": "color",
                    "description": "Hexadecimal color string to define the color to go to.",
                    "type": "String"
                },
                {
                    "name": "offsetX",
                    "description": "Horizontal offset of the center of the gradient relative to the bounds in percent.",
                    "type": "Number"
                },
                {
                    "name": "offsetY",
                    "description": "Vertical offset of the center of the gradient relative to the bounds in percent.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1083,
            "description": "Create a radial canvas gradient.",
            "itemtype": "method",
            "name": "createLinearGradient",
            "params": [
                {
                    "name": "x0",
                    "description": "The X-coordinate of the center of the inner circle of the gradient .",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "The Y-coordinate of the center of the inner circle of the gradient .",
                    "type": "Number"
                },
                {
                    "name": "r0",
                    "description": "Radius of the inner circel to start from.",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "The X-coordinate of the center point of the outer circle of the gradient .",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "The Y-coordinate of the center point of the outer circle of the gradient .",
                    "type": "Number"
                },
                {
                    "name": "r1",
                    "description": "Radius of the outer circle to goto.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Radial gradient, that can be used for fill operations.",
                "type": "Object"
            },
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1107,
            "description": "Draw an image to the canvas.",
            "itemtype": "method",
            "name": "drawImage",
            "params": [
                {
                    "name": "image",
                    "description": "Image to be displayed. The image can be any object that can be passed to the canvas drawImage method.",
                    "type": "Image"
                },
                {
                    "name": "x",
                    "description": "X-Position of the image to be drawn.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y-Position of the image to be drawn.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Width of the image to be drawn. If the parameter is left out, the image will be drawn using its natural size.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "Height of the image to be drawn.  If the parameter is left out, the image will be drawn using its natural size.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1153,
            "description": "Draw a rectangular frame.",
            "itemtype": "method",
            "name": "drawRect",
            "params": [
                {
                    "name": "rect",
                    "description": "Rectangle coordinates to draw.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1167,
            "description": "Fill a rectangular area.",
            "itemtype": "method",
            "name": "fillRect",
            "params": [
                {
                    "name": "rect",
                    "description": "Rectangle coordinates to draw.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1187,
            "description": "Draws a single pixel.",
            "itemtype": "method",
            "name": "drawPixel",
            "params": [
                {
                    "name": "x",
                    "description": "X-Coordinate of the Pixel to draw.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y-Coordinate of the Pixel to draw.",
                    "type": "Number"
                }
            ],
            "since": "1.6.0",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1201,
            "description": "Fill a text with the current fill and font definition. If the font style contains underline, the style is emulated drawing a line.",
            "itemtype": "method",
            "name": "fillText",
            "params": [
                {
                    "name": "text",
                    "description": "Text to be filled.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "X-Position of the text to be drawn.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y-Position of the text to be drawn.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1277,
            "description": "Draw a text frame with the current line style and font definition.",
            "itemtype": "method",
            "name": "drawText",
            "params": [
                {
                    "name": "text",
                    "description": "Text to be filled.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "X-Position of the text to be drawn.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y-Position of the text to be drawn.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1291,
            "description": "Measure the text dimensions. Currently only the width is calculated. The width is always returned in device units. Scaling or\napply metric or other conversion to logical units is not applied.",
            "itemtype": "method",
            "name": "measureText",
            "params": [
                {
                    "name": "text",
                    "description": "Text to be measured.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Structure with the size information. Currently only the width member of the Object is valid.",
                "type": "Object"
            },
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1303,
            "description": "Draw a polyline border.</br>\n<b>Note:</b> the optional <code>renderContext</code> object can be used to retrieve useful information\nwhich are calculated during drawing. Currently only <code>startArrow</code> and <code>endArrow</code> properties are used,\nwhich contains an array of two points between an arrow is drawn. The <code>renderContext</code> is API internal only!!",
            "itemtype": "method",
            "name": "drawPolyline",
            "params": [
                {
                    "name": "points",
                    "description": "Points of the polyline to draw.",
                    "type": "JSG.geometry.Point[]"
                },
                {
                    "name": "closed",
                    "description": "True, to automatically close the polyline by connecting the last with the first point of the polyline, otherwise false.",
                    "type": "Boolean"
                },
                {
                    "name": "renderContext",
                    "description": "API internal context object to store information calculated during drawing.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1370,
            "description": "API internal method to update BoundingBox of given render context.</br>\n<b>Don't use!</b>",
            "itemtype": "method",
            "name": "_updateRenderContextBBox",
            "params": [
                {
                    "name": "renderContext",
                    "description": "The render context object to update.",
                    "type": "Object"
                },
                {
                    "name": "boxProperty",
                    "description": "The property which defines the BoundingBox to update.",
                    "type": "String"
                },
                {
                    "name": "point",
                    "description": "The new box location.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "size",
                    "description": "The new box size.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1394,
            "description": "Evaluate a bezier poly line representing a polyline with rounded corners. Given a polyline represented by the points parameter,\nthe necessary bezier curve points will be evaluated by filling the three point arrays (cpTo, cpFrom, bpoints) to be able to simply draw a bezier in conclusion.",
            "itemtype": "method",
            "name": "getRoundedPolygonBezier",
            "params": [
                {
                    "name": "cpTo",
                    "description": "Control points before the context points of the resulting bezier.",
                    "type": "JSG.geometry.Points[]"
                },
                {
                    "name": "cpFrom",
                    "description": "Control points behind the context points of the resulting bezier.",
                    "type": "JSG.geometry.Points[]"
                },
                {
                    "name": "bpoints",
                    "description": "Context points of the resulting bezier.",
                    "type": "JSG.geometry.Points[]"
                },
                {
                    "name": "points",
                    "description": "Points of the input polyline.",
                    "type": "JSG.geometry.Points[]"
                },
                {
                    "name": "closed",
                    "description": "True, to automatically close the polyline by connecting the last with the first point of the polyline, otherwise false.",
                    "type": "Boolean"
                },
                {
                    "name": "cr",
                    "description": "Radius of the corner rounding.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1471,
            "description": "Fill a polyline with the current fill definition.",
            "itemtype": "method",
            "name": "fillPolyline",
            "params": [
                {
                    "name": "points",
                    "description": "Points of the polyline to draw.",
                    "type": "JSG.geometry.Point[]"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1509,
            "description": "Fill an area defined by the passed point lists with a pattern fill. The pattern must have\nbeen set previously using setPattern.",
            "itemtype": "method",
            "name": "fillWithPattern",
            "params": [
                {
                    "name": "cpFrom",
                    "description": "Bezier control points. This point list defines the control points preceding the context points.\nIf not defined, only the second points parameter will be used and the fill area is defined as a polygon.",
                    "type": "JSG.geometry.Point[]"
                },
                {
                    "name": "points",
                    "description": "Points, defining the polygon or the context points of a bezier.",
                    "type": "JSG.geometry.Point[]"
                },
                {
                    "name": "cpTo",
                    "description": "Bezier control points. This point list defines the control points following the context points.\nIf not defined, only the second points parameter will be used and the fill area is defined as a polygon.",
                    "type": "JSG.geometry.Point[]"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1609,
            "description": "Get an image from the pool.",
            "itemtype": "method",
            "name": "getImage",
            "params": [
                {
                    "name": "url",
                    "description": "URL of the image.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The image, if it is found in the image pool, otherwise a default image showing that the\nimage is currently not available.",
                "type": "Image"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1635,
            "description": "Utility function to convert a set of points to a rect, if possible, which is only the case if the points describe a rectangle",
            "itemtype": "method",
            "name": "getRectFromPoints",
            "params": [
                {
                    "name": "points",
                    "description": "Point list to convert.",
                    "type": "JSG.geometry.Point[]"
                },
                {
                    "name": "resuerect",
                    "description": "A rectangle to reuse. If not provided a new one will be created.",
                    "type": "JSG.geometry.Rectangle",
                    "optional": true
                }
            ],
            "return": {
                "description": "The created rectangle or <code>undefined</code> if given points don't represent a rectangle.",
                "type": "JSG.geometry.Rectangle"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1666,
            "description": "Draw a bezier curve defined by the passed point lists.</br>\n<b>Note:</b> the optional <code>renderContext</code> object can be used to retrieve useful information\nwhich are calculated during drawing. Currently only <code>startArrow</code> and <code>endArrow</code> properties are used,\nwhich contains an array of two points between an arrow is drawn. The <code>renderContext</code> is API internal only!!",
            "itemtype": "method",
            "name": "drawBezier",
            "params": [
                {
                    "name": "cpFrom",
                    "description": "Bezier control points. This point list defines the control points preceding the context points.",
                    "type": "JSG.geometry.Point[]"
                },
                {
                    "name": "points",
                    "description": "Points, defining the polygon or the context points of a bezier.",
                    "type": "JSG.geometry.Point[]"
                },
                {
                    "name": "cpTo",
                    "description": "Bezier control points. This point list defines the control points following the context points.",
                    "type": "JSG.geometry.Point[]"
                },
                {
                    "name": "closed",
                    "description": "True to automatically close the bezier by connecting the last with the first context point of the bezier.",
                    "type": "Boolean"
                },
                {
                    "name": "renderContext",
                    "description": "API internal context object to store information calculated during drawing.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1783,
            "description": "Get a line pattern definition base on the current style definition.",
            "itemtype": "method",
            "name": "getDashPattern",
            "params": [
                {
                    "name": "dot",
                    "description": "Size of a dot.",
                    "type": "Number"
                },
                {
                    "name": "dash",
                    "description": "Size of a dash.",
                    "type": "Number"
                },
                {
                    "name": "space",
                    "description": "Size of the space between, dots and dashes.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1812,
            "description": "Determines the current line-dash pattern and tries to apply it using canvas <code>setLineDash</code> method. If native \n<code>setLineDash</code> method is not supported or if current line-style specifies no dash pattern <code>false</code>\nis returned.<br/>\nPlease refer to {{#crossLink \"JSG.ui.graphics.Graphics/getDashPattern:method\"}}{{/crossLink}} and\n{{#crossLink \"JSG.ui.graphics.Graphics/clearLineDash:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "applyLineDash",
            "return": {
                "description": "<code>true</code> if line dash was applied, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "since": "1.6.0",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1833,
            "description": "Clears a previously applied line-dash pattern.<br/>\nSee {{#crossLink \"JSG.ui.graphics.Graphics/applyLineDash:method\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "clearLineDash",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1845,
            "description": "Fill a bezier area defined by the passed point lists.",
            "itemtype": "method",
            "name": "fillBezier",
            "params": [
                {
                    "name": "cpFrom",
                    "description": "Bezier control points. This point list defines the control points preceding the context points.",
                    "type": "JSG.geometry.Point[]"
                },
                {
                    "name": "points",
                    "description": "Points, defining the polygon or the context points of a bezier.",
                    "type": "JSG.geometry.Point[]"
                },
                {
                    "name": "cpTo",
                    "description": "Bezier control points. This point list defines the control points following the context points.",
                    "type": "JSG.geometry.Point[]"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1877,
            "description": "Fill an elliptical area on the canvas.",
            "itemtype": "method",
            "name": "fillEllipse",
            "params": [
                {
                    "name": "rect",
                    "description": "Bounding rectangle of the ellipse to be drawn.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1898,
            "description": "Move the current position within the current path to a specified location. The next line drawing or bezier curve drawing operation will start from there.",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "x",
                    "description": "X-Coordinate to move to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y-Coordinate to move to.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1911,
            "description": "Add a line from the current position (moveTo) to the given position to the current path.",
            "itemtype": "method",
            "name": "lineTo",
            "params": [
                {
                    "name": "x",
                    "description": "X-Coordinate to draw to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y-Coordinate to draw to.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1924,
            "description": "Add a bezier curve using the two control points to a path. The curve starts at the current position, defined by a previous call to moveTo.",
            "itemtype": "method",
            "name": "bezierCurveTo",
            "params": [
                {
                    "name": "cp1x",
                    "description": "X-Coordinate of first control point.",
                    "type": "Number"
                },
                {
                    "name": "cp1y",
                    "description": "Y-Coordinate of first control point.",
                    "type": "Number"
                },
                {
                    "name": "cp2x",
                    "description": "X-Coordinate of the second control point.",
                    "type": "Number"
                },
                {
                    "name": "cp2y",
                    "description": "Y-Coordinate of the second control point.",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "X-Coordinate to draw to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y-Coordinate to draw to.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1942,
            "description": "Adds a quadratic bezier curve to a path with one control point. The curve starts at the current position, defined by a previous call to moveTo.",
            "itemtype": "method",
            "name": "quadraticCurveTo",
            "params": [
                {
                    "name": "cpx",
                    "description": "X-Coordinate of the control point.",
                    "type": "Number"
                },
                {
                    "name": "cpy",
                    "description": "Y-Coordinate of the control point.",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "X-Coordinate to draw to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y-Coordinate to draw to.",
                    "type": "Number"
                }
            ],
            "since": "1.6.0",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1959,
            "description": "Add an arc to a path.",
            "itemtype": "method",
            "name": "drawArc",
            "params": [
                {
                    "name": "x",
                    "description": "X-Coordinate of the center.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y-Coordinate of the center.",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "Radius of the arc.",
                    "type": "Number"
                },
                {
                    "name": "startAngle",
                    "description": "Start angle in radians.",
                    "type": "Number"
                },
                {
                    "name": "endAngle",
                    "description": "End angle in radians.",
                    "type": "Number"
                },
                {
                    "name": "anticlockwise",
                    "description": "Direction to draw to, false=clockwise, true=counterclockwise.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1976,
            "description": "Add a circle to a path.",
            "itemtype": "method",
            "name": "circle",
            "params": [
                {
                    "name": "x",
                    "description": "X-Coordinate of the center.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y-Coordinate of the center.",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "Radius of the circle.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1989,
            "description": "Begin a new Path. Within the path you can bundle various drawing operations like moveTo, lineTo.",
            "itemtype": "method",
            "name": "beginPath",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 1998,
            "description": "Close a path by connecting the first point of the path with the final.",
            "itemtype": "method",
            "name": "closePath",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 2007,
            "description": "Stroke the current path using the current line definition. The path must have been created previously by using methods like moveTo, lineTo, bezierCurveTo.",
            "itemtype": "method",
            "name": "stroke",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 2016,
            "description": "Fill the current path using the current fill definition. The path must have been created previously by using methods like moveTo, lineTo, bezierCurveTo.\nThe point lists will only used for a specific fill pattern.",
            "itemtype": "method",
            "name": "fill",
            "params": [
                {
                    "name": "cpFrom",
                    "description": "Bezier control points. This point list defines the control points preceding the context points.\nIf not defined, only the second points parameter will be used and the fill area is defined as a polygon.",
                    "type": "JSG.geometry.Point[]"
                },
                {
                    "name": "points",
                    "description": "Points, defining the polygon or the context points of a bezier.",
                    "type": "JSG.geometry.Point[]"
                },
                {
                    "name": "cpTo",
                    "description": "Bezier control points. This point list defines the control points following the context points.\nIf not defined, only the second points parameter will be used and the fill area is defined as a polygon.",
                    "type": "JSG.geometry.Point[]"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 2035,
            "description": "Start a group. Default implementation does nothing.",
            "itemtype": "method",
            "name": "startGroup",
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 2044,
            "description": "End a group. Default implementation does nothing.",
            "itemtype": "method",
            "name": "endGroup",
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 2053,
            "description": "Draws a marker, i.e. an ellipse, within the area specified by given rectangle.",
            "itemtype": "method",
            "name": "drawMarker",
            "params": [
                {
                    "name": "rect",
                    "description": "The rectangle region to draw the marker in.",
                    "type": "JSG.geometry.Rectangle"
                },
                {
                    "name": "active",
                    "description": "Flag to indicate if marker should be drawn in active style or not.",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 2107,
            "description": "Multiplies internal state matrix by given one.",
            "itemtype": "method",
            "name": "multiply",
            "params": [
                {
                    "name": "matrix",
                    "description": "A 2x3 matrix.",
                    "type": "Array"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 2130,
            "description": "Inverts given matrix.",
            "itemtype": "method",
            "name": "invert",
            "params": [
                {
                    "name": "m",
                    "description": "A 2x3 matrix to invert.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Inverted matrix.",
                "type": "Array"
            },
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 2150,
            "description": "Rotates inner state matrix by given angle.",
            "itemtype": "method",
            "name": "rotateM",
            "params": [
                {
                    "name": "rad",
                    "description": "Rotation angle in radiant.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 2168,
            "description": "Translates inner state matrix.",
            "itemtype": "method",
            "name": "translateM",
            "params": [
                {
                    "name": "x",
                    "description": "x coordinate of applied translation.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y coordinate of applied translation.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 2179,
            "description": "Scales inner state matrix.",
            "itemtype": "method",
            "name": "scaleM",
            "params": [
                {
                    "name": "sx",
                    "description": "x coordinate of applied scaling.",
                    "type": "Number"
                },
                {
                    "name": "sy",
                    "description": "y coordinate of applied scaling.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 2192,
            "description": "Applies inner state, i.e. translation, scaling and rotation, to given point which is specified by x and y coordinates.",
            "itemtype": "method",
            "name": "transformPoint",
            "params": [
                {
                    "name": "px",
                    "description": "x coordinate of point to transform.",
                    "type": "Number"
                },
                {
                    "name": "py",
                    "description": "y coordinate of point to transform.",
                    "type": "Number"
                },
                {
                    "name": "reusepoint",
                    "description": "An optional point to reuse. If not provided a new one will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The transformed point.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\Graphics.js",
            "line": 2224,
            "description": "Returns the rotation angle of specified point.",
            "itemtype": "method",
            "name": "getRotation",
            "params": [
                {
                    "name": "px",
                    "description": "x coordinate of point.",
                    "type": "Number"
                },
                {
                    "name": "py",
                    "description": "y coordinate of point.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Rotation angle of specified point in radiant.",
                "type": "Number"
            },
            "class": "JSG.ui.graphics.Graphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\MetricCoordinateSystem.js",
            "line": 36,
            "description": "Transforms a logical coordinate to a device coordinate not regarding the current zoom.",
            "itemtype": "method",
            "name": "logToDeviceXNoZoom",
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate to be transformed",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Transformed coordinate.",
                "type": "Number"
            },
            "class": "JSG.ui.graphics.MetricCoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\MetricCoordinateSystem.js",
            "line": 51,
            "description": "Transforms a logical coordinate to a device coordinate not regarding the current zoom.",
            "itemtype": "method",
            "name": "logToDeviceYNoZoom",
            "params": [
                {
                    "name": "y",
                    "description": "Coordinate to be transformed",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Transformed coordinate.",
                "type": "Number"
            },
            "class": "JSG.ui.graphics.MetricCoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\MetricCoordinateSystem.js",
            "line": 82,
            "description": "Transforms a metrical coordinate to a device coordinate.",
            "itemtype": "method",
            "name": "metricToDeviceX",
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate to be transformed",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Transformed coordinate.",
                "type": "Number"
            },
            "class": "JSG.ui.graphics.MetricCoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\MetricCoordinateSystem.js",
            "line": 92,
            "description": "Transforms a metrical coordinate to a device coordinate.",
            "itemtype": "method",
            "name": "metricToDeviceY",
            "params": [
                {
                    "name": "y",
                    "description": "Coordinate to be transformed",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Transformed coordinate.",
                "type": "Number"
            },
            "class": "JSG.ui.graphics.MetricCoordinateSystem",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\SVGraphics.js",
            "line": 315,
            "description": "Returns the SVG fill style to use.</br>\nThis depends on internal <code>_fillStyle</code> setting.",
            "itemtype": "method",
            "name": "getFillAttribute",
            "return": {
                "description": "The SVG fill style.",
                "type": "String"
            },
            "class": "JSG.ui.graphics.SVGraphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\SVGraphics.js",
            "line": 515,
            "description": "Returns the SVG style string to use for drawing a dashed line.</br>\nThis depends on internal <code>_lineStyle</code> setting.",
            "itemtype": "method",
            "name": "getStrokeDash",
            "return": {
                "description": "The SVG dash style string.",
                "type": "String"
            },
            "class": "JSG.ui.graphics.SVGraphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\graphics\\SVGraphics.js",
            "line": 830,
            "description": "Internal method to transform given value to a suitable rounded SVG value.",
            "itemtype": "method",
            "name": "svgRound",
            "params": [
                {
                    "name": "value",
                    "description": "The value to round.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Rounded value.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.graphics.SVGraphics",
            "module": "JSG.ui.graphics",
            "namespace": "JSG.ui.graphics"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigator.js",
            "line": 66,
            "description": "Method to destroy navigator. This method must be called to remove the navigator and\nderegister all listeners.",
            "itemtype": "method",
            "name": "destroy",
            "class": "JSG.ui.navigator.JSGNavigator",
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigator.js",
            "line": 83,
            "description": "This method must be called to resize the navigator. This is usually\nnecessary if the container or canvas element attached to the navigator is resized.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "New width of the navigator.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "New height of the navigator.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.navigator.JSGNavigator",
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigator.js",
            "line": 97,
            "description": "This method is called reacting to a change within the graph to refresh the Navigator. The\nNavigator is recalculated and repainted.",
            "itemtype": "method",
            "name": "onRefresh",
            "class": "JSG.ui.navigator.JSGNavigator",
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigator.js",
            "line": 110,
            "description": "This method is called reacting to resize to refresh the Navigator. The\nNavigator is recalculated and repainted.",
            "itemtype": "method",
            "name": "onResize",
            "class": "JSG.ui.navigator.JSGNavigator",
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigator.js",
            "line": 169,
            "description": "This method adjusts the attached GraphEditor to a new scroll position changed by panning in the navigator through user interaction.",
            "itemtype": "method",
            "name": "scrollGraph",
            "class": "JSG.ui.navigator.JSGNavigator",
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigator.js",
            "line": 181,
            "description": "This method adjusts the zoom status of the GraphEditor to a change in the navigator through user interaction.",
            "itemtype": "method",
            "name": "zoomGraph",
            "params": [
                {
                    "name": "factor",
                    "description": "New zoom factor for attached Graph.",
                    "type": "Number"
                },
                {
                    "name": "doRepaint",
                    "description": "Flag to indicate, if a repaint of the attached GraphEditor is desired.",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.ui.navigator.JSGNavigator",
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigator.js",
            "line": 198,
            "description": "Notification handler for registered notifications. Based on notification from the attached GraphEditor the navigator will handle and reflect the change.",
            "itemtype": "method",
            "name": "onNotification",
            "params": [
                {
                    "name": "notification",
                    "description": "Notification infos.",
                    "type": "JSG.graph.notifications.Notification"
                }
            ],
            "class": "JSG.ui.navigator.JSGNavigator",
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigator.js",
            "line": 226,
            "description": "This method attaches a GraphEditor to the Navigator.",
            "itemtype": "method",
            "name": "setGraphEditor",
            "params": [
                {
                    "name": "graphEditor",
                    "description": "New GraphEditor to attach to the Navigator.",
                    "type": "Type"
                }
            ],
            "class": "JSG.ui.navigator.JSGNavigator",
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigator.js",
            "line": 240,
            "description": "Retrieve the graph of the GraphEditor attached to the Navigator.",
            "itemtype": "method",
            "name": "getGraph",
            "return": {
                "description": "Current Graph.",
                "type": "JSG.graph.model.Graph"
            },
            "class": "JSG.ui.navigator.JSGNavigator",
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigator.js",
            "line": 250,
            "description": "Retrieve the GraphSettings of the GraphEditor attached to the Navigator.",
            "itemtype": "method",
            "name": "getGraphSettings",
            "return": {
                "description": "Current GraphSettings.",
                "type": "JSG.graph.model.settings.GraphSettings"
            },
            "class": "JSG.ui.navigator.JSGNavigator",
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigator.js",
            "line": 261,
            "description": "Remove a GraphEditor from a navigator. Using this function the GraphEditor is detached from the Navigator and displayed empty.",
            "itemtype": "method",
            "name": "clear",
            "class": "JSG.ui.navigator.JSGNavigator",
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigator.js",
            "line": 274,
            "description": "Draw the contents of the Navigator to the attached canvas.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "graphics",
                    "description": "Graphics to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.ui.navigator.JSGNavigator",
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigatorPanel.js",
            "line": 29,
            "description": "Get the viewer of this panel.",
            "itemtype": "method",
            "name": "getViewr",
            "return": {
                "description": "Current Viewer of this panel.",
                "type": "JSG.ui.navigator.NavigatorViewer"
            },
            "class": "JSG.ui.navigator.JSGNavigatorPanel",
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigatorPanel.js",
            "line": 40,
            "description": "Set Graph and Graphview of panel.",
            "itemtype": "method",
            "name": "setGraph",
            "params": [
                {
                    "name": "graph",
                    "description": "Set current graph.",
                    "type": "JSG.graph.model.Graph"
                }
            ],
            "class": "JSG.ui.navigator.JSGNavigatorPanel",
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigatorPanel.js",
            "line": 52,
            "description": "Get GraphView of panel.",
            "itemtype": "method",
            "name": "getGraphView",
            "params": [
                {
                    "name": "param_name",
                    "description": "param_description.",
                    "type": "Type"
                }
            ],
            "return": {
                "description": "GraphView used in Navigator",
                "type": "JSG.ui.navigator.NavigatorGraphView"
            },
            "class": "JSG.ui.navigator.JSGNavigatorPanel",
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\navigator\\JSGNavigatorPanel.js",
            "line": 63,
            "description": "Remove Graph and Graphview from panel.",
            "itemtype": "method",
            "name": "clear",
            "class": "JSG.ui.navigator.JSGNavigatorPanel",
            "module": "JSG.ui.navigator",
            "namespace": "JSG.ui.navigator"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\Arrow.js",
            "line": 28,
            "description": "Predefined constant to specify up direction.",
            "itemtype": "property",
            "name": "NORTH",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.ui.scrollview.Arrow",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\Arrow.js",
            "line": 36,
            "description": "Predefined constant to specify right direction.",
            "itemtype": "property",
            "name": "EAST",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.ui.scrollview.Arrow",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\Arrow.js",
            "line": 44,
            "description": "Predefined constant to specify down direction.",
            "itemtype": "property",
            "name": "SOUTH",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.ui.scrollview.Arrow",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\Arrow.js",
            "line": 52,
            "description": "Predefined constant to specify left direction.",
            "itemtype": "property",
            "name": "EWEST",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.ui.scrollview.Arrow",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\Arrow.js",
            "line": 62,
            "description": "Returns indicated direction.",
            "itemtype": "method",
            "name": "getDirection",
            "return": {
                "description": "One of the predefined direction constants.",
                "type": "Number"
            },
            "class": "JSG.ui.scrollview.Arrow",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\Range.js",
            "line": 32,
            "description": "Checks if {{#crossLink \"JSG.ui.scrollview.Thumb\"}}{{/crossLink}} view is currently moved.",
            "itemtype": "method",
            "name": "isDragThumbFinished",
            "return": {
                "description": "<code>true</code> if thumb is currently not dragged, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.ui.scrollview.Range",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\Range.js",
            "line": 41,
            "description": "Checks if the {{#crossLink \"JSG.ui.scrollview.Thumb\"}}{{/crossLink}} view is currently selected and therefore should \nhandle events.",
            "itemtype": "method",
            "name": "isThumbSelected",
            "params": [
                {
                    "name": "param_name",
                    "description": "param_description.",
                    "type": "Type"
                }
            ],
            "return": {
                "description": "<code>true</code> if Thumb view is curently selected, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.ui.scrollview.Range",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\Range.js",
            "line": 52,
            "description": "Returns the {{#crossLink \"JSG.ui.scrollview.Thumb\"}}{{/crossLink}} view used by this Range.",
            "itemtype": "method",
            "name": "getThumb",
            "return": {
                "description": "The Thumb view.",
                "type": "JSG.ui.scrollview.Thumb"
            },
            "class": "JSG.ui.scrollview.Range",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\Range.js",
            "line": 83,
            "description": "Handles a click within this range, i.e. neither an Arrow view nor a thumb view was hit.<br/>\nNote: this might notify registered observer about an <code>onPageUp</code> or <code>onPageDown</code> event.",
            "itemtype": "method",
            "name": "_handlePageInDecrement",
            "params": [
                {
                    "name": "location",
                    "description": "The event location.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.scrollview.Range",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\Range.js",
            "line": 121,
            "description": "Handles a mouse wheel event.<br/>\nNote: this might notify registered observer about an <code>onThumbDrag</code> event.",
            "itemtype": "method",
            "name": "_handleMouseWheel",
            "params": [
                {
                    "name": "ev",
                    "description": "The mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.scrollview.Range",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\Range.js",
            "line": 152,
            "description": "Places thumb of a vertical scrollbar. </br>\nNote: this also adjusts the visibility of the thumb.",
            "itemtype": "method",
            "name": "_placeThumbVertical",
            "params": [
                {
                    "name": "rangemodel",
                    "description": "The RangeModel to use for placing thumb.",
                    "type": "JSG.ui.scrollview.RangeModel"
                },
                {
                    "name": "cArea",
                    "description": "The currently available client area within the thumb is placed.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.scrollview.Range",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\Range.js",
            "line": 178,
            "description": "Places thumb of a horizontal scrollbar. </br>\nNote: this also adjusts the visibility of the thumb.",
            "itemtype": "method",
            "name": "_placeThumbHorizontal",
            "params": [
                {
                    "name": "rangemodel",
                    "description": "The RangeModel to use for placing thumb.",
                    "type": "JSG.ui.scrollview.RangeModel"
                },
                {
                    "name": "cArea",
                    "description": "The currently available client area within the thumb is placed.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.scrollview.Range",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\Range.js",
            "line": 206,
            "description": "Notifies registered observer that the {{#crossLink \"JSG.ui.scrollview.Thumb\"}}{{/crossLink}} was dragged.<br/>",
            "itemtype": "method",
            "name": "onThumbDrag",
            "params": [
                {
                    "name": "delta",
                    "description": "The drag amount.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.scrollview.Range",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\RangeModel.js",
            "line": 28,
            "description": "Event flag to signal change of RangeModel minimum.",
            "itemtype": "property",
            "name": "CHANGED_MIN",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.ui.scrollview.RangeModel",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\RangeModel.js",
            "line": 36,
            "description": "Event flag to signal change of RangeModel maximum.",
            "itemtype": "property",
            "name": "CHANGED_MAX",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.ui.scrollview.RangeModel",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\RangeModel.js",
            "line": 44,
            "description": "Event flag to signal a general change of RangeModel, i.e. at least the minimum, maximum or extent have changed.",
            "itemtype": "property",
            "name": "CHANGED_RANGE",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.ui.scrollview.RangeModel",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\RangeModel.js",
            "line": 52,
            "description": "Event flag to signal change of RangeModel extent.",
            "itemtype": "property",
            "name": "CHANGED_EXTENT",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.ui.scrollview.RangeModel",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\RangeModel.js",
            "line": 60,
            "description": "Event flag to signal change of RangeModel value.",
            "itemtype": "property",
            "name": "CHANGED_VALUE",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.ui.scrollview.RangeModel",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\RangeModel.js",
            "line": 70,
            "description": "Adds given object to the list of observers which will be notified on RangeModel changes.</br>\nThe observer mast implement a <code>onRangeChange</code> method.",
            "itemtype": "method",
            "name": "addObserver",
            "params": [
                {
                    "name": "observer",
                    "description": "The observer to add.",
                    "type": "Object"
                }
            ],
            "class": "JSG.ui.scrollview.RangeModel",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\RangeModel.js",
            "line": 82,
            "description": "Removes given object from the observers list.",
            "itemtype": "method",
            "name": "removeObserver",
            "params": [
                {
                    "name": "observer",
                    "description": "The observer to remove.",
                    "type": "Object"
                }
            ],
            "class": "JSG.ui.scrollview.RangeModel",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\RangeModel.js",
            "line": 91,
            "description": "Notifies each registered observer about a change specified by given type.",
            "itemtype": "method",
            "name": "_notifyRangeChange",
            "params": [
                {
                    "name": "type",
                    "description": "The change type, i.e. one of predefined change type constants.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.scrollview.RangeModel",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\RangeModel.js",
            "line": 106,
            "description": "Sets all given values.</br>\nNote: this might raises two events. One for a possible change of minimum, maximum or extent and an additional one if\nthe value was changed too.",
            "itemtype": "method",
            "name": "setAll",
            "params": [
                {
                    "name": "min",
                    "description": "The new range minimum.",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "The new range maximum.",
                    "type": "Number"
                },
                {
                    "name": "extent",
                    "description": "The new range extent.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The new range value.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.scrollview.RangeModel",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\RangeModel.js",
            "line": 130,
            "description": "Sets new range bounds.</br>\nNote: this might raises two events. One for a possible change of minimum or maximum and an additional one if\nthe value must be changed too due to bounds change.",
            "itemtype": "method",
            "name": "setRange",
            "params": [
                {
                    "name": "min",
                    "description": "The new range minimum.",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "The new range maximum.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.scrollview.RangeModel",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\RangeModel.js",
            "line": 150,
            "description": "Returns the current range minimum.",
            "itemtype": "method",
            "name": "getMin",
            "return": {
                "description": "The minimum bound.",
                "type": "Number"
            },
            "class": "JSG.ui.scrollview.RangeModel",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\RangeModel.js",
            "line": 159,
            "description": "Sets new range minimum.</br>\nNote: this might raises two events. One for a possible change of the minimum bound and an additional one if\nthe value must be changed too due to bounds change.",
            "itemtype": "method",
            "name": "setMin",
            "params": [
                {
                    "name": "min",
                    "description": "The new range minimum.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.scrollview.RangeModel",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\RangeModel.js",
            "line": 175,
            "description": "Returns the current range maximum.",
            "itemtype": "method",
            "name": "getMax",
            "return": {
                "description": "The maximum bound.",
                "type": "Number"
            },
            "class": "JSG.ui.scrollview.RangeModel",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\RangeModel.js",
            "line": 184,
            "description": "Sets new range maximum.</br>\nNote: this might raises two events. One for a possible change of the maximum bound and an additional one if\nthe value must be changed too due to bounds change.",
            "itemtype": "method",
            "name": "setMax",
            "params": [
                {
                    "name": "max",
                    "description": "The new range maximum.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.scrollview.RangeModel",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\RangeModel.js",
            "line": 201,
            "description": "Returns the current range extent.",
            "itemtype": "method",
            "name": "getExtent",
            "return": {
                "description": "The range extent.",
                "type": "Number"
            },
            "class": "JSG.ui.scrollview.RangeModel",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\RangeModel.js",
            "line": 210,
            "description": "Sets new range extent.</br>\nNote: this might raises two events. One for a possible change of the range extent and an additional one if\nthe value must be changed too due to extent change.",
            "itemtype": "method",
            "name": "setExtent",
            "params": [
                {
                    "name": "extent",
                    "description": "The new range extent.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.scrollview.RangeModel",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\RangeModel.js",
            "line": 226,
            "description": "Returns the current range value.",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "The range value.",
                "type": "Number"
            },
            "class": "JSG.ui.scrollview.RangeModel",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\RangeModel.js",
            "line": 235,
            "description": "Sets new range value.</br>\nNote: this might raises a value change event.",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "The new range value.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.scrollview.RangeModel",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 68,
            "description": "Specifies auto behavior, i.e. that the scrollbar is automatically shown or hidden if required.",
            "itemtype": "property",
            "name": "AUTO",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 76,
            "description": "Specifies that the srollbar is always visible.",
            "itemtype": "property",
            "name": "VISIBLE",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 84,
            "description": "Specifies that the srollbar is always hidden.",
            "itemtype": "property",
            "name": "HIDDEN",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 92,
            "description": "Specifies that the srollbar is replaced by a simple placeholder.",
            "itemtype": "property",
            "name": "",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 102,
            "description": "The default scrollbar size.",
            "itemtype": "property",
            "name": "SIZE",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 111,
            "description": "Returns the RangeModel used by this scrollbar.",
            "itemtype": "method",
            "name": "getRangeModel",
            "return": {
                "description": "The used RangeModel.",
                "type": "JSG.ui.scrollview.RangeModel"
            },
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 120,
            "description": "Sets the RangeModel to use. This will register this scrollbar to given RangeModel.",
            "itemtype": "method",
            "name": "setRangeModel",
            "params": [
                {
                    "name": "rangemodel",
                    "description": "The RangeModel to use.",
                    "type": "JSG.ui.scrollview.RangeModel"
                }
            ],
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 134,
            "description": "Adds given listener to the list of all listeners which will be notified about scrollbar events.<br/>\nThe listener object must provide following methods:<br/>\n<code>\n\t\tonThumbDrag = function(rangemodel, delta);\n\t\tonUp = function(arrow);\n\t\tonDown = function(arrow);\n\t\tonPageUp = function(rangemodel);\n\t\tonPageDown = function(rangemodel);\n<code>",
            "itemtype": "method",
            "name": "addListener",
            "params": [
                {
                    "name": "listener",
                    "description": "The listener to add.",
                    "type": "Object"
                }
            ],
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 153,
            "description": "Removes given listener from the list of all registered listeners.",
            "itemtype": "method",
            "name": "removeListener",
            "params": [
                {
                    "name": "listener",
                    "description": "The listener to remove.",
                    "type": "Object"
                }
            ],
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 162,
            "description": "Internal helper method to notify all registered listeners. Beside the function name, this method takes additional\narguments which are passed as parameters to called function.",
            "itemtype": "method",
            "name": "_notify",
            "params": [
                {
                    "name": "func",
                    "description": "The function to call on each registered listener.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 183,
            "description": "Checks if {{#crossLink \"JSG.ui.scrollview.Thumb\"}}{{/crossLink}} is currently moved.",
            "itemtype": "method",
            "name": "isDragThumbFinished",
            "return": {
                "description": "<code>true</code> if thumb is currently not dragged, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 193,
            "description": "Returns the currently used display mode which determines the scrollbar visibility.</br>\nSee {{#crossLink \"JSG.ui.scrollview.ScrollBar.Mode\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "getMode",
            "return": {
                "description": "Should be one of the predefined mode constants.",
                "type": "Number"
            },
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 203,
            "description": "Sets the new display mode which determines the scrollbar visibility.</br>\nSee {{#crossLink \"JSG.ui.scrollview.ScrollBar.Mode\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "setMode",
            "params": [
                {
                    "name": "mode",
                    "description": "The new display mode to use.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 223,
            "description": "Layouts this scrollbar, i.e. the position and size of its sub-views {{#crossLink \"JSG.ui.scrollview.Arrow\"}}{{/crossLink}},\n{{#crossLink \"JSG.ui.scrollview.Thumb\"}}{{/crossLink}} and {{#crossLink \"JSG.ui.scrollview.Range\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "layout",
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 253,
            "description": "Checks if given event is handled by this ScrollBar.",
            "itemtype": "method",
            "name": "doHandleEvent",
            "params": [
                {
                    "name": "ev",
                    "description": "The event to check.",
                    "type": "JSG.ui.events.Event"
                }
            ],
            "return": {
                "description": "<code>true</code> if ScrollBar handles event, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 264,
            "description": "Handles given mouse event.",
            "itemtype": "method",
            "name": "handleMouseEvent",
            "params": [
                {
                    "name": "ev",
                    "description": "The mouse event to handle.",
                    "type": "JSG.ui.events.MouseEvent"
                }
            ],
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 287,
            "description": "Called when the {{#crossLink \"JSG.ui.scrollview.Thumb\"}}{{/crossLink}} was dragged.<br/>\nNote: this will notify all registered listeners.",
            "itemtype": "method",
            "name": "onThumbDrag",
            "params": [
                {
                    "name": "range",
                    "description": "The ScrollBar range the thumb is part of.",
                    "type": "JSG.ui.scrollview.Thumb"
                },
                {
                    "name": "delta",
                    "description": "The drag amount.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 312,
            "description": "Called on mouse up event on a {{#crossLink \"JSG.ui.scrollview.Arrow\"}}{{/crossLink}} view.<br/>\nNote: this event is not handled.",
            "itemtype": "method",
            "name": "onMouseUp",
            "params": [
                {
                    "name": "arrow",
                    "description": "The arrow view on which the mouse up occurred.",
                    "type": "JSG.ui.scrollview.Arrow"
                }
            ],
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 321,
            "description": "Called on mouse down event on a {{#crossLink \"JSG.ui.scrollview.Arrow\"}}{{/crossLink}} view.<br/>\nNote: this will notify all registered listeners.",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "arrow",
                    "description": "The arrow view on which the mouse down occurred.",
                    "type": "JSG.ui.scrollview.Arrow"
                }
            ],
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 331,
            "description": "Called on mouse click event on a {{#crossLink \"JSG.ui.scrollview.Range\"}}{{/crossLink}} view. A page-up signals that\nthe mouse click was between up/left-{{#crossLink \"JSG.ui.scrollview.Arrow\"}}{{/crossLink}} and {{#crossLink \"JSG.ui.scrollview.Thumb\"}}{{/crossLink}} position.<br/>\nNote: this will notify all registered listeners.",
            "itemtype": "method",
            "name": "onPageUp",
            "params": [
                {
                    "name": "range",
                    "description": "The range view on which the mouse event occurred.",
                    "type": "JSG.ui.scrollview.Range"
                }
            ],
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 342,
            "description": "Called on mouse click event on a {{#crossLink \"JSG.ui.scrollview.Range\"}}{{/crossLink}} view. A page-down signals that\nthe mouse click was between down/right-{{#crossLink \"JSG.ui.scrollview.Arrow\"}}{{/crossLink}} and {{#crossLink \"JSG.ui.scrollview.Thumb\"}}{{/crossLink}} position.<br/>\nNote: this will notify all registered listeners.",
            "itemtype": "method",
            "name": "onPageDown",
            "params": [
                {
                    "name": "range",
                    "description": "The range view on which the mouse event occurred.",
                    "type": "JSG.ui.scrollview.Range"
                }
            ],
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollBar.js",
            "line": 354,
            "description": "Called on RangModel change.",
            "itemtype": "method",
            "name": "onRangeChange",
            "params": [
                {
                    "name": "rangemodel",
                    "description": "The RangeModel which has changed.",
                    "type": "JSG.ui.scrollview.RangeModel"
                }
            ],
            "class": "JSG.ui.scrollview.Mode",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 57,
            "description": "Translates given point from viewport parent coordinate system down to viewport coordinate system.",
            "itemtype": "method",
            "name": "translateFromViewPort",
            "params": [
                {
                    "name": "point",
                    "description": "The point to translate.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The passed and now translated point.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 67,
            "description": "Translates given point from viewport coordinate system up to viewport parent coordnate system.",
            "itemtype": "method",
            "name": "translateToViewPort",
            "params": [
                {
                    "name": "point",
                    "description": "The point to translate.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The passed and now translated point.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 78,
            "description": "Returns the vertical Scrollbar currently used by this ScrollView.",
            "itemtype": "method",
            "name": "getVerticalScrollbar",
            "return": {
                "description": "The currently used vertical Scrollbar.",
                "type": "JSG.ui.scrollview.ScrollBar"
            },
            "since": "1.6.0",
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 89,
            "description": "Returns the horizontal Scrollbar currently used by this ScrollView.",
            "itemtype": "method",
            "name": "getHorizontalScrollbar",
            "return": {
                "description": "The currently used horizontal Scrollbar.",
                "type": "JSG.ui.scrollview.ScrollBar"
            },
            "since": "1.6.0",
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 100,
            "description": "Returns the ViewPanel currently used by this ScrollView.",
            "itemtype": "method",
            "name": "getViewPanel",
            "return": {
                "description": "The currently used ViewPanel.",
                "type": "JSG.ui.scrollview.ViewPanel"
            },
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 109,
            "description": "Sets the new ViewPanel to use.",
            "itemtype": "method",
            "name": "setViewPanel",
            "params": [
                {
                    "name": "viewpanel",
                    "description": "The new ViewPanel.",
                    "type": "JSG.ui.scrollview.ViewPanel"
                }
            ],
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 119,
            "description": "Returns the ViewPort used by this ScrollView.",
            "itemtype": "method",
            "name": "getViewPort",
            "return": {
                "description": "The ViewPort of this ScrollView.",
                "type": "JSG.ui.scrollview"
            },
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 201,
            "description": "Convenience method to set the display mode for both ScrollBars.<br/>\nThis method takes two optional <code>Number</code> parameters. The first one specifies the visibility mode for the horizontal\nscrollbar and the second one the visibility mode of the vertical scrollbar. If no parameter is given both ScrollBars are set \nto <code>AUTO</code> mode and if only a single parameter is defined it determines the visibility mode of both ScrollBars.</br>\nRefer to {{#crossLink \"JSG.ui.scrollview.ScrollBar.Mode\"}}{{/crossLink}} too.",
            "itemtype": "method",
            "name": "setScrollBarsMode",
            "params": [
                {
                    "name": "mode",
                    "description": "Zero, one or two mode constants to specify the ScrollBars visibility.",
                    "type": "Number",
                    "optional": true,
                    "multiple": true
                }
            ],
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 220,
            "description": "Checks if given event happened over one of ScrollViews scrollbars.",
            "itemtype": "method",
            "name": "isScrollBarEvent",
            "params": [
                {
                    "name": "ev",
                    "description": "The event to check.",
                    "type": "JSG.ui.events.Event"
                }
            ],
            "return": {
                "description": "<code>true</code> event happend either of horizontal or vertical scrollbar, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 233,
            "description": "Checks if provided location is inside one of the scrollbars. </br>\nThe optional <code>vertical</code> parameter can be used to check only one scrollbar. I.e. if it \nis set to <code>true</code> only the vertical scrollbar will be tested. If it is set to \n<code>false</code> only the horizontal one is checked and if it is <code>undefined</code> both scrollbars \nare querried.",
            "itemtype": "method",
            "name": "hitsScrollBar",
            "params": [
                {
                    "name": "location",
                    "description": "The location to check.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "vertical",
                    "description": "If set to <code>true</code> only the vertical scrollbar is check, if it is set to \n<code>false</code> only the horizontal one.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "<code>true</code> if given location is within checked scrollbars.",
                "type": "Boolean"
            },
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 256,
            "description": "Checks if given location is within the bounds of provided scrollbar.",
            "itemtype": "method",
            "name": "_hitsScrollBar",
            "params": [
                {
                    "name": "scrollbar",
                    "description": "The scrollbar to check against.",
                    "type": "JSG.ui.scrollview.ScrollBar"
                },
                {
                    "name": "location",
                    "description": "The location to check.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "<code>true</code> if location is inside scrollbar, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 270,
            "description": "Returns the current scroll position as point.",
            "itemtype": "method",
            "name": "getScrollPosition",
            "params": [
                {
                    "name": "reuspoint",
                    "description": "A point to reuse. If not given, a new one will be created.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current scroll position.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 283,
            "description": "Sets the new scroll position to given point.",
            "itemtype": "method",
            "name": "setScrollPositionTo",
            "params": [
                {
                    "name": "scrollpt",
                    "description": "The new scroll position.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 292,
            "description": "Sets the new scroll position to given x and y.",
            "itemtype": "method",
            "name": "setScrollPosition",
            "params": [
                {
                    "name": "x",
                    "description": "The new horizontal scroll position.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The new vertical scroll position.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 303,
            "description": "Scrolls by the amount of given delta in horizontal and vertical direction.",
            "itemtype": "method",
            "name": "scroll",
            "params": [
                {
                    "name": "xDelta",
                    "description": "The amount to scroll in horizontal direction.",
                    "type": "Number"
                },
                {
                    "name": "yDelta",
                    "description": "The amount to scroll in vertical direction.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 324,
            "description": "Called if internal used view panel was resized.",
            "itemtype": "method",
            "name": "onViewPanelResized",
            "params": [
                {
                    "name": "viewpanel",
                    "description": "The ViewPanel which has resized.",
                    "type": "JSG.ui.scrollview.ViewPanel"
                }
            ],
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 335,
            "description": "Handles mouse events, i.e. passes given event to inner scrollbars.",
            "itemtype": "method",
            "name": "handleMouseEvent",
            "params": [
                {
                    "name": "ev",
                    "description": "The mouse event.",
                    "type": "JSG.ui.events.MouseEvent"
                }
            ],
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 358,
            "description": "Handles mouse drag events.",
            "itemtype": "method",
            "name": "handleDragEvent",
            "params": [
                {
                    "name": "ev",
                    "description": "The drag event.",
                    "type": "JSG.ui.events.DragEvent"
                }
            ],
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 375,
            "description": "Checks if given event might be handled by this scroll view.</br>\nSubclasses might overwrite to filter or pass any kinds of events. Default implementation simply checks for event\nlocation.",
            "itemtype": "method",
            "name": "_doHandleEvent",
            "params": [
                {
                    "name": "ev",
                    "description": "The event to check.",
                    "type": "JSG.ui.events.Event"
                }
            ],
            "return": {
                "description": "<code>true</code> to handle event, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 389,
            "description": "Called when the thumb of a scrollbar is dragged.",
            "itemtype": "method",
            "name": "onThumbDrag",
            "params": [
                {
                    "name": "scrollbar",
                    "description": "The scrollbar which thumb is dragged.",
                    "type": "JSG.ui.scrollview.ScrollBar"
                },
                {
                    "name": "newValue",
                    "description": "The new scroll value.",
                    "type": "Number"
                },
                {
                    "name": "delta",
                    "description": "The drag amount.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 400,
            "description": "Called when the up or left arrow button of a scrollbar was pressed.",
            "itemtype": "method",
            "name": "onUp",
            "params": [
                {
                    "name": "scrollbar",
                    "description": "The scrollbar which button was pressed.",
                    "type": "JSG.ui.scrollview.ScrollBar"
                }
            ],
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 410,
            "description": "Determines the new scroll value for a single step in up or left direction.",
            "itemtype": "method",
            "name": "_stepUp",
            "params": [
                {
                    "name": "rangemodel",
                    "description": "The range model to use for calculation.",
                    "type": "JSG.ui.scrollview.RangeModel"
                }
            ],
            "return": {
                "description": "The new scroll value.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 421,
            "description": "Called when the down or right arrow button of a scrollbar was pressed.",
            "itemtype": "method",
            "name": "onDown",
            "params": [
                {
                    "name": "scrollbar",
                    "description": "The scrollbar which button was pressed.",
                    "type": "JSG.ui.scrollview.ScrollBar"
                }
            ],
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 431,
            "description": "Determines the new scroll value for a single step in down or right direction.",
            "itemtype": "method",
            "name": "_stepDown",
            "params": [
                {
                    "name": "rangemodel",
                    "description": "The range model to use for calculation.",
                    "type": "JSG.ui.scrollview.RangeModel"
                }
            ],
            "return": {
                "description": "The new scroll value.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 442,
            "description": "Called on a mouse click within the up or left button and the scrollbar thumb. Signals to scroll about the amount of\na single page.",
            "itemtype": "method",
            "name": "onPageUp",
            "params": [
                {
                    "name": "scrollbar",
                    "description": "The scrollbar which was clicked.",
                    "type": "JSG.ui.scrollview.ScrollBar"
                }
            ],
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 453,
            "description": "Called on a mouse click within the down or right button and the scrollbar thumb. Signals to scroll about the amount \nof a single page.",
            "itemtype": "method",
            "name": "onPageUp",
            "params": [
                {
                    "name": "scrollbar",
                    "description": "The scrollbar which was clicked.",
                    "type": "JSG.ui.scrollview.ScrollBar"
                }
            ],
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 464,
            "description": "Defines the scroll amount of a single page.",
            "itemtype": "method",
            "name": "_pageDelta",
            "params": [
                {
                    "name": "rangemodel",
                    "description": "The range model to use for calculation.",
                    "type": "JSG.ui.scrollview.RangeModel"
                }
            ],
            "return": {
                "description": "The amount to scroll for a single page move.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 477,
            "description": "Called to set new scroll value of the internal RangeModel.<br/>\nThis method can be overwritten by subclasses. E.g. to extend range according to new scroll value. Default implementation \nsimply passes new value given RangeModel.",
            "itemtype": "method",
            "name": "setRangeValue",
            "params": [
                {
                    "name": "rangemodel",
                    "description": "The RangeModel to set the value of.",
                    "type": "JSG.ui.scrollview.RangeModel"
                },
                {
                    "name": "newvalue",
                    "description": "The new scroll value.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ScrollView.js",
            "line": 490,
            "description": "Called when one of the internal used RangeModel has changed.<br/>\nThis method is intended to be overwritten by subclasses. Default implementation does nothing.",
            "itemtype": "method",
            "name": "onRangeChange",
            "params": [
                {
                    "name": "rangemodel",
                    "description": "The RangeModel which has changed.",
                    "type": "JSG.ui.scrollview.RangeModel"
                },
                {
                    "name": "type",
                    "description": "A change type constant which is one of the predefined by RangeModel.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.scrollview.ScrollView",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\Thumb.js",
            "line": 24,
            "description": "Returns the default minimum Thumb size.",
            "itemtype": "method",
            "name": "getMinimumSize",
            "return": {
                "description": "The minimum Thumb size.",
                "type": "Number"
            },
            "class": "JSG.ui.scrollview.Thumb",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\Thumb.js",
            "line": 54,
            "description": "Called when the Thumb is dragged.</br>\nNote: this will call <code>onThumbDrag</code> on its parent.",
            "itemtype": "method",
            "name": "_dragTo",
            "params": [
                {
                    "name": "location",
                    "description": "The new Thumb location.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.scrollview.Thumb",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPanel.js",
            "line": 30,
            "description": "Gets the base or content view attached to this ViewPanel.",
            "itemtype": "method",
            "name": "getView",
            "return": {
                "description": "The current base view.",
                "type": "JSG.ui.View"
            },
            "class": "JSG.ui.scrollview.ViewPanel",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPanel.js",
            "line": 40,
            "description": "Sets a new base or content view to this ViewPanel. This removes a previously attached view.",
            "itemtype": "method",
            "name": "setView",
            "params": [
                {
                    "name": "view",
                    "description": "New base view.",
                    "type": "JSG.ui.View"
                }
            ],
            "class": "JSG.ui.scrollview.ViewPanel",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPanel.js",
            "line": 64,
            "description": "Calculates the preferred bounding Rectangle this view panel needs to draw itself. The optional parameter\ncan be used to give hints to calculation, e.g. to specify the available space.</br>",
            "itemtype": "method",
            "name": "getPreferredBounds",
            "params": [
                {
                    "name": "recthint",
                    "description": "An optional Rectangle to influence calculation.",
                    "type": "JSG.geometry.Rectangle",
                    "optional": true
                },
                {
                    "name": "reuserect",
                    "description": "An optional Rectangle to reuse, if not supplied a new one will be created.",
                    "type": "JSG.geometry.Rectangle",
                    "optional": true
                }
            ],
            "return": {
                "description": "The preferred Rectangle this view panel needs to draw itself.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.ui.scrollview.ViewPanel",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPort.js",
            "line": 42,
            "description": "A global notification send on view-port bounds change.</br>\nRefer to {{#crossLink \"JSG.graph.notifications.NotificationCenter\"}}{{/crossLink}} for more information about notifications.",
            "itemtype": "property",
            "name": "BOUNDS_CHANGED_NOTIFICATION",
            "type": "{String}",
            "static": 1,
            "class": "JSG.ui.scrollview.ViewPort",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPort.js",
            "line": 53,
            "description": "Returns the current ViewPanel of this ViewPort.</br>\nSee {{#crossLink \"JSG.ui.scrollview.ViewPort/setViewPanel:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getViewPanel",
            "return": {
                "description": "The currently used ViewPanel.",
                "type": "JSG.ui.scrollview.ViewPanel"
            },
            "class": "JSG.ui.scrollview.ViewPort",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPort.js",
            "line": 64,
            "description": "Sets the ViewPanel belonging to this ViewPort. The ViewPanel is the content of the viewport and is displayed\nas a subview within the viewport. The view onto the ViewPanel is displayed with an offset defined by the origin.",
            "itemtype": "method",
            "name": "setViewPanel",
            "params": [
                {
                    "name": "panel",
                    "description": "The ViewPanel to set to this viewport.",
                    "type": "JSG.ui.scrollview.ViewPanel"
                }
            ],
            "class": "JSG.ui.scrollview.ViewPort",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPort.js",
            "line": 93,
            "description": "Convenience method to change given RangeModel. This will also check if the <code>newMin</code> and <code>newMax</code> bounds can be applied.",
            "itemtype": "method",
            "name": "setRange",
            "params": [
                {
                    "name": "range",
                    "description": "The RangeModel to change.",
                    "type": "JSG.ui.scrollview.RangeModel"
                },
                {
                    "name": "newMin",
                    "description": "The new range minimum.",
                    "type": "Number"
                },
                {
                    "name": "newMax",
                    "description": "The new range maximum.",
                    "type": "Number"
                },
                {
                    "name": "newExtent",
                    "description": "The new range extent.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.scrollview.ViewPort",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPort.js",
            "line": 117,
            "description": "Returns the current preferred {{#crossLink \"JSG.ui.scrollview.ViewPanel\"}}{{/crossLink}} bounds.",
            "itemtype": "method",
            "name": "getViewPanelBounds",
            "params": [
                {
                    "name": "cArea",
                    "description": "Optional rectangle to give a hint for preferred bounds.",
                    "type": "JSG.geometry.Rectangle",
                    "optional": true
                }
            ],
            "return": {
                "description": "The preferred ViewPanel bounds.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.ui.scrollview.ViewPort",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPort.js",
            "line": 128,
            "description": "Returns the preferred bounds of this view-port. An optional <code>boundshint</code> parameter can be passed. If \nspecified the preferred bounds will at least cover these bounds. This is useful to specify minimum bounds.",
            "itemtype": "method",
            "name": "getPreferredBounds",
            "params": [
                {
                    "name": "boundshint",
                    "description": "Optional rectangle to set minimum preferred bounds.",
                    "type": "JSG.geometry.Rectangle",
                    "optional": true
                },
                {
                    "name": "reuserect",
                    "description": "Optional rectangle to reuse. If not given a new one will be created.",
                    "type": "JSG.geometry.Rectangle",
                    "optional": true
                }
            ],
            "return": {
                "description": "The preferred bounds of this view-port.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.ui.scrollview.ViewPort",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPort.js",
            "line": 153,
            "description": "Returns the internal used offset of inner {{#crossLink \"JSG.ui.scrollview.ViewPanel\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getViewPanelOffset",
            "return": {
                "description": "The inner ViewPanel offset.",
                "type": "JSG.geometry.Point"
            },
            "deprecated": true,
            "deprecationMessage": ". Discouraged access. Subject to be removed!",
            "class": "JSG.ui.scrollview.ViewPort",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPort.js",
            "line": 165,
            "description": "Returns the bounds of currently visible region of registered content view.",
            "itemtype": "method",
            "name": "getVisibleViewRect",
            "params": [
                {
                    "name": "reuserect",
                    "description": "Optional rectangle to reuse. If not given a new one will be created.",
                    "type": "JSG.geometry.Rectangle",
                    "optional": true
                }
            ],
            "return": {
                "description": "The bounds of currently visible region.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.ui.scrollview.ViewPort",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPort.js",
            "line": 179,
            "description": "Returns the currently displayed content, i.e. the view registered to inner {{#crossLink \"JSG.ui.scrollview.ViewPanel\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getContentView",
            "return": {
                "description": "The currently displayed view.",
                "type": "JSG.ui.View"
            },
            "class": "JSG.ui.scrollview.ViewPort",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPort.js",
            "line": 188,
            "description": "Sets the new content, i.e. the view which is registered to inner {{#crossLink \"JSG.ui.scrollview.ViewPanel\"}}{{/crossLink}}.\n<b>Note:<b/> the passed view must provide a <code>setScrollTo(point)</code> method which is called by this view-port\nto set the scroll position to a certain {{#crossLink \"JSG.geometry.Point\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setContentView",
            "params": [
                {
                    "name": "view",
                    "description": "The new view to display.",
                    "type": "JSG.ui.View"
                }
            ],
            "class": "JSG.ui.scrollview.ViewPort",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPort.js",
            "line": 201,
            "description": "Called when the size of inner ViewPanel has changed.",
            "itemtype": "method",
            "name": "onResize",
            "params": [
                {
                    "name": "viewpanel",
                    "description": "The resized ViewPanel.",
                    "type": "JSG.ui.scrollview.ViewPanel"
                }
            ],
            "class": "JSG.ui.scrollview.ViewPort",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPort.js",
            "line": 266,
            "description": "Returns the range model which describes the vertical scroll area.",
            "itemtype": "method",
            "name": "getVerticalRangeModel",
            "return": {
                "description": "The vertical range model.",
                "type": "JSG.ui.scrollview.RangeModel"
            },
            "class": "JSG.ui.scrollview.ViewPort",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPort.js",
            "line": 275,
            "description": "Returns the range model which describes the horizontal scroll area.",
            "itemtype": "method",
            "name": "getHorizontalRangeModel",
            "return": {
                "description": "The horizontal range model.",
                "type": "JSG.ui.scrollview.RangeModel"
            },
            "class": "JSG.ui.scrollview.ViewPort",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPort.js",
            "line": 284,
            "description": "Sets the new range model which describes the vertical scroll area.",
            "itemtype": "method",
            "name": "setVerticalRangeModel",
            "params": [
                {
                    "name": "rangemodel",
                    "description": "The new vertical range model.",
                    "type": "JSG.ui.scrollview.RangeModel"
                }
            ],
            "class": "JSG.ui.scrollview.ViewPort",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPort.js",
            "line": 293,
            "description": "Sets the new range model which describes the horizontal scroll area.",
            "itemtype": "method",
            "name": "setHorizontalRangeModel",
            "params": [
                {
                    "name": "rangemodel",
                    "description": "The new horizontal range model.",
                    "type": "JSG.ui.scrollview.RangeModel"
                }
            ],
            "class": "JSG.ui.scrollview.ViewPort",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPort.js",
            "line": 302,
            "description": "Internal convenience method to apply a new range model and take care of unregistering from old range model and \nregistering to new range model.",
            "itemtype": "method",
            "name": "_setRangeModel",
            "params": [
                {
                    "name": "oldrangemodel",
                    "description": "The old range model to unregister from.",
                    "type": "JSG.ui.scrollview.RangeModel"
                },
                {
                    "name": "newrangemodel",
                    "description": "The new range model to set and to register to.",
                    "type": "JSG.ui.scrollview.RangeModel"
                }
            ],
            "class": "JSG.ui.scrollview.ViewPort",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\scrollview\\ViewPort.js",
            "line": 319,
            "description": "Called when one of the internal used RangeModel has changed.<br/>",
            "itemtype": "method",
            "name": "onRangeChange",
            "params": [
                {
                    "name": "rangemodel",
                    "description": "The RangeModel which has changed.",
                    "type": "JSG.ui.scrollview.RangeModel"
                },
                {
                    "name": "type",
                    "description": "A change type constant which is one of the predefined by RangeModel.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.scrollview.ViewPort",
            "module": "JSG.ui.scrollview",
            "namespace": "JSG.ui.scrollview"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibrary.js",
            "line": 65,
            "description": "Returns the <code>InteractionActivator</code> which is registered for given key at the internally used \n{{#crossLink \"JSG.ui.shapelibrary.ShapeLibraryDefaultInteractionjsg.module.classname\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getInteractionActivator",
            "params": [
                {
                    "name": "key",
                    "description": "The key which references a registered <code>InteractionActivator</code>.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The registered <code>InteractionActivator</code> or <code>undefined</code>.",
                "type": "JSG.graph.interaction.InteractionActivator"
            },
            "class": "JSG.ui.shapelibrary.ShapeLibrary",
            "module": "JSG.ui.shapelibrary",
            "namespace": "JSG.ui.shapelibrary"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibrary.js",
            "line": 78,
            "description": "Returns direct access to internal <code>GraphEditor</code> which is used to display library content.",
            "itemtype": "method",
            "name": "getEditor",
            "return": {
                "description": "The <code>GraphEditor</code> instance used to display library content.",
                "type": "JSG.ui.GraphEditor"
            },
            "since": "1.6.0",
            "class": "JSG.ui.shapelibrary.ShapeLibrary",
            "module": "JSG.ui.shapelibrary",
            "namespace": "JSG.ui.shapelibrary"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibrary.js",
            "line": 89,
            "description": "Add a category to the library. Categories are displayed like a title bar.",
            "itemtype": "method",
            "name": "addCategory",
            "params": [
                {
                    "name": "title",
                    "description": "Title of the category.",
                    "type": "String"
                }
            ],
            "class": "JSG.ui.shapelibrary.ShapeLibrary",
            "module": "JSG.ui.shapelibrary",
            "namespace": "JSG.ui.shapelibrary"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibrary.js",
            "line": 117,
            "description": "Add a shape to the library. A shape is attached to a category. The name is displayed below the shape and the\nimage is used to visualize the shape. The type is used to identify the Node that should be created during \na drag operation.",
            "itemtype": "method",
            "name": "addShape",
            "params": [
                {
                    "name": "type",
                    "description": "Identifier used, when creating the Node during a drag operation. This name will be passed to the \nGraphItemFactory.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "The name will be displayed below the shape image.",
                    "type": "String"
                },
                {
                    "name": "image",
                    "description": "Image to display for the shape.",
                    "type": "String"
                },
                {
                    "name": "category",
                    "description": "Category the shape shall be displayed in.",
                    "type": "String"
                }
            ],
            "class": "JSG.ui.shapelibrary.ShapeLibrary",
            "module": "JSG.ui.shapelibrary",
            "namespace": "JSG.ui.shapelibrary"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibrary.js",
            "line": 154,
            "description": "Needs to be called to layout the library, if a size change occurs.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "New width of library.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "New height of library.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.shapelibrary.ShapeLibrary",
            "module": "JSG.ui.shapelibrary",
            "namespace": "JSG.ui.shapelibrary"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibrary.js",
            "line": 166,
            "description": "Layout the library shapes.",
            "itemtype": "method",
            "name": "layout",
            "params": [
                {
                    "name": "width",
                    "description": "New width of library.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "New height of library.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.shapelibrary.ShapeLibrary",
            "module": "JSG.ui.shapelibrary",
            "namespace": "JSG.ui.shapelibrary"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibraryDefaultInteraction.js",
            "line": 45,
            "description": "Called by InteractionDispatcher on a key up event.",
            "itemtype": "method",
            "name": "onKeyUp",
            "params": [
                {
                    "name": "event",
                    "description": "The current key event.",
                    "type": "JSG.ui.events.KeyEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator belongs.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.ui.shapelibrary.KeyHandler",
            "module": "JSG.ui.shapelibrary",
            "namespace": "JSG.ui.shapelibrary"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\shapelibrary\\ShapeLibraryDefaultInteraction.js",
            "line": 55,
            "description": "Called by InteractionDispatcher on a key down event.",
            "itemtype": "method",
            "name": "onKeyDown",
            "params": [
                {
                    "name": "event",
                    "description": "The current key event.",
                    "type": "JSG.ui.events.KeyEvent"
                },
                {
                    "name": "viewer",
                    "description": "The ControllerViewer used by InteractionHandler.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                },
                {
                    "name": "dispatcher",
                    "description": "The InteractionDispatcher to which this activator belongs.",
                    "type": "JSG.graph.interaction.InteractionDispatcher"
                }
            ],
            "class": "JSG.ui.shapelibrary.KeyHandler",
            "module": "JSG.ui.shapelibrary",
            "namespace": "JSG.ui.shapelibrary"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 56,
            "description": "Call this method if the viewer is no longer used to free up resources.",
            "itemtype": "method",
            "name": "destroy",
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 68,
            "description": "The controller factory to use to create {{#crossLink \"JSG.graph.controller.ModelController\"}}{{/crossLink}}s for a \ngraph model.</br>\nApplications can register their own factory object to create custom controllers. In order to make this work the given\nfactory object must implement following methods:\n<ul>\n\t<li><code>getController(model)</code>, which returns a controller for given {{#crossLink \"JSG.graph.model.Model\"}}{{/crossLink}}</li>\n\t<li><code>createController(model)</code>, which creates a new controller for given {{#crossLink \"JSG.graph.model.Model\"}}{{/crossLink}}</li>\n</ul>\nAs an example for a valid controller factory refer to {{#crossLink \"JSG.graph.controller.GraphControllerFactory\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setControllerFactory",
            "params": [
                {
                    "name": "controllFactory",
                    "description": "The factory object to use to create controllers.",
                    "type": "Object"
                }
            ],
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 85,
            "description": "Returns the currently used controller factory object.</br>\nSee {{#crossLink \"JSG.ui.viewer.ControllerViewer/setControllerFactory:method\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "getControllerFactory",
            "return": {
                "description": "The current controller factory object.",
                "type": "Object"
            },
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 101,
            "description": "Returns the currently displayed graph model.</br>\nNote: only works if content controller is an instance of {{#crossLink \"JSG.graph.controller.GraphController\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getGraph",
            "return": {
                "description": "The displayed graph model or <code>undefined</code>.",
                "type": "JSG.graph.model.Graph"
            },
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 112,
            "description": "Specifies the graph model to display.",
            "itemtype": "method",
            "name": "setGraph",
            "params": [
                {
                    "name": "model",
                    "description": "The graph model to display.",
                    "type": "JSG.graph.model.Graph"
                }
            ],
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 125,
            "description": "Returns the currently specified default controller which was previously set via \n{{#crossLink \"JSG.ui.viewer.ControllerViewer/setDefaultController:method\"}}{{/crossLink}}. If no controller was\nspecified as default before <code>undefined</code> is returned.",
            "itemtype": "method",
            "name": "getDefaultController",
            "return": {
                "description": "The current default controller or <code>undefined</code>.",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 136,
            "description": "Specifies given controller as new default controller which can be accessed via \n{{#crossLink \"JSG.ui.viewer.ControllerViewer/getDefaultController:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setDefaultController",
            "params": [
                {
                    "name": "controller",
                    "description": "The new default controller.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 148,
            "description": "Returns the currently used default interaction.</br>\nRefer to {{#crossLink \"JSG.ui.viewer.ControllerViewer/setDefaultInteraction:method\"}}{{/crossLink}} for more information.",
            "itemtype": "method",
            "name": "getDefaultInteraction",
            "return": {
                "description": "The default interaction to use for this viewer.",
                "type": "JSG.graph.interaction.Interaction"
            },
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 159,
            "description": "Sets the new default interaction for this viewer.<br/> \nA default interaction is the main interaction which is used when no other interaction is currently active. Therefore \nit determines the fundamental behaviour of the viewer. Usually a default interaction is composed of several sub \ninteractions. If this is the case it is a good idea to subclass InteractionDispatcher.<br/>\n<b>Note:</b> a default interaction can provide an <code>initAsDefault(controllerViewer)</code> and a \n<code>disposeAsDefault(controllerViewer)</code> function which are called only on registration and deregistration \nrespectively.",
            "itemtype": "method",
            "name": "setDefaultInteraction",
            "params": [
                {
                    "name": "interaction",
                    "description": "The new default interaction to use.",
                    "type": "JSG.graph.interaction.Interaction"
                }
            ],
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 182,
            "description": "Returns the content controller of current root controller. The content controller defines what is currently displayed\nwithin this viewer. If no content was set <code>undefined</code> is returned.</br>",
            "itemtype": "method",
            "name": "getContent",
            "return": {
                "description": "The content controller or <code>undefined</code>.",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 192,
            "description": "Specifies the new content of current root controller.</br>\nE.g. to display a {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}} model the content controller should can be an\ninstance of {{#crossLink \"JSG.graph.controller.GraphController\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setContent",
            "params": [
                {
                    "name": "controller",
                    "description": "The new root controller content.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 206,
            "description": "Specifies a new root controller.</br>\nThe root controller specifies the content to display within this viewer. E.g. if a viewer displays a \n{{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}} model the root controller should return an instance of\n{{#crossLink \"JSG.graph.controller.GraphController\"}}{{/crossLink}}. Therefore the root controller defines the top of \nthe controller hierarchy and should always be given. By default a {{#crossLink \"JSG.graph.controller.RootController\"}}{{/crossLink}} \nis used.",
            "itemtype": "method",
            "name": "setRootController",
            "params": [
                {
                    "name": "modelController",
                    "description": "The new root controller.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 221,
            "description": "Deactivates given root controller.",
            "itemtype": "method",
            "name": "_deactivate",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to deactivate.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 237,
            "description": "Sets and activated given controller as new root controller.",
            "itemtype": "method",
            "name": "_activate",
            "params": [
                {
                    "name": "controller",
                    "description": "The new root controller.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 249,
            "description": "Returns the currently used root controller.",
            "itemtype": "method",
            "name": "getRootController",
            "return": {
                "description": "The currently used root controller.",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 260,
            "description": "Returns the view of current root controller.",
            "itemtype": "method",
            "name": "getRootView",
            "return": {
                "description": "The root controller view.",
                "type": "JSG.ui.View"
            },
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 271,
            "description": "Returns a suitable controller for the specified location. A suitable controller must fulfill the (optional) given \ncondition function.",
            "itemtype": "method",
            "name": "findControllerAt",
            "params": [
                {
                    "name": "location",
                    "description": "Coordinate point to find controller at.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "flags",
                    "description": "Find logic flag. Depending on the flag, the search algorithm behaves different.",
                    "type": "JSG.graph.controller.FindFlags"
                },
                {
                    "name": "conditionFunc",
                    "description": "Should return <code>true</code> if passed controller is accepted, <code>false</code> otherwise.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A controller or undefined if none is found.",
                "type": "JSG.graph.controller.GraphItemController"
            },
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 284,
            "description": "Returns first controller which fulfills given condition function or <code>undefined</code> if none could be found.</br>\nThe search is solely based on provided condition function, which gets called with a controller and specified\nlocation. The condition should return <code>true</code> if passed controller is valid and to\nstop the search, otherwise <code>false</code>.",
            "itemtype": "method",
            "name": "findControllerByConditionAndLocation",
            "params": [
                {
                    "name": "location",
                    "description": "A location to be passed to condition function.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "condition",
                    "description": "A condition function to check any possible controllers.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A valid controller or <code>undefined</code>",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 298,
            "description": "Returns first controller which fulfills given condition function or <code>undefined</code> if none could be found.</br>\nThe search is solely based on provided condition function, which gets called with a controller and specified\nBoundingBox. The condition should return <code>true</code> if passed controller is valid and to stop the search, \notherwise <code>false</code> to go on.",
            "itemtype": "method",
            "name": "findControllerByConditionAndBox",
            "params": [
                {
                    "name": "box",
                    "description": "A BoundingBox instance to pass to condition function.",
                    "type": "JSG.geometry.BoundingBox"
                },
                {
                    "name": "condition",
                    "description": "A condition function to check any possible controllers.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A valid controller or <code>undefined</code>",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 315,
            "description": "Convenience method to pass new cursor style to the root controller content.<br/>\nSee {{#crossLink \"JSG.ui.Cursor.Style\"}}{{/crossLink}} for predefined style constants.</br>\nNote: only works if content controller is an instance of {{#crossLink \"JSG.graph.controller.GraphController\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setCursor",
            "params": [
                {
                    "name": "cursor",
                    "description": "A cursor style name.",
                    "type": "String"
                }
            ],
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 328,
            "description": "Convenience method to register a feedback view to root controller content.<br/>\nThis should only be called if content is an instance of {{#crossLink \"JSG.graph.controller.GraphController\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "addInteractionFeedback",
            "params": [
                {
                    "name": "view",
                    "description": "The feedback view to register.",
                    "type": "JSG.ui.View"
                }
            ],
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 340,
            "description": "Convenience method to unregister a feedback view from root controller content.<br/>\nThis should only be called if content is an instance of {{#crossLink \"JSG.graph.controller.GraphController\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "removeInteractionFeedback",
            "params": [
                {
                    "name": "view",
                    "description": "The feedback view to unregister.",
                    "type": "JSG.ui.View"
                }
            ],
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 352,
            "description": "Convenience method to remove all registered a feedback views from root controller content.<br/>\nThis should only be called if content is an instance of {{#crossLink \"JSG.graph.controller.GraphController\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "clearInteractionFeedback",
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 363,
            "description": "Convenience method to get the layer with specified from root controller content.<br/>\nFor more information about the layer feature refer to {{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}}.</br>\nThis should only be called if content is an instance of {{#crossLink \"JSG.graph.controller.GraphController\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getLayer",
            "params": [
                {
                    "name": "layerId",
                    "description": "The id of the layer to get the views for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A list of {{#crossLink \"JSG.ui.View\"}}{{/crossLink}}s registered for specified layer.",
                "type": "Array"
            },
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 375,
            "description": "Convenience method to check if root controller content has secified layer.<br/>\nFor more information about the layer feature refer to {{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}}.</br>\nThis should only be called if content is an instance of {{#crossLink \"JSG.graph.controller.GraphController\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "hasLayer",
            "params": [
                {
                    "name": "layerId",
                    "description": "The id of the layer to check for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<code>true</code> if content has a non empty layer registered with specified id, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 387,
            "description": "Convenience method to remove specified layer from root controller content.<br/>\nFor more information about the layer feature refer to {{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}}.</br>\nThis should only be called if content is an instance of {{#crossLink \"JSG.graph.controller.GraphController\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "clearLayer",
            "params": [
                {
                    "name": "layerId",
                    "description": "The id of the layer to remove.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Removed layer as convenience or <code>undefined</code> if no layer with given id was registered before.",
                "type": "Array"
            },
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 399,
            "description": "Convenience method to remove all layers from root controller content.<br/>\nFor more information about the layer feature refer to {{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}}.</br>\nThis should only be called if content is an instance of {{#crossLink \"JSG.graph.controller.GraphController\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "clearAllLayer",
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 413,
            "description": "Translates given point from root controller view.</br>\nThat means that the translation and rotation of root controller view is applied to given point.",
            "itemtype": "method",
            "name": "translateFromParent",
            "params": [
                {
                    "name": "point",
                    "description": "The point to translate.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The given and now translated point as convenience.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 424,
            "description": "Translates given point to root controller view.</br>\nThat means that the translation and rotation of root controller view is applied to given point.",
            "itemtype": "method",
            "name": "translateFromParent",
            "params": [
                {
                    "name": "point",
                    "description": "The point to translate.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "The given and now translated point as convenience.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 435,
            "description": "Translates given point from specified view to the root view of the controller hierarchy.",
            "itemtype": "method",
            "name": "translateToRoot",
            "params": [
                {
                    "name": "point",
                    "description": "The point to translate.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "fromView",
                    "description": "The view to start translation from, inclusively.",
                    "type": "JSG.graph.view.GraphItemView"
                }
            ],
            "return": {
                "description": "The given and now translated point as convenience.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ControllerViewer.js",
            "line": 451,
            "description": "Translates given point from the root view of the controller hierarchy to the specified view.",
            "itemtype": "method",
            "name": "translateFromRoot",
            "params": [
                {
                    "name": "point",
                    "description": "The point to translate.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "toView",
                    "description": "The view to stop translation at.",
                    "type": "JSG.graph.view.GraphItemView"
                }
            ],
            "return": {
                "description": "The given and now translated point as convenience.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.ui.viewer.ControllerViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 54,
            "description": "Returns the currently registered and used <code>GraphicSystem</code>.",
            "itemtype": "method",
            "name": "getGraphicSystem",
            "return": {
                "description": "The GraphicSystem used by this viewer.",
                "type": "JSG.ui.graphics.GraphicSystem"
            },
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 63,
            "description": "Returns the <code>canvas</code> element registered to internal used {{#crossLink \"JSG.ui.graphics.GraphicSystem\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getCanvas",
            "return": {
                "description": "The internal registered <code>canvas</code> element.",
                "type": "Canvas"
            },
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 72,
            "description": "Returns the coordinate system registered to internal used {{#crossLink \"JSG.ui.graphics.GraphicSystem\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getCoordinateSystem",
            "return": {
                "description": "The used coordinate system.",
                "type": "JSG.ui.graphics.CoordinateSystem"
            },
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 81,
            "description": "The currently displayed graph view, which is the view of root controller content.",
            "itemtype": "method",
            "name": "getGraphView",
            "return": {
                "description": "The displayed graph view.",
                "type": "JSG.graph.view.GraphView"
            },
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 90,
            "description": "Returns the root controller content. For a <code>GraphViewer</code> this must be a <code>GraphController</code>.",
            "itemtype": "method",
            "name": "getGraphController",
            "return": {
                "description": "The <code>GraphController</code> of displayed graph.",
                "type": "JSG.graph.controller.GraphController"
            },
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 100,
            "description": "Convenience method to easily get the settings of the displayed Graph. If no Graph\nis registered to this viewer <code>undefined</code> is returned",
            "itemtype": "method",
            "name": "getGraphSettings",
            "return": {
                "description": "The GraphSettings used by displayed Graph or <code>undefined</code>.",
                "type": "JSG.graph.model.settings.GraphSettingstype"
            },
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 112,
            "description": "Convenience method to return a handle of active {{#crossLink \"JSG.graph.view.selection.SelectionView\"}}{{/crossLink}}\nat specified location. The location must be relative to the origin of the root controller content, namely the \n{{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getHandleAt",
            "params": [
                {
                    "name": "point",
                    "description": "The location to look for a handle.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                }
            ],
            "return": {
                "description": "The SelectionHandle at given location or <code>undefined</code>",
                "type": "JSG.graph.view.selection.SelectionHandle"
            },
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 126,
            "description": "Returns the currently used <code>SelectionView</code> which is registered to this viewer.<br/>\n<b>Note:</b> if no selection view was registered before calling this method will create and register the\n{{#crossLink \"JSG.graph.view.selection.SelectionView\"}}{{/crossLink}} as default selection view.",
            "itemtype": "method",
            "name": "getSelectionView",
            "return": {
                "description": "view The current selection view.",
                "type": "JSG.ui.View"
            },
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 140,
            "description": "Registers given selection view to this viewer. If a {{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}} is already\nset, the view will be registered to the GraphView {{#crossLink \"JSG.graph.view.LayerId/SELECTION:property\"}}{{/crossLink}} \nlayer too.",
            "itemtype": "method",
            "name": "setSelectionView",
            "params": [
                {
                    "name": "view",
                    "description": "The new selection view.",
                    "type": "JSG.ui.View"
                }
            ],
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 155,
            "description": "Returns the <code>SelectionProvider</code> used by this viewer.",
            "itemtype": "method",
            "name": "getSelectionProvider",
            "return": {
                "description": "The <code>SelectionProvider</code> used by this viewer.",
                "type": "JSG.graph.view.SelectionProvider"
            },
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 164,
            "description": "Sets the <code>SelectionProvider</code> for this viewer.</br>\nThe viewer will itself register as a selection listener to given <code>SelectionProvider</code> to update internal\nused {{#crossLink \"JSG.graph.view.selection.SelectionView\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setSelectionProvider",
            "params": [
                {
                    "name": "selectionProvider",
                    "description": "The new <code>SelectionProvider</code> for this viewer.",
                    "type": "JSG.graph.view.SelectionProvider"
                }
            ],
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 182,
            "description": "Fulfills the listener interface of {{#crossLink \"JSG.graph.view.SelectionProvider\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "onSelectionChanged",
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 193,
            "description": "Internal method to register given View instance as selection view to inner {{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}}.\nI.e. the view is set as {{#crossLink \"JSG.graph.view.LayerId/SELECTION:property\"}}{{/crossLink}} layer.",
            "itemtype": "method",
            "name": "_registerSelectionView",
            "params": [
                {
                    "name": "view",
                    "description": "The selection view to register.",
                    "type": "JSG.ui.View"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 210,
            "description": "Convenience method to clear selection of internal {{#crossLink \"JSG.graph.view.SelectionProvider\"}}{{/crossLink}}.</br>",
            "itemtype": "method",
            "name": "clearSelection",
            "params": [
                {
                    "name": "notify",
                    "description": "Send notification message. This might not be necessary, if another item is selected directly after the selection is cleared.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 220,
            "description": "Convenience method to mark given controller as selected.</br>\nThe optional <code>selcontext</code> parameter can be used to store additional API or application\ndependent information for this selection. Note: in each case calling this method overwrites an earlier\n<code>selcontext</code> object! Either with a new object or with <code>undefined</code> if no new\n<code>selcontext</code> object is provided.",
            "itemtype": "method",
            "name": "select",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to select.",
                    "type": "JSG.graph.controller.ModelController"
                },
                {
                    "name": "selcontext",
                    "description": "An optional arbitrary selection context object. This overwrites current\nselection context object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 235,
            "description": "Convenience method to deselect given controller.",
            "itemtype": "method",
            "name": "deselect",
            "params": [
                {
                    "name": "controller",
                    "description": "The controller to deselect.",
                    "type": "JSG.graph.controller.ModelController"
                }
            ],
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 244,
            "description": "Convenience method to check if internal {{#crossLink \"JSG.graph.view.SelectionProvider\"}}{{/crossLink}} has any\nselected controllers.</br>",
            "itemtype": "method",
            "name": "hasSelection",
            "return": {
                "description": "<code>true</code> if selected controllers exists, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 254,
            "description": "Convenience method to check if given item is selected, i.e. its corresponding controller is selected.",
            "itemtype": "method",
            "name": "isSelected",
            "params": [
                {
                    "name": "item",
                    "description": "The item to check selection for.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "<code>true</code> item's controller is selected, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 264,
            "description": "Convenience method to return all currently selected controllers of internal {{#crossLink \"JSG.graph.view.SelectionProvider\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getSelection",
            "return": {
                "description": "A list of all selected controllers.",
                "type": "Array"
            },
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 273,
            "description": "Convenience method to set current selection to the list of given controllers.</br>\nThe optional <code>selcontext</code> parameter can be used to store additional API or application\ndependent information for this selection. Note: in each case calling this method overwrites an earlier\n<code>selcontext</code> object! Either with a new object or with <code>undefined</code> if no new\n<code>selcontext</code> object is provided.",
            "itemtype": "method",
            "name": "setSelection",
            "params": [
                {
                    "name": "selectedControllers",
                    "description": "An array of controllers to select.",
                    "type": "Array"
                },
                {
                    "name": "selcontext",
                    "description": "An optional arbitrary selection context object. This overwrites current\nselection context object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 290,
            "description": "Convenience method to specify the overlay view of displayed {{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setOverlayView",
            "params": [
                {
                    "name": "view",
                    "description": "The new overlay view.",
                    "type": "JSG.ui.View"
                }
            ],
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 301,
            "description": "Convenience method to remove current overlay view from displayed {{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "removeOverlayView",
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 313,
            "description": "Convenience method to look up the controller for given item. If no controller could be found <code>undefined</code>\nis returned.",
            "itemtype": "method",
            "name": "findControllerForItem",
            "params": [
                {
                    "name": "item",
                    "description": "The graph item to find the controller for.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "The controller of specified graph item or <code>undefined</code>.",
                "type": "JSG.graph.controller.ModelController"
            },
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\GraphViewer.js",
            "line": 325,
            "description": "Calculates the currently visible graph rectangle.<br/>\nNote: the returned rectangle corresponds to the visible graph region as it would be if it was drawn in \n{{#crossLink \"JSG.ui.graphics.DisplayMode/ENDLESS:property\"}}{{/crossLink}} mode.",
            "itemtype": "method",
            "name": "getVisibleGraphRect",
            "params": [
                {
                    "name": "reuserect",
                    "description": "Optional rectangle to reuse. If not given a new one will be created.",
                    "type": "JSG.geometry.Rectangle",
                    "optional": true
                }
            ],
            "return": {
                "description": "The currently visible graph region.",
                "type": "JSG.geometry.Rectangle"
            },
            "deprecated": true,
            "deprecationMessage": "DON'T USE!! Currently under test...",
            "class": "JSG.ui.viewer.GraphViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 53,
            "description": "Call this whenever the size of the surrounding element has changed.",
            "itemtype": "method",
            "name": "layout",
            "params": [
                {
                    "name": "width",
                    "description": "The new width to use for this viewer.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The new height to use for this viewer.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.viewer.ScrollableViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 81,
            "description": "Returns the internally used <code>ScrollPanel</code>.",
            "itemtype": "method",
            "name": "getScrollPanel",
            "return": {
                "description": "The used <code>ScrollPanel</code>.",
                "type": "JSG.ui.ScrollPanel"
            },
            "class": "JSG.ui.viewer.ScrollableViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 91,
            "description": "Checks if given event occurred on one of the internal used scrollbars.",
            "itemtype": "method",
            "name": "isScrollBarEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The current event to check.",
                    "type": "JSG.ui.events.Event"
                }
            ],
            "return": {
                "description": "<code>true</code> if event occurred on an internal scrollbar, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.ui.viewer.ScrollableViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 138,
            "description": "Sets the new zoom factor.</br>\nNote: this method accepts the predefined zoom factors {{#crossLink \"JSG.ui.GraphEditor/ZOOM_FIT:property\"}}{{/crossLink}},\n{{#crossLink \"JSG.ui.GraphEditor/ZOOM_FITHORZ:property\"}}{{/crossLink}}, and {{#crossLink \"JSG.ui.GraphEditor/ZOOM_FITVERT:property\"}}{{/crossLink}}\nto perform special zoom behavior.",
            "itemtype": "method",
            "name": "setZoom",
            "params": [
                {
                    "name": "factor",
                    "description": "The new zoom to use.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.viewer.ScrollableViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 253,
            "description": "Returns the current zoom factor.",
            "itemtype": "method",
            "name": "getZoom",
            "return": {
                "description": "The current zoom factor.",
                "type": "Number"
            },
            "class": "JSG.ui.viewer.ScrollableViewer",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 283,
            "description": "Call this method if decorator is no longer used to free up resources.",
            "itemtype": "method",
            "name": "destroy",
            "class": "JSG.ui.viewer.ScrollableViewerInteractionDecorator",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 293,
            "description": "Removes the decorated methods from given <code>Interaction</code> and restores original one.",
            "itemtype": "method",
            "name": "_undecorateInteraction",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction to remove decorated methods from.",
                    "type": "JSG.graph.interaction.Interaction"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.viewer.ScrollableViewerInteractionDecorator",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 317,
            "description": "Decorates all {{#crossLink \"JSG.ui.events.MouseEvent\"}}{{/crossLink}} handling methods of given <code>Interaction</code>,\nlike <code>onMouseDown</code>, <code>onMouseMove</code> and so on, with private implementations.",
            "itemtype": "method",
            "name": "decorateInteraction",
            "params": [
                {
                    "name": "interaction",
                    "description": "The interaction to decorate the methods of.",
                    "type": "JSG.graph.interaction.Interaction"
                }
            ],
            "class": "JSG.ui.viewer.ScrollableViewerInteractionDecorator",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 339,
            "description": "Decorates given mouse handling function with specified decoration.",
            "itemtype": "method",
            "name": "_decorate",
            "params": [
                {
                    "name": "func",
                    "description": "The function to decorate.",
                    "type": "Function"
                },
                {
                    "name": "decoration",
                    "description": "The decoration function to call instead.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A new Function object which calls decoration first. The original function is only called if decoration\ndoes not handle mouse event.",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.viewer.ScrollableViewerInteractionDecorator",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 357,
            "description": "Decoration function to handle mouse click.</br>\nChecks if event is handled by one of given viewers scrollbars.",
            "itemtype": "method",
            "name": "_onMouseClick",
            "params": [
                {
                    "name": "event",
                    "description": "The event to check.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "Should be <code>ScrollableViewer</code> itself.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if event was handled, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.viewer.ScrollableViewerInteractionDecorator",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 375,
            "description": "Decoration function to handle mouse move.</br>\nChecks if event is handled by one of given viewers scrollbars.",
            "itemtype": "method",
            "name": "_onMouseMove",
            "params": [
                {
                    "name": "event",
                    "description": "The event to check.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "Should be <code>ScrollableViewer</code> itself.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if event was handled, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.viewer.ScrollableViewerInteractionDecorator",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 393,
            "description": "Decoration function to handle mouse drag.</br>\nChecks if event is handled by one of given viewers scrollbars.",
            "itemtype": "method",
            "name": "_onMouseDrag",
            "params": [
                {
                    "name": "event",
                    "description": "The event to check.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "Should be <code>ScrollableViewer</code> itself.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if event was handled, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.viewer.ScrollableViewerInteractionDecorator",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 409,
            "description": "Decoration function to handle mouse up.</br>\nChecks if event is handled by one of given viewers scrollbars.",
            "itemtype": "method",
            "name": "_onMouseUp",
            "params": [
                {
                    "name": "event",
                    "description": "The event to check.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "Should be <code>ScrollableViewer</code> itself.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if event was handled, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.viewer.ScrollableViewerInteractionDecorator",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 427,
            "description": "Decoration function to handle mouse exit.</br>\nChecks if event is handled by one of given viewers scrollbars.",
            "itemtype": "method",
            "name": "_onMouseExit",
            "params": [
                {
                    "name": "event",
                    "description": "The event to check.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "Should be <code>ScrollableViewer</code> itself.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if event was handled, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.viewer.ScrollableViewerInteractionDecorator",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 442,
            "description": "Decoration function to handle mouse wheel.</br>\nChecks if event is handled by one of given viewers scrollbars.",
            "itemtype": "method",
            "name": "_onMouseWheel",
            "params": [
                {
                    "name": "event",
                    "description": "The event to check.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "Should be <code>ScrollableViewer</code> itself.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if event was handled, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.viewer.ScrollableViewerInteractionDecorator",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 459,
            "description": "Decoration function to handle a did finish event.</br>\nChecks if event is handled by one of given viewers scrollbars.",
            "itemtype": "method",
            "name": "_didFinish",
            "params": [
                {
                    "name": "event",
                    "description": "The event to check.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "Should be <code>ScrollableViewer</code> itself.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "return": {
                "description": "<code>true</code> if event was handled, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.viewer.ScrollableViewerInteractionDecorator",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 472,
            "description": "Returns <code>true</code> if current event is handled by one of viewers scrollbars, <code>false</code> otherwise.",
            "itemtype": "method",
            "name": "_isScrollBarEvent",
            "return": {
                "description": "<code>true</code> if event is handled by a scrollbar, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.viewer.ScrollableViewerInteractionDecorator",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 484,
            "description": "Handles given event which should occurred on a scrollbar. That means that the event is pass it to registered \n{{#crossLink \"JSG.ui.ScrollPanel\"}}{{/crossLink}}.</br>",
            "itemtype": "method",
            "name": "_handleScrollBarEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The current event.",
                    "type": "JSG.ui.events.Event"
                },
                {
                    "name": "viewer",
                    "description": "Should be <code>ScrollableViewer</code> itself.",
                    "type": "JSG.ui.viewer.ControllerViewer"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.viewer.ScrollableViewerInteractionDecorator",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\viewer\\ScrollableViewer.js",
            "line": 499,
            "description": "Marks inner state.",
            "itemtype": "method",
            "name": "_setIsScrollBarEvent",
            "params": [
                {
                    "name": "doIt",
                    "description": "Specify <code>true</code> if event is handled by a scrollbar, <code>false</code> otherwise.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.viewer.ScrollableViewerInteractionDecorator",
            "module": "JSG.ui.viewer",
            "namespace": "JSG.ui.viewer"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 26,
            "description": "Automatic cursor style (usually an arrow).",
            "itemtype": "property",
            "name": "AUTO",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 31,
            "description": "Crosshair cursor style. E.g. used for polygon editing.",
            "itemtype": "property",
            "name": "CROSSHAIR",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 36,
            "description": "Move cursor style.",
            "itemtype": "property",
            "name": "MOVE",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 41,
            "description": "Link cursor style. A hand symbol usually used by visual representations of \n{{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s containing a link.",
            "itemtype": "property",
            "name": "LINK",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 47,
            "description": "Text edit cursor style.",
            "itemtype": "property",
            "name": "TEXT",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 52,
            "description": "Resize cursor style for direction east.",
            "itemtype": "property",
            "name": "RESIZE_E",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 57,
            "description": "Resize cursor style for direction west.",
            "itemtype": "property",
            "name": "RESIZE_W",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 62,
            "description": "Resize cursor style for direction north.",
            "itemtype": "property",
            "name": "RESIZE_N",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 67,
            "description": "Resize cursor style for direction south.",
            "itemtype": "property",
            "name": "RESIZE_S",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 72,
            "description": "Resize cursor style for direction north-east.",
            "itemtype": "property",
            "name": "RESIZE_NE",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 77,
            "description": "Resize cursor style for direction north-west.",
            "itemtype": "property",
            "name": "RESIZE_NW",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 82,
            "description": "Resize cursor style for direction south-east.",
            "itemtype": "property",
            "name": "RESIZE_SE",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 87,
            "description": "Resize cursor style for direction south-west",
            "itemtype": "property",
            "name": "RESIZE_SW",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 92,
            "description": "A small crosshair cursor style.</br>\nNote: custom cursor style.",
            "itemtype": "property",
            "name": "CROSS",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 98,
            "description": "Rotation cursor style.</br>\nNote: custom cursor style. Defaults to {{#crossLink \"JSG.ui.Cursor.Style/MOVE:property\"}}{{/crossLink}} if \nno custom style is present.",
            "itemtype": "property",
            "name": "ROTATION",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 105,
            "description": "Sheet Cursor.</br>\nNote: custom cursor style.",
            "itemtype": "property",
            "name": "SHEET",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 111,
            "description": "Sheet Cursor.</br>\nNote: custom cursor style.",
            "itemtype": "property",
            "name": "SHEETCOLUMN",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 117,
            "description": "Sheet Cursor.</br>\nNote: custom cursor style.",
            "itemtype": "property",
            "name": "SHEETROW",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 123,
            "description": "Sheet Cursor.</br>\nNote: custom cursor style.",
            "itemtype": "property",
            "name": "SHEETCOLUMNSIZE",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 129,
            "description": "Sheet Cursor.</br>\nNote: custom cursor style.",
            "itemtype": "property",
            "name": "SHEETROWSIZE",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 135,
            "description": "Deny action cursor.</br>\nNote: custom cursor style.",
            "itemtype": "property",
            "name": "DENY",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Cursor.js",
            "line": 141,
            "description": "Split action cursor.</br>\nNote: custom cursor style.",
            "itemtype": "property",
            "name": "SPLITV",
            "type": "String",
            "class": "JSG.ui.Style",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 102,
            "description": "A global notification send on display mode change.</br>\nRefer to {{#crossLink \"JSG.ui.GraphEditor/setDisplayMode:method\"}}{{/crossLink}} for more information about display\nmode change and to {{#crossLink \"JSG.graph.notifications.NotificationCenter\"}}{{/crossLink}} for more information about \nnotifications.",
            "itemtype": "property",
            "name": "DISPLAY_MODE_NOTIFICATION",
            "type": "{String}",
            "static": 1,
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 113,
            "description": "A global notification send on zoom level change.</br>\nRefer to {{#crossLink \"JSG.ui.GraphEditor/setZoom:method\"}}{{/crossLink}} for more information about zoom change and\nto {{#crossLink \"JSG.graph.notifications.NotificationCenter\"}}{{/crossLink}} for more information about notifications.",
            "itemtype": "property",
            "name": "ZOOM_NOTIFICATION",
            "type": "{String}",
            "static": 1,
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 126,
            "description": "A predefined zoom factor to perform a zoom to fit.</br>\nThis factor can be passed to {{#crossLink \"JSG.ui.GraphEditor/setZoom:method\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "ZOOM_FIT",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 135,
            "description": "A predefined zoom factor to perform a horizontal zoom to fit.</br>\nThis factor can be passed to {{#crossLink \"JSG.ui.GraphEditor/setZoom:method\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "ZOOM_FITHORZ",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 144,
            "description": "A predefined zoom factor to perform a vertical zoom to fit.</br>\nThis factor can be passed to {{#crossLink \"JSG.ui.GraphEditor/setZoom:method\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "ZOOM_FITVERT",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 155,
            "description": "Creates a ScrollableViewer to use for displaying a graph model.</br>\nThis method can be overwritten by subclasses in order to provide custom viewers. Since this GraphEditor supports\nscrolling the returned viewer must conform to a ScrollableViewer.",
            "itemtype": "method",
            "name": "createViewer",
            "params": [
                {
                    "name": "graphicSystem",
                    "description": "The GraphicSystem to use for drawing and event handling.",
                    "type": "JSG.ui.graphics.GraphicSystem"
                }
            ],
            "return": {
                "description": "A new ScrollableViewer instance.",
                "type": "JSG.ui.viewer.ScrollableViewer"
            },
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 170,
            "description": "Saves the currently displayed graph to XML.</br>\nNote: the graph XML is enclosed by a <code>document</code> tag which has additional attributes for version and zoom.",
            "itemtype": "method",
            "name": "saveXML",
            "return": {
                "description": "The XML representation of displayed graph.",
                "type": "String"
            },
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 194,
            "description": "Reads the given XML document and displays the corresponding graph. The XML document must be conform to the XML\ncreated by {{#crossLink \"JSG.ui.GraphEditor/saveXML:method\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "readXML",
            "params": [
                {
                    "name": "xmlDoc",
                    "description": "The XML representation of the graph to display.",
                    "type": "Document"
                }
            ],
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 276,
            "description": "Saves a single page to <code>SVG</code>.<br/>\nThe page to save is determined by its horizontal and vertical indices.\nTo save the complete graph as SVG use {{#crossLink \"JSG.ui.GraphEditor/saveSVG:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "saveSVGPage",
            "params": [
                {
                    "name": "hPage",
                    "description": "The horizontal page index, starting at 0.",
                    "type": "Number"
                },
                {
                    "name": "vPage",
                    "description": "The vertical page index, starting at 0.",
                    "type": "Number"
                },
                {
                    "name": "forPrint",
                    "description": "Specify <code>true</code> if intention is to print returned SVG.",
                    "type": "Boolean"
                },
                {
                    "name": "rectGraph",
                    "description": "Rectangle of visible graph items.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "return": {
                "description": "The SVG code.",
                "type": "String"
            },
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 390,
            "description": "Saves the complete {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}} to <code>SVG</code>.<br/>\nTo save a single page as SVG use {{#crossLink \"JSG.ui.GraphEditor/saveSVGPage:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "saveSVG",
            "params": [
                {
                    "name": "rectGraph",
                    "description": "Rectangle of visible graph items.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "return": {
                "description": "The SVG code.",
                "type": "String"
            },
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 443,
            "description": "Removes all sub-items of currently displayed graph.",
            "itemtype": "method",
            "name": "clear",
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 455,
            "description": "Returns the ID of internally used canvas element.",
            "itemtype": "method",
            "name": "getCanvasId",
            "return": {
                "description": "The canvas ID.",
                "type": "String"
            },
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 464,
            "description": "Returns the GraphicSystem which is used for drawing and event handling.",
            "itemtype": "method",
            "name": "getGraphicSystem",
            "return": {
                "description": "The used GraphicSystem.",
                "type": "JSG.ui.graphics.GraphicSystem"
            },
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 473,
            "description": "Returns the default interaction of inner {{#crossLink \"JSG.ui.viewer.GraphViewer\"}}{{/crossLink}}. This interaction \ndepends on the currently active view mode.</br>\nSee {{#crossLink \"JSG.ui.GraphEditor/activateViewMode:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getDefaultInteraction",
            "return": {
                "description": "The current default interaction.",
                "type": "JSG.graph.interaction.Interaction"
            },
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 485,
            "description": "Sets and activates the default interaction of inner graph viewer for {{#crossLink \"JSG.graph.model.settings.ViewMode/DEFAULT:property\"}}{{/crossLink}}\nview mode. This replace any previously interaction for the same mode.",
            "itemtype": "method",
            "name": "setDefaultInteraction",
            "params": [
                {
                    "name": "interaction",
                    "description": "The new default interaction to use.",
                    "type": "JSG.graph.interaction.Interaction"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Better use {{#crossLink \"JSG.ui.GraphEditor/activateViewMode:method\"}}{{/crossLink}}!!",
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 503,
            "description": "Sets the new default Interaction which corresponds to given view mode identifier.<br/>\nThe Interaction to be activated can be registered via {{#crossLink \"JSG.ui.GraphEditor/registerInteractionForMode:method\"}}{{/crossLink}}.\nBy default this GraphEditor has an instance of {{#crossLink \"JSG.graph.interaction.GraphInteraction\"}}{{/crossLink}}\nregistered for the {{#crossLink \"JSG.graph.model.settings.ViewMode/DEFAULT:property\"}}{{/crossLink}} mode and an instance \nof {{#crossLink \"JSG.graph.interaction.ReadOnlyInteraction\"}}{{/crossLink}} for the standard \n{{#crossLink \"JSG.graph.model.settings.ViewMode/READ_ONLY:property\"}}{{/crossLink}} view mode.<br/>",
            "itemtype": "method",
            "name": "activateViewMode",
            "params": [
                {
                    "name": "mode",
                    "description": "A view mode identifier to activate.",
                    "type": "String"
                }
            ],
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 528,
            "description": "Returns the Interaction to use for given view mode string.<br/>\nThis method is called by {{#crossLink \"JSG.ui.GraphEditor/activateViewMode:method\"}}{{/crossLink}} to set a new\ndefault interaction depending on given view mode. An interaction for a mode can be registered before via \n{{#crossLink \"JSG.ui.GraphEditor/registerInteractionForMode:method\"}}{{/crossLink}}. If no interaction was registered\nfor given mode the interaction for {{#crossLink \"JSG.graph.model.settings.ViewMode/DEFAULT:property\"}}{{/crossLink}}\nis returned or an instance of {{#crossLink \"JSG.graph.interaction.GraphInteraction\"}}{{/crossLink}} as last resort.<br/>",
            "itemtype": "method",
            "name": "getInteractionForMode",
            "params": [
                {
                    "name": "mode",
                    "description": "The view mode to get the Interaction for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Interaction to set as new default interaction for given mode.",
                "type": "JSG.graph.interaction.Interaction"
            },
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 546,
            "description": "Registers an interaction for a specified view mode. This will replace any previously registered interaction for the\nsame given mode. To activate registered interaction simply call {{#crossLink \"JSG.ui.GraphEditor/activateViewMode\"}}{{/crossLink}}.</br>\nBy default this GraphEditor has an instance of {{#crossLink \"JSG.graph.interaction.GraphInteraction\"}}{{/crossLink}}\nregistered for the {{#crossLink \"JSG.graph.model.settings.ViewMode/DEFAULT:property\"}}{{/crossLink}} mode and an instance \nof {{#crossLink \"JSG.graph.interaction.ReadOnlyInteraction\"}}{{/crossLink}} for the standard \n{{#crossLink \"JSG.graph.model.settings.ViewMode/READ_ONLY:property\"}}{{/crossLink}} view mode.<br/>",
            "itemtype": "method",
            "name": "registerInteractionForMode",
            "params": [
                {
                    "name": "mode",
                    "description": "The view mode to set interaction for.",
                    "type": "String"
                },
                {
                    "name": "interaction",
                    "description": "The interaction to use for given mode.",
                    "type": "JSG.graph.interaction.Interaction"
                }
            ],
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 561,
            "description": "Convenience method to check if the view mode of registered {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}} \nis equal to given mode.",
            "itemtype": "method",
            "name": "isInViewMode",
            "params": [
                {
                    "name": "mode",
                    "description": "The mode identifier to check.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<code>true</code> if registered Graph has same view mode set, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 574,
            "description": "Returns the internally used InteractionHandler.",
            "itemtype": "method",
            "name": "getInteractionHandler",
            "return": {
                "description": "The internal InteractionHandler.",
                "type": "JSG.graph.interaction.InteractionHandler"
            },
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 583,
            "description": "Sets a new InteractionHandler to use.</br>\nThis can be used to replace default InteractionHandler with a custom one.",
            "itemtype": "method",
            "name": "setInteractionHandler",
            "params": [
                {
                    "name": "interactionHandler",
                    "description": "The new InteractionHandler to use.",
                    "type": "JSG.graph.interaction.InteractionHandler"
                }
            ],
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 602,
            "description": "Resizes inner canvas and GraphViewer to specified width and height.",
            "itemtype": "method",
            "name": "resizeContent",
            "params": [
                {
                    "name": "width",
                    "description": "The new width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The new height.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 614,
            "description": "Returns the currently displayed GraphView.",
            "itemtype": "method",
            "name": "getGraphView",
            "return": {
                "description": "The displayed GraphView.",
                "type": "JSG.graph.view.GraphView"
            },
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 623,
            "description": "Returns the currently displayed Graph model.",
            "itemtype": "method",
            "name": "getGraph",
            "return": {
                "description": "The displayed Graph model.",
                "type": "JSG.graph.model.Graph"
            },
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 632,
            "description": "Sets the Graph model to display. This will replace a previously set Graph model.",
            "itemtype": "method",
            "name": "setGraph",
            "params": [
                {
                    "name": "model",
                    "description": "The new Graph model to display.",
                    "type": "JSG.graph.model.Graph"
                }
            ],
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 645,
            "description": "Unregisters internal settings listener from currently displayed graph model.",
            "itemtype": "method",
            "name": "_deregisterGraphListener",
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 658,
            "description": "Registers internal settings listener to currently displayed graph model.",
            "itemtype": "method",
            "name": "_registerGraphListener",
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 672,
            "description": "Returns the internally used GraphViewer which is an instance of ScrollableViewer.",
            "itemtype": "method",
            "name": "getGraphViewer",
            "return": {
                "description": "The GraphViewer used to display a Graph.",
                "type": "JSG.ui.viewer.ScrollableViewer"
            },
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 682,
            "description": "Returns the currently used coordinate system.",
            "itemtype": "method",
            "name": "getCoordinateSystem",
            "return": {
                "description": "The current coordinate system.",
                "type": "JSG.ui.graphics.CoordinateSystem"
            },
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 691,
            "description": "Sets a new coordinate system.",
            "itemtype": "method",
            "name": "setCoordinateSystem",
            "params": [
                {
                    "name": "cs",
                    "description": "The new coordinate system to use.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ],
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 703,
            "description": "Convenience method to set current scroll position of internal {{#crossLink \"JSG.ui.viewer.ScrollableViewer\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setScrollPosition",
            "params": [
                {
                    "name": "hScroll",
                    "description": "The new horizontal scroll position.",
                    "type": "Number"
                },
                {
                    "name": "vScroll",
                    "description": "The new vertical scroll position.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 715,
            "description": "Convenience method to hide or show the scale of internal {{#crossLink \"JSG.ui.viewer.ScrollableViewer\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "showScale",
            "params": [
                {
                    "name": "doIt",
                    "description": "Specify <code>true</code> to show the scale or <code>false</code> to hide it.",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 726,
            "description": "Sets the mode to use for displaying a graph view.</br>\nRefer to {{#crossLink \"JSG.ui.graphics.DisplayMode\"}}{{/crossLink}} for supported modes.",
            "itemtype": "method",
            "name": "setViewMode",
            "params": [
                {
                    "name": "newmode",
                    "description": "The new display mode to use.",
                    "type": "Number"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"JSG.ui.GraphEditor/setDisplayMode:method\"}}{{/crossLink}} instead!",
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 737,
            "description": "Sets the mode to use for displaying a graph view.</br>\nRefer to {{#crossLink \"JSG.ui.graphics.DisplayMode\"}}{{/crossLink}} for supported modes.",
            "itemtype": "method",
            "name": "setDisplayMode",
            "params": [
                {
                    "name": "newmode",
                    "description": "The new display mode to use.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 753,
            "description": "Triggers a layout of the content panel of internal {{#crossLink \"JSG.ui.viewer.ScrollableViewer\"}}{{/crossLink}}.\nNote that calling this method triggers a repaint.",
            "itemtype": "method",
            "name": "layout",
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 764,
            "description": "Invalidates this GraphEditor.</br>\nBy invalidating the editor its currently displayed {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}} model is marked \nas dirty and its internal {{#crossLink \"JSG.ui.viewer.ScrollableViewer\"}}{{/crossLink}} is asked to layout itself. \nNote that calling this method triggers a repaint.",
            "itemtype": "method",
            "name": "invalidate",
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 777,
            "description": "Performs a layout of inner {{#crossLink \"JSG.ui.viewer.ScrollableViewer\"}}{{/crossLink}}.</br>\nThis method is called on invalidate.",
            "itemtype": "method",
            "name": "_updateLayout",
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 790,
            "description": "Convenience method to perform a paint request to inner {{#crossLink \"JSG.ui.graphics.GraphicSystem\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "repaint",
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 799,
            "description": "Returns the currently displayed area of inner {{#crossLink \"JSG.ui.viewer.ScrollableViewer\"}}{{/crossLink}}.</br>",
            "itemtype": "method",
            "name": "getVisibleGraphRect",
            "params": [
                {
                    "name": "reuserect",
                    "description": "Optional rectangle to reuse. If not given a new one will be created.",
                    "type": "JSG.geometry.Rectangle",
                    "optional": true
                }
            ],
            "return": {
                "description": "The currently displayed graph area.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 811,
            "description": "Convenience method to access to settings of currently displayed {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}} model.",
            "itemtype": "method",
            "name": "getGraphSettings",
            "return": {
                "description": "The settings of currently displayed graph.",
                "type": "JSG.graph.model.settings.GraphSettings"
            },
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 822,
            "description": "Returns the SelectionProvider instance used to handle {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} selection.",
            "itemtype": "method",
            "name": "getSelectionProvider",
            "return": {
                "description": "The SelectionProvider used to handle GraphItem selection.",
                "type": "JSG.graph.view.SelectionProvider"
            },
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 832,
            "description": "Convenience method to set the new zoom factor of inner GraphViewer.</br>\nNote: this method accepts the predefined zoom factors like <code>ZOOM_FIT</code>, <code>ZOOM_FITHORZ</code> or \n<code>ZOOM_FITVERT</code> to perform special zoom behavior.",
            "itemtype": "method",
            "name": "setZoom",
            "params": [
                {
                    "name": "factor",
                    "description": "The new zoom to use.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 844,
            "description": "Convenience method to return the current zoom factor of inner GraphViewer.",
            "itemtype": "method",
            "name": "getZoom",
            "return": {
                "description": "The current zoom factor.",
                "type": "Number"
            },
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphEditor.js",
            "line": 854,
            "description": "This method should be called when this GraphEditor is no longer needed to release used resources.",
            "itemtype": "method",
            "name": "destroy",
            "class": "JSG.ui.GraphEditor",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphViewPanel.js",
            "line": 35,
            "description": "Triggers a paint request to the GraphicSystem of internal used viewer.",
            "itemtype": "method",
            "name": "_repaint",
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.GraphViewPanel",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\GraphViewPanel.js",
            "line": 63,
            "description": "Calculates the bounds of given graph view.</br>\nNote: the bounds depend on current display mode settings and are therefore not necessarily the same as the bounds of \nthe corresponding {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}} model.</br>\nFor more information about supported display modes refer to {{#crossLink \"JSG.graph.model.settings.GraphSettings\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "_getViewBounds",
            "params": [
                {
                    "name": "view",
                    "description": "The graph view to calculate the bounds of.",
                    "type": "JSG.graph.view.GraphView"
                },
                {
                    "name": "reuserect",
                    "description": "An optional rectangle to reuse, if not given a new one will be created.",
                    "type": "JSG.geometry.Rectangle",
                    "optional": true
                }
            ],
            "return": {
                "description": "The view bounds.",
                "type": "JSG.geometry.Rectangle"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.GraphViewPanel",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Scale.js",
            "line": 36,
            "description": "Gets current scale visibility.</br>\nNote: returned value corresponds to the current property value in {{#crossLink \"JSG.graph.model.settings.GraphSettings\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "<code>true</code>, if scale is visible, otherwise <code>false</code>.",
                "type": "Boolean"
            },
            "class": "JSG.ui.Scale",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Scale.js",
            "line": 47,
            "description": "Sets the scale visible flag.</br>\nNote: this will change corresponding property value in {{#crossLink \"JSG.graph.model.settings.GraphSettings\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "setVisible",
            "params": [
                {
                    "name": "doIt",
                    "description": "Specify <code>true</code> to show scale or <code>false</code> to hide it.",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.ui.Scale",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Scale.js",
            "line": 62,
            "description": "Gets Scale height.",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "Height in logical units not zoomed.",
                "type": "Number"
            },
            "class": "JSG.ui.Scale",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Scale.js",
            "line": 72,
            "description": "Gets Scale width.",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "Width in logical units not zoomed.",
                "type": "Number"
            },
            "class": "JSG.ui.Scale",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Scale.js",
            "line": 82,
            "description": "Implements the contract for a {{#crossLink \"JSG.ui.scrollview.RangeModel\"}}{{/crossLink}} observer.</br>\nThis will simply update the inner scroll position of this Scale.",
            "itemtype": "method",
            "name": "onRangeChange",
            "params": [
                {
                    "name": "range",
                    "description": "The RangeModel which has changed.",
                    "type": "JSG.ui.scrollview.RangeModel"
                },
                {
                    "name": "type",
                    "description": "A change type constant which is one of the predefined by RangeModel.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.Scale",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Scale.js",
            "line": 96,
            "description": "Draws the Scale content depending on current scroll position and display mode settings.",
            "itemtype": "method",
            "name": "drawBackground",
            "params": [
                {
                    "name": "graphics",
                    "description": "Graphics to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.ui.Scale",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Scale.js",
            "line": 141,
            "description": "Draws a horizontal Scale.",
            "itemtype": "method",
            "name": "drawHorizontal",
            "params": [
                {
                    "name": "graphics",
                    "description": "Graphics to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                },
                {
                    "name": "context",
                    "description": "The internally used drawing context which provides additional information.",
                    "type": "Object"
                }
            ],
            "class": "JSG.ui.Scale",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Scale.js",
            "line": 224,
            "description": "Draws a vertical Scale.",
            "itemtype": "method",
            "name": "drawVertical",
            "params": [
                {
                    "name": "graphics",
                    "description": "Graphics to use for drawing.",
                    "type": "JSG.ui.graphics.Graphics"
                },
                {
                    "name": "context",
                    "description": "The internally used drawing context which provides additional information.",
                    "type": "Object"
                }
            ],
            "class": "JSG.ui.Scale",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\ScrollPanel.js",
            "line": 40,
            "description": "A global notification send on scroll events.",
            "itemtype": "property",
            "name": "SCROLL_NOTIFICATION",
            "type": "{String}",
            "static": 1,
            "class": "JSG.ui.ScrollPanel",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\ScrollPanel.js",
            "line": 51,
            "description": "Determines and returns the bounds of the currently visible {{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}} region.",
            "itemtype": "method",
            "name": "getVisibleGraphRect",
            "params": [
                {
                    "name": "reuserect",
                    "description": "Optional rectangle to reuse. If not given a new one will be created.",
                    "type": "JSG.geometry.Rectangle",
                    "optional": true
                }
            ],
            "return": {
                "description": "The bounds of currently visible region.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.ui.ScrollPanel",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\ScrollPanel.js",
            "line": 94,
            "description": "Returns direct access to internal horizontal scrollbar.",
            "itemtype": "method",
            "name": "getHorizontalScrollBar",
            "return": {
                "description": "The horizontal scrollbar.",
                "type": "JSG.ui.scrollview.ScrollBar"
            },
            "deprecated": true,
            "deprecationMessage": ". Discouraged access. Subject to be removed!",
            "class": "JSG.ui.ScrollPanel",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\ScrollPanel.js",
            "line": 105,
            "description": "Returns direct access to internal vertical scrollbar.",
            "itemtype": "method",
            "name": "getVerticalScrollBar",
            "return": {
                "description": "The vertical scrollbar.",
                "type": "JSG.ui.scrollview.ScrollBar"
            },
            "deprecated": true,
            "deprecationMessage": ". Discouraged access. Subject to be removed!",
            "class": "JSG.ui.ScrollPanel",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\ScrollPanel.js",
            "line": 118,
            "description": "Shows or hides horizontal and vertical scales.",
            "itemtype": "method",
            "name": "showScale",
            "params": [
                {
                    "name": "flag",
                    "description": "Specify <code>true</code> to show horizontal and vertical scales, <code>false</code> otherwise.",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.ui.ScrollPanel",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 58,
            "description": "Creates a deep copy of this view.</br>\nNote: deep copy means that all registered sub-views are copied too.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "A copy of this view.",
                "type": "JSG.ui.View"
            },
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 76,
            "description": "Creates a new view instance. This method is part of our copy pattern.",
            "itemtype": "method",
            "name": "newInstance",
            "return": {
                "description": "A new view instance.",
                "type": "JSG.ui.View"
            },
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 86,
            "description": "Returns the parent view of this view.",
            "itemtype": "method",
            "name": "getParent",
            "return": {
                "description": "The parent view of this view.",
                "type": "JSG.ui.View"
            },
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 96,
            "description": "Adds a sub-view to this view at specified index.",
            "itemtype": "method",
            "name": "addView",
            "params": [
                {
                    "name": "view",
                    "description": "View to add as a sub-view.",
                    "type": "JSG.ui.View"
                },
                {
                    "name": "index",
                    "description": "An optional position index within in the sub-views list. If not supplied, the\nview will be added to the end of the list.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "View, that was added.",
                "type": "JSG.ui.View"
            },
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 116,
            "description": "Removes given view from the sub-views list.",
            "itemtype": "method",
            "name": "removeView",
            "params": [
                {
                    "name": "view",
                    "description": "View to remove.",
                    "type": "JSG.ui.View"
                }
            ],
            "return": {
                "description": "<code>true</code> if view was removed otherwise <code>false</code>",
                "type": "Boolean"
            },
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 127,
            "description": "Removes all registered sub-views.",
            "itemtype": "method",
            "name": "removeAllViews",
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 136,
            "description": "Checks, if this view has any sub-views.",
            "itemtype": "method",
            "name": "hasSubviews",
            "return": {
                "description": "<code>true</code> if this view has at least on sub-view, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 147,
            "description": "Returns all currently registered sub-views.</br>\n<b>Note:</b> although this method grants direct access to inner list of sub-views it is not \nrecommended to change this list directly.",
            "itemtype": "method",
            "name": "getSubviews",
            "return": {
                "description": "The list of all currently added sub-views.",
                "type": "Array"
            },
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 159,
            "description": "Returns the sub-view at given index or <code>undefined</code> if index is not valid.",
            "itemtype": "method",
            "name": "getSubViewAt",
            "params": [
                {
                    "name": "index",
                    "description": "Index of desired sub-view.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The sub-view at index or <code>undefined</code>.",
                "type": "JSG.ui.View"
            },
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 170,
            "description": "Returns the number of sub views.",
            "itemtype": "method",
            "name": "getSubViewCount",
            "return": {
                "description": "Number of sub views.",
                "type": "Number"
            },
            "since": "1.6.2",
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 181,
            "description": "Invalidates this view, i.e. its valid state is set to <code>false</code>.</br>\nAdditionally layout() is called on this view and on all of its sub-views. Note: if layout is not required it is better\nto call {{#crossLink \"JSG.ui.View/setValid:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "invalidate",
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 198,
            "description": "Calls invalidate on this view and revalidates its parent if this view has one.</br>\nNote: if the layout step on invalidate is not required it is better to call {{#crossLink \"JSG.ui.View/setValid:method\"}}{{/crossLink}}. \nIn this case revalidation of parent must be done manually.",
            "itemtype": "method",
            "name": "revalidate",
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 212,
            "description": "Validates this view and all of its sub-views if it is marked as invalid.</br>\nNote: {{#crossLink \"JSG.ui.View/relayout:method\"}}{{/crossLink}} will be called. If this is not wanted it is better\nto call {{#crossLink \"JSG.ui.View/setValid:method\"}}{{/crossLink}}. In this case the validation of registered sub-views\nmust be done manually.",
            "itemtype": "method",
            "name": "validate",
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 230,
            "description": "In contrast to {{#crossLink \"JSG.ui.View/layout:method\"}}{{/crossLink}}, which is called by \n{{#crossLink \"JSG.ui.View/invalidate:method\"}}{{/crossLink}}, relayout is called during validation by \n{{#crossLink \"JSG.ui.View/validate:method\"}}{{/crossLink}}.</br>\nNote: this method is intended to be overwritten by subclasses. Default implementation does nothing.",
            "itemtype": "method",
            "name": "relayout",
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 241,
            "description": "Sets this view state to valid if <code>true</code> is passed, to <code>false</code> otherwise.</br>\nUse this method in favor of {{#crossLink \"JSG.ui.View/invalidate:method\"}}{{/crossLink}} or \n{{#crossLink \"JSG.ui.View/revalidate:method\"}}{{/crossLink}} if additional layout is not required.",
            "itemtype": "method",
            "name": "setValid",
            "params": [
                {
                    "name": "doIt",
                    "description": "Specify <code>true</code> if this view is in valid state, <code>false</code> otherwise.",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 253,
            "description": "Returns the current valid state of this view.",
            "itemtype": "method",
            "name": "isValid",
            "return": {
                "description": "<code>true</code> if this view is in valid state, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 264,
            "description": "Checks if this view is visible.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "<code>true</code> if view is visible, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 274,
            "description": "Sets the visible flag for this view.",
            "itemtype": "method",
            "name": "setVisible",
            "params": [
                {
                    "name": "doIt",
                    "description": "Specify <code>true</code> to show view or <code>false</code> to hide it.",
                    "type": "Boolean"
                }
            ],
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 284,
            "description": "Gets the BoundingBox of this view.</br>\nNote: this method must be overwritten by subclasses. The generic view does not have its own coordinates. Therefore\nthe default implementation returns <code>undefined</code>!",
            "itemtype": "method",
            "name": "getBoundingBox",
            "return": {
                "description": "The BoundingBox of this view.",
                "type": "JSG.geometry.BoundingBox"
            },
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 296,
            "description": "Returns the rotation angle of this view in radiant.</br> \nThis method can be overwritten by subclasses. Default implementation simply returns 0.",
            "itemtype": "method",
            "name": "getAngle",
            "return": {
                "description": "Rotation angle in radiant.",
                "type": "Number"
            },
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 307,
            "description": "Checks if given point is within this view.</br>\nNote: this method is intended to be overwritten by subclasses. Default implementation simply returns <code>false</code>.",
            "itemtype": "method",
            "name": "containsPoint",
            "params": [
                {
                    "name": "point",
                    "description": "Point to check for.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "findFlag",
                    "description": "Find logic flag.",
                    "type": "JSG.graph.controller.FindFlags"
                }
            ],
            "return": {
                "description": "<code>true</code> if view contains given point, <code>false</code> otherwise..",
                "type": "Boolean"
            },
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 320,
            "description": "Layouts this view.</br>\nNote: this method is intended to be overwritten by subclasses. Default implementation does nothing.",
            "itemtype": "method",
            "name": "layout",
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 329,
            "description": "Draws this view using given graphics.</br>\nNote: this method is intended to be overwritten by subclasses. Default implementation does nothing.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "graphics",
                    "description": "Graphics class to use for generating output.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 340,
            "description": "Draws the sub views of this view using given graphics.</br>\nThis simply calls {{#crossLink \"JSG.ui.View/draw:method\"}}{{/crossLink}} on each registered sub-view.",
            "itemtype": "method",
            "name": "drawSubViews",
            "params": [
                {
                    "name": "graphics",
                    "description": "Graphics class to use for generating output.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 354,
            "description": "Translates a point from the parent coordinate system.</br>\nNote: this method is intended to be overwritten by subclasses. Default implementation does nothing.",
            "itemtype": "method",
            "name": "translateFromParent",
            "params": [
                {
                    "name": "point",
                    "description": "Point to translate.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "Given and now translated point as convenience.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 366,
            "description": "Translates a point to the parent coordinate system.</br>\nNote: this method is intended to be overwritten by subclasses. Default implementation does nothing.",
            "itemtype": "method",
            "name": "translateToParent",
            "params": [
                {
                    "name": "point",
                    "description": "Point to translate.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "Given and now translated point as convenience.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 378,
            "description": "Called by the system to handle mouse events.</br>\nNote: subclasses can overwrite this method to handle mouse events. Default implementation simply passes given event \nto all registered sub-views.",
            "itemtype": "method",
            "name": "handleMouseEvent",
            "params": [
                {
                    "name": "ev",
                    "description": "Event info class.",
                    "type": "JSG.ui.events.MouseEvent"
                }
            ],
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 393,
            "description": "Called by the system to handle drag and drop events.</br>\nNote: subclasses can overwrite this method to handle drag and drop events. Default implementation simply passes given\nevent to all registered sub-views. Traversal of sub-views is stopped if event was consumed.",
            "itemtype": "method",
            "name": "handleDragEvent",
            "params": [
                {
                    "name": "ev",
                    "description": "Event info class.",
                    "type": "JSG.ui.events.DragEvent"
                }
            ],
            "return": {
                "description": "<code>true</code> if event is consumed by this view or <code>false</code> if not.",
                "type": "Boolean"
            },
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 411,
            "description": "Called by the system to handle key events.</br>\nNote: subclasses can overwrite this method to handle key events. Default implementation simply passes given event \nto all registered sub-views. Traversal of sub-views is stopped if event was consumed.",
            "itemtype": "method",
            "name": "handleKeyEvent",
            "params": [
                {
                    "name": "ev",
                    "description": "Event info class.",
                    "type": "JSG.ui.events.KeyEvent"
                }
            ],
            "return": {
                "description": "<code>true</code> if event is consumed by this view or <code>false</code> if not.",
                "type": "Boolean"
            },
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 429,
            "description": "Adds a resize listener to this view. The resize listener will be called, if the view is resized. A resize listener\ncan be any class that contains a <code>onResize(view)</code> method which is called with this view as parameter.",
            "itemtype": "method",
            "name": "addResizeListener",
            "params": [
                {
                    "name": "listener",
                    "description": "Any class that contains a <code>onResize(view)</code> method..",
                    "type": "Object"
                }
            ],
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 440,
            "description": "Remove a resize listener from this view.",
            "itemtype": "method",
            "name": "removeResizeListener",
            "params": [
                {
                    "name": "listener",
                    "description": "Class that was previously added as a resize listener.",
                    "type": "Object"
                }
            ],
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 450,
            "description": "Fires an <code>onResize(view)</code> event to all registered resize listeners.",
            "itemtype": "method",
            "name": "_fireOnResize",
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 463,
            "description": "Gets the index position of this view within the sub-views list of its parent.</br>\nNote: <code>-1</code> is returned if this view has no parent or is not correctly registered to it.",
            "itemtype": "method",
            "name": "getIndex",
            "return": {
                "description": "Position of view in parents sub view list.",
                "type": "Number"
            },
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 474,
            "description": "Moves this view within the sub-views list of its parent to specified index position.",
            "itemtype": "method",
            "name": "moveToIndex",
            "params": [
                {
                    "name": "newIndex",
                    "description": "New position.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 485,
            "description": "Moves this view to the last position of the sub-views list of its parent.",
            "itemtype": "method",
            "name": "moveToTop",
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 495,
            "description": "Moves this view one position up within the sub-views list of its parent.",
            "itemtype": "method",
            "name": "moveUp",
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 507,
            "description": "Moves this view to the first position of the sub-views list of its parent.",
            "itemtype": "method",
            "name": "moveToBottom",
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\View.js",
            "line": 517,
            "description": "Moves this view one position down within the sub-views list of its parent.",
            "itemtype": "method",
            "name": "moveDown",
            "class": "JSG.ui.View",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 27,
            "description": "Adds a sub-widget to this widget.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "widget",
                    "description": "Widget to add.",
                    "type": "JSG.ui.Widget"
                }
            ],
            "return": {
                "description": "The added widget as convenience.",
                "type": "JSG.ui.Widget"
            },
            "class": "JSG.ui.Widget",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 38,
            "description": "Removes a sub-widget from this widget.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "widget",
                    "description": "Widget to remove.",
                    "type": "JSG.ui.Widget"
                }
            ],
            "class": "JSG.ui.Widget",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 48,
            "description": "Get the bounds of the widget.",
            "itemtype": "method",
            "name": "getBounds",
            "params": [
                {
                    "name": "reuserect",
                    "description": "Optional rectangle that can be used to be filled with the bounds.",
                    "type": "JSG.geometry.Rectangle",
                    "optional": true
                }
            ],
            "return": {
                "description": "Current bounds of the widget.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.ui.Widget",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 61,
            "description": "Get the client area of the widget. The client area is the internal rectangle of the widget. The origin is always placed at the 0, 0 coordinate.",
            "itemtype": "method",
            "name": "getClientArea",
            "params": [
                {
                    "name": "reuserect",
                    "description": "Optional rectangle that can be used to be filled with the client area.",
                    "type": "JSG.geometry.Rectangle",
                    "optional": true
                }
            ],
            "return": {
                "description": "Current client area of the widget.",
                "type": "JSG.geometry.Rectangle"
            },
            "class": "JSG.ui.Widget",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 75,
            "description": "Get the location or origin of the widget within its parent",
            "itemtype": "method",
            "name": "getLocation",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "Point that can be used to copy the information to.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "Current location within parent",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.ui.Widget",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 88,
            "description": "Get the size the widget.",
            "itemtype": "method",
            "name": "getSize",
            "params": [
                {
                    "name": "reusepoint",
                    "description": "Point that can be used to copy the information to.",
                    "type": "JSG.geometry.Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "Current size of the widget.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.ui.Widget",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 100,
            "description": "Get current format definition. The format is used to determine the visual representation of this widget, like\nbackground color or border style for example.",
            "itemtype": "method",
            "name": "getFormat",
            "return": {
                "description": "Format definition class.",
                "type": "JSG.graph.attr.FormatAttributes"
            },
            "class": "JSG.ui.Widget",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 113,
            "description": "Set the bounds of the widget within its parent.",
            "itemtype": "method",
            "name": "setBounds",
            "params": [
                {
                    "name": "x",
                    "description": "X-Position.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y-Position.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Width of the widget.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Height of the widget.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.Widget",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 127,
            "description": "Set the bounds of the widget within its parent.",
            "itemtype": "method",
            "name": "setBoundsTo",
            "params": [
                {
                    "name": "rect",
                    "description": "New bounds.",
                    "type": "JSG.geometry.Rectangle"
                }
            ],
            "class": "JSG.ui.Widget",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 137,
            "description": "Set the location or origin of the widget within its parent",
            "itemtype": "method",
            "name": "setLocation",
            "params": [
                {
                    "name": "x",
                    "description": "X-Position.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y-Position.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.Widget",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 148,
            "description": "Set the location or origin of the widget within its parent",
            "itemtype": "method",
            "name": "setLocation",
            "params": [
                {
                    "name": "point",
                    "description": "New position.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.ui.Widget",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 158,
            "description": "Internal method to set widget location.",
            "itemtype": "method",
            "name": "_setLocation",
            "params": [
                {
                    "name": "x",
                    "description": "The new x position.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The new y position.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.Widget",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 171,
            "description": "Set the size of the widget.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "Width of the widget.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Height of the widget.",
                    "type": "Number"
                }
            ],
            "class": "JSG.ui.Widget",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 182,
            "description": "Set the size of the widget.",
            "itemtype": "method",
            "name": "setSizeTo",
            "params": [
                {
                    "name": "size",
                    "description": "New size.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "class": "JSG.ui.Widget",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 192,
            "description": "Internal method to set widget size.",
            "itemtype": "method",
            "name": "_setSize",
            "params": [
                {
                    "name": "w",
                    "description": "The new width.",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "The new height.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSG.ui.Widget",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 207,
            "description": "Translate the given coordinate from a coordinate within the parent view to a corresponding coordinate of this view.",
            "itemtype": "method",
            "name": "translateFromParent",
            "params": [
                {
                    "name": "point",
                    "description": "Coordinate to translate.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "Given and now translated point as convenience.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.ui.Widget",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 219,
            "description": "Translate the given coordinate from a coordinate within this view to a corresponding coordinate of the parent view.",
            "itemtype": "method",
            "name": "translateToParent",
            "params": [
                {
                    "name": "point",
                    "description": "Coordinate to translate.",
                    "type": "JSG.geometry.Point"
                }
            ],
            "return": {
                "description": "Given and now translated point as convenience.",
                "type": "JSG.geometry.Point"
            },
            "class": "JSG.ui.Widget",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 231,
            "description": "Draws this widget. Subclasses should not overwrite this method, but instead implement drawBackground, drawClientArea or drawBorder.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "graphics",
                    "description": "Graphics to use for output.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.ui.Widget",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 256,
            "description": "Draws the background of this widget. By default the background is filled with a white rectangle.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "graphics",
                    "description": "Graphics to use for output.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.ui.Widget",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 268,
            "description": "Draws the client area of this widget. By default all sub-views of this widget are drawn within the client area.",
            "itemtype": "method",
            "name": "drawClientArea",
            "params": [
                {
                    "name": "graphics",
                    "description": "Graphics to use for output.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.ui.Widget",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\ui\\Widget.js",
            "line": 284,
            "description": "Draws the border of this widget. By default a black frame is drawn, if the line style of the format is not set to invisible.",
            "itemtype": "method",
            "name": "drawBorder",
            "params": [
                {
                    "name": "graphics",
                    "description": "Graphics to use for output.",
                    "type": "JSG.ui.graphics.Graphics"
                }
            ],
            "class": "JSG.ui.Widget",
            "module": "JSG.ui",
            "namespace": "JSG.ui"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 45,
            "description": "The minimum size for {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s. The default value is 50.</br>\nIf this is set to a negative value the minimum size will be ignored.",
            "itemtype": "property",
            "name": "MIN_WIDTH_HEIGHT",
            "type": "{Number}",
            "static": 1,
            "class": "JSG.JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 55,
            "description": "Image Pool for image objects used in patterns.",
            "itemtype": "property",
            "name": "imagePool",
            "type": "{JSG.commons.ImagePool}",
            "static": 1,
            "class": "JSG.JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 63,
            "description": "A global TemplateStore instance to manage defined templates.",
            "itemtype": "property",
            "name": "TemplateStore",
            "type": "{JSG.graph.attr.TemplateStore}",
            "static": 1,
            "class": "JSG.JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 72,
            "description": "Cache for font metrics.",
            "itemtype": "property",
            "name": "fontMetricsCache",
            "type": "{JSG.commons.Map}",
            "static": 1,
            "class": "JSG.JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 80,
            "description": "Store copyied items. The store is an XML String with a saved representation of the selected GraphItems",
            "itemtype": "property",
            "name": "clipXML",
            "type": "{String}",
            "static": 1,
            "class": "JSG.JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 87,
            "description": "Offset for next paste operation",
            "itemtype": "property",
            "name": "clipOffset",
            "type": "{JSG.geometry.Point} Offset to use, when inserting items after a paste operation.",
            "static": 1,
            "class": "JSG.JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 94,
            "description": "Store for copied format. This property holds a Format class, representing the format collected from a Copy Format command.",
            "itemtype": "property",
            "name": "clipFormat",
            "type": "{JSG.graph.attr.FormatAttributes}",
            "static": 1,
            "class": "JSG.JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 101,
            "description": "Store for copied format. This property holds an instance of TextFormatAttributes, representing the format collected from a Copy Format command.",
            "itemtype": "property",
            "name": "clipTextFormat",
            "type": "{JSG.graph.attr.TextFormatAttributes}",
            "static": 1,
            "class": "JSG.JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 108,
            "description": "Restores connection after drop or paste operations. This is needed to synchronize new edges and ports. For internal use only.",
            "itemtype": "property",
            "name": "connectionRestorer",
            "type": "{JSG.graph.model.ConnectionRestorer}",
            "static": 1,
            "class": "JSG.JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 116,
            "description": "Default Factory to create GraphItems. This Factory is called, if a GraphItem is created using createGraphItemFromString. The default implementation\ncreates the system known GraphItem implementations. If derived, it allows to create custom items by their name. This property can be overwritten by extending\na JSG.graph.model.GraphItemFactory class and assigning it to this property. See the description of GraphItemFactory to get more information.",
            "itemtype": "property",
            "name": "graphItemFactory",
            "type": "{JSG.graph.model.GraphItemFactory}",
            "static": 1,
            "class": "JSG.JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 131,
            "description": "Property which defines the measured DPI values.<br/>\n<b>Note:</b> before using this property the library must be have been initialized by calling \n{{#crossLink \"JSG/init:method\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "dpi",
            "type": "{JSG.geometry.Point}",
            "static": 1,
            "class": "JSG.JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 142,
            "description": "Property used to measure text.<br/>\n<b>Note:</b> before using this property the library must be have been initialized by calling \n{{#crossLink \"JSG/init:method\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "graphics",
            "type": "{JSG.ui.graphics.ScalableGraphics}",
            "static": 1,
            "class": "JSG.JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 153,
            "description": "To turn drawing off or on. Useful to prevent too many drawing operations. Use with care.",
            "itemtype": "property",
            "name": "drawingDisabled",
            "type": "{Boolean}",
            "static": 1,
            "class": "JSG.JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 163,
            "description": "Notification flag. This notification is send via NotificationCenter whenever the drawing is\nglobally enabled or disabled.\n\nSee {{#crossLink \"JSG.graph.notifications.NotificationCenter\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "DRAW_DISABLED_NOTIFICATION",
            "type": "String",
            "static": 1,
            "class": "JSG.JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 209,
            "description": "Initialize the library.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "jsghome",
                    "description": "directory where jsg.js is located and loaded from",
                    "type": "Object"
                }
            ],
            "static": 1,
            "class": "JSG.JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 271,
            "description": "Only for internal usage!! Do not use!",
            "itemtype": "method",
            "name": "isGroup",
            "params": [
                {
                    "name": "item",
                    "description": "GraphItem to check.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "DON'T USE!! SUBJECT TO REMOVE!!",
            "class": "JSG.JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 340,
            "description": "Logs given point to the console.</br>\nBefore the point is logged it is translated from the coordinate system of given item to the\ncoordinate system of its Graph.",
            "itemtype": "method",
            "name": "logPoint",
            "params": [
                {
                    "name": "point",
                    "description": "The point to translate and log.",
                    "type": "JSG.geometry.Point"
                },
                {
                    "name": "fromItem",
                    "description": "The GraphItem to start point translation at.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "msg",
                    "description": "An optional message to prefix log output.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "JSG.JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 358,
            "description": "Calls the given function n-times, specified by calls parameter, and measures the total execution\ntime in milliseconds. If a message is provided the execution time is logged via <code>JSG.debug.log</code>.",
            "itemtype": "method",
            "name": "performance",
            "params": [
                {
                    "name": "func",
                    "description": "The function to call.",
                    "type": "Function"
                },
                {
                    "name": "calls",
                    "description": "The number of times to call specified function.",
                    "type": "Number"
                },
                {
                    "name": "msg",
                    "description": "An optional message parameter. If specified the measured time will be logged via <code>JSG.debug.log</code>.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "the total execution time in milliseconds",
                "type": "Number"
            },
            "class": "JSG.JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 382,
            "description": "Function definitions to use within a {{#crossLink \"JSG.graph.expr.Expression\"}}{{/crossLink}} formula. The function \nis referenced by its name (case insensitive!) and is called in the scope of the expression owner used for evaluation. \nUsually this owner is a {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}.<br/>\nTo check if a function name is already used {{#crossLink \"Functions/has:method\"}}{{/crossLink}} can be used and\nto get the correct case sensitive function name use {{#crossLink \"Functions/getName:method\"}}{{/crossLink}}.<br/>\n<b>Note:</b> applications can extend this object with custom functions but should never overwrite \n{{#crossLink \"Functions/has:method\"}}{{/crossLink}} and {{#crossLink \"Functions/getName:method\"}}{{/crossLink}}!! \nTo distinguish functions which could be referenced in formulas it is common practice to write their name in upper case.<br/>",
            "example": [
                "\n    //reference function: JSG.Functions.MAX\n    var exp = new JSG.graph.expr.NumberExpression(0, \"MAX(1,42,4,6)\");\n    exp.evaluate(aGraphItem);\n    exp.getValue(); //returns 42\n\n    //register custom method\n    if(!JSG.Functions.has(\"cuStoM\")) {\n        JSG.Functions.CUSTOM = function() {\n          //...\n        }\n    }"
            ],
            "itemtype": "property",
            "name": "Functions",
            "type": "{Functions}",
            "static": 1,
            "class": "JSG.JSG",
            "module": "JSG",
            "namespace": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 411,
            "description": "A function which determines the maximum value from given numbers.",
            "itemtype": "method",
            "name": "MAX",
            "params": [
                {
                    "name": "numbers",
                    "description": "The numbers to get the maximum of.",
                    "type": "Number",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "The maximum number.",
                "type": "Number"
            },
            "class": "JSG.Functions",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 437,
            "description": "Checks if a function is registered for given case-insensitive name. Returns <code>true</code> if a function \nexists, <code>false</code> otherwise.",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "name",
                    "description": "The case-insensitive function name to look-up.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns <code>true</code> if a function was registered for given name, <code>false/<code> \notherwise.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG.Functions",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\JSGGlobals.js",
            "line": 449,
            "description": "Returns the correct, i.e. case-sensitive, name under which a function is stored. If no corresponding function \nexist for given case-insensitive name <code>undefined</code> is returned.",
            "itemtype": "method",
            "name": "getName",
            "params": [
                {
                    "name": "sample",
                    "description": "A case-insensitive function name to look up.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A registered function object or <code>undefined</code>.",
                "type": "Function"
            },
            "static": 1,
            "class": "JSG.Functions",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\Loader.js",
            "line": 201,
            "description": "Adds a javascript file reference to load.",
            "itemtype": "method",
            "name": "addScript",
            "params": [
                {
                    "name": "filename",
                    "description": "The name of the javascript file.",
                    "type": "String"
                },
                {
                    "name": "basedir",
                    "description": "The (relative) path to the javascript file.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call after file was loaded.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "cbscope",
                    "description": "The context object to use for the callback.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Monitor",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\Loader.js",
            "line": 213,
            "description": "Adds a stylesheet reference to load.",
            "itemtype": "method",
            "name": "addStylesheet",
            "params": [
                {
                    "name": "filename",
                    "description": "The name of the stylesheet file.",
                    "type": "String"
                },
                {
                    "name": "basedir",
                    "description": "The (relative) path to the stylesheet file.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call after file was loaded.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "cbscope",
                    "description": "The context object to use for the callback.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Monitor",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\Loader.js",
            "line": 225,
            "description": "Loads all registered files.<br/>\nThe dynamic",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "dynamic",
                    "description": "The name of the stylesheet file.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "monitor",
                    "description": "A monitor object to get notified about loading progress.",
                    "type": "Load.Monitor",
                    "optional": true
                }
            ],
            "class": "Monitor",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\Loader.js",
            "line": 251,
            "description": "Called to signal the next item is loaded.<br/>\nSubclass can overwrite. Default implementation does nothing.",
            "itemtype": "method",
            "name": "loadNext",
            "class": "Monitor",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\Loader.js",
            "line": 258,
            "description": "Called to notify that a certain amount of files were loaded.<br/>\nSubclass can overwrite. Default implementation does nothing.",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "percent",
                    "description": "The amount of files loaded in percent (0-100).",
                    "type": "Number"
                }
            ],
            "class": "Monitor",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\Loader.js",
            "line": 266,
            "description": "Called to signal that an error occurred during loading.<br/>\nSubclass can overwrite. Default implementation does nothing.",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "err",
                    "description": "An error object with detailed information.",
                    "type": "Object"
                }
            ],
            "class": "Monitor",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\Loader.js",
            "line": 274,
            "description": "Called to signal that all files where loaded.<br/>\nSubclass can overwrite. Default implementation does nothing.",
            "itemtype": "method",
            "name": "done",
            "class": "Monitor",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\jsg.js",
            "line": 1,
            "description": "A JavaScript Graph Library",
            "author": "Tensegrity Software GmbH",
            "link": "http://www.js-graph.com/",
            "license": "JSG - A JavaScript Graph Library\nVersion 1.6.14 - Copyright (c) 2015 Tensegrity Software GmbH. Use and distribution currently only with the consent of Tensegrity Software GmbH! Please read and\nfollow the license agreement provided with this distribution. If there are any questions regarding the software license, please contact us.\nUsed libraries:\n! Hammer.JS - v1.0.6dev - 2013-07-31 http://eightmedia.github.com/hammer.js Copyright (c) 2013 Jorik Tangelder (j.tangelder at gmail.com); Licensed under the MIT license",
            "class": "JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\jsg.js",
            "line": 26,
            "description": "The version string in format majorNr.minorNr.buildNr.",
            "itemtype": "property",
            "name": "version",
            "type": "{String}",
            "static": 1,
            "class": "JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\jsg.js",
            "line": 34,
            "description": "The build date as string in the format yyyy-mm-dd.",
            "itemtype": "property",
            "name": "builddate",
            "type": "{String}",
            "static": 1,
            "class": "JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\jsg.js",
            "line": 44,
            "description": "Creates a new namespace object based on the provided namespace string",
            "static": 1,
            "itemtype": "method",
            "name": "namespace",
            "params": [
                {
                    "name": "ns_str",
                    "description": "The namespace string",
                    "type": "String"
                },
                {
                    "name": "delimiter",
                    "description": "The delimiter is used to split the namespace string",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\".\""
                }
            ],
            "return": {
                "description": "the namespace object",
                "type": "Object"
            },
            "class": "JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\jsg.js",
            "line": 68,
            "description": "Inheritance function which ensures that prototype chain is preserved.",
            "static": 1,
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "subclass",
                    "description": "the class which extends the base class",
                    "type": "Object"
                },
                {
                    "name": "baseclass",
                    "description": "the super class to extend",
                    "type": "Object"
                }
            ],
            "class": "JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\jsg.js",
            "line": 119,
            "description": "Creates a new object by using provided class String.</br>\n<b>Note:</b> the class String must be fully qualified, i.e. it must include all namespace objects. Example:\n\n\tvar clazz = \"JSG.graph.model.Graph\";\n\tvar newGraph = JSG.createObjectFromString(clazz);\n\nThe above is equivalent to <code>var newGraph = new JSG.graph.model.Graph();</code>.</br>",
            "itemtype": "method",
            "name": "createObjectFromString",
            "params": [
                {
                    "name": "clazz",
                    "description": "The fully qualifying name of the constructor method to use.",
                    "type": "String"
                },
                {
                    "name": "delimiter",
                    "description": "The delimiter is used to split the class String",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\".\""
                }
            ],
            "return": {
                "description": "The instantiated class or <code>undefined</code>",
                "type": "Object"
            },
            "static": 1,
            "class": "JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\jsg.js",
            "line": 142,
            "description": "Returns the object referenced by given String.</br>\nThe object String must be fully qualified, i.e. it must include all namespace objects. Example:\n \n\tvar str = \"JSG.graph.model.Graph.copy\";\n\tvar obj = JSG.getObjectFromString(str);\n\tvar newobj = new obj();",
            "itemtype": "method",
            "name": "getObjectFromString",
            "params": [
                {
                    "name": "objstr",
                    "description": "The fully qualified object name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The corresponding object or <code>undefined</code>",
                "type": "Object"
            },
            "static": 1,
            "class": "JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\jsg.js",
            "line": 171,
            "description": "Copies the elements from specified source array, starting at specified position, to the given \ndestination array. If the length of destination array is exceeded the remaining elements are \nsimply pushed on it.<br>\n<b>Note:</b> this does not perform a deep copy, i.e. the elements are not itself copied. After\ncopy is performed both arrays contain the same copied elements.",
            "itemtype": "method",
            "name": "arraycopy",
            "params": [
                {
                    "name": "src",
                    "description": "The source array to take the elements from.",
                    "type": "Array"
                },
                {
                    "name": "srcpos",
                    "description": "Start position within the source array.",
                    "type": "Number"
                },
                {
                    "name": "dest",
                    "description": "The destination array.",
                    "type": "Array"
                },
                {
                    "name": "destpos",
                    "description": "Start position within the destination array.",
                    "type": "Number"
                },
                {
                    "name": "length",
                    "description": "The number of elements to take.",
                    "type": "Number"
                }
            ],
            "static": 1,
            "class": "JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsg\\jsg.js",
            "line": 201,
            "description": "Checks if passed object has an own property defined which has the same value as given value.",
            "itemtype": "method",
            "name": "hasPropertyWithValue",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to check.",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "The property value to check for.",
                    "type": "Boolean | Number | String | Object"
                }
            ],
            "return": {
                "description": "<code>true</code> if passed object defines an own property which has given value,\n<code>false</code> otherwise.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSG",
            "module": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\circle.js",
            "line": 15,
            "description": "Prototype object which defines specialized method implementations for <code>circle</code> elements.",
            "itemtype": "property",
            "name": "circleproto",
            "type": "{Object}",
            "class": "JSG.SVG.Circle",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\circle.js",
            "line": 22,
            "description": "Creates a <code>GraphItem</code> from this element using provided coordinate system.",
            "itemtype": "method",
            "name": "toJSG",
            "params": [
                {
                    "name": "cs",
                    "description": "The coordinate system to use for converting unit values.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ],
            "return": {
                "description": "The corresponding <code>GraphItem</code> which represents this SVG element.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.SVG.Circle",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\circle.js",
            "line": 55,
            "description": "Replaces attribute values of this element with their corresponding pixel values, applying the element's \ntransformation matrix too.",
            "itemtype": "method",
            "name": "convert",
            "class": "JSG.SVG.Circle",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\circle.js",
            "line": 78,
            "description": "Creates a <code>circle</code> shape element from given document node.",
            "itemtype": "method",
            "name": "createFrom",
            "params": [
                {
                    "name": "node",
                    "description": "The document node to create the element from.",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "A <code>circle</code> shape element.",
                "type": "JSG.SVG.Element"
            },
            "class": "JSG.SVG.Circle",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\color.js",
            "line": 178,
            "description": "Converts given color string to a hex color string.",
            "itemtype": "method",
            "name": "toHex",
            "params": [
                {
                    "name": "color",
                    "description": "A color string to convert.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The corresponding hex color string.",
                "type": "String"
            },
            "class": "JSG.SVG.Color",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\color.js",
            "line": 189,
            "description": "Converts given color string to a rgb color string.<br/>",
            "itemtype": "method",
            "name": "toRGB",
            "params": [
                {
                    "name": "color",
                    "description": "A color string to convert.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The corresponding rgb color string.",
                "type": "String"
            },
            "class": "JSG.SVG.Color",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\color.js",
            "line": 206,
            "description": "Converts given color string to a rgba color string with specified alpha value.<br/>",
            "itemtype": "method",
            "name": "toRGBA",
            "params": [
                {
                    "name": "color",
                    "description": "A color string to convert.",
                    "type": "String"
                },
                {
                    "name": "alpha",
                    "description": "The alpha value to use for returned color. Must be between 0..1 (inclusively).",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The corresponding rgba color string.",
                "type": "String"
            },
            "class": "JSG.SVG.Color",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\defs.js",
            "line": 47,
            "description": "Creates a <code>GraphItem</code> from this element using provided coordinate system.",
            "itemtype": "method",
            "name": "toJSG",
            "params": [
                {
                    "name": "cs",
                    "description": "The coordinate system to use for converting unit values.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                },
                {
                    "name": "model",
                    "description": "The GraphItem to apply this definition to.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "The corresponding <code>GraphItem</code> which represents this SVG element.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.SVG.Defs",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\defs.js",
            "line": 64,
            "description": "Replaces attribute values of this element with their corresponding pixel values, applying the element's \ntransformation matrix too.",
            "itemtype": "method",
            "name": "convert",
            "class": "JSG.SVG.Defs",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\defs.js",
            "line": 81,
            "description": "Creates a <code>GraphItem</code> from this element using provided coordinate system.",
            "itemtype": "method",
            "name": "toJSG",
            "params": [
                {
                    "name": "cs",
                    "description": "The coordinate system to use for converting unit values.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                },
                {
                    "name": "model",
                    "description": "The GraphItem to apply this definition to.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "The corresponding <code>GraphItem</code> which represents this SVG element.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.SVG.Defs",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\defs.js",
            "line": 100,
            "description": "Applies current transformation matrix to the attributes of this element.",
            "itemtype": "method",
            "name": "convert",
            "class": "JSG.SVG.Defs",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\defs.js",
            "line": 126,
            "description": "Checks if given element is a supported definition.",
            "itemtype": "method",
            "name": "isDefinition",
            "params": [
                {
                    "name": "el",
                    "description": "The element to check.",
                    "type": "JSG.SVG.Element"
                }
            ],
            "return": {
                "description": "<code>true</code> if given element is a supported definition, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.SVG.Defs",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\defs.js",
            "line": 136,
            "description": "Creates a new definition element from given document node.",
            "itemtype": "method",
            "name": "createElement",
            "params": [
                {
                    "name": "node",
                    "description": "The document node to create the element from.",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "The created definition element or <code>undefined</code> if given node does not\nrepresent a supported definition.",
                "type": "JSG.SVG.Element"
            },
            "class": "JSG.SVG.Defs",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\element.js",
            "line": 23,
            "description": "The name of this element.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "JSG.SVG.Element",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\element.js",
            "line": 29,
            "description": "The parent of this element.",
            "itemtype": "property",
            "name": "parent",
            "type": "{JSG.SVG.Element}",
            "class": "JSG.SVG.Element",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\element.js",
            "line": 35,
            "description": "The children elements of this element.",
            "itemtype": "property",
            "name": "children",
            "type": "{Array}",
            "class": "JSG.SVG.Element",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\element.js",
            "line": 41,
            "description": "The style attributes of this element as name value pairs.",
            "itemtype": "property",
            "name": "styles",
            "type": "{Object}",
            "class": "JSG.SVG.Element",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\element.js",
            "line": 47,
            "description": "The general attributes of this element as name value pairs.",
            "itemtype": "property",
            "name": "attributes",
            "type": "{Object}",
            "class": "JSG.SVG.Element",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\element.js",
            "line": 53,
            "description": "The transformation matrix defined by this element.",
            "itemtype": "property",
            "name": "matrix",
            "type": "{JSG.SVG.Matrix}",
            "class": "JSG.SVG.Element",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\element.js",
            "line": 60,
            "description": "Creates a new element from given document node.<br/>\n<b>Note:</b> this will generate all child elements too!",
            "itemtype": "method",
            "name": "fromNode",
            "params": [
                {
                    "name": "node",
                    "description": "The document node to create the element from.",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "The created element.",
                "type": "JSG.SVG.Element"
            },
            "static": 1,
            "class": "JSG.SVG.Element",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\element.js",
            "line": 110,
            "description": "Adds given element as child to this element.",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "el",
                    "description": "The child element to add.",
                    "type": "JSG.SVG.Element"
                }
            ],
            "class": "JSG.SVG.Element",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\element.js",
            "line": 123,
            "description": "Returns the first child of this element or <code>undefined</code> if this element has no children.",
            "itemtype": "method",
            "name": "firstChild",
            "return": {
                "description": "The first child or <code>undefined</code>.",
                "type": "JSG.SVG.Element"
            },
            "class": "JSG.SVG.Element",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\element.js",
            "line": 132,
            "description": "Returns the attribute value specified by given name. If no attribute is defined for given name the optional default \nvalue is returned.",
            "itemtype": "method",
            "name": "attribute",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the attribute to return the value of.",
                    "type": "String"
                },
                {
                    "name": "defval",
                    "description": "The optional default value to return if no attribute with given name is defined.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The attribute value or <code>undefined</code>.",
                "type": "Object"
            },
            "class": "JSG.SVG.Element",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\element.js",
            "line": 144,
            "description": "Returns the style value specified by given name. If no style is defined for given name the optional default \nvalue is returned.",
            "itemtype": "method",
            "name": "style",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the style to return the value of.",
                    "type": "String"
                },
                {
                    "name": "defval",
                    "description": "The optional default value to return if no style with given name is defined.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The style value or <code>undefined</code>.",
                "type": "Object"
            },
            "class": "JSG.SVG.Element",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\element.js",
            "line": 158,
            "description": "Returns the transformation matrix of this element.<br/>\n<b>Note:</b> the returned matrix contains the transformation matrix of elements parent too! To get only the transformation\nmatrix defined this element simply use {{#crossLink \"JSG.SVG.Element/matrix:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getTransformMatrix",
            "return": {
                "description": "The transformation of this element.",
                "type": "JSG.SVG.Matrix"
            },
            "class": "JSG.SVG.Element",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\element.js",
            "line": 171,
            "description": "Replaces attribute values of this element with their corresponding pixel values. The transformation matrix of this \nelement should be applied too.<br/>\nNote: this method is intended to be overwritten by subclasses. Default implementation does nothing.",
            "itemtype": "method",
            "name": "convert",
            "class": "JSG.SVG.Element",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\element.js",
            "line": 180,
            "description": "Converts the attribute values of this element to corresponding pixel value.<br/>\nThe actual conversion is done in convert which should be overwritten by subclasses. This method simply traverses\nthe element hierarchy.",
            "itemtype": "method",
            "name": "convertValues",
            "class": "JSG.SVG.Element",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\element.js",
            "line": 197,
            "description": "Returns the view-box object use for this element or <code>undefined</code> if neither this element nor its\nparent have a defined view-box object.",
            "itemtype": "method",
            "name": "viewbox",
            "return": {
                "description": "The view-box to use for this element or <code>undefined</code>.",
                "type": "JSG.SVG.ViewBox"
            },
            "class": "JSG.SVG.Element",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\element.js",
            "line": 207,
            "description": "Returns the view-port object use for this element or <code>undefined</code> if neither this element nor its\nparent have a defined view-port object. A view-port instance is simply an object with <code>width</code> and\n<code>height</code> properties.",
            "itemtype": "method",
            "name": "viewport",
            "return": {
                "description": "The view-port to use for this element or <code>undefined</code>.",
                "type": "Object"
            },
            "class": "JSG.SVG.Element",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\element.js",
            "line": 222,
            "description": "Returns the current font size to use for this element or <code>undefined</code> if neither this element nor its\nparent have a defined font size.",
            "itemtype": "method",
            "name": "fontSize",
            "return": {
                "description": "The font size to use in pixels or <code>undefined</code>.",
                "type": "Number"
            },
            "class": "JSG.SVG.Element",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\element.js",
            "line": 238,
            "description": "Returns the definition element for given id or <code>undefined</code>.<br/>\nNote: if this element has no definition with given id its parent is checked.",
            "itemtype": "method",
            "name": "definition",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the definition element to return.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The definition element or <code>undefined</code>.",
                "type": "JSG.SVG.Element"
            },
            "class": "JSG.SVG.Element",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\element.js",
            "line": 259,
            "description": "Creates a JSG GraphItem which represents this element.<br/>\nNote: this method is intended to be overwritten, default implementation simply returns <code>undefined</code>.",
            "itemtype": "method",
            "name": "toJSG",
            "params": [
                {
                    "name": "cs",
                    "description": "The coordinate system to use for converting unit values.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ],
            "return": {
                "description": "The corresponding <code>GraphItem</code> which represents this SVG element.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.SVG.Element",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\ellipse.js",
            "line": 16,
            "description": "Creates a <code>GraphItem</code> from this element using provided coordinate system.",
            "itemtype": "method",
            "name": "toJSG",
            "params": [
                {
                    "name": "cs",
                    "description": "The coordinate system to use for converting unit values.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ],
            "return": {
                "description": "The corresponding <code>GraphItem</code> which represents this SVG element.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.SVG.Ellipse",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\ellipse.js",
            "line": 49,
            "description": "Replaces attribute values of this element with their corresponding pixel values, applying the element's \ntransformation matrix too.",
            "itemtype": "method",
            "name": "convert",
            "class": "JSG.SVG.Ellipse",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\ellipse.js",
            "line": 68,
            "description": "Creates an <code>ellipse</code> shape element from given document node.",
            "itemtype": "method",
            "name": "createFrom",
            "params": [
                {
                    "name": "node",
                    "description": "The document node to create the element from.",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "An <code>ellipse</code> shape element.",
                "type": "JSG.SVG.Element"
            },
            "class": "JSG.SVG.Ellipse",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\error.js",
            "line": 29,
            "description": "Checks if given XML/HTML document represents an error.",
            "itemtype": "method",
            "name": "hasError",
            "params": [
                {
                    "name": "doc",
                    "description": "The document to check.",
                    "type": "DOMDocument"
                }
            ],
            "return": {
                "description": "<code>true</code> if given document represents an error, <code>false</code> otherwise.",
                "type": "Booelan"
            },
            "class": "JSG.SVG.Error",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\error.js",
            "line": 41,
            "description": "Creates an error object from given document. Note: the given document should represent an error. This can be\nchecked with {{#crossLink \"JSG.SVG.Error/hasError:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "createErrorFromDoc",
            "params": [
                {
                    "name": "doc",
                    "description": "The document to create an error object of.",
                    "type": "DOMDocument"
                }
            ],
            "return": {
                "description": "The corresponding error object.",
                "type": "JSG.SVG.Error"
            },
            "class": "JSG.SVG.Error",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\error.js",
            "line": 59,
            "description": "Creates a new error object. This method takes one or several string parameters to provide additional information..",
            "itemtype": "method",
            "name": "createError",
            "params": [
                {
                    "name": "messages",
                    "description": "Additional information about the error.",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "A new error object.",
                "type": "JSG.SVG.Error"
            },
            "class": "JSG.SVG.Error",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\group.js",
            "line": 16,
            "description": "Creates a <code>GraphItem</code> from this element using provided coordinate system.",
            "itemtype": "method",
            "name": "toJSG",
            "params": [
                {
                    "name": "cs",
                    "description": "The coordinate system to use for converting unit values.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ],
            "return": {
                "description": "The corresponding <code>GraphItem</code> which represents this SVG element.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.SVG.Group",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\group.js",
            "line": 94,
            "description": "Replaces attribute values of this element with their corresponding pixel values, applying the element's \ntransformation matrix too.",
            "itemtype": "method",
            "name": "convert",
            "class": "JSG.SVG.Group",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\group.js",
            "line": 104,
            "description": "Creates a <code>group</code> shape element with all of its children from given document node.",
            "itemtype": "method",
            "name": "createFrom",
            "params": [
                {
                    "name": "node",
                    "description": "The document node to create the element from.",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "A <code>group</code> shape element.",
                "type": "JSG.SVG.Element"
            },
            "class": "JSG.SVG.Group",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\jsgsvg.js",
            "line": 1,
            "description": "A simple SVG library to convert and import svg files to JSG.",
            "author": "Tensegrity Software GmbH",
            "link": "http://www.js-graph.com/",
            "license": "JSG.SVG - JSG SVG Library\nVersion_Copyright Tensegrity Software GmbH. Use and distribution currently only with the consent of Tensegrity Software GmbH! Please read and\nfollow the license agreement provided with this distribution. If there are any questions regarding the software license, please contact us.",
            "class": "JSG.SVG",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\jsgsvg.js",
            "line": 78,
            "description": "Mixes the properties of given source objects to the specified destination object. Note that the property\nof last source object overwrites any previously added property of same name.",
            "example": [
                "\n\tvar obj = JSG.SVG.mixin({}, srcObj1, srcObj2);"
            ],
            "itemtype": "method",
            "name": "mixin",
            "params": [
                {
                    "name": "dest",
                    "description": "The destination object to add properties to.",
                    "type": "Object"
                },
                {
                    "name": "objects",
                    "description": "One or more source objects to take the properties from.",
                    "type": "Object",
                    "multiple": true
                }
            ],
            "return": {
                "description": "The destination object.",
                "type": "Object"
            },
            "class": "JSG.SVG",
            "module": "JSG.SVG",
            "namespace": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\jsgsvg.js",
            "line": 100,
            "description": "Merges the properties of given from-object to specified to-object. If the optional overwrite \nparameter is set to <code>true</code> already defined properties in the to-object are replaced by the values \nfrom the from-object. Note: if the to-object is undefined a new object is created.",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "fromObj",
                    "description": "The object to take the values from.",
                    "type": "Object"
                },
                {
                    "name": "toObj",
                    "description": "The object to merge to. If not given a new object is created.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "overwrite",
                    "description": "An optional parameter. Specify <code>true</code> to overwrite already defined \nproperties in the to-object.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The to-object.",
                "type": "Object"
            },
            "class": "JSG.SVG",
            "module": "JSG.SVG",
            "namespace": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\jsgsvg.js",
            "line": 125,
            "description": "Loads an SVG file from given url.<br/>\nA callback function should be provided which gets called with a {{#crossLink \"JSG.SVG.Model\"}}{{/crossLink}}\nand an error object as first and second parameter. On success the svg model is defined and the error object\nis undefined. If something went wrong its vice versa.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "The url of the svg file to load.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A function which is called with svg model and error parameters.",
                    "type": "Function"
                }
            ],
            "class": "JSG.SVG",
            "module": "JSG.SVG",
            "namespace": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\jsgsvg.js",
            "line": 150,
            "description": "Creates an svg model from given xml.<br/>\nIf xml is not valid an error is thrown",
            "itemtype": "method",
            "name": "fromXML",
            "params": [
                {
                    "name": "xml",
                    "description": "The xml which represents the svg.",
                    "type": "String | XMLDocument"
                }
            ],
            "return": {
                "description": "The model to use for converting the svg to JSG models.",
                "type": "JSG.SVG.Model"
            },
            "throws": {
                "description": "An error object which provides additional information in case of failure.",
                "type": "JSG.SVG.Error"
            },
            "class": "JSG.SVG",
            "module": "JSG.SVG",
            "namespace": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\jsgsvg.js",
            "line": 168,
            "description": "Creates an svg model from given document.<br/>\nIf the document is not valid an error is thrown",
            "itemtype": "method",
            "name": "fromDoc",
            "params": [
                {
                    "name": "doc",
                    "description": "The document which represents the svg.",
                    "type": "XMLDocument"
                }
            ],
            "return": {
                "description": "The model to use for converting the svg to JSG models.",
                "type": "JSG.SVG.Model"
            },
            "throws": {
                "description": "An error object which provides additional information in case of failure.",
                "type": "JSG.SVG.Error"
            },
            "class": "JSG.SVG",
            "module": "JSG.SVG",
            "namespace": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\jsgsvg.js",
            "line": 198,
            "description": "The top-level svg element.",
            "itemtype": "property",
            "name": "svg",
            "type": "{JSG.SVG.Element}",
            "class": "JSG.SVG.Model",
            "module": "JSG.SVG",
            "namespace": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\jsgsvg.js",
            "line": 204,
            "description": "The url of the svg file which is represented by this model. Maybe <code>undefined</code>",
            "itemtype": "property",
            "name": "url",
            "type": "{String}",
            "class": "JSG.SVG.Model",
            "module": "JSG.SVG",
            "namespace": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\jsgsvg.js",
            "line": 210,
            "description": "Flag to indicate if a JSG model should be created for the top-level svg tag. The default is <code>true</code>.",
            "itemtype": "property",
            "name": "includeRoot",
            "type": "{Boolean}",
            "class": "JSG.SVG.Model",
            "module": "JSG.SVG",
            "namespace": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\jsgsvg.js",
            "line": 217,
            "description": "Returns a, maybe empty, list of {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}s which corresponds to this \nSVG model. The specified coordinate system is used to correctly convert unit values.",
            "itemtype": "method",
            "name": "toJSG",
            "params": [
                {
                    "name": "cs",
                    "description": "The coordinate system to use for converting unit values.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ],
            "return": {
                "description": "A list of <code>GraphItems</code> which represents this SVG.",
                "type": "Array"
            },
            "class": "JSG.SVG.Model",
            "module": "JSG.SVG",
            "namespace": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\jsgsvg.js",
            "line": 237,
            "description": "API internal method to return the child models of given parent model.",
            "itemtype": "method",
            "name": "_decompose",
            "params": [
                {
                    "name": "model",
                    "description": "The model to get the children of.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "An array of <code>GraphItems</code>.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "JSG.SVG.Model",
            "module": "JSG.SVG",
            "namespace": "JSG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\line.js",
            "line": 15,
            "description": "Prototype object which defines specialized method implementations for <code>line</code> elements.",
            "itemtype": "property",
            "name": "lineproto",
            "type": "{Object}",
            "class": "JSG.SVG.Line",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\line.js",
            "line": 22,
            "description": "Creates a <code>GraphItem</code> from this element using provided coordinate system.",
            "itemtype": "method",
            "name": "toJSG",
            "params": [
                {
                    "name": "cs",
                    "description": "The coordinate system to use for converting unit values.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ],
            "return": {
                "description": "The corresponding <code>GraphItem</code> which represents this SVG element.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.SVG.Line",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\line.js",
            "line": 44,
            "description": "Replaces attribute values of this element with their corresponding pixel values, applying the element's \ntransformation matrix too.",
            "itemtype": "method",
            "name": "convert",
            "class": "JSG.SVG.Line",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\line.js",
            "line": 64,
            "description": "Creates a <code>line</code> shape element from given document node.",
            "itemtype": "method",
            "name": "createFrom",
            "params": [
                {
                    "name": "node",
                    "description": "The document node to create the element from.",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "A <code>line</code> shape element.",
                "type": "JSG.SVG.Element"
            },
            "class": "JSG.SVG.Line",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\matrix.js",
            "line": 17,
            "description": "Copies this matrix.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "A copy of this matrix.",
                "type": "JSG.SVG.Matrix"
            },
            "class": "JSG.SVG.Matrix",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\matrix.js",
            "line": 27,
            "description": "Sets this matrix to specified values.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "a",
                    "description": "The value of the <code>0,0</code> position.",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "The value of the <code>0,1</code> position.",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "The value of the <code>1,0</code> position.",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "The value of the <code>1,1</code> position.",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "The value of the <code>2,0</code> position.",
                    "type": "Number"
                },
                {
                    "name": "f",
                    "description": "The value of the <code>2,1</code> position.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix to support concatenation.",
                "type": "JSG.SVG.Matrix"
            },
            "class": "JSG.SVG.Matrix",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\matrix.js",
            "line": 48,
            "description": "Sets the values of this matrix to the values of given matrix.",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "matrix",
                    "description": "A matrix to get the values from.",
                    "type": "JSG.SVG.Matrix"
                }
            ],
            "return": {
                "description": "This matrix to support concatenation.",
                "type": "JSG.SVG.Matrix"
            },
            "class": "JSG.SVG.Matrix",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\matrix.js",
            "line": 58,
            "description": "Sets this matrix to the identity matrix.",
            "itemtype": "method",
            "name": "setIdentity",
            "return": {
                "description": "This matrix to support concatenation.",
                "type": "JSG.SVG.Matrix"
            },
            "class": "JSG.SVG.Matrix",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\matrix.js",
            "line": 67,
            "description": "Multiplies this matrix with given matrix. Note: this will not generate a new matrix!",
            "itemtype": "method",
            "name": "multiply",
            "params": [
                {
                    "name": "matrix",
                    "description": "A matrix to multiply with.",
                    "type": "JSG.SVG.Matrix"
                }
            ],
            "return": {
                "description": "This matrix to support concatenation.",
                "type": "JSG.SVG.Matrix"
            },
            "class": "JSG.SVG.Matrix",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\matrix.js",
            "line": 83,
            "description": "Applies this matrix to given point. The point can be any object which provides <code>x</code> and <code>y</code>\nproperties.",
            "itemtype": "method",
            "name": "applyToPoint",
            "params": [
                {
                    "name": "pt",
                    "description": "The point object to multiply with this matrix.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Provided point as convenience.",
                "type": "Object"
            },
            "class": "JSG.SVG.Matrix",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\matrix.js",
            "line": 98,
            "description": "Rotates this matrix by given angle.",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle, in degrees, to rotate this matrix by.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix to support concatenation.",
                "type": "JSG.SVG.Matrix"
            },
            "class": "JSG.SVG.Matrix",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\matrix.js",
            "line": 116,
            "description": "Rotates given point.",
            "itemtype": "method",
            "name": "rotatePoint",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate of point to rotate.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate of point to rotate.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "An object with <code>x</code> and <code>y</code> properties.",
                "type": "Object"
            },
            "class": "JSG.SVG.Matrix",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\matrix.js",
            "line": 130,
            "description": "Returns the current rotation angle in degrees.",
            "itemtype": "method",
            "name": "getRotation",
            "return": {
                "description": "The current rotation angle in degrees.",
                "type": "Number"
            },
            "class": "JSG.SVG.Matrix",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\matrix.js",
            "line": 141,
            "description": "Applies given scale to this matrix.",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "scaleX",
                    "description": "The scale in x direction.",
                    "type": "Number"
                },
                {
                    "name": "scaleY",
                    "description": "The scale in y direction.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix to support concatenation.",
                "type": "JSG.SVG.Matrix"
            },
            "class": "JSG.SVG.Matrix",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\matrix.js",
            "line": 155,
            "description": "Returns the current scale.",
            "itemtype": "method",
            "name": "getScale",
            "return": {
                "description": "An object with <code>x</code> and <code>y</code> properties which represents the scale in x\nand y direction respectively.",
                "type": "Object"
            },
            "class": "JSG.SVG.Matrix",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\matrix.js",
            "line": 168,
            "description": "Applies given translation to this matrix.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "dX",
                    "description": "The translation in x direction.",
                    "type": "Number"
                },
                {
                    "name": "dY",
                    "description": "The translation in y direction.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix to support concatenation.",
                "type": "JSG.SVG.Matrix"
            },
            "class": "JSG.SVG.Matrix",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\matrix.js",
            "line": 182,
            "description": "Returns current translation.",
            "itemtype": "method",
            "name": "getTranslation",
            "return": {
                "description": "An object with <code>x</code> and <code>y</code> properties which represents the translation\nin x and y direction respectively."
            },
            "class": "JSG.SVG.Matrix",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\path.js",
            "line": 15,
            "description": "Prototype object which defines specialized method implementations for <code>path</code> elements.",
            "itemtype": "property",
            "name": "pathproto",
            "type": "{Object}",
            "class": "JSG.SVG.Path",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\path.js",
            "line": 22,
            "description": "Creates a <code>GraphItem</code> from this element using provided coordinate system.",
            "itemtype": "method",
            "name": "toJSG",
            "params": [
                {
                    "name": "cs",
                    "description": "The coordinate system to use for converting unit values.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ],
            "return": {
                "description": "The corresponding <code>GraphItem</code> which represents this SVG element.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.SVG.Path",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\path.js",
            "line": 68,
            "description": "Replaces attribute values of this element with their corresponding pixel values, applying the element's \ntransformation matrix too.",
            "itemtype": "method",
            "name": "convert",
            "class": "JSG.SVG.Path",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\path.js",
            "line": 87,
            "description": "Creates a <code>path</code> shape element from given document node.",
            "itemtype": "method",
            "name": "createFrom",
            "params": [
                {
                    "name": "node",
                    "description": "The document node to create the element from.",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "A <code>path</code> shape element.",
                "type": "JSG.SVG.Element"
            },
            "class": "JSG.SVG.Path",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\pathdata.js",
            "line": 139,
            "description": "Creates a list of {{#crossLink \"JSG.geometry.Point\"}}{{/crossLink}}s from the data attribute (<code>d</code>)\nof given SVG element.",
            "itemtype": "method",
            "name": "createPoints",
            "params": [
                {
                    "name": "el",
                    "description": "The element which provides the path data to create the points from.",
                    "type": "JSG.SVG.Element"
                }
            ],
            "return": {
                "description": "A list of point objects.",
                "type": "Array"
            },
            "class": "JSG.SVG.PathData",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\polygon.js",
            "line": 15,
            "description": "Prototype object which defines specialized method implementations for <code>polygon</code> and <code>polyline</code>\nelements.",
            "itemtype": "property",
            "name": "polygonproto",
            "type": "{Object}",
            "class": "JSG.SVG.Polygon",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\polygon.js",
            "line": 23,
            "description": "A polygon is closed by default. If used for polylines set this to <code>false</code>.",
            "itemtype": "property",
            "name": "isClosed",
            "type": "{Boolean}",
            "class": "JSG.SVG.Polygon",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\polygon.js",
            "line": 30,
            "description": "Creates an array of {{#crossLink \"JSG.graph.Coordinate\"}}{{/crossLink}}s from given point list.",
            "itemtype": "method",
            "name": "toCoordinates",
            "params": [
                {
                    "name": "points",
                    "description": "An array of point objects to create coordinates from.",
                    "type": "Array"
                },
                {
                    "name": "cs",
                    "description": "The coordinate system to use for converting unit values.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ],
            "return": {
                "description": "An array of coordinates.",
                "type": "Array"
            },
            "class": "JSG.SVG.Polygon",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\polygon.js",
            "line": 47,
            "description": "Creates a <code>GraphItem</code> from this element using provided coordinate system.",
            "itemtype": "method",
            "name": "toJSG",
            "params": [
                {
                    "name": "cs",
                    "description": "The coordinate system to use for converting unit values.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ],
            "return": {
                "description": "The corresponding <code>GraphItem</code> which represents this SVG element.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.SVG.Polygon",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\polygon.js",
            "line": 69,
            "description": "Replaces attribute values of this element with their corresponding pixel values, applying the element's \ntransformation matrix too.",
            "itemtype": "method",
            "name": "convert",
            "class": "JSG.SVG.Polygon",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\polygon.js",
            "line": 92,
            "description": "Creates a <code>polygon</code> shape element from given document node.",
            "itemtype": "method",
            "name": "createFrom",
            "params": [
                {
                    "name": "node",
                    "description": "The document node to create the element from.",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "A <code>polygon</code> shape element.",
                "type": "JSG.SVG.Element"
            },
            "class": "JSG.SVG.Polygon",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\rect.js",
            "line": 15,
            "description": "Prototype object which defines specialized method implementations for <code>rect</code> elements.",
            "itemtype": "property",
            "name": "rectproto",
            "type": "{Object}",
            "class": "JSG.SVG.Rect",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\rect.js",
            "line": 22,
            "description": "Creates a <code>GraphItem</code> from this element using provided coordinate system.",
            "itemtype": "method",
            "name": "toJSG",
            "params": [
                {
                    "name": "cs",
                    "description": "The coordinate system to use for converting unit values.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ],
            "return": {
                "description": "The corresponding <code>GraphItem</code> which represents this SVG element.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.SVG.Rect",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\rect.js",
            "line": 55,
            "description": "Replaces attribute values of this element with their corresponding pixel values, applying the element's \ntransformation matrix too.",
            "itemtype": "method",
            "name": "convert",
            "class": "JSG.SVG.Rect",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\rect.js",
            "line": 74,
            "description": "Creates a <code>rect</code> shape element from given document node.",
            "itemtype": "method",
            "name": "createFrom",
            "params": [
                {
                    "name": "node",
                    "description": "The document node to create the element from.",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "A <code>rect</code> shape element.",
                "type": "JSG.SVG.Element"
            },
            "class": "JSG.SVG.Rect",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\shapes.js",
            "line": 52,
            "description": "Checks if given element is a supported shape.",
            "itemtype": "method",
            "name": "isShape",
            "params": [
                {
                    "name": "el",
                    "description": "The element to check.",
                    "type": "JSG.SVG.Element"
                }
            ],
            "return": {
                "description": "<code>true</code> if given element is a supported shape, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.SVG.Shapes",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\shapes.js",
            "line": 62,
            "description": "Creates a new shape element from given document node.",
            "itemtype": "method",
            "name": "createElement",
            "params": [
                {
                    "name": "node",
                    "description": "The document node to create the element from.",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "The created shape element or <code>undefined</code> if given node does not\nrepresent a supported shape.",
                "type": "JSG.SVG.Element"
            },
            "class": "JSG.SVG.Shapes",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\styles.js",
            "line": 178,
            "description": "Applies the styles of given element to the specified JSG GraphItem.",
            "itemtype": "method",
            "name": "apply",
            "params": [
                {
                    "name": "el",
                    "description": "The element which provides the styles to apply.",
                    "type": "JSG.SVG.Element"
                },
                {
                    "name": "model",
                    "description": "The GraphItem to apply the styles to.",
                    "type": "JSG.graph.model.GraphItem"
                },
                {
                    "name": "cs",
                    "description": "The coordinate system to use for converting unit values.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ],
            "class": "JSG.SVG.Styles",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\styles.js",
            "line": 203,
            "description": "Sets a default value to the given style of specified element.\nThis will be ignored if the element has no corresponding style.",
            "itemtype": "method",
            "name": "setDefault",
            "params": [
                {
                    "name": "el",
                    "description": "The element to set a default style for.",
                    "type": "JSG.SVG.Element"
                },
                {
                    "name": "style",
                    "description": "The style to set the default value for.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The style value to apply.",
                    "type": "Object"
                }
            ],
            "class": "JSG.SVG.Styles",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\styles.js",
            "line": 217,
            "description": "Parses given style string and creates a new styles object.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stylestr",
                    "description": "The style string to parse.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The created styles object which contains the name-value pairs from given style string.",
                "type": "Object"
            },
            "class": "JSG.SVG.Styles",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\styles.js",
            "line": 234,
            "description": "Checks if given style id, e.g. <code>stroke-width</code> is supported.",
            "itemtype": "method",
            "name": "isKnown",
            "params": [
                {
                    "name": "style",
                    "description": "The style to check.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<code>true</code> if style is supported, <code>false</code> otherwise.",
                "type": "Boolean"
            },
            "class": "JSG.SVG.Styles",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\svg.js",
            "line": 15,
            "description": "Prototype object which defines specialized method implementations for <code>svg</code> elements.",
            "itemtype": "property",
            "name": "svgproto",
            "type": "{Object}",
            "class": "JSG.SVG.Svg",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\svg.js",
            "line": 22,
            "description": "Creates a <code>GraphItem</code> from this element using provided coordinate system.",
            "itemtype": "method",
            "name": "toJSG",
            "params": [
                {
                    "name": "cs",
                    "description": "The coordinate system to use for converting unit values.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ],
            "return": {
                "description": "The corresponding <code>GraphItem</code> which represents this SVG element.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.SVG.Svg",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\svg.js",
            "line": 62,
            "description": "Replaces attribute values of this element with their corresponding pixel values, applying the element's \ntransformation matrix too.",
            "itemtype": "method",
            "name": "convert",
            "class": "JSG.SVG.Svg",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\svg.js",
            "line": 92,
            "description": "Creates an <code>svg</code> shape element with all of its children from given document node.",
            "itemtype": "method",
            "name": "createFrom",
            "params": [
                {
                    "name": "node",
                    "description": "The document node to create the element from.",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "An <code>svg</code> shape element.",
                "type": "JSG.SVG.Element"
            },
            "class": "JSG.SVG.Svg",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\text.js",
            "line": 15,
            "description": "Prototype object which defines specialized method implementations for <code>text</code> elements.",
            "itemtype": "property",
            "name": "textproto",
            "type": "{Object}",
            "class": "JSG.SVG.Text",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\text.js",
            "line": 22,
            "description": "Creates a <code>GraphItem</code> from this element using provided coordinate system.",
            "itemtype": "method",
            "name": "toJSG",
            "params": [
                {
                    "name": "cs",
                    "description": "The coordinate system to use for converting unit values.",
                    "type": "JSG.ui.graphics.CoordinateSystem"
                }
            ],
            "return": {
                "description": "The corresponding <code>GraphItem</code> which represents this SVG element.",
                "type": "JSG.graph.model.GraphItem"
            },
            "class": "JSG.SVG.Text",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\text.js",
            "line": 75,
            "description": "Replaces attribute values of this element with their corresponding pixel values, applying the element's \ntransformation matrix too.",
            "itemtype": "method",
            "name": "convert",
            "class": "JSG.SVG.Text",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\text.js",
            "line": 90,
            "description": "Creates a <code>text</code> shape element from given document node.",
            "itemtype": "method",
            "name": "createFrom",
            "params": [
                {
                    "name": "node",
                    "description": "The document node to create the element from.",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "A <code>text</code> shape element.",
                "type": "JSG.SVG.Element"
            },
            "class": "JSG.SVG.Text",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\transform.js",
            "line": 81,
            "description": "Creates and returns the transformation matrix of given element. If given element does not have a <code>transform</code>\nattribute the identity matrix is returned.<br/>\n<b>Note:</b> if given element defines a <code>viewbox</code> attribute it is applied to the returned \ntransformation matrix too!",
            "itemtype": "method",
            "name": "setTransform",
            "params": [
                {
                    "name": "el",
                    "description": "The element to get the transformation matrix for.",
                    "type": "JSG.SVG.Element"
                }
            ],
            "return": {
                "description": "The transformation matrix for given element.",
                "type": "JSG.SVG.Matrix"
            },
            "class": "JSG.SVG.Transform",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\tspan.js",
            "line": 49,
            "description": "Returns a text with optional style attributes. This can be used as text value for a JSG \n{{#crossLink \"JSG.graph.model.TextNode\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "textFrom",
            "params": [
                {
                    "name": "el",
                    "description": "A SVG text element.",
                    "type": "JSG.SVG.Element"
                }
            ],
            "return": {
                "description": "Corresponding text with style attributes or <code>undefined</code>.",
                "type": "String"
            },
            "class": "JSG.SVG.TSpan",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\unit.js",
            "line": 80,
            "description": "Converts given unit value to points.<br/>\nNote: this uses {{#crossLink \"JSG.SVG.Unit/toPxX:method\"}}{{/crossLink}} to convert the value.",
            "itemtype": "method",
            "name": "toPt",
            "params": [
                {
                    "name": "value",
                    "description": "The unit value to convert.",
                    "type": "String"
                },
                {
                    "name": "el",
                    "description": "The SVG element to apply unit conversion to. Needed e.g. to get current font-size and view-port.",
                    "type": "JSG.SVG.Element"
                }
            ],
            "return": {
                "description": "The corresponding value in pixels.",
                "type": "Number"
            },
            "class": "JSG.SVG.Unit",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\unit.js",
            "line": 93,
            "description": "Converts given unit value to pixels.<br/>\nNote: this uses {{#crossLink \"JSG.SVG.Unit/toPxX:method\"}}{{/crossLink}} to convert the value.",
            "itemtype": "method",
            "name": "toPx",
            "params": [
                {
                    "name": "value",
                    "description": "The unit value to convert.",
                    "type": "String"
                },
                {
                    "name": "el",
                    "description": "The SVG element to apply unit conversion to. Needed e.g. to get current font-size and view-port.",
                    "type": "JSG.SVG.Element"
                }
            ],
            "return": {
                "description": "The corresponding value in pixels.",
                "type": "Number"
            },
            "class": "JSG.SVG.Unit",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\unit.js",
            "line": 105,
            "description": "Converts given unit value to horizontal pixels.<br/>\nNote: the dpi value used during calculation can be different in horizontal and vertical direction. Therefore \nthe differentiation of {{#crossLink \"JSG.SVG.Unit/toPxX:method\"}}{{/crossLink}} and \n{{#crossLink \"JSG.SVG.Unit/toPxY:method\"}}{{/crossLink}} is required.",
            "itemtype": "method",
            "name": "toPxX",
            "params": [
                {
                    "name": "value",
                    "description": "The unit value to convert.",
                    "type": "String"
                },
                {
                    "name": "el",
                    "description": "The SVG element to apply unit conversion to. Needed e.g. to get current font-size and view-port.",
                    "type": "JSG.SVG.Element"
                }
            ],
            "return": {
                "description": "The corresponding value in pixels.",
                "type": "Number"
            },
            "class": "JSG.SVG.Unit",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\unit.js",
            "line": 119,
            "description": "Converts given unit value to vertical pixels.<br/>\nNote: the dpi value used during calculation can be different in horizontal and vertical direction. Therefore \nthe differentiation of {{#crossLink \"JSG.SVG.Unit/toPxX:method\"}}{{/crossLink}} and \n{{#crossLink \"JSG.SVG.Unit/toPxY:method\"}}{{/crossLink}} is required.",
            "itemtype": "method",
            "name": "toPxY",
            "params": [
                {
                    "name": "value",
                    "description": "The unit value to convert.",
                    "type": "String"
                },
                {
                    "name": "el",
                    "description": "The SVG element to apply unit conversion to. Needed e.g. to get current font-size and view-port.",
                    "type": "JSG.SVG.Element"
                }
            ],
            "return": {
                "description": "The corresponding value in pixels.",
                "type": "Number"
            },
            "class": "JSG.SVG.Unit",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\unit.js",
            "line": 133,
            "description": "Converts given unit values to horizontal and vertical pixels.<br/>",
            "itemtype": "method",
            "name": "toPixels",
            "params": [
                {
                    "name": "x",
                    "description": "The horizontal unit value to convert.",
                    "type": "String"
                },
                {
                    "name": "y",
                    "description": "The vertical unit value to convert.",
                    "type": "String"
                },
                {
                    "name": "el",
                    "description": "The SVG element to apply unit conversion to. Needed e.g. to get current font-size and view-port.",
                    "type": "JSG.SVG.Element"
                }
            ],
            "return": {
                "description": "An object with <code>x</code> and <code>y</code> properties which represents converted values.",
                "type": "Object"
            },
            "class": "JSG.SVG.Unit",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\unit.js",
            "line": 148,
            "description": "Returns a point object with the percentage values for given <code>x</code> and <code>y</code> relative to the \ncurrent view-box/-port of specified element. <code>x</code> and <code>y</code> must be given in pixels.",
            "itemtype": "method",
            "name": "toPercentage",
            "params": [
                {
                    "name": "x",
                    "description": "The x value which should be relative to the width of current view-box/-port.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y value which should be relative to the height of current view-box/-port.",
                    "type": "Number"
                },
                {
                    "name": "el",
                    "description": "The SVG element which provides the view-box/-port.",
                    "type": "JSG.SVG.Element"
                }
            ],
            "return": {
                "description": "An object containing the relative values for <code>x</code> and <code>y</code>.",
                "type": "Object"
            },
            "class": "JSG.SVG.Unit",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\utils.js",
            "line": 17,
            "description": "Translates the coordinates of given GraphItem to its current top-left location and recalculates GraphItem's\nsize and origin.",
            "itemtype": "method",
            "name": "translateCoords",
            "params": [
                {
                    "name": "item",
                    "description": "The GraphItem to translate the coordinates of.",
                    "type": "JSG.graph.model.GraphItem"
                }
            ],
            "return": {
                "description": "return_description",
                "type": "Return_type"
            },
            "class": "JSG.SVG.Utils",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\viewbox.js",
            "line": 16,
            "description": "Creates a <code>viewbox</code> object from provided string. This string should be the value of an SVG\n<code>viewbox</code> attribute. The created object contains properties for <code>minX</code>, <code>minY</code>,\n<code>width</code> and <code>heightX</code> values respectively. An additional <code>getScale</code> method\nis provided to calculate the view-box scale for a given dimension.",
            "itemtype": "method",
            "name": "createViewBox",
            "params": [
                {
                    "name": "str",
                    "description": "The string to create the <code>viewbox</code> object from.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An object representing an SVG <code>viewbox</code> attribute.",
                "type": "Object"
            },
            "class": "JSG.SVG.ViewBox",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\viewbox.js",
            "line": 34,
            "description": "Calculates the scale defined by this view-box for a given dimension.",
            "itemtype": "method",
            "name": "getScale",
            "params": [
                {
                    "name": "width",
                    "description": "The original width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The original height. If not provided it will be equal to width.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "An object with scale values for width and height",
                "type": "Object"
            },
            "class": "JSG.SVG.ViewBox",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        },
        {
            "file": "..\\dist\\wc\\jsgsvg\\viewbox.js",
            "line": 55,
            "description": "Creates a new view-box object.",
            "itemtype": "method",
            "name": "createFrom",
            "params": [
                {
                    "name": "el",
                    "description": "An SVG element to create a view-box object for.",
                    "type": "JSG.SVG.Element"
                },
                {
                    "name": "str",
                    "description": "The value of the SVG <code>viewbox</code> attribute.",
                    "type": "Str"
                }
            ],
            "return": {
                "description": "An object representing the SVG <code>viewbox</code> attribute.",
                "type": "Object"
            },
            "class": "JSG.SVG.ViewBox",
            "module": "JSG.SVG",
            "namespace": "JSG.SVG"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: link",
            "line": " ..\\dist\\wc\\jsg\\jsg.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " ..\\dist\\wc\\jsg\\jsg.js:1"
        },
        {
            "message": "unknown tag: link",
            "line": " ..\\dist\\wc\\jsgsvg\\jsgsvg.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " ..\\dist\\wc\\jsgsvg\\jsgsvg.js:1"
        },
        {
            "message": "Missing item type\nA JavaScript Graph Library",
            "line": " ..\\dist\\wc\\jsg\\jsg.js:1"
        },
        {
            "message": "Missing item type\nA simple SVG library to convert and import svg files to JSG.",
            "line": " ..\\dist\\wc\\jsgsvg\\jsgsvg.js:1"
        }
    ]
}