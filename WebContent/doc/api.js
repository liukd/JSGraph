YUI.add("yuidoc-meta", function(Y) {
   Y.YUIDoc = { meta: {
    "classes": [
        "Array",
        "JSG",
        "JSG.Functions",
        "JSG.JSG",
        "JSG.SVG",
        "JSG.SVG.Circle",
        "JSG.SVG.Color",
        "JSG.SVG.Defs",
        "JSG.SVG.Element",
        "JSG.SVG.Ellipse",
        "JSG.SVG.Error",
        "JSG.SVG.Group",
        "JSG.SVG.Line",
        "JSG.SVG.Matrix",
        "JSG.SVG.Model",
        "JSG.SVG.Path",
        "JSG.SVG.PathData",
        "JSG.SVG.Polygon",
        "JSG.SVG.Rect",
        "JSG.SVG.Shapes",
        "JSG.SVG.Styles",
        "JSG.SVG.Svg",
        "JSG.SVG.TSpan",
        "JSG.SVG.Text",
        "JSG.SVG.Transform",
        "JSG.SVG.Unit",
        "JSG.SVG.Utils",
        "JSG.SVG.ViewBox",
        "JSG.anim.Animation",
        "JSG.anim.AnimationType",
        "JSG.commons.Arrays",
        "JSG.commons.BSTree",
        "JSG.commons.ImagePool",
        "JSG.commons.ManagedList",
        "JSG.commons.Map",
        "JSG.commons.NamedImage",
        "JSG.commons.Numbers",
        "JSG.commons.NumericData",
        "JSG.commons.StableMap",
        "JSG.commons.Strings",
        "JSG.commons.TraverseOrder",
        "JSG.commons.XML",
        "JSG.commons.XMLWriter",
        "JSG.geometry.BoundingBox",
        "JSG.geometry.Constants",
        "JSG.geometry.Matrix",
        "JSG.geometry.Point",
        "JSG.geometry.PointList",
        "JSG.geometry.Rectangle",
        "JSG.geometry.Utils",
        "JSG.graph.Coordinate",
        "JSG.graph.CoordinateProxy",
        "JSG.graph.Pin",
        "JSG.graph.ReshapeCoordinate",
        "JSG.graph.ReshapeType",
        "JSG.graph.Size",
        "JSG.graph.Utils",
        "JSG.graph.attr.ArrowStyle",
        "JSG.graph.attr.Attribute",
        "JSG.graph.attr.AttributeList",
        "JSG.graph.attr.AttributeProxy",
        "JSG.graph.attr.AttributeUtils",
        "JSG.graph.attr.BooleanAttribute",
        "JSG.graph.attr.ButtonPosition",
        "JSG.graph.attr.ConditionalAttribute",
        "JSG.graph.attr.ConstAttribute",
        "JSG.graph.attr.ConstAttributeList",
        "JSG.graph.attr.Direction",
        "JSG.graph.attr.EdgeAttributes",
        "JSG.graph.attr.EdgeLayoutAttributes",
        "JSG.graph.attr.EditMask",
        "JSG.graph.attr.FillStyle",
        "JSG.graph.attr.FormatAttributes",
        "JSG.graph.attr.GradientStyle",
        "JSG.graph.attr.ItemAttributes",
        "JSG.graph.attr.LayoutAttributes",
        "JSG.graph.attr.LineBehavior",
        "JSG.graph.attr.LineCap",
        "JSG.graph.attr.LineStyle",
        "JSG.graph.attr.Moveable",
        "JSG.graph.attr.NumberAttribute",
        "JSG.graph.attr.ObjectAttribute",
        "JSG.graph.attr.OrthoEdgeLayoutAttributes",
        "JSG.graph.attr.PatternStyle",
        "JSG.graph.attr.PortMode",
        "JSG.graph.attr.SelectionMode",
        "JSG.graph.attr.ShadowDirection",
        "JSG.graph.attr.StringAttribute",
        "JSG.graph.attr.Template",
        "JSG.graph.attr.TemplateStore",
        "JSG.graph.attr.TextFormatAttributes",
        "JSG.graph.attr.TextFormatAttributes.FontStyle",
        "JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition",
        "JSG.graph.attr.TextFormatAttributes.TextAlignment",
        "JSG.graph.attr.TextFormatAttributes.TextBaseline",
        "JSG.graph.attr.TextFormatAttributes.VerticalTextPosition",
        "JSG.graph.attr.TextNodeAttributes",
        "JSG.graph.attr.TextNodeAttributes.SizeMode",
        "JSG.graph.attr.WatermarkAttributes",
        "JSG.graph.attr.WatermarkAttributes.HorizontalPosition",
        "JSG.graph.attr.WatermarkAttributes.VerticalPosition",
        "JSG.graph.command.AbstractGroupUngroupCommand",
        "JSG.graph.command.AbstractItemCommand",
        "JSG.graph.command.AbstractItemCommandProxy",
        "JSG.graph.command.AddAttributeCommand",
        "JSG.graph.command.AddItemCommand",
        "JSG.graph.command.AddLabelCommand",
        "JSG.graph.command.AddPortCommand",
        "JSG.graph.command.AlignItemsCommand",
        "JSG.graph.command.Alignment",
        "JSG.graph.command.AttachCommand",
        "JSG.graph.command.ChangeAttributeCommand",
        "JSG.graph.command.ChangeItemOrder",
        "JSG.graph.command.ChangeItemOrderCommand",
        "JSG.graph.command.ChangeParentCommand",
        "JSG.graph.command.CollapseItemCommand",
        "JSG.graph.command.Command",
        "JSG.graph.command.CommandProxy",
        "JSG.graph.command.CommandStack",
        "JSG.graph.command.CompoundCommand",
        "JSG.graph.command.DeleteEdgeCommand",
        "JSG.graph.command.DeleteItemCommand",
        "JSG.graph.command.DeleteNodeCommand",
        "JSG.graph.command.DeletePortCommand",
        "JSG.graph.command.DetachCommand",
        "JSG.graph.command.DropItemCommand",
        "JSG.graph.command.FormatItemCommand",
        "JSG.graph.command.GroupCreator",
        "JSG.graph.command.GroupCreatorSimple",
        "JSG.graph.command.GroupItemsCommand",
        "JSG.graph.command.InsertLinePointsAtCommand",
        "JSG.graph.command.InternalDeleteItemCommand",
        "JSG.graph.command.InternalMoveItemCommand",
        "JSG.graph.command.InternalResizeItemCommand",
        "JSG.graph.command.InternalRotateItemCommand",
        "JSG.graph.command.MoveEdgeCommand",
        "JSG.graph.command.MoveItemCommand",
        "JSG.graph.command.MoveNodeCommand",
        "JSG.graph.command.NoOpCommand",
        "JSG.graph.command.PasteItemsCommand",
        "JSG.graph.command.RemoveAttributeCommand",
        "JSG.graph.command.RemoveLinePointsCommand",
        "JSG.graph.command.ReplaceSubItemCommand",
        "JSG.graph.command.ReshapeItemCommand",
        "JSG.graph.command.ResizeEdgeCommand",
        "JSG.graph.command.ResizeItemCommand",
        "JSG.graph.command.ResizeNodeCommand",
        "JSG.graph.command.RotateEdgeCommand",
        "JSG.graph.command.RotateItemCommand",
        "JSG.graph.command.RotateNodeCommand",
        "JSG.graph.command.SetAttributeCommand",
        "JSG.graph.command.SetAttributesMapCommand",
        "JSG.graph.command.SetBezierShapePointsCommand",
        "JSG.graph.command.SetLayoutAttributeCommand",
        "JSG.graph.command.SetLinePointAtCommand",
        "JSG.graph.command.SetLineShapePointsCommand",
        "JSG.graph.command.SetLinkCommand",
        "JSG.graph.command.SetNameCommand",
        "JSG.graph.command.SetPinCommand",
        "JSG.graph.command.SetShapeCommand",
        "JSG.graph.command.SetShapePointsCommand",
        "JSG.graph.command.SetSizeCommand",
        "JSG.graph.command.SetTextCommand",
        "JSG.graph.command.SetTextSizeModeCommand",
        "JSG.graph.command.SizeItems",
        "JSG.graph.command.SizeItemsCommand",
        "JSG.graph.command.TextFormatItemCommand",
        "JSG.graph.command.TranslateItemsCommand",
        "JSG.graph.command.UnGroupItemsCommand",
        "JSG.graph.controller.ConnectionController",
        "JSG.graph.controller.ConnectionController.PathListener",
        "JSG.graph.controller.ContentNodeController",
        "JSG.graph.controller.ContentPaneController",
        "JSG.graph.controller.FindFlags",
        "JSG.graph.controller.GraphController",
        "JSG.graph.controller.GraphControllerFactory",
        "JSG.graph.controller.GraphItemController",
        "JSG.graph.controller.GroupController",
        "JSG.graph.controller.GroupController.GroupListener",
        "JSG.graph.controller.ModelController",
        "JSG.graph.controller.NodeController",
        "JSG.graph.controller.PortController",
        "JSG.graph.controller.RootController",
        "JSG.graph.expr.Add",
        "JSG.graph.expr.AttributeExpression",
        "JSG.graph.expr.AttributeReference",
        "JSG.graph.expr.Bool",
        "JSG.graph.expr.BooleanConstraint",
        "JSG.graph.expr.BooleanExpression",
        "JSG.graph.expr.Cond",
        "JSG.graph.expr.ConstExpression",
        "JSG.graph.expr.Div",
        "JSG.graph.expr.Expression",
        "JSG.graph.expr.ExpressionConstraint",
        "JSG.graph.expr.ExpressionProxy",
        "JSG.graph.expr.FormulaParser",
        "JSG.graph.expr.Func",
        "JSG.graph.expr.MapExpression",
        "JSG.graph.expr.Mul",
        "JSG.graph.expr.NumberConstraint",
        "JSG.graph.expr.NumberExpression",
        "JSG.graph.expr.NumberRangeConstraint",
        "JSG.graph.expr.ObjectConstraint",
        "JSG.graph.expr.ObjectExpression",
        "JSG.graph.expr.Operand",
        "JSG.graph.expr.Operator",
        "JSG.graph.expr.Operators",
        "JSG.graph.expr.RangeConstraint",
        "JSG.graph.expr.Reference",
        "JSG.graph.expr.StringConstant",
        "JSG.graph.expr.StringConstraint",
        "JSG.graph.expr.StringExpression",
        "JSG.graph.expr.Sub",
        "JSG.graph.expr.Term",
        "JSG.graph.feedback.EdgeFeedback",
        "JSG.graph.feedback.Feedback",
        "JSG.graph.feedback.FeedbackView",
        "JSG.graph.feedback.MoveFeedbackView",
        "JSG.graph.feedback.OrthoEdgeFeedback",
        "JSG.graph.feedback.PortFeedback",
        "JSG.graph.interaction.AbstractInteraction",
        "JSG.graph.interaction.ActionHandle",
        "JSG.graph.interaction.AddPointsDelegate",
        "JSG.graph.interaction.CommandButtonActivator",
        "JSG.graph.interaction.CreateBezierInteraction",
        "JSG.graph.interaction.CreateEdgeActivator",
        "JSG.graph.interaction.CreateEdgeInteraction",
        "JSG.graph.interaction.CreateFriendActivator",
        "JSG.graph.interaction.CreateFriendInteraction",
        "JSG.graph.interaction.CreateItemInteraction",
        "JSG.graph.interaction.CreateNodeInteraction",
        "JSG.graph.interaction.CreateOrthoEdgeInteraction",
        "JSG.graph.interaction.CreateOrthoEdgeInteraction.CREATION_MODE",
        "JSG.graph.interaction.CreatePolyLineInteraction",
        "JSG.graph.interaction.DefaultKeyHandler",
        "JSG.graph.interaction.Delegate",
        "JSG.graph.interaction.DragDropActivator",
        "JSG.graph.interaction.DragDropInteraction",
        "JSG.graph.interaction.DragDropInteraction.DnD",
        "JSG.graph.interaction.DragDropInteraction.Drag",
        "JSG.graph.interaction.DragDropInteraction.Drop",
        "JSG.graph.interaction.DropDelegate",
        "JSG.graph.interaction.EditBezierShapeInteraction",
        "JSG.graph.interaction.EditLineShapeInteraction",
        "JSG.graph.interaction.EditShapeInteraction",
        "JSG.graph.interaction.EditTextActivator",
        "JSG.graph.interaction.EditTextInteraction",
        "JSG.graph.interaction.FeedbackStructure",
        "JSG.graph.interaction.GraphInteraction",
        "JSG.graph.interaction.Highlighter",
        "JSG.graph.interaction.Interaction",
        "JSG.graph.interaction.InteractionActivator",
        "JSG.graph.interaction.InteractionDispatcher",
        "JSG.graph.interaction.InteractionHandler",
        "JSG.graph.interaction.InteractionUtils",
        "JSG.graph.interaction.LinkActivator",
        "JSG.graph.interaction.LinkHandle",
        "JSG.graph.interaction.MarqueeActivator",
        "JSG.graph.interaction.MarqueeInteraction",
        "JSG.graph.interaction.MoveActivator",
        "JSG.graph.interaction.MoveAlignHelper",
        "JSG.graph.interaction.MoveDelegate",
        "JSG.graph.interaction.MoveInteraction",
        "JSG.graph.interaction.PanInteraction",
        "JSG.graph.interaction.PanInteraction.Activator",
        "JSG.graph.interaction.PinchInteraction",
        "JSG.graph.interaction.PinchInteraction.Activator",
        "JSG.graph.interaction.ReadOnlyInteraction",
        "JSG.graph.interaction.ReshapeActivator",
        "JSG.graph.interaction.ReshapeInteraction",
        "JSG.graph.interaction.ResizeActivator",
        "JSG.graph.interaction.ResizeDelegate",
        "JSG.graph.interaction.ResizeEdgeInteraction",
        "JSG.graph.interaction.ResizeInteraction",
        "JSG.graph.interaction.ResizeLineNodeInteraction",
        "JSG.graph.interaction.ResizeOrthoEdgeInteraction",
        "JSG.graph.interaction.ResizeSnapHelper",
        "JSG.graph.interaction.RotateActivator",
        "JSG.graph.interaction.RotateInteraction",
        "JSG.graph.interaction.SelectionChecker",
        "JSG.graph.interaction.ShapeListener",
        "JSG.graph.interaction.SnapHelper",
        "JSG.graph.interaction.SnapType",
        "JSG.graph.interaction.TYPE",
        "JSG.graph.interaction.TooltipActivator",
        "JSG.graph.interaction.ViewInteraction",
        "JSG.graph.interaction.ViewInteraction.Activator",
        "JSG.graph.interaction.ZoomInteraction",
        "JSG.graph.layout.LayoutManager",
        "JSG.graph.model.AttributedTextNode",
        "JSG.graph.model.Attributes",
        "JSG.graph.model.Condition",
        "JSG.graph.model.ConditionManager",
        "JSG.graph.model.Connection",
        "JSG.graph.model.ConnectionRestorer",
        "JSG.graph.model.ContentNode",
        "JSG.graph.model.ContentPane",
        "JSG.graph.model.Edge",
        "JSG.graph.model.Graph",
        "JSG.graph.model.GraphItem",
        "JSG.graph.model.GraphItemFactory",
        "JSG.graph.model.Group",
        "JSG.graph.model.Group.Layouter",
        "JSG.graph.model.Layer",
        "JSG.graph.model.LineConnection",
        "JSG.graph.model.LineNode",
        "JSG.graph.model.Model",
        "JSG.graph.model.Node",
        "JSG.graph.model.Path",
        "JSG.graph.model.Port",
        "JSG.graph.model.PortMapper",
        "JSG.graph.model.State",
        "JSG.graph.model.TextNode",
        "JSG.graph.model.events.AttributeChangeEvent",
        "JSG.graph.model.events.AttributeListener",
        "JSG.graph.model.events.EdgeListener",
        "JSG.graph.model.events.Event",
        "JSG.graph.model.events.EventDispatcher",
        "JSG.graph.model.events.EventListener",
        "JSG.graph.model.events.FormatListener",
        "JSG.graph.model.events.GraphItemListener",
        "JSG.graph.model.events.NodeEvent",
        "JSG.graph.model.events.PageEvent",
        "JSG.graph.model.events.PortListener",
        "JSG.graph.model.events.ShapeEvent",
        "JSG.graph.model.settings.AbstractSettings",
        "JSG.graph.model.settings.CustomSetting",
        "JSG.graph.model.settings.GraphSettings",
        "JSG.graph.model.settings.GraphSettingsEvent",
        "JSG.graph.model.settings.Page",
        "JSG.graph.model.settings.SettingID",
        "JSG.graph.model.settings.ViewMode",
        "JSG.graph.model.shapes.BBoxShape",
        "JSG.graph.model.shapes.BezierShape",
        "JSG.graph.model.shapes.EllipseShape",
        "JSG.graph.model.shapes.LineShape",
        "JSG.graph.model.shapes.OrthoLineBehavior",
        "JSG.graph.model.shapes.OrthoLineShape",
        "JSG.graph.model.shapes.OrthoLineShapeLayouter",
        "JSG.graph.model.shapes.PathShape",
        "JSG.graph.model.shapes.PathShape.Points",
        "JSG.graph.model.shapes.PolygonShape",
        "JSG.graph.model.shapes.RectangleShape",
        "JSG.graph.model.shapes.Shape",
        "JSG.graph.model.shapes.ShapeFactory",
        "JSG.graph.notifications.Notification",
        "JSG.graph.notifications.NotificationCenter",
        "JSG.graph.properties.EdgeProperties",
        "JSG.graph.properties.FormatProperties",
        "JSG.graph.properties.GraphItemProperties",
        "JSG.graph.properties.GraphProperties",
        "JSG.graph.properties.IndexProperty",
        "JSG.graph.properties.ItemAttributesProperties",
        "JSG.graph.properties.LayoutAttributeProperties",
        "JSG.graph.properties.NodeProperties",
        "JSG.graph.properties.Properties",
        "JSG.graph.properties.PropertiesProvider",
        "JSG.graph.properties.Property",
        "JSG.graph.properties.TextFormatProperties",
        "JSG.graph.properties.TextNodeProperties",
        "JSG.graph.view.BBoxListener",
        "JSG.graph.view.BBoxView",
        "JSG.graph.view.CollapseButton",
        "JSG.graph.view.ContentNodeView",
        "JSG.graph.view.ContentNodeViewPanel",
        "JSG.graph.view.ContentPaneView",
        "JSG.graph.view.EdgeView",
        "JSG.graph.view.EditBezierShapeView",
        "JSG.graph.view.EditLineShapeView",
        "JSG.graph.view.EditShapeView",
        "JSG.graph.view.EditShapeView.Marker",
        "JSG.graph.view.FloatingToolbar",
        "JSG.graph.view.FloatingToolbar.Tool",
        "JSG.graph.view.FloatingToolbar.ToolBreak",
        "JSG.graph.view.FloatingToolbar.ToolButton",
        "JSG.graph.view.FloatingToolbar.ToolColor",
        "JSG.graph.view.FloatingToolbar.ToolList",
        "JSG.graph.view.FloatingToolbar.ToolSeparator",
        "JSG.graph.view.GraphItemView",
        "JSG.graph.view.GraphView",
        "JSG.graph.view.GroupView",
        "JSG.graph.view.MarqueeFeedbackView",
        "JSG.graph.view.NodeView",
        "JSG.graph.view.PortView",
        "JSG.graph.view.PositionFeedbackView",
        "JSG.graph.view.SelectionFeedbackView",
        "JSG.graph.view.SelectionProvider",
        "JSG.graph.view.SnapFeedbackView",
        "JSG.graph.view.TextView",
        "JSG.graph.view.selection.BBoxSelectionHandler",
        "JSG.graph.view.selection.CommandButton",
        "JSG.graph.view.selection.CommandButtonHandler",
        "JSG.graph.view.selection.GroupSelectionHandler",
        "JSG.graph.view.selection.INDEX",
        "JSG.graph.view.selection.LayerId",
        "JSG.graph.view.selection.LineNodeSelectionHandler",
        "JSG.graph.view.selection.LineSelectionHandler",
        "JSG.graph.view.selection.Marker",
        "JSG.graph.view.selection.NodeSelectionHandler",
        "JSG.graph.view.selection.OrthoLineSelectionHandler",
        "JSG.graph.view.selection.Position",
        "JSG.graph.view.selection.RotationMarker",
        "JSG.graph.view.selection.SelectionHandle",
        "JSG.graph.view.selection.SelectionHandler",
        "JSG.graph.view.selection.SelectionHandlerFactory",
        "JSG.graph.view.selection.SelectionStyle",
        "JSG.graph.view.selection.SelectionView",
        "JSG.graph.view.selection.TYPE",
        "JSG.graph.view.selection.TextSelectionHandler",
        "JSG.graph.view.selection.Type",
        "JSG.graph.view.shapes.BezierShapeRenderer",
        "JSG.graph.view.shapes.DefaultShapeRenderer",
        "JSG.graph.view.shapes.EllipseShapeRenderer",
        "JSG.graph.view.shapes.LineShapeRenderer",
        "JSG.graph.view.shapes.OrthoLineShapeRenderer",
        "JSG.graph.view.shapes.PathShapeRenderer",
        "JSG.graph.view.shapes.PathShapeRenderer.Commands",
        "JSG.graph.view.shapes.PolygonShapeRenderer",
        "JSG.graph.view.shapes.RectangleShapeRenderer",
        "JSG.graph.view.shapes.ShapeRenderer",
        "JSG.ui.Cursor",
        "JSG.ui.GraphEditor",
        "JSG.ui.GraphListener",
        "JSG.ui.GraphViewPanel",
        "JSG.ui.Scale",
        "JSG.ui.ScrollPanel",
        "JSG.ui.Style",
        "JSG.ui.View",
        "JSG.ui.Widget",
        "JSG.ui.events.ButtonType",
        "JSG.ui.events.DragEvent",
        "JSG.ui.events.DragEventType",
        "JSG.ui.events.Event",
        "JSG.ui.events.GestureEvent",
        "JSG.ui.events.GestureEventType",
        "JSG.ui.events.KeyEvent",
        "JSG.ui.events.KeyEventType",
        "JSG.ui.events.KeyType",
        "JSG.ui.events.MouseEvent",
        "JSG.ui.events.MouseEventType",
        "JSG.ui.graphics.CoordinateSystem",
        "JSG.ui.graphics.DisplayMode",
        "JSG.ui.graphics.DocumentEventDispatcher",
        "JSG.ui.graphics.GraphicSystem",
        "JSG.ui.graphics.Graphics",
        "JSG.ui.graphics.MetricCoordinateSystem",
        "JSG.ui.graphics.SVGraphics",
        "JSG.ui.graphics.ScalableGraphics",
        "JSG.ui.navigator.JSGNavigator",
        "JSG.ui.navigator.JSGNavigatorInteractionHandler",
        "JSG.ui.navigator.JSGNavigatorPanel",
        "JSG.ui.navigator.NavigatorContentView",
        "JSG.ui.navigator.NavigatorControllerFactory",
        "JSG.ui.navigator.NavigatorEdgeView",
        "JSG.ui.navigator.NavigatorGraphController",
        "JSG.ui.navigator.NavigatorGraphView",
        "JSG.ui.navigator.NavigatorItemController",
        "JSG.ui.navigator.NavigatorItemView",
        "JSG.ui.navigator.NavigatorViewer",
        "JSG.ui.navigator.Overlay",
        "JSG.ui.navigator.OverlayInteraction\nextends JSG.graph.interaction.Interaction",
        "JSG.ui.scrollview.Arrow",
        "JSG.ui.scrollview.Mode",
        "JSG.ui.scrollview.Range",
        "JSG.ui.scrollview.RangeModel",
        "JSG.ui.scrollview.ScrollBar",
        "JSG.ui.scrollview.ScrollView",
        "JSG.ui.scrollview.Thumb",
        "JSG.ui.scrollview.ViewPanel",
        "JSG.ui.scrollview.ViewPort",
        "JSG.ui.shapelibrary.KeyHandler",
        "JSG.ui.shapelibrary.ShapeLibrary",
        "JSG.ui.shapelibrary.ShapeLibraryDefaultInteraction",
        "JSG.ui.shapelibrary.ShapeLibraryEditor",
        "JSG.ui.shapelibrary.ShapeLibrarySelectionView",
        "JSG.ui.shapelibrary.ShapeLibraryViewer",
        "JSG.ui.viewer.ControllerViewer",
        "JSG.ui.viewer.GraphViewer",
        "JSG.ui.viewer.ScrollableViewer",
        "JSG.ui.viewer.ScrollableViewerInteractionDecorator",
        "Monitor",
        "Number",
        "String",
        "StringBuffer"
    ],
    "modules": [
        "JSG",
        "JSG.SVG",
        "JSG.anim",
        "JSG.commons",
        "JSG.geometry",
        "JSG.graph",
        "JSG.graph.attr",
        "JSG.graph.command",
        "JSG.graph.controller",
        "JSG.graph.expr",
        "JSG.graph.feedback",
        "JSG.graph.interaction",
        "JSG.graph.layout",
        "JSG.graph.model",
        "JSG.graph.model.events",
        "JSG.graph.model.settings",
        "JSG.graph.model.shapes",
        "JSG.graph.notifications",
        "JSG.graph.properties",
        "JSG.graph.view",
        "JSG.graph.view.selection",
        "JSG.graph.view.shapes",
        "JSG.ui",
        "JSG.ui.events",
        "JSG.ui.graphics",
        "JSG.ui.navigator",
        "JSG.ui.scrollview",
        "JSG.ui.shapelibrary",
        "JSG.ui.viewer"
    ],
    "allModules": [
        {
            "displayName": "JSG",
            "name": "JSG",
            "description": "The JSG global namespace object."
        },
        {
            "displayName": "JSG.anim",
            "name": "JSG.anim",
            "description": "Module containing utilities for animations."
        },
        {
            "displayName": "JSG.commons",
            "name": "JSG.commons",
            "description": "The commons module defines general classes used across this framework.\nFurthermore some class extensions to JavaScript core objects, like Array, Number and String are defined here as well."
        },
        {
            "displayName": "JSG.geometry",
            "name": "JSG.geometry",
            "description": "This module defines fundamental classes related to geometric tasks"
        },
        {
            "displayName": "JSG.graph",
            "name": "JSG.graph",
            "description": "Module containing graph related classes"
        },
        {
            "displayName": "JSG.graph.attr",
            "name": "JSG.graph.attr",
            "description": "Attributes provide a flexible mechanism to attach arbitrary values to an instance of\n{{#crossLink \"JSG.graph.model.Model\"}}{{/crossLink}}. An Attribute simply defines a name-value\npair in which the value is given as an {{#crossLink \"JSG.graph.expr.Expression\"}}{{/crossLink}}.<br/>\nAttributes can be grouped by adding them to an {{#crossLink \"JSG.graph.attr.AttributeList\"}}{{/crossLink}}.\nNote that it is allowed to nest AttributeLists into each other. So it is possible to construct\nhierarchies out of Attributes and AttributeLists. To reference an Attribute or an AttributeList within\nsuch a hierarchy a unique path is build by using the Attribute names. Hence, it is a mandatory that\nthe Attribute name should be unique, at least within its containing AttributeList.<br/>\nAttributeLists also support the concept of inheritance, i.e. it is possible to register a parent list. That means if \nan AttributeList has a parent it automatically inherits the attributes defined within its parent list but without \nadding them, i.e. the list itself may be empty. This feature is used to support {{#crossLink \"JSG.graph.attr.Template\"}}{{/crossLink}}s\nwhich are globally accessible via a {{#crossLink \"JSG.graph.attr.TemplateStore\"}}{{/crossLink}}. A Template simply\ndefines a list of immutable Attributes which can be set as a parent to any AttributeList.<br/>\nSo nesting AttributeLists is a sort of categorization whereas a parent list defines simple inheritance of Attributes."
        },
        {
            "displayName": "JSG.graph.command",
            "name": "JSG.graph.command",
            "description": "Module containing command classes. Commands should be used to execute actions on GraphItems. A command includes\nan execute, a redo and an undo function to support the undo operation. A command can be combined with other commands\nin a CompoundCommand into one execution or undo step. This way multiple operation in one step are supported."
        },
        {
            "displayName": "JSG.graph.controller",
            "name": "JSG.graph.controller",
            "description": "Controllers are used to implement any logic or behavior a model can have. Since it links view to model\nControllers are created via GraphControllerFactory. Custom controllers can easily be attached\nby setting a custom controller factory derived from {{#crossLink \"JSG.graph.controller.GraphControllerFactory\"}}{{/crossLink}} to the Viewer,\nwhich is attached to the GraphEditor."
        },
        {
            "displayName": "JSG.graph.expr",
            "name": "JSG.graph.expr"
        },
        {
            "displayName": "JSG.graph.feedback",
            "name": "JSG.graph.feedback",
            "description": "A Feedback is a visual representation for a corresponding\n{{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} during an interaction, like move,\nresize and others.</br>\nThe special thing about Feedbacks is that they provide methods to influence\nthe inner state of an item as well as a <code>draw</code> method to draw itself. So feedbacks act\nas a view and a controller. However, a Feedback is neither a Controller nor a View and has\ntherefore a module on its own.</br>\nTypically a Feedback can be created in two different ways. First and usually the simplest way\nto create a Feedback is via {{#crossLink \"JSG.graph.controller.ModelController/createFeedback:method\"}}{{/crossLink}}.\nThis returns a completely initialized and set up Feedback instance. But in some cases the returned\nfeedback is not quite suited, so its possible to create it via its constructor too.\nNote: in this case the feedback item and the feedback view must be created, initialized and set\nup manually before first usage.</br>\nFeedbacks are always drawn on top of a {{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}},\nso keep in mind that the coordinate system of the Feedback view is relative to the\n{{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}}'s origin.</br>\nSome calculations between interaction requires access to the primary GraphItem which can be\nretrieved via getOriginalItem(). Please note that it is not encouraged to change the original\nitem through a Feedback instance."
        },
        {
            "displayName": "JSG.graph.interaction",
            "name": "JSG.graph.interaction",
            "description": "An Interaction is used to perform a more or less complex user task which is driven by mouse, key\nor touch events. Only one Interaction can be active at a time and the currently active Interaction\nwill receive all generated user events. To activate an Interaction simply set it via the\n{{#crossLink \"JSG.graph.interaction.InteractionHandler/setActiveInteraction:method\"}}{{/crossLink}} method.</br>\nOften an Interaction must handle many different tasks. To not clutter up a single Interaction which\nsurely will get unable to maintain it is better to split it into several smaller Interactions.\nThe framework supports this by providing the idea of an InteractionDispatcher which internally\nuses InteractionActivators to activate the corresponding Interaction for each different task.</br>\nFor more information about this refer to the {{#crossLink \"JSG.graph.interaction.InteractionDispatcher\"}}{{/crossLink}}\nand {{#crossLink \"JSG.graph.interaction.InteractionActivator\"}}{{/crossLink}} classes.\nAnd for an example of an InteractionDispatcher look at {{#crossLink \"JSG.graph.interaction.GraphInteraction\"}}{{/crossLink}}.</br>\nSome Interactions support the usage of a {{#crossLink \"JSG.graph.interaction.Delegate\"}}{{/crossLink}} object which \nallows to influence the Interaction behavior. These objects are always optional and if not provided the default interaction \nbehavior is performed. Since a delegate is special to an Interaction only a simple global interface is provided for them.\nTherefore please refer to the Interaction of interest to get more information about its delegate support."
        },
        {
            "displayName": "JSG.graph.layout",
            "name": "JSG.graph.layout",
            "description": "The layout module contains only the LayoutManager. The JS Graph Library is not bound to a specific layout package.\nCurrently we provide a few layout algorithms that can be applied to the graph in a separate package.\nThese layout algorithms will be extended in future versions. You can also connect another or your own implementation of a layout to\nthe JS Graph Library. This is achieved by providing a different LayoutManager and providing another\nlayout package."
        },
        {
            "displayName": "JSG.graph.model",
            "name": "JSG.graph.model",
            "description": "This module contains all model classes used to create graphs.</br>\nA model object usually contains all the data required to represent both the model state and its appearance.\nThe actual visualization is done by a corresponding {{#crossLink \"JSG.graph.view.GraphItemView\"}}{{/crossLink}}\nwhich draws the model based on its {{#crossLink \"JSG.graph.attr.FormatAttributes\"}}{{/crossLink}}\nand {{#crossLink \"JSG.graph.model.shapes.Shape\"}}{{/crossLink}}.</br>\nThe relationship between a model and its view is defined by a\n{{#crossLink \"JSG.graph.controller.ModelController\"}}{{/crossLink}} which also defines the model's behavior.\n</br>\nTo easily build up any kind of graphs typical graph models like {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}},\n{{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}}s and {{#crossLink \"JSG.graph.model.Edge\"}}{{/crossLink}}s\nare predefined. Please refer to the tutorial to see how to construct a Graph and its visual representation.\n</br></br>\nTo get informed about changes in the model class, e.g. a format or attribute change, it is\npossible to register {{#crossLink \"JSG.graph.model.events.EventListener\"}}{{/crossLink}}s to\na model. Before the state of a model is changed each listener gets an\n{{#crossLink \"JSG.graph.model.events.Event\"}}{{/crossLink}} and only if none of the\nregistered listeners vetoes against by setting the Event\n{{#crossLink \"JSG.graph.model.events.Event/doIt:property\"}}{{/crossLink}} flag to <code>false</code>\nthe requested change takes place and the same event object is send a second time. See\n{{#crossLink \"JSG.graph.model.Model/sendPreEvent:method\"}}{{/crossLink}} and\n{{#crossLink \"JSG.graph.model.Model/sendPostEvent:method\"}}{{/crossLink}} too.</br>"
        },
        {
            "displayName": "JSG.graph.model.events",
            "name": "JSG.graph.model.events",
            "description": "This module contains the basic classes to build up the event mechanism used within the framework.\nBeside the {{#crossLink \"JSG.graph.model.events.Event\"}}{{/crossLink}} class itself the\n{{#crossLink \"JSG.graph.model.events.EventListener\"}}{{/crossLink}} and the\n{{#crossLink \"JSG.graph.model.events.EventDispatcher\"}}{{/crossLink}} classes are important too.\nIn principle the mechanism works like follows:\n<ul>\n<li>each model object sends a pre event as a result of a requested modification</li>\n<li>the notification of each registered EventListener is done by the EventDispatcher</li>\n<li>the passed event contains a <code>doIt</code> flag with which a modification can be prohibited, by setting this field to <code>false</code></li>\n<li>if all listeners agree the modification is performed and the event object is send a second time as a post event </li>\n</ul>\nNote that pre and post event is always the same object. So an application can store additional\ninformation to the event object which is preserved between the pre and post function calls.</br>\nTo register a listener either use the {{#crossLink \"JSG.graph.model.Model/addEventListener:method\"}}{{/crossLink}} to\nregister to a single event or use the various <code>addxxxListener</code> methods as a convenient\nway to get informed about several different events."
        },
        {
            "displayName": "JSG.graph.model.settings",
            "name": "JSG.graph.model.settings"
        },
        {
            "displayName": "JSG.graph.model.shapes",
            "name": "JSG.graph.model.shapes",
            "description": "Shapes are used to define the actual form or figure of a {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}}.\nFor example: a general {{#crossLink \"JSG.graph.model.Node\"}}{{/crossLink}} graph item can have\nthe shape of a rectangle, an ellipse, a star or any other figure.</br>\nThe form of a <code>Shape</code> is defined by their inner {{#crossLink \"JSG.graph.Coordinate\"}}{{/crossLink}}s,\nwere each coordinate must be relative to the origin of shapes corresponding graph item. To register\na shape to a graph item use {{#crossLink \"JSG.graph.model.GraphItem/setShapeTo:method\"}}{{/crossLink}}.\n</br></br>\nSee {{#crossLink \"JSG.graph.view.shapes.ShapeRenderer\"}}{{/crossLink}} to get information about\nhow shapes are drawn."
        },
        {
            "displayName": "JSG.graph.notifications",
            "name": "JSG.graph.notifications",
            "description": "{{#crossLink \"JSG.graph.notifications.Notification\"}}{{/crossLink}}s and the\n{{#crossLink \"JSG.graph.notifications.NotificationCenter\"}}{{/crossLink}} provide a useful\nnotification mechanism between objects which should not have or do not require any dependency\nbetween each other. E.g. a custom PropertyTable could be interested in the current selected\n{{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} but has otherwise no dependency to the\n{{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}} or its corresponding\n{{#crossLink \"JSG.graph.view.GraphView\"}}{{/crossLink}}. Therefore the PropertyTable can simply\nregister itself to the NotificationCenter to be notified whenever selection within the Graph\nhas changed. It does this by calling\n{{#crossLink \"JSG.graph.notifications.NotificationCenter/register:method\"}}{{/crossLink}}\nwith\n{{#crossLink \"JSG.graph.view.SelectionProvider/SELECTION_CHANGED_NOTIFICATION:property\"}}{{/crossLink}}\nas notification name.</br>\n<b>Note:</b> it is important to unregister the observer object if notification is no longer needed!"
        },
        {
            "displayName": "JSG.graph.properties",
            "name": "JSG.graph.properties",
            "description": "Properties can be used to enumerate and change attributes of an object and change their values. \nThey are used by expression formulas to get or set values or attributes of model objects. \nAny property that is exposed is also available as a reference in a formula. Look at the\nproperty implementation to find out which references can be used in formulas."
        },
        {
            "displayName": "JSG.graph.view",
            "name": "JSG.graph.view",
            "description": "This module contains classes related to the visual representation of view related classes.\nWhereas the {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} contains the data\nand its corresponding {{#crossLink \"JSG.graph.controller.GraphItemController\"}}{{/crossLink}}\ndefines the behavior the view classes deal with the actual visualization.</br>\nAny visualization data which needs to be persisted must be added to the GraphItem.\n - base class\n - format\n - subclasses should extend => important methods\n - examples NodeView, EdgeView..."
        },
        {
            "displayName": "JSG.graph.view.selection",
            "name": "JSG.graph.view.selection"
        },
        {
            "displayName": "JSG.graph.view.shapes",
            "name": "JSG.graph.view.shapes",
            "description": "This package provides different renderers for the different shape types. The renderer\nto be used for a shape depends on the shape type. E.g. a BezierShape uses a BezierShapeRenderer. The\nappropriate renderer can be retrieved using the static ShapeRenderer class."
        },
        {
            "displayName": "JSG.SVG",
            "name": "JSG.SVG",
            "description": "A simple SVG library to convert and import svg files to JSG."
        },
        {
            "displayName": "JSG.ui",
            "name": "JSG.ui",
            "description": "Within this module you find some of the core classes to display and interact with a {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}} \nmodel, namely {{#crossLink \"JSG.ui.graphics.Graphics\"}}{{/crossLink}}, {{#crossLink \"JSG.ui.graphics.GraphicSystem\"}}{{/crossLink}}, \n{{#crossLink \"JSG.ui.viewer.GraphViewer\"}}{{/crossLink}} and {{#crossLink \"JSG.ui.events.Event\"}}{{/crossLink}}.</br>\nWhile <code>Graphics</code> provide a simple wrapper around an HTML <code>canvas</code> 2D context, to ease and support scaled drawing, \nthe <code>GraphicSystem</code> is mainly used to pass events from the browser to the framework. In doing so the browser events are \nconverted to framework events to provide additional information and to transform between browser coordinate system and \nthe logical coordinate system of the graph. This transformation is handled by the {{#crossLink \"JSG.ui.graphics.CoordinateSystem\"}}{{/crossLink}}\nclass.</br>\nTo visually represent a {{#crossLink \"JSG.graph.model.GraphItem\"}}{{/crossLink}} model a \n{{#crossLink \"JSG.graph.view.GraphItemView\"}}{{/crossLink}} is used. The connection between both classes is done via\na corresponding {{#crossLink \"JSG.graph.controller.ModelController\"}}{{/crossLink}} instance. In order to display a \ncontroller or a hierarchy of controllers a subclass of {{#crossLink \"JSG.ui.viewer.ControllerViewer\"}}{{/crossLink}}\nis used, like the mentioned GraphViewer or a {{#crossLink \"JSG.ui.viewer.ScrollableViewer\"}}{{/crossLink}}.</br> \nAs an example of how all these classes work together one can look at the {{#crossLink \"JSG.ui.GraphEditor\"}}{{/crossLink}}. \nThe <code>GraphEditor</code> creates default instances of a <code>CoordinateSystem</code>, a <code>GraphicSystem</code> \nand a <code>GraphViewer</code>. Only a <code>canvas</code> element must be provided to visualize an arbitrary graph model.</br>\n</br>\nSeveral of the classes defined in this module send {{#crossLink \"JSG.graph.notifications.Notification\"}}{{/crossLink}}.s. \nThose are used as a sort of high level event mechanism without a tight coupling between sender and receiver objects. \nFor more information about this concept refer to the {{#crossLinkModule \"JSG.graph.notifications\"}}{{/crossLinkModule}}\nmodule. Classes which will send notifications document this within their class documentation.</br>"
        },
        {
            "displayName": "JSG.ui.events",
            "name": "JSG.ui.events"
        },
        {
            "displayName": "JSG.ui.graphics",
            "name": "JSG.ui.graphics",
            "description": "This module contains the GraphicSystem class that interacts with the canvas DOM element. This class\nregisters event handlers to enable user interface interactions and generates output to the canvas element.\nIt also contains classes that convert logical internal coordinates to device coordinates and classes\nthat generate visible output on a output medium like the canvas or an SVG file."
        },
        {
            "displayName": "JSG.ui.navigator",
            "name": "JSG.ui.navigator",
            "description": "This module provides classes to implement a Navigator. A navigator can be used to\nvisualize an overview of a graph. It provides an user interface to change the viewport\ninto the graph by panning or zooming using the mouse. The navigator uses a canvas element\nto display the graph."
        },
        {
            "displayName": "JSG.ui.scrollview",
            "name": "JSG.ui.scrollview",
            "description": "The scrollview module contains a set of classes to implement scrolling functionality. It includes a view, which \nlayouts the {{#crossLink \"JSG.ui.scrollview.ScrollBar\"}}{{/crossLink}}s and the content to scroll. A scrollbar itself \nconsists of two {{#crossLink \"JSG.ui.scrollview.Arrow\"}}{{/crossLink}} buttons, a so called scrollbar \n{{#crossLink \"JSG.ui.scrollview.Thumb\"}}{{/crossLink}} and a scrollbar {{#crossLink \"JSG.ui.scrollview.Range\"}}{{/crossLink}}. \nThese classes also handle the mouse input to initiate scroll activities. The glue between the scrolled content and the \nscrollbars is defined by a {{#crossLink \"JSG.ui.scrollview.RangeModel\"}}{{/crossLink}} which notifies its registered \nobservers about scroll changes."
        },
        {
            "displayName": "JSG.ui.shapelibrary",
            "name": "JSG.ui.shapelibrary",
            "description": "This module provides a component to display and manage library items. The component contains \na GraphEditor, that is attached to a canvas, which has to be provided. The graph acts as a drag source for \ninserting custom GraphItems oder Nodes into a graph. The library items can be visually separated\nby providing categories. The items in the ShapeLibrary are Nodes containing a name and an image\nto represent the custom library item. The image is used to display the item in the library. The Node\ncan be dragged into another Graph. There you can create the desired item identified by the name of the Node."
        },
        {
            "displayName": "JSG.ui.viewer",
            "name": "JSG.ui.viewer",
            "description": "Viewers are used to display a hierarchy of {{#crossLink \"JSG.graph.controller.ModelController\"}}{{/crossLink}}s. At \nthe top there is always a so called root controller to have a well defined hierarchy root. Hence, the default root \ncontroller is an instance of {{#crossLink \"JSG.graph.controller.RootController\"}}{{/crossLink}}. Now this root controller \ndefines the actual content controller of the viewer, e.g. for a displayed {{#crossLink \"JSG.graph.model.Graph\"}}{{/crossLink}}\nmodel the content controller will be an instance of {{#crossLink \"JSG.graph.controller.GraphController\"}}{{/crossLink}}.\nBased on this root the controller hierarchy is build up running from top to bottom where each controller is created \nusing a registered {{#crossLink \"JSG.graph.controller.GraphControllerFactory\"}}{{/crossLink}}. That means the controller \nhierarchy is simply like <code>RootController -> ContentController -> ModelControllers</code>. For example a displayed \n<code>Graph</code> has following hierarchy <code>RootController -> GraphController -> GraphItemController[s]</code>.</br> \nTo easily get these controllers each viewer providers corresponding methods like \n{{#crossLink \"JSG.ui.viewer.ControllerViewer/getRootController:method\"}}{{/crossLink}},\n{{#crossLink \"JSG.ui.viewer.ControllerViewer/getContent:method\"}}{{/crossLink}} and various <code>findController</code>\nmethods to search for special controllers within displayed controller hierarchy. </br>\nTo provide default user interaction a viewer also has a default {{#crossLink \"JSG.graph.interaction.Interaction\"}}{{/crossLink}}\nwhich will be set if no other <code>Interaction</code> is explicitly set to active. This default <code>Interaction</code> will \nthan receive all mouse and key events. Please refer to the {{#crossLinkModule \"JSG.graph.interaction\"}}{{/crossLinkModule}} module \nfor more information on this. It is possible for applications to set their custom default <code>Interaction</code> via \n{{#crossLink \"JSG.ui.viewer.ControllerViewer/setDefaultInteraction:method\"}}{{/crossLink}}.\n</br>\nFinally if a viewer is no longer needed it should be destroyed via a call to \n{{#crossLink \"JSG.ui.viewer.ControllerViewer/destroy:method\"}}{{/crossLink}} to free up resources."
        }
    ]
} };
});